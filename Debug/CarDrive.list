
CarDrive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c74  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  08009d88  08009d88  00019d88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a1ac  0800a1ac  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800a1ac  0800a1ac  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a1ac  0800a1ac  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a1ac  0800a1ac  0001a1ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a1b0  0800a1b0  0001a1b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a1b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000029c  200001e0  0800a394  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000047c  0800a394  0002047c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f7ec  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a4a  00000000  00000000  0002f9f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ca8  00000000  00000000  00032440  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b58  00000000  00000000  000330e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019958  00000000  00000000  00033c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000db06  00000000  00000000  0004d598  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008af0b  00000000  00000000  0005b09e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e5fa9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043a0  00000000  00000000  000e6024  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08009d6c 	.word	0x08009d6c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08009d6c 	.word	0x08009d6c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c24:	f1a2 0201 	sub.w	r2, r2, #1
 8000c28:	d1ed      	bne.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr

0800115c <__aeabi_f2uiz>:
 800115c:	0042      	lsls	r2, r0, #1
 800115e:	d20e      	bcs.n	800117e <__aeabi_f2uiz+0x22>
 8001160:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001164:	d30b      	bcc.n	800117e <__aeabi_f2uiz+0x22>
 8001166:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800116a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800116e:	d409      	bmi.n	8001184 <__aeabi_f2uiz+0x28>
 8001170:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001174:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001178:	fa23 f002 	lsr.w	r0, r3, r2
 800117c:	4770      	bx	lr
 800117e:	f04f 0000 	mov.w	r0, #0
 8001182:	4770      	bx	lr
 8001184:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001188:	d101      	bne.n	800118e <__aeabi_f2uiz+0x32>
 800118a:	0242      	lsls	r2, r0, #9
 800118c:	d102      	bne.n	8001194 <__aeabi_f2uiz+0x38>
 800118e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001192:	4770      	bx	lr
 8001194:	f04f 0000 	mov.w	r0, #0
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop

0800119c <BMP180_SetOversampling>:
const uint8_t BMP180_CMD_PRES[4] = { 0x34, 0x74, 0xb4, 0xf4 };
const uint8_t BMP180_DELAY_PRES[4] = { 5, 8, 14, 26 };


//设置超采样
void BMP180_SetOversampling(BMP180_OSS oss) {
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	71fb      	strb	r3, [r7, #7]
	_bmp180_oss = oss;
 80011a6:	4a04      	ldr	r2, [pc, #16]	; (80011b8 <BMP180_SetOversampling+0x1c>)
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	7013      	strb	r3, [r2, #0]
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bc80      	pop	{r7}
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	2000026e 	.word	0x2000026e

080011bc <BMP180_UpdateCalibrationData>:


//更新校正数据
void BMP180_UpdateCalibrationData(void) {
 80011bc:	b598      	push	{r3, r4, r7, lr}
 80011be:	af00      	add	r7, sp, #0
	_bmp180_eeprom.BMP180_AC1 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC1]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC1]);
 80011c0:	23aa      	movs	r3, #170	; 0xaa
 80011c2:	4618      	mov	r0, r3
 80011c4:	f000 f8da 	bl	800137c <BMP180_ReadReg>
 80011c8:	4603      	mov	r3, r0
 80011ca:	021b      	lsls	r3, r3, #8
 80011cc:	b21c      	sxth	r4, r3
 80011ce:	23ab      	movs	r3, #171	; 0xab
 80011d0:	4618      	mov	r0, r3
 80011d2:	f000 f8d3 	bl	800137c <BMP180_ReadReg>
 80011d6:	4603      	mov	r3, r0
 80011d8:	b21b      	sxth	r3, r3
 80011da:	4323      	orrs	r3, r4
 80011dc:	b21a      	sxth	r2, r3
 80011de:	4b58      	ldr	r3, [pc, #352]	; (8001340 <BMP180_UpdateCalibrationData+0x184>)
 80011e0:	801a      	strh	r2, [r3, #0]
	_bmp180_eeprom.BMP180_AC2 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC2]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC2]);
 80011e2:	23ac      	movs	r3, #172	; 0xac
 80011e4:	4618      	mov	r0, r3
 80011e6:	f000 f8c9 	bl	800137c <BMP180_ReadReg>
 80011ea:	4603      	mov	r3, r0
 80011ec:	021b      	lsls	r3, r3, #8
 80011ee:	b21c      	sxth	r4, r3
 80011f0:	23ad      	movs	r3, #173	; 0xad
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 f8c2 	bl	800137c <BMP180_ReadReg>
 80011f8:	4603      	mov	r3, r0
 80011fa:	b21b      	sxth	r3, r3
 80011fc:	4323      	orrs	r3, r4
 80011fe:	b21a      	sxth	r2, r3
 8001200:	4b4f      	ldr	r3, [pc, #316]	; (8001340 <BMP180_UpdateCalibrationData+0x184>)
 8001202:	805a      	strh	r2, [r3, #2]
	_bmp180_eeprom.BMP180_AC3 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC3]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC3]);
 8001204:	23ae      	movs	r3, #174	; 0xae
 8001206:	4618      	mov	r0, r3
 8001208:	f000 f8b8 	bl	800137c <BMP180_ReadReg>
 800120c:	4603      	mov	r3, r0
 800120e:	021b      	lsls	r3, r3, #8
 8001210:	b21c      	sxth	r4, r3
 8001212:	23af      	movs	r3, #175	; 0xaf
 8001214:	4618      	mov	r0, r3
 8001216:	f000 f8b1 	bl	800137c <BMP180_ReadReg>
 800121a:	4603      	mov	r3, r0
 800121c:	b21b      	sxth	r3, r3
 800121e:	4323      	orrs	r3, r4
 8001220:	b21a      	sxth	r2, r3
 8001222:	4b47      	ldr	r3, [pc, #284]	; (8001340 <BMP180_UpdateCalibrationData+0x184>)
 8001224:	809a      	strh	r2, [r3, #4]
	_bmp180_eeprom.BMP180_AC4 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC4]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC4]);
 8001226:	23b0      	movs	r3, #176	; 0xb0
 8001228:	4618      	mov	r0, r3
 800122a:	f000 f8a7 	bl	800137c <BMP180_ReadReg>
 800122e:	4603      	mov	r3, r0
 8001230:	021b      	lsls	r3, r3, #8
 8001232:	b21c      	sxth	r4, r3
 8001234:	23b1      	movs	r3, #177	; 0xb1
 8001236:	4618      	mov	r0, r3
 8001238:	f000 f8a0 	bl	800137c <BMP180_ReadReg>
 800123c:	4603      	mov	r3, r0
 800123e:	b21b      	sxth	r3, r3
 8001240:	4323      	orrs	r3, r4
 8001242:	b21b      	sxth	r3, r3
 8001244:	b29a      	uxth	r2, r3
 8001246:	4b3e      	ldr	r3, [pc, #248]	; (8001340 <BMP180_UpdateCalibrationData+0x184>)
 8001248:	80da      	strh	r2, [r3, #6]
	_bmp180_eeprom.BMP180_AC5 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC5]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC5]);
 800124a:	23b2      	movs	r3, #178	; 0xb2
 800124c:	4618      	mov	r0, r3
 800124e:	f000 f895 	bl	800137c <BMP180_ReadReg>
 8001252:	4603      	mov	r3, r0
 8001254:	021b      	lsls	r3, r3, #8
 8001256:	b21c      	sxth	r4, r3
 8001258:	23b3      	movs	r3, #179	; 0xb3
 800125a:	4618      	mov	r0, r3
 800125c:	f000 f88e 	bl	800137c <BMP180_ReadReg>
 8001260:	4603      	mov	r3, r0
 8001262:	b21b      	sxth	r3, r3
 8001264:	4323      	orrs	r3, r4
 8001266:	b21b      	sxth	r3, r3
 8001268:	b29a      	uxth	r2, r3
 800126a:	4b35      	ldr	r3, [pc, #212]	; (8001340 <BMP180_UpdateCalibrationData+0x184>)
 800126c:	811a      	strh	r2, [r3, #8]
	_bmp180_eeprom.BMP180_AC6 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC6]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC6]);
 800126e:	23b4      	movs	r3, #180	; 0xb4
 8001270:	4618      	mov	r0, r3
 8001272:	f000 f883 	bl	800137c <BMP180_ReadReg>
 8001276:	4603      	mov	r3, r0
 8001278:	021b      	lsls	r3, r3, #8
 800127a:	b21c      	sxth	r4, r3
 800127c:	23b5      	movs	r3, #181	; 0xb5
 800127e:	4618      	mov	r0, r3
 8001280:	f000 f87c 	bl	800137c <BMP180_ReadReg>
 8001284:	4603      	mov	r3, r0
 8001286:	b21b      	sxth	r3, r3
 8001288:	4323      	orrs	r3, r4
 800128a:	b21b      	sxth	r3, r3
 800128c:	b29a      	uxth	r2, r3
 800128e:	4b2c      	ldr	r3, [pc, #176]	; (8001340 <BMP180_UpdateCalibrationData+0x184>)
 8001290:	815a      	strh	r2, [r3, #10]
	_bmp180_eeprom.BMP180_B1 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_B1]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_B1]);
 8001292:	23b6      	movs	r3, #182	; 0xb6
 8001294:	4618      	mov	r0, r3
 8001296:	f000 f871 	bl	800137c <BMP180_ReadReg>
 800129a:	4603      	mov	r3, r0
 800129c:	021b      	lsls	r3, r3, #8
 800129e:	b21c      	sxth	r4, r3
 80012a0:	23b7      	movs	r3, #183	; 0xb7
 80012a2:	4618      	mov	r0, r3
 80012a4:	f000 f86a 	bl	800137c <BMP180_ReadReg>
 80012a8:	4603      	mov	r3, r0
 80012aa:	b21b      	sxth	r3, r3
 80012ac:	4323      	orrs	r3, r4
 80012ae:	b21a      	sxth	r2, r3
 80012b0:	4b23      	ldr	r3, [pc, #140]	; (8001340 <BMP180_UpdateCalibrationData+0x184>)
 80012b2:	819a      	strh	r2, [r3, #12]
	_bmp180_eeprom.BMP180_B2 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_B2]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_B2]);
 80012b4:	23b8      	movs	r3, #184	; 0xb8
 80012b6:	4618      	mov	r0, r3
 80012b8:	f000 f860 	bl	800137c <BMP180_ReadReg>
 80012bc:	4603      	mov	r3, r0
 80012be:	021b      	lsls	r3, r3, #8
 80012c0:	b21c      	sxth	r4, r3
 80012c2:	23b9      	movs	r3, #185	; 0xb9
 80012c4:	4618      	mov	r0, r3
 80012c6:	f000 f859 	bl	800137c <BMP180_ReadReg>
 80012ca:	4603      	mov	r3, r0
 80012cc:	b21b      	sxth	r3, r3
 80012ce:	4323      	orrs	r3, r4
 80012d0:	b21a      	sxth	r2, r3
 80012d2:	4b1b      	ldr	r3, [pc, #108]	; (8001340 <BMP180_UpdateCalibrationData+0x184>)
 80012d4:	81da      	strh	r2, [r3, #14]
	_bmp180_eeprom.BMP180_MB = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MB]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MB]);
 80012d6:	23ba      	movs	r3, #186	; 0xba
 80012d8:	4618      	mov	r0, r3
 80012da:	f000 f84f 	bl	800137c <BMP180_ReadReg>
 80012de:	4603      	mov	r3, r0
 80012e0:	021b      	lsls	r3, r3, #8
 80012e2:	b21c      	sxth	r4, r3
 80012e4:	23bb      	movs	r3, #187	; 0xbb
 80012e6:	4618      	mov	r0, r3
 80012e8:	f000 f848 	bl	800137c <BMP180_ReadReg>
 80012ec:	4603      	mov	r3, r0
 80012ee:	b21b      	sxth	r3, r3
 80012f0:	4323      	orrs	r3, r4
 80012f2:	b21a      	sxth	r2, r3
 80012f4:	4b12      	ldr	r3, [pc, #72]	; (8001340 <BMP180_UpdateCalibrationData+0x184>)
 80012f6:	821a      	strh	r2, [r3, #16]
	_bmp180_eeprom.BMP180_MC = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MC]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MC]);
 80012f8:	23bc      	movs	r3, #188	; 0xbc
 80012fa:	4618      	mov	r0, r3
 80012fc:	f000 f83e 	bl	800137c <BMP180_ReadReg>
 8001300:	4603      	mov	r3, r0
 8001302:	021b      	lsls	r3, r3, #8
 8001304:	b21c      	sxth	r4, r3
 8001306:	23bd      	movs	r3, #189	; 0xbd
 8001308:	4618      	mov	r0, r3
 800130a:	f000 f837 	bl	800137c <BMP180_ReadReg>
 800130e:	4603      	mov	r3, r0
 8001310:	b21b      	sxth	r3, r3
 8001312:	4323      	orrs	r3, r4
 8001314:	b21a      	sxth	r2, r3
 8001316:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <BMP180_UpdateCalibrationData+0x184>)
 8001318:	825a      	strh	r2, [r3, #18]
	_bmp180_eeprom.BMP180_MD = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MD]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MD]);
 800131a:	23be      	movs	r3, #190	; 0xbe
 800131c:	4618      	mov	r0, r3
 800131e:	f000 f82d 	bl	800137c <BMP180_ReadReg>
 8001322:	4603      	mov	r3, r0
 8001324:	021b      	lsls	r3, r3, #8
 8001326:	b21c      	sxth	r4, r3
 8001328:	23bf      	movs	r3, #191	; 0xbf
 800132a:	4618      	mov	r0, r3
 800132c:	f000 f826 	bl	800137c <BMP180_ReadReg>
 8001330:	4603      	mov	r3, r0
 8001332:	b21b      	sxth	r3, r3
 8001334:	4323      	orrs	r3, r4
 8001336:	b21a      	sxth	r2, r3
 8001338:	4b01      	ldr	r3, [pc, #4]	; (8001340 <BMP180_UpdateCalibrationData+0x184>)
 800133a:	829a      	strh	r2, [r3, #20]
}
 800133c:	bf00      	nop
 800133e:	bd98      	pop	{r3, r4, r7, pc}
 8001340:	20000258 	.word	0x20000258

08001344 <BMP180_WriteReg>:


//写入寄存器
void BMP180_WriteReg(uint8_t reg, uint8_t cmd) {
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af02      	add	r7, sp, #8
 800134a:	4603      	mov	r3, r0
 800134c:	460a      	mov	r2, r1
 800134e:	71fb      	strb	r3, [r7, #7]
 8001350:	4613      	mov	r3, r2
 8001352:	71bb      	strb	r3, [r7, #6]
	uint8_t arr[2] = { reg, cmd };
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	733b      	strb	r3, [r7, #12]
 8001358:	79bb      	ldrb	r3, [r7, #6]
 800135a:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, BMP180_I2C_ADDR << 1, arr, 2, BMP180_I2C_TIMEOUT);
 800135c:	f107 020c 	add.w	r2, r7, #12
 8001360:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001364:	9300      	str	r3, [sp, #0]
 8001366:	2302      	movs	r3, #2
 8001368:	21ee      	movs	r1, #238	; 0xee
 800136a:	4803      	ldr	r0, [pc, #12]	; (8001378 <BMP180_WriteReg+0x34>)
 800136c:	f002 ff0a 	bl	8004184 <HAL_I2C_Master_Transmit>
}
 8001370:	bf00      	nop
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20000378 	.word	0x20000378

0800137c <BMP180_ReadReg>:

//读取寄存器
uint8_t BMP180_ReadReg(uint8_t reg) {
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af02      	add	r7, sp, #8
 8001382:	4603      	mov	r3, r0
 8001384:	71fb      	strb	r3, [r7, #7]
	//使用HAL_I2C_Mem_Write等于先使用HAL_I2C_Master_Transmit传输第一个寄存器地址，
	//再用HAL_I2C_Master_Transmit传输写入第一个寄存器的数据。可以传输多个数据
	//以下先把要接受的寄存器地址传给从机
	//&reg 本来就要求传一个指向一个地址值的指针
	HAL_I2C_Master_Transmit(&hi2c1, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 8001386:	1dfa      	adds	r2, r7, #7
 8001388:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800138c:	9300      	str	r3, [sp, #0]
 800138e:	2301      	movs	r3, #1
 8001390:	21ee      	movs	r1, #238	; 0xee
 8001392:	4809      	ldr	r0, [pc, #36]	; (80013b8 <BMP180_ReadReg+0x3c>)
 8001394:	f002 fef6 	bl	8004184 <HAL_I2C_Master_Transmit>
	uint8_t result;
	HAL_I2C_Master_Receive(&hi2c1, BMP180_I2C_ADDR << 1, &result, 1, BMP180_I2C_TIMEOUT);
 8001398:	f107 020f 	add.w	r2, r7, #15
 800139c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	2301      	movs	r3, #1
 80013a4:	21ee      	movs	r1, #238	; 0xee
 80013a6:	4804      	ldr	r0, [pc, #16]	; (80013b8 <BMP180_ReadReg+0x3c>)
 80013a8:	f002 ffea 	bl	8004380 <HAL_I2C_Master_Receive>



	//HAL_I2C_Mem_Read(I2C1, BMP180_I2C_ADDR << 1, &reg, 1,result, 1, BMP180_I2C_TIMEOUT);
	return result;
 80013ac:	7bfb      	ldrb	r3, [r7, #15]


}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000378 	.word	0x20000378

080013bc <BMP180_GetRawTemperature>:

/**
 * @brief Measures and calculates temperature.
 * @return Temperature in 0.1 (1/10) degrees Celsius.
 */
int32_t BMP180_GetRawTemperature(void) {
 80013bc:	b590      	push	{r4, r7, lr}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
	//write 0x2E to reg 0xF4
	//设置温度4.5ms超采样
	BMP180_WriteReg(BMP180_CONTROL_REG, BMP180_CMD_TEMP);
 80013c2:	232e      	movs	r3, #46	; 0x2e
 80013c4:	4619      	mov	r1, r3
 80013c6:	20f4      	movs	r0, #244	; 0xf4
 80013c8:	f7ff ffbc 	bl	8001344 <BMP180_WriteReg>
	//等待4.5ms 以上
	HAL_Delay(BMP180_DELAY_TEMP);
 80013cc:	2305      	movs	r3, #5
 80013ce:	4618      	mov	r0, r3
 80013d0:	f001 fd8c 	bl	8002eec <HAL_Delay>

	int32_t ut = (BMP180_ReadReg(BMP180_MSB_REG) << 8) | BMP180_ReadReg(BMP180_LSB_REG);
 80013d4:	20f6      	movs	r0, #246	; 0xf6
 80013d6:	f7ff ffd1 	bl	800137c <BMP180_ReadReg>
 80013da:	4603      	mov	r3, r0
 80013dc:	021c      	lsls	r4, r3, #8
 80013de:	20f7      	movs	r0, #247	; 0xf7
 80013e0:	f7ff ffcc 	bl	800137c <BMP180_ReadReg>
 80013e4:	4603      	mov	r3, r0
 80013e6:	4323      	orrs	r3, r4
 80013e8:	60fb      	str	r3, [r7, #12]
	int32_t x1 = (ut - _bmp180_eeprom.BMP180_AC6) * _bmp180_eeprom.BMP180_AC5 / (1 << 15);
 80013ea:	4b15      	ldr	r3, [pc, #84]	; (8001440 <BMP180_GetRawTemperature+0x84>)
 80013ec:	895b      	ldrh	r3, [r3, #10]
 80013ee:	461a      	mov	r2, r3
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	1a9b      	subs	r3, r3, r2
 80013f4:	4a12      	ldr	r2, [pc, #72]	; (8001440 <BMP180_GetRawTemperature+0x84>)
 80013f6:	8912      	ldrh	r2, [r2, #8]
 80013f8:	fb02 f303 	mul.w	r3, r2, r3
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	da02      	bge.n	8001406 <BMP180_GetRawTemperature+0x4a>
 8001400:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8001404:	337f      	adds	r3, #127	; 0x7f
 8001406:	13db      	asrs	r3, r3, #15
 8001408:	60bb      	str	r3, [r7, #8]
	int32_t x2 = (_bmp180_eeprom.BMP180_MC * (1 << 11)) / (x1 + _bmp180_eeprom.BMP180_MD);
 800140a:	4b0d      	ldr	r3, [pc, #52]	; (8001440 <BMP180_GetRawTemperature+0x84>)
 800140c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001410:	02da      	lsls	r2, r3, #11
 8001412:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <BMP180_GetRawTemperature+0x84>)
 8001414:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001418:	4619      	mov	r1, r3
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	440b      	add	r3, r1
 800141e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001422:	607b      	str	r3, [r7, #4]
	int32_t b5 = x1 + x2;
 8001424:	68ba      	ldr	r2, [r7, #8]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4413      	add	r3, r2
 800142a:	603b      	str	r3, [r7, #0]
	return (b5 + 8) / (1 << 4);
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	3308      	adds	r3, #8
 8001430:	2b00      	cmp	r3, #0
 8001432:	da00      	bge.n	8001436 <BMP180_GetRawTemperature+0x7a>
 8001434:	330f      	adds	r3, #15
 8001436:	111b      	asrs	r3, r3, #4
}
 8001438:	4618      	mov	r0, r3
 800143a:	3714      	adds	r7, #20
 800143c:	46bd      	mov	sp, r7
 800143e:	bd90      	pop	{r4, r7, pc}
 8001440:	20000258 	.word	0x20000258

08001444 <BMP180_GetPressure>:

/**
 * @brief Measures and calculates pressure.
 * @return Pressure in Pascal(Pa).
 */
int32_t BMP180_GetPressure(void) {
 8001444:	b580      	push	{r7, lr}
 8001446:	b08c      	sub	sp, #48	; 0x30
 8001448:	af00      	add	r7, sp, #0
	//往控制寄存器0xf4里写0x2e，设置温度超采样
	BMP180_WriteReg(BMP180_CONTROL_REG, BMP180_CMD_TEMP);
 800144a:	232e      	movs	r3, #46	; 0x2e
 800144c:	4619      	mov	r1, r3
 800144e:	20f4      	movs	r0, #244	; 0xf4
 8001450:	f7ff ff78 	bl	8001344 <BMP180_WriteReg>
	//等待转换时间
	HAL_Delay(BMP180_DELAY_TEMP);
 8001454:	2305      	movs	r3, #5
 8001456:	4618      	mov	r0, r3
 8001458:	f001 fd48 	bl	8002eec <HAL_Delay>
	int32_t ut = BMP180_GetUT();
 800145c:	f000 f904 	bl	8001668 <BMP180_GetUT>
 8001460:	62b8      	str	r0, [r7, #40]	; 0x28
	BMP180_WriteReg(BMP180_CONTROL_REG, BMP180_CMD_PRES[_bmp180_oss]);
 8001462:	4b7c      	ldr	r3, [pc, #496]	; (8001654 <BMP180_GetPressure+0x210>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	461a      	mov	r2, r3
 8001468:	4b7b      	ldr	r3, [pc, #492]	; (8001658 <BMP180_GetPressure+0x214>)
 800146a:	5c9b      	ldrb	r3, [r3, r2]
 800146c:	4619      	mov	r1, r3
 800146e:	20f4      	movs	r0, #244	; 0xf4
 8001470:	f7ff ff68 	bl	8001344 <BMP180_WriteReg>
	HAL_Delay(BMP180_DELAY_PRES[_bmp180_oss]);
 8001474:	4b77      	ldr	r3, [pc, #476]	; (8001654 <BMP180_GetPressure+0x210>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	461a      	mov	r2, r3
 800147a:	4b78      	ldr	r3, [pc, #480]	; (800165c <BMP180_GetPressure+0x218>)
 800147c:	5c9b      	ldrb	r3, [r3, r2]
 800147e:	4618      	mov	r0, r3
 8001480:	f001 fd34 	bl	8002eec <HAL_Delay>
	int32_t up = BMP180_GetUP();
 8001484:	f000 f8fe 	bl	8001684 <BMP180_GetUP>
 8001488:	6278      	str	r0, [r7, #36]	; 0x24
	int32_t x1 = (ut - _bmp180_eeprom.BMP180_AC6) * _bmp180_eeprom.BMP180_AC5 / (1 << 15);
 800148a:	4b75      	ldr	r3, [pc, #468]	; (8001660 <BMP180_GetPressure+0x21c>)
 800148c:	895b      	ldrh	r3, [r3, #10]
 800148e:	461a      	mov	r2, r3
 8001490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001492:	1a9b      	subs	r3, r3, r2
 8001494:	4a72      	ldr	r2, [pc, #456]	; (8001660 <BMP180_GetPressure+0x21c>)
 8001496:	8912      	ldrh	r2, [r2, #8]
 8001498:	fb02 f303 	mul.w	r3, r2, r3
 800149c:	2b00      	cmp	r3, #0
 800149e:	da02      	bge.n	80014a6 <BMP180_GetPressure+0x62>
 80014a0:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80014a4:	337f      	adds	r3, #127	; 0x7f
 80014a6:	13db      	asrs	r3, r3, #15
 80014a8:	623b      	str	r3, [r7, #32]
	int32_t x2 = (_bmp180_eeprom.BMP180_MC * (1 << 11)) / (x1 + _bmp180_eeprom.BMP180_MD);
 80014aa:	4b6d      	ldr	r3, [pc, #436]	; (8001660 <BMP180_GetPressure+0x21c>)
 80014ac:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80014b0:	02da      	lsls	r2, r3, #11
 80014b2:	4b6b      	ldr	r3, [pc, #428]	; (8001660 <BMP180_GetPressure+0x21c>)
 80014b4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80014b8:	4619      	mov	r1, r3
 80014ba:	6a3b      	ldr	r3, [r7, #32]
 80014bc:	440b      	add	r3, r1
 80014be:	fb92 f3f3 	sdiv	r3, r2, r3
 80014c2:	61fb      	str	r3, [r7, #28]
	int32_t b5 = x1 + x2;
 80014c4:	6a3a      	ldr	r2, [r7, #32]
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	4413      	add	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
	int32_t b6 = b5 - 4000;
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 80014d2:	617b      	str	r3, [r7, #20]
	x1 = (_bmp180_eeprom.BMP180_B2 * (b6 * b6 / (1 << 12))) / (1 << 11);
 80014d4:	4b62      	ldr	r3, [pc, #392]	; (8001660 <BMP180_GetPressure+0x21c>)
 80014d6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80014da:	4619      	mov	r1, r3
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	697a      	ldr	r2, [r7, #20]
 80014e0:	fb02 f303 	mul.w	r3, r2, r3
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	da01      	bge.n	80014ec <BMP180_GetPressure+0xa8>
 80014e8:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80014ec:	131b      	asrs	r3, r3, #12
 80014ee:	fb03 f301 	mul.w	r3, r3, r1
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	da01      	bge.n	80014fa <BMP180_GetPressure+0xb6>
 80014f6:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80014fa:	12db      	asrs	r3, r3, #11
 80014fc:	623b      	str	r3, [r7, #32]
	x2 = _bmp180_eeprom.BMP180_AC2 * b6 / (1 << 11);
 80014fe:	4b58      	ldr	r3, [pc, #352]	; (8001660 <BMP180_GetPressure+0x21c>)
 8001500:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001504:	461a      	mov	r2, r3
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	fb03 f302 	mul.w	r3, r3, r2
 800150c:	2b00      	cmp	r3, #0
 800150e:	da01      	bge.n	8001514 <BMP180_GetPressure+0xd0>
 8001510:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001514:	12db      	asrs	r3, r3, #11
 8001516:	61fb      	str	r3, [r7, #28]
	int32_t x3 = x1 + x2;
 8001518:	6a3a      	ldr	r2, [r7, #32]
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	4413      	add	r3, r2
 800151e:	613b      	str	r3, [r7, #16]
	int32_t b3 = (((_bmp180_eeprom.BMP180_AC1 * 4 + x3) << _bmp180_oss) + 2) / 4;
 8001520:	4b4f      	ldr	r3, [pc, #316]	; (8001660 <BMP180_GetPressure+0x21c>)
 8001522:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001526:	009a      	lsls	r2, r3, #2
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	4413      	add	r3, r2
 800152c:	4a49      	ldr	r2, [pc, #292]	; (8001654 <BMP180_GetPressure+0x210>)
 800152e:	7812      	ldrb	r2, [r2, #0]
 8001530:	4093      	lsls	r3, r2
 8001532:	3302      	adds	r3, #2
 8001534:	2b00      	cmp	r3, #0
 8001536:	da00      	bge.n	800153a <BMP180_GetPressure+0xf6>
 8001538:	3303      	adds	r3, #3
 800153a:	109b      	asrs	r3, r3, #2
 800153c:	60fb      	str	r3, [r7, #12]
	x1 = _bmp180_eeprom.BMP180_AC3 * b6 / (1 << 13);
 800153e:	4b48      	ldr	r3, [pc, #288]	; (8001660 <BMP180_GetPressure+0x21c>)
 8001540:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001544:	461a      	mov	r2, r3
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	fb03 f302 	mul.w	r3, r3, r2
 800154c:	2b00      	cmp	r3, #0
 800154e:	da02      	bge.n	8001556 <BMP180_GetPressure+0x112>
 8001550:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 8001554:	331f      	adds	r3, #31
 8001556:	135b      	asrs	r3, r3, #13
 8001558:	623b      	str	r3, [r7, #32]
	x2 = (_bmp180_eeprom.BMP180_B1 * (b6 * b6 / (1 << 12))) / (1 << 16);
 800155a:	4b41      	ldr	r3, [pc, #260]	; (8001660 <BMP180_GetPressure+0x21c>)
 800155c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001560:	4619      	mov	r1, r3
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	697a      	ldr	r2, [r7, #20]
 8001566:	fb02 f303 	mul.w	r3, r2, r3
 800156a:	2b00      	cmp	r3, #0
 800156c:	da01      	bge.n	8001572 <BMP180_GetPressure+0x12e>
 800156e:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001572:	131b      	asrs	r3, r3, #12
 8001574:	fb03 f301 	mul.w	r3, r3, r1
 8001578:	2b00      	cmp	r3, #0
 800157a:	da02      	bge.n	8001582 <BMP180_GetPressure+0x13e>
 800157c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001580:	33ff      	adds	r3, #255	; 0xff
 8001582:	141b      	asrs	r3, r3, #16
 8001584:	61fb      	str	r3, [r7, #28]
	x3 = ((x1 + x2) + 2) / 4;
 8001586:	6a3a      	ldr	r2, [r7, #32]
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	4413      	add	r3, r2
 800158c:	3302      	adds	r3, #2
 800158e:	2b00      	cmp	r3, #0
 8001590:	da00      	bge.n	8001594 <BMP180_GetPressure+0x150>
 8001592:	3303      	adds	r3, #3
 8001594:	109b      	asrs	r3, r3, #2
 8001596:	613b      	str	r3, [r7, #16]
	uint32_t b4 = _bmp180_eeprom.BMP180_AC4 * (uint32_t) (x3 + 32768) / (1 << 15);
 8001598:	4b31      	ldr	r3, [pc, #196]	; (8001660 <BMP180_GetPressure+0x21c>)
 800159a:	88db      	ldrh	r3, [r3, #6]
 800159c:	461a      	mov	r2, r3
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80015a4:	fb03 f302 	mul.w	r3, r3, r2
 80015a8:	0bdb      	lsrs	r3, r3, #15
 80015aa:	60bb      	str	r3, [r7, #8]
	uint32_t b7 = ((uint32_t) up - b3) * (50000 >> _bmp180_oss);
 80015ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	4a28      	ldr	r2, [pc, #160]	; (8001654 <BMP180_GetPressure+0x210>)
 80015b4:	7812      	ldrb	r2, [r2, #0]
 80015b6:	4611      	mov	r1, r2
 80015b8:	f24c 3250 	movw	r2, #50000	; 0xc350
 80015bc:	410a      	asrs	r2, r1
 80015be:	fb02 f303 	mul.w	r3, r2, r3
 80015c2:	607b      	str	r3, [r7, #4]
	int32_t p;
	if (b7 < 0x80000000)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	db06      	blt.n	80015d8 <BMP180_GetPressure+0x194>
		p = (b7 * 2) / b4;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	005a      	lsls	r2, r3, #1
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80015d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015d6:	e005      	b.n	80015e4 <BMP180_GetPressure+0x1a0>
	else
		p = (b7 / b4) * 2;
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	x1 = (p / (1 << 8)) * (p / (1 << 8));
 80015e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	da00      	bge.n	80015ec <BMP180_GetPressure+0x1a8>
 80015ea:	33ff      	adds	r3, #255	; 0xff
 80015ec:	121b      	asrs	r3, r3, #8
 80015ee:	461a      	mov	r2, r3
 80015f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	da00      	bge.n	80015f8 <BMP180_GetPressure+0x1b4>
 80015f6:	33ff      	adds	r3, #255	; 0xff
 80015f8:	121b      	asrs	r3, r3, #8
 80015fa:	fb03 f302 	mul.w	r3, r3, r2
 80015fe:	623b      	str	r3, [r7, #32]
	x1 = (x1 * 3038) / (1 << 16);
 8001600:	6a3b      	ldr	r3, [r7, #32]
 8001602:	f640 32de 	movw	r2, #3038	; 0xbde
 8001606:	fb02 f303 	mul.w	r3, r2, r3
 800160a:	2b00      	cmp	r3, #0
 800160c:	da02      	bge.n	8001614 <BMP180_GetPressure+0x1d0>
 800160e:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001612:	33ff      	adds	r3, #255	; 0xff
 8001614:	141b      	asrs	r3, r3, #16
 8001616:	623b      	str	r3, [r7, #32]
	x2 = (-7357 * p) / (1 << 16);
 8001618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800161a:	4a12      	ldr	r2, [pc, #72]	; (8001664 <BMP180_GetPressure+0x220>)
 800161c:	fb02 f303 	mul.w	r3, r2, r3
 8001620:	2b00      	cmp	r3, #0
 8001622:	da02      	bge.n	800162a <BMP180_GetPressure+0x1e6>
 8001624:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001628:	33ff      	adds	r3, #255	; 0xff
 800162a:	141b      	asrs	r3, r3, #16
 800162c:	61fb      	str	r3, [r7, #28]
	p = p + (x1 + x2 + 3791) / (1 << 4);
 800162e:	6a3a      	ldr	r2, [r7, #32]
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	4413      	add	r3, r2
 8001634:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8001638:	2b00      	cmp	r3, #0
 800163a:	da00      	bge.n	800163e <BMP180_GetPressure+0x1fa>
 800163c:	330f      	adds	r3, #15
 800163e:	111b      	asrs	r3, r3, #4
 8001640:	461a      	mov	r2, r3
 8001642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001644:	4413      	add	r3, r2
 8001646:	62fb      	str	r3, [r7, #44]	; 0x2c
	return p;
 8001648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800164a:	4618      	mov	r0, r3
 800164c:	3730      	adds	r7, #48	; 0x30
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	2000026e 	.word	0x2000026e
 8001658:	08009e68 	.word	0x08009e68
 800165c:	08009e6c 	.word	0x08009e6c
 8001660:	20000258 	.word	0x20000258
 8001664:	ffffe343 	.word	0xffffe343

08001668 <BMP180_GetUT>:

//温度原始数据
int32_t BMP180_GetUT(void){
 8001668:	b598      	push	{r3, r4, r7, lr}
 800166a:	af00      	add	r7, sp, #0
	return (BMP180_ReadReg(BMP180_MSB_REG) << 8) | BMP180_ReadReg(BMP180_LSB_REG);
 800166c:	20f6      	movs	r0, #246	; 0xf6
 800166e:	f7ff fe85 	bl	800137c <BMP180_ReadReg>
 8001672:	4603      	mov	r3, r0
 8001674:	021c      	lsls	r4, r3, #8
 8001676:	20f7      	movs	r0, #247	; 0xf7
 8001678:	f7ff fe80 	bl	800137c <BMP180_ReadReg>
 800167c:	4603      	mov	r3, r0
 800167e:	4323      	orrs	r3, r4
}
 8001680:	4618      	mov	r0, r3
 8001682:	bd98      	pop	{r3, r4, r7, pc}

08001684 <BMP180_GetUP>:
//压力原始数据
int32_t BMP180_GetUP(void){
 8001684:	b598      	push	{r3, r4, r7, lr}
 8001686:	af00      	add	r7, sp, #0
	return ((BMP180_ReadReg(BMP180_MSB_REG) << 16) | (BMP180_ReadReg(BMP180_LSB_REG) << 8) | BMP180_ReadReg(BMP180_XLSB_REG)) >> (8 - _bmp180_oss);
 8001688:	20f6      	movs	r0, #246	; 0xf6
 800168a:	f7ff fe77 	bl	800137c <BMP180_ReadReg>
 800168e:	4603      	mov	r3, r0
 8001690:	041c      	lsls	r4, r3, #16
 8001692:	20f7      	movs	r0, #247	; 0xf7
 8001694:	f7ff fe72 	bl	800137c <BMP180_ReadReg>
 8001698:	4603      	mov	r3, r0
 800169a:	021b      	lsls	r3, r3, #8
 800169c:	431c      	orrs	r4, r3
 800169e:	20f8      	movs	r0, #248	; 0xf8
 80016a0:	f7ff fe6c 	bl	800137c <BMP180_ReadReg>
 80016a4:	4603      	mov	r3, r0
 80016a6:	ea44 0203 	orr.w	r2, r4, r3
 80016aa:	4b04      	ldr	r3, [pc, #16]	; (80016bc <BMP180_GetUP+0x38>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	f1c3 0308 	rsb	r3, r3, #8
 80016b2:	fa42 f303 	asr.w	r3, r2, r3
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	bd98      	pop	{r3, r4, r7, pc}
 80016ba:	bf00      	nop
 80016bc:	2000026e 	.word	0x2000026e

080016c0 <goToOutput>:
#define lineDown() 	HAL_GPIO_WritePin(DHT_Port, DHT_Pin, GPIO_PIN_RESET)
#define lineUp()		HAL_GPIO_WritePin(DHT_Port, DHT_Pin, GPIO_PIN_SET)
#define getLine()		(HAL_GPIO_ReadPin(DHT_Port, DHT_Pin) == GPIO_PIN_SET)
#define Delay(d)		HAL_Delay(d)

static void goToOutput(void) {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c6:	463b      	mov	r3, r7
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]

  //По умолчанию на линии высокий уровень
  HAL_GPIO_WritePin(DHT_Port, DHT_Pin, GPIO_PIN_SET);
 80016d2:	2201      	movs	r2, #1
 80016d4:	2110      	movs	r1, #16
 80016d6:	480a      	ldr	r0, [pc, #40]	; (8001700 <goToOutput+0x40>)
 80016d8:	f002 fc03 	bl	8003ee2 <HAL_GPIO_WritePin>

  //Настройка порта на выход 
  GPIO_InitStruct.Pin = DHT_Pin;
 80016dc:	2310      	movs	r3, #16
 80016de:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; 	//Открытый сток
 80016e0:	2311      	movs	r3, #17
 80016e2:	607b      	str	r3, [r7, #4]
	#if DHT_PullUp == 1
  GPIO_InitStruct.Pull = GPIO_PULLUP;						//Подтяжка к питанию
	#else 
  GPIO_InitStruct.Pull = GPIO_NOPULL;						//Без подтяжки
 80016e4:	2300      	movs	r3, #0
 80016e6:	60bb      	str	r3, [r7, #8]
	#endif
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; //Высокая скорость работы порта
 80016e8:	2303      	movs	r3, #3
 80016ea:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DHT_Port, &GPIO_InitStruct);
 80016ec:	463b      	mov	r3, r7
 80016ee:	4619      	mov	r1, r3
 80016f0:	4803      	ldr	r0, [pc, #12]	; (8001700 <goToOutput+0x40>)
 80016f2:	f002 fa85 	bl	8003c00 <HAL_GPIO_Init>
}
 80016f6:	bf00      	nop
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40010800 	.word	0x40010800

08001704 <goToInput>:

static void goToInput(void) {
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170a:	463b      	mov	r3, r7
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]

  //Настройка порта на вход 
  GPIO_InitStruct.Pin = DHT_Pin;
 8001716:	2310      	movs	r3, #16
 8001718:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800171a:	2300      	movs	r3, #0
 800171c:	607b      	str	r3, [r7, #4]
	#if DHT_PullUp == 1
  GPIO_InitStruct.Pull = GPIO_PULLUP;						//Подтяжка к питанию
	#else 
  GPIO_InitStruct.Pull = GPIO_NOPULL;						//Без подтяжки
 800171e:	2300      	movs	r3, #0
 8001720:	60bb      	str	r3, [r7, #8]
	#endif
  HAL_GPIO_Init(DHT_Port, &GPIO_InitStruct);
 8001722:	463b      	mov	r3, r7
 8001724:	4619      	mov	r1, r3
 8001726:	4803      	ldr	r0, [pc, #12]	; (8001734 <goToInput+0x30>)
 8001728:	f002 fa6a 	bl	8003c00 <HAL_GPIO_Init>
}
 800172c:	bf00      	nop
 800172e:	3710      	adds	r7, #16
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40010800 	.word	0x40010800

08001738 <DHT_getData>:

DHT_data DHT_getData(DHT_type t) {
 8001738:	b580      	push	{r7, lr}
 800173a:	b08a      	sub	sp, #40	; 0x28
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	460b      	mov	r3, r1
 8001742:	70fb      	strb	r3, [r7, #3]
	DHT_data data = {0.0f, 0.0f};
 8001744:	f04f 0300 	mov.w	r3, #0
 8001748:	617b      	str	r3, [r7, #20]
 800174a:	f04f 0300 	mov.w	r3, #0
 800174e:	61bb      	str	r3, [r7, #24]
	
	/* Запрос данных у датчика */
	//Перевод пина "на выход"
	goToOutput();
 8001750:	f7ff ffb6 	bl	80016c0 <goToOutput>
	//Опускание линии данных на 15 мс
	lineDown();
 8001754:	2200      	movs	r2, #0
 8001756:	2110      	movs	r1, #16
 8001758:	4892      	ldr	r0, [pc, #584]	; (80019a4 <DHT_getData+0x26c>)
 800175a:	f002 fbc2 	bl	8003ee2 <HAL_GPIO_WritePin>
	Delay(15);
 800175e:	200f      	movs	r0, #15
 8001760:	f001 fbc4 	bl	8002eec <HAL_Delay>
	//Подъём линии, перевод порта "на вход"
	lineUp();
 8001764:	2201      	movs	r2, #1
 8001766:	2110      	movs	r1, #16
 8001768:	488e      	ldr	r0, [pc, #568]	; (80019a4 <DHT_getData+0x26c>)
 800176a:	f002 fbba 	bl	8003ee2 <HAL_GPIO_WritePin>
	goToInput();
 800176e:	f7ff ffc9 	bl	8001704 <goToInput>
	
	/* Ожидание ответа от датчика */
	uint16_t timeout = 0;
 8001772:	2300      	movs	r3, #0
 8001774:	84fb      	strh	r3, [r7, #38]	; 0x26
	//Ожидание спада
	while(getLine()) {
 8001776:	e010      	b.n	800179a <DHT_getData+0x62>
		timeout++;
 8001778:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800177a:	3301      	adds	r3, #1
 800177c:	84fb      	strh	r3, [r7, #38]	; 0x26
		if (timeout > DHT_timeout) return data;
 800177e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001780:	f242 7210 	movw	r2, #10000	; 0x2710
 8001784:	4293      	cmp	r3, r2
 8001786:	d908      	bls.n	800179a <DHT_getData+0x62>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	461a      	mov	r2, r3
 800178c:	f107 0314 	add.w	r3, r7, #20
 8001790:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001794:	e882 0003 	stmia.w	r2, {r0, r1}
 8001798:	e0ff      	b.n	800199a <DHT_getData+0x262>
	while(getLine()) {
 800179a:	2110      	movs	r1, #16
 800179c:	4881      	ldr	r0, [pc, #516]	; (80019a4 <DHT_getData+0x26c>)
 800179e:	f002 fb89 	bl	8003eb4 <HAL_GPIO_ReadPin>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d0e7      	beq.n	8001778 <DHT_getData+0x40>
	}
	timeout = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	84fb      	strh	r3, [r7, #38]	; 0x26
	//Ожидание подъёма
	while(!getLine()) {
 80017ac:	e010      	b.n	80017d0 <DHT_getData+0x98>
		timeout++;
 80017ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017b0:	3301      	adds	r3, #1
 80017b2:	84fb      	strh	r3, [r7, #38]	; 0x26
		if (timeout > DHT_timeout) return data;
 80017b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017b6:	f242 7210 	movw	r2, #10000	; 0x2710
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d908      	bls.n	80017d0 <DHT_getData+0x98>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	461a      	mov	r2, r3
 80017c2:	f107 0314 	add.w	r3, r7, #20
 80017c6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80017ca:	e882 0003 	stmia.w	r2, {r0, r1}
 80017ce:	e0e4      	b.n	800199a <DHT_getData+0x262>
	while(!getLine()) {
 80017d0:	2110      	movs	r1, #16
 80017d2:	4874      	ldr	r0, [pc, #464]	; (80019a4 <DHT_getData+0x26c>)
 80017d4:	f002 fb6e 	bl	8003eb4 <HAL_GPIO_ReadPin>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d1e7      	bne.n	80017ae <DHT_getData+0x76>
	}
	timeout = 0;
 80017de:	2300      	movs	r3, #0
 80017e0:	84fb      	strh	r3, [r7, #38]	; 0x26
	//Ожидание спада
	while(getLine()) {
 80017e2:	e010      	b.n	8001806 <DHT_getData+0xce>
		timeout++;
 80017e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017e6:	3301      	adds	r3, #1
 80017e8:	84fb      	strh	r3, [r7, #38]	; 0x26
		if (timeout > DHT_timeout) return data;
 80017ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017ec:	f242 7210 	movw	r2, #10000	; 0x2710
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d908      	bls.n	8001806 <DHT_getData+0xce>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	461a      	mov	r2, r3
 80017f8:	f107 0314 	add.w	r3, r7, #20
 80017fc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001800:	e882 0003 	stmia.w	r2, {r0, r1}
 8001804:	e0c9      	b.n	800199a <DHT_getData+0x262>
	while(getLine()) {
 8001806:	2110      	movs	r1, #16
 8001808:	4866      	ldr	r0, [pc, #408]	; (80019a4 <DHT_getData+0x26c>)
 800180a:	f002 fb53 	bl	8003eb4 <HAL_GPIO_ReadPin>
 800180e:	4603      	mov	r3, r0
 8001810:	2b01      	cmp	r3, #1
 8001812:	d0e7      	beq.n	80017e4 <DHT_getData+0xac>
	}
	
	/* Чтение ответа от датчика */
	uint8_t rawData[5] = {0,0,0,0,0};
 8001814:	f107 030c 	add.w	r3, r7, #12
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	711a      	strb	r2, [r3, #4]
	for(uint8_t a = 0; a < 5; a++) {
 800181e:	2300      	movs	r3, #0
 8001820:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001824:	e05a      	b.n	80018dc <DHT_getData+0x1a4>
		for(uint8_t b = 7; b != 255; b--) {
 8001826:	2307      	movs	r3, #7
 8001828:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800182c:	e04d      	b.n	80018ca <DHT_getData+0x192>
			uint32_t hT = 0, lT = 0;
 800182e:	2300      	movs	r3, #0
 8001830:	623b      	str	r3, [r7, #32]
 8001832:	2300      	movs	r3, #0
 8001834:	61fb      	str	r3, [r7, #28]
			//Пока линия в низком уровне, инкремент переменной lT
			while(!getLine()) lT++;
 8001836:	e002      	b.n	800183e <DHT_getData+0x106>
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	3301      	adds	r3, #1
 800183c:	61fb      	str	r3, [r7, #28]
 800183e:	2110      	movs	r1, #16
 8001840:	4858      	ldr	r0, [pc, #352]	; (80019a4 <DHT_getData+0x26c>)
 8001842:	f002 fb37 	bl	8003eb4 <HAL_GPIO_ReadPin>
 8001846:	4603      	mov	r3, r0
 8001848:	2b01      	cmp	r3, #1
 800184a:	d1f5      	bne.n	8001838 <DHT_getData+0x100>
			//Пока линия в высоком уровне, инкремент переменной hT
			timeout = 0;
 800184c:	2300      	movs	r3, #0
 800184e:	84fb      	strh	r3, [r7, #38]	; 0x26
			while(getLine()) {
 8001850:	e013      	b.n	800187a <DHT_getData+0x142>
				hT++; timeout++;
 8001852:	6a3b      	ldr	r3, [r7, #32]
 8001854:	3301      	adds	r3, #1
 8001856:	623b      	str	r3, [r7, #32]
 8001858:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800185a:	3301      	adds	r3, #1
 800185c:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (timeout > DHT_timeout) return data;
 800185e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001860:	f242 7210 	movw	r2, #10000	; 0x2710
 8001864:	4293      	cmp	r3, r2
 8001866:	d908      	bls.n	800187a <DHT_getData+0x142>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	461a      	mov	r2, r3
 800186c:	f107 0314 	add.w	r3, r7, #20
 8001870:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001874:	e882 0003 	stmia.w	r2, {r0, r1}
 8001878:	e08f      	b.n	800199a <DHT_getData+0x262>
			while(getLine()) {
 800187a:	2110      	movs	r1, #16
 800187c:	4849      	ldr	r0, [pc, #292]	; (80019a4 <DHT_getData+0x26c>)
 800187e:	f002 fb19 	bl	8003eb4 <HAL_GPIO_ReadPin>
 8001882:	4603      	mov	r3, r0
 8001884:	2b01      	cmp	r3, #1
 8001886:	d0e4      	beq.n	8001852 <DHT_getData+0x11a>
			}
			//Если hT больше lT, то пришла единица
			if(hT > lT) rawData[a] |= (1<<b);
 8001888:	6a3a      	ldr	r2, [r7, #32]
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	429a      	cmp	r2, r3
 800188e:	d917      	bls.n	80018c0 <DHT_getData+0x188>
 8001890:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001894:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001898:	4413      	add	r3, r2
 800189a:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800189e:	b25a      	sxtb	r2, r3
 80018a0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80018a4:	2101      	movs	r1, #1
 80018a6:	fa01 f303 	lsl.w	r3, r1, r3
 80018aa:	b25b      	sxtb	r3, r3
 80018ac:	4313      	orrs	r3, r2
 80018ae:	b25a      	sxtb	r2, r3
 80018b0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80018b4:	b2d2      	uxtb	r2, r2
 80018b6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80018ba:	440b      	add	r3, r1
 80018bc:	f803 2c1c 	strb.w	r2, [r3, #-28]
		for(uint8_t b = 7; b != 255; b--) {
 80018c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80018c4:	3b01      	subs	r3, #1
 80018c6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80018ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80018ce:	2bff      	cmp	r3, #255	; 0xff
 80018d0:	d1ad      	bne.n	800182e <DHT_getData+0xf6>
	for(uint8_t a = 0; a < 5; a++) {
 80018d2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80018d6:	3301      	adds	r3, #1
 80018d8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80018dc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80018e0:	2b04      	cmp	r3, #4
 80018e2:	d9a0      	bls.n	8001826 <DHT_getData+0xee>
		}
	}
	/* Проверка целостности данных */
	if((uint8_t)(rawData[0] + rawData[1] + rawData[2] + rawData[3]) == rawData[4]) {
 80018e4:	7b3a      	ldrb	r2, [r7, #12]
 80018e6:	7b7b      	ldrb	r3, [r7, #13]
 80018e8:	4413      	add	r3, r2
 80018ea:	b2da      	uxtb	r2, r3
 80018ec:	7bbb      	ldrb	r3, [r7, #14]
 80018ee:	4413      	add	r3, r2
 80018f0:	b2da      	uxtb	r2, r3
 80018f2:	7bfb      	ldrb	r3, [r7, #15]
 80018f4:	4413      	add	r3, r2
 80018f6:	b2da      	uxtb	r2, r3
 80018f8:	7c3b      	ldrb	r3, [r7, #16]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d145      	bne.n	800198a <DHT_getData+0x252>
		//Если контрольная сумма совпадает, то конвертация и возврат полученных значений
		if (t == DHT22) {
 80018fe:	78fb      	ldrb	r3, [r7, #3]
 8001900:	2b01      	cmp	r3, #1
 8001902:	d133      	bne.n	800196c <DHT_getData+0x234>
			data.hum = (float)(((uint16_t)rawData[0]<<8) | rawData[1])*0.1f;
 8001904:	7b3b      	ldrb	r3, [r7, #12]
 8001906:	021b      	lsls	r3, r3, #8
 8001908:	7b7a      	ldrb	r2, [r7, #13]
 800190a:	4313      	orrs	r3, r2
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff f9e5 	bl	8000cdc <__aeabi_i2f>
 8001912:	4603      	mov	r3, r0
 8001914:	4924      	ldr	r1, [pc, #144]	; (80019a8 <DHT_getData+0x270>)
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff fa34 	bl	8000d84 <__aeabi_fmul>
 800191c:	4603      	mov	r3, r0
 800191e:	617b      	str	r3, [r7, #20]
			//Проверка на отрицательность температуры
			if(!(rawData[2] & (1<<7))) {
 8001920:	7bbb      	ldrb	r3, [r7, #14]
 8001922:	b25b      	sxtb	r3, r3
 8001924:	2b00      	cmp	r3, #0
 8001926:	db0e      	blt.n	8001946 <DHT_getData+0x20e>
				data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*0.1f;
 8001928:	7bbb      	ldrb	r3, [r7, #14]
 800192a:	021b      	lsls	r3, r3, #8
 800192c:	7bfa      	ldrb	r2, [r7, #15]
 800192e:	4313      	orrs	r3, r2
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff f9d3 	bl	8000cdc <__aeabi_i2f>
 8001936:	4603      	mov	r3, r0
 8001938:	491b      	ldr	r1, [pc, #108]	; (80019a8 <DHT_getData+0x270>)
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff fa22 	bl	8000d84 <__aeabi_fmul>
 8001940:	4603      	mov	r3, r0
 8001942:	61bb      	str	r3, [r7, #24]
 8001944:	e012      	b.n	800196c <DHT_getData+0x234>
			}	else {
				rawData[2] &= ~(1<<7);
 8001946:	7bbb      	ldrb	r3, [r7, #14]
 8001948:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800194c:	b2db      	uxtb	r3, r3
 800194e:	73bb      	strb	r3, [r7, #14]
				data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*-0.1f;
 8001950:	7bbb      	ldrb	r3, [r7, #14]
 8001952:	021b      	lsls	r3, r3, #8
 8001954:	7bfa      	ldrb	r2, [r7, #15]
 8001956:	4313      	orrs	r3, r2
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff f9bf 	bl	8000cdc <__aeabi_i2f>
 800195e:	4603      	mov	r3, r0
 8001960:	4912      	ldr	r1, [pc, #72]	; (80019ac <DHT_getData+0x274>)
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff fa0e 	bl	8000d84 <__aeabi_fmul>
 8001968:	4603      	mov	r3, r0
 800196a:	61bb      	str	r3, [r7, #24]
			}
		}
		if (t == DHT11) {
 800196c:	78fb      	ldrb	r3, [r7, #3]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d10b      	bne.n	800198a <DHT_getData+0x252>
			data.hum = (float)rawData[0];
 8001972:	7b3b      	ldrb	r3, [r7, #12]
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff f9ad 	bl	8000cd4 <__aeabi_ui2f>
 800197a:	4603      	mov	r3, r0
 800197c:	617b      	str	r3, [r7, #20]
			data.temp = (float)rawData[2];;
 800197e:	7bbb      	ldrb	r3, [r7, #14]
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff f9a7 	bl	8000cd4 <__aeabi_ui2f>
 8001986:	4603      	mov	r3, r0
 8001988:	61bb      	str	r3, [r7, #24]
		}
	}
	
	return data;	
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	461a      	mov	r2, r3
 800198e:	f107 0314 	add.w	r3, r7, #20
 8001992:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001996:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	3728      	adds	r7, #40	; 0x28
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40010800 	.word	0x40010800
 80019a8:	3dcccccd 	.word	0x3dcccccd
 80019ac:	bdcccccd 	.word	0xbdcccccd

080019b0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80019b6:	1d3b      	adds	r3, r7, #4
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 80019c0:	4b18      	ldr	r3, [pc, #96]	; (8001a24 <MX_ADC1_Init+0x74>)
 80019c2:	4a19      	ldr	r2, [pc, #100]	; (8001a28 <MX_ADC1_Init+0x78>)
 80019c4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80019c6:	4b17      	ldr	r3, [pc, #92]	; (8001a24 <MX_ADC1_Init+0x74>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80019cc:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <MX_ADC1_Init+0x74>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019d2:	4b14      	ldr	r3, [pc, #80]	; (8001a24 <MX_ADC1_Init+0x74>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019d8:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <MX_ADC1_Init+0x74>)
 80019da:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80019de:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019e0:	4b10      	ldr	r3, [pc, #64]	; (8001a24 <MX_ADC1_Init+0x74>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80019e6:	4b0f      	ldr	r3, [pc, #60]	; (8001a24 <MX_ADC1_Init+0x74>)
 80019e8:	2201      	movs	r2, #1
 80019ea:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019ec:	480d      	ldr	r0, [pc, #52]	; (8001a24 <MX_ADC1_Init+0x74>)
 80019ee:	f001 fa9f 	bl	8002f30 <HAL_ADC_Init>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80019f8:	f000 fe12 	bl	8002620 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80019fc:	2301      	movs	r3, #1
 80019fe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a00:	2301      	movs	r3, #1
 8001a02:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001a04:	2300      	movs	r3, #0
 8001a06:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a08:	1d3b      	adds	r3, r7, #4
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4805      	ldr	r0, [pc, #20]	; (8001a24 <MX_ADC1_Init+0x74>)
 8001a0e:	f001 fd47 	bl	80034a0 <HAL_ADC_ConfigChannel>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001a18:	f000 fe02 	bl	8002620 <Error_Handler>
  }

}
 8001a1c:	bf00      	nop
 8001a1e:	3710      	adds	r7, #16
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	20000270 	.word	0x20000270
 8001a28:	40012400 	.word	0x40012400

08001a2c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b088      	sub	sp, #32
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a34:	f107 0310 	add.w	r3, r7, #16
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
 8001a40:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a14      	ldr	r2, [pc, #80]	; (8001a98 <HAL_ADC_MspInit+0x6c>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d121      	bne.n	8001a90 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a4c:	4b13      	ldr	r3, [pc, #76]	; (8001a9c <HAL_ADC_MspInit+0x70>)
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	4a12      	ldr	r2, [pc, #72]	; (8001a9c <HAL_ADC_MspInit+0x70>)
 8001a52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a56:	6193      	str	r3, [r2, #24]
 8001a58:	4b10      	ldr	r3, [pc, #64]	; (8001a9c <HAL_ADC_MspInit+0x70>)
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a64:	4b0d      	ldr	r3, [pc, #52]	; (8001a9c <HAL_ADC_MspInit+0x70>)
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	4a0c      	ldr	r2, [pc, #48]	; (8001a9c <HAL_ADC_MspInit+0x70>)
 8001a6a:	f043 0304 	orr.w	r3, r3, #4
 8001a6e:	6193      	str	r3, [r2, #24]
 8001a70:	4b0a      	ldr	r3, [pc, #40]	; (8001a9c <HAL_ADC_MspInit+0x70>)
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	f003 0304 	and.w	r3, r3, #4
 8001a78:	60bb      	str	r3, [r7, #8]
 8001a7a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a80:	2303      	movs	r3, #3
 8001a82:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a84:	f107 0310 	add.w	r3, r7, #16
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4805      	ldr	r0, [pc, #20]	; (8001aa0 <HAL_ADC_MspInit+0x74>)
 8001a8c:	f002 f8b8 	bl	8003c00 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001a90:	bf00      	nop
 8001a92:	3720      	adds	r7, #32
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40012400 	.word	0x40012400
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	40010800 	.word	0x40010800

08001aa4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b088      	sub	sp, #32
 8001aa8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aaa:	f107 0310 	add.w	r3, r7, #16
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	605a      	str	r2, [r3, #4]
 8001ab4:	609a      	str	r2, [r3, #8]
 8001ab6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ab8:	4b45      	ldr	r3, [pc, #276]	; (8001bd0 <MX_GPIO_Init+0x12c>)
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	4a44      	ldr	r2, [pc, #272]	; (8001bd0 <MX_GPIO_Init+0x12c>)
 8001abe:	f043 0310 	orr.w	r3, r3, #16
 8001ac2:	6193      	str	r3, [r2, #24]
 8001ac4:	4b42      	ldr	r3, [pc, #264]	; (8001bd0 <MX_GPIO_Init+0x12c>)
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	f003 0310 	and.w	r3, r3, #16
 8001acc:	60fb      	str	r3, [r7, #12]
 8001ace:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ad0:	4b3f      	ldr	r3, [pc, #252]	; (8001bd0 <MX_GPIO_Init+0x12c>)
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	4a3e      	ldr	r2, [pc, #248]	; (8001bd0 <MX_GPIO_Init+0x12c>)
 8001ad6:	f043 0320 	orr.w	r3, r3, #32
 8001ada:	6193      	str	r3, [r2, #24]
 8001adc:	4b3c      	ldr	r3, [pc, #240]	; (8001bd0 <MX_GPIO_Init+0x12c>)
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	f003 0320 	and.w	r3, r3, #32
 8001ae4:	60bb      	str	r3, [r7, #8]
 8001ae6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae8:	4b39      	ldr	r3, [pc, #228]	; (8001bd0 <MX_GPIO_Init+0x12c>)
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	4a38      	ldr	r2, [pc, #224]	; (8001bd0 <MX_GPIO_Init+0x12c>)
 8001aee:	f043 0304 	orr.w	r3, r3, #4
 8001af2:	6193      	str	r3, [r2, #24]
 8001af4:	4b36      	ldr	r3, [pc, #216]	; (8001bd0 <MX_GPIO_Init+0x12c>)
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	f003 0304 	and.w	r3, r3, #4
 8001afc:	607b      	str	r3, [r7, #4]
 8001afe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b00:	4b33      	ldr	r3, [pc, #204]	; (8001bd0 <MX_GPIO_Init+0x12c>)
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	4a32      	ldr	r2, [pc, #200]	; (8001bd0 <MX_GPIO_Init+0x12c>)
 8001b06:	f043 0308 	orr.w	r3, r3, #8
 8001b0a:	6193      	str	r3, [r2, #24]
 8001b0c:	4b30      	ldr	r3, [pc, #192]	; (8001bd0 <MX_GPIO_Init+0x12c>)
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	f003 0308 	and.w	r3, r3, #8
 8001b14:	603b      	str	r3, [r7, #0]
 8001b16:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b1e:	482d      	ldr	r0, [pc, #180]	; (8001bd4 <MX_GPIO_Init+0x130>)
 8001b20:	f002 f9df 	bl	8003ee2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001b24:	2200      	movs	r2, #0
 8001b26:	2103      	movs	r1, #3
 8001b28:	482b      	ldr	r0, [pc, #172]	; (8001bd8 <MX_GPIO_Init+0x134>)
 8001b2a:	f002 f9da 	bl	8003ee2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8001b34:	4829      	ldr	r0, [pc, #164]	; (8001bdc <MX_GPIO_Init+0x138>)
 8001b36:	f002 f9d4 	bl	8003ee2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001b3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b40:	2301      	movs	r3, #1
 8001b42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b44:	2300      	movs	r3, #0
 8001b46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b4c:	f107 0310 	add.w	r3, r7, #16
 8001b50:	4619      	mov	r1, r3
 8001b52:	4820      	ldr	r0, [pc, #128]	; (8001bd4 <MX_GPIO_Init+0x130>)
 8001b54:	f002 f854 	bl	8003c00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA12 */
  GPIO_InitStruct.Pin = DHT11_Pin|GPIO_PIN_12;
 8001b58:	f241 0310 	movw	r3, #4112	; 0x1010
 8001b5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b62:	2301      	movs	r3, #1
 8001b64:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b66:	f107 0310 	add.w	r3, r7, #16
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	481b      	ldr	r0, [pc, #108]	; (8001bdc <MX_GPIO_Init+0x138>)
 8001b6e:	f002 f847 	bl	8003c00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b72:	2303      	movs	r3, #3
 8001b74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b76:	2301      	movs	r3, #1
 8001b78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b82:	f107 0310 	add.w	r3, r7, #16
 8001b86:	4619      	mov	r1, r3
 8001b88:	4813      	ldr	r0, [pc, #76]	; (8001bd8 <MX_GPIO_Init+0x134>)
 8001b8a:	f002 f839 	bl	8003c00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001b8e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b94:	2300      	movs	r3, #0
 8001b96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b9c:	f107 0310 	add.w	r3, r7, #16
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	480d      	ldr	r0, [pc, #52]	; (8001bd8 <MX_GPIO_Init+0x134>)
 8001ba4:	f002 f82c 	bl	8003c00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001ba8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001bac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bba:	f107 0310 	add.w	r3, r7, #16
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4806      	ldr	r0, [pc, #24]	; (8001bdc <MX_GPIO_Init+0x138>)
 8001bc2:	f002 f81d 	bl	8003c00 <HAL_GPIO_Init>

}
 8001bc6:	bf00      	nop
 8001bc8:	3720      	adds	r7, #32
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	40011000 	.word	0x40011000
 8001bd8:	40010c00 	.word	0x40010c00
 8001bdc:	40010800 	.word	0x40010800

08001be0 <GPS_Init>:
	CDC_Transmit_FS((unsigned char *) buf, (uint16_t) strlen(buf));
}
#endif

void GPS_Init()
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 8001be4:	2201      	movs	r2, #1
 8001be6:	4903      	ldr	r1, [pc, #12]	; (8001bf4 <GPS_Init+0x14>)
 8001be8:	4803      	ldr	r0, [pc, #12]	; (8001bf8 <GPS_Init+0x18>)
 8001bea:	f004 fc96 	bl	800651a <HAL_UART_Receive_IT>
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	200001fc 	.word	0x200001fc
 8001bf8:	20000434 	.word	0x20000434

08001bfc <GPS_UART_CallBack>:


void GPS_UART_CallBack(){
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
	if (rx_data != '\n' && rx_index < sizeof(rx_buffer)) {
 8001c00:	4b16      	ldr	r3, [pc, #88]	; (8001c5c <GPS_UART_CallBack+0x60>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	2b0a      	cmp	r3, #10
 8001c06:	d010      	beq.n	8001c2a <GPS_UART_CallBack+0x2e>
 8001c08:	4b15      	ldr	r3, [pc, #84]	; (8001c60 <GPS_UART_CallBack+0x64>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	b25b      	sxtb	r3, r3
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	db0b      	blt.n	8001c2a <GPS_UART_CallBack+0x2e>
		rx_buffer[rx_index++] = rx_data;
 8001c12:	4b13      	ldr	r3, [pc, #76]	; (8001c60 <GPS_UART_CallBack+0x64>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	1c5a      	adds	r2, r3, #1
 8001c18:	b2d1      	uxtb	r1, r2
 8001c1a:	4a11      	ldr	r2, [pc, #68]	; (8001c60 <GPS_UART_CallBack+0x64>)
 8001c1c:	7011      	strb	r1, [r2, #0]
 8001c1e:	461a      	mov	r2, r3
 8001c20:	4b0e      	ldr	r3, [pc, #56]	; (8001c5c <GPS_UART_CallBack+0x60>)
 8001c22:	7819      	ldrb	r1, [r3, #0]
 8001c24:	4b0f      	ldr	r3, [pc, #60]	; (8001c64 <GPS_UART_CallBack+0x68>)
 8001c26:	5499      	strb	r1, [r3, r2]
 8001c28:	e010      	b.n	8001c4c <GPS_UART_CallBack+0x50>

		#if (GPS_DEBUG == 1)
		GPS_print((char*)rx_buffer);
		#endif

		if(GPS_validate((char*) rx_buffer))
 8001c2a:	480e      	ldr	r0, [pc, #56]	; (8001c64 <GPS_UART_CallBack+0x68>)
 8001c2c:	f000 f81e 	bl	8001c6c <GPS_validate>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d002      	beq.n	8001c3c <GPS_UART_CallBack+0x40>
			GPS_parse((char*) rx_buffer);
 8001c36:	480b      	ldr	r0, [pc, #44]	; (8001c64 <GPS_UART_CallBack+0x68>)
 8001c38:	f000 f87a 	bl	8001d30 <GPS_parse>
		rx_index = 0;
 8001c3c:	4b08      	ldr	r3, [pc, #32]	; (8001c60 <GPS_UART_CallBack+0x64>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	701a      	strb	r2, [r3, #0]
		memset(rx_buffer, 0, sizeof(rx_buffer));
 8001c42:	2280      	movs	r2, #128	; 0x80
 8001c44:	2100      	movs	r1, #0
 8001c46:	4807      	ldr	r0, [pc, #28]	; (8001c64 <GPS_UART_CallBack+0x68>)
 8001c48:	f004 ffe8 	bl	8006c1c <memset>
	}
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	4903      	ldr	r1, [pc, #12]	; (8001c5c <GPS_UART_CallBack+0x60>)
 8001c50:	4805      	ldr	r0, [pc, #20]	; (8001c68 <GPS_UART_CallBack+0x6c>)
 8001c52:	f004 fc62 	bl	800651a <HAL_UART_Receive_IT>
}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	200001fc 	.word	0x200001fc
 8001c60:	200001fd 	.word	0x200001fd
 8001c64:	200002f8 	.word	0x200002f8
 8001c68:	20000434 	.word	0x20000434

08001c6c <GPS_validate>:


int GPS_validate(char *nmeastr){
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 8001c74:	2300      	movs	r3, #0
 8001c76:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	4413      	add	r3, r2
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	2b24      	cmp	r3, #36	; 0x24
 8001c86:	d103      	bne.n	8001c90 <GPS_validate+0x24>
        i++;
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8001c8e:	e00c      	b.n	8001caa <GPS_validate+0x3e>
        return 0;
 8001c90:	2300      	movs	r3, #0
 8001c92:	e047      	b.n	8001d24 <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	4413      	add	r3, r2
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	4053      	eors	r3, r2
 8001ca2:	613b      	str	r3, [r7, #16]
        i++;
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	4413      	add	r3, r2
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d008      	beq.n	8001cc8 <GPS_validate+0x5c>
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	4413      	add	r3, r2
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	2b2a      	cmp	r3, #42	; 0x2a
 8001cc0:	d002      	beq.n	8001cc8 <GPS_validate+0x5c>
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	2b4a      	cmp	r3, #74	; 0x4a
 8001cc6:	dde5      	ble.n	8001c94 <GPS_validate+0x28>
    }

    if(i >= 75){
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	2b4a      	cmp	r3, #74	; 0x4a
 8001ccc:	dd01      	ble.n	8001cd2 <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 8001cce:	2300      	movs	r3, #0
 8001cd0:	e028      	b.n	8001d24 <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	2b2a      	cmp	r3, #42	; 0x2a
 8001cdc:	d119      	bne.n	8001d12 <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	3302      	adds	r3, #2
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 8001cfa:	f107 0308 	add.w	r3, r7, #8
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	490a      	ldr	r1, [pc, #40]	; (8001d2c <GPS_validate+0xc0>)
 8001d02:	4618      	mov	r0, r3
 8001d04:	f005 f976 	bl	8006ff4 <siprintf>
    return((checkcalcstr[0] == check[0])
 8001d08:	7a3a      	ldrb	r2, [r7, #8]
 8001d0a:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d108      	bne.n	8001d22 <GPS_validate+0xb6>
 8001d10:	e001      	b.n	8001d16 <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 8001d12:	2300      	movs	r3, #0
 8001d14:	e006      	b.n	8001d24 <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8001d16:	7a7a      	ldrb	r2, [r7, #9]
 8001d18:	7b7b      	ldrb	r3, [r7, #13]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d101      	bne.n	8001d22 <GPS_validate+0xb6>
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e000      	b.n	8001d24 <GPS_validate+0xb8>
 8001d22:	2300      	movs	r3, #0
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3718      	adds	r7, #24
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	08009d88 	.word	0x08009d88

08001d30 <GPS_parse>:

void GPS_parse(char *GPSstrParse){
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08a      	sub	sp, #40	; 0x28
 8001d34:	af08      	add	r7, sp, #32
 8001d36:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GPGGA", 6)){
 8001d38:	2206      	movs	r2, #6
 8001d3a:	4946      	ldr	r1, [pc, #280]	; (8001e54 <GPS_parse+0x124>)
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f005 f9a5 	bl	800708c <strncmp>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d12f      	bne.n	8001da8 <GPS_parse+0x78>
    	if (sscanf(GPSstrParse, "$GPGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 8001d48:	4b43      	ldr	r3, [pc, #268]	; (8001e58 <GPS_parse+0x128>)
 8001d4a:	9307      	str	r3, [sp, #28]
 8001d4c:	4b43      	ldr	r3, [pc, #268]	; (8001e5c <GPS_parse+0x12c>)
 8001d4e:	9306      	str	r3, [sp, #24]
 8001d50:	4b43      	ldr	r3, [pc, #268]	; (8001e60 <GPS_parse+0x130>)
 8001d52:	9305      	str	r3, [sp, #20]
 8001d54:	4b43      	ldr	r3, [pc, #268]	; (8001e64 <GPS_parse+0x134>)
 8001d56:	9304      	str	r3, [sp, #16]
 8001d58:	4b43      	ldr	r3, [pc, #268]	; (8001e68 <GPS_parse+0x138>)
 8001d5a:	9303      	str	r3, [sp, #12]
 8001d5c:	4b43      	ldr	r3, [pc, #268]	; (8001e6c <GPS_parse+0x13c>)
 8001d5e:	9302      	str	r3, [sp, #8]
 8001d60:	4b43      	ldr	r3, [pc, #268]	; (8001e70 <GPS_parse+0x140>)
 8001d62:	9301      	str	r3, [sp, #4]
 8001d64:	4b43      	ldr	r3, [pc, #268]	; (8001e74 <GPS_parse+0x144>)
 8001d66:	9300      	str	r3, [sp, #0]
 8001d68:	4b43      	ldr	r3, [pc, #268]	; (8001e78 <GPS_parse+0x148>)
 8001d6a:	4a44      	ldr	r2, [pc, #272]	; (8001e7c <GPS_parse+0x14c>)
 8001d6c:	4944      	ldr	r1, [pc, #272]	; (8001e80 <GPS_parse+0x150>)
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f005 f960 	bl	8007034 <siscanf>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	dd68      	ble.n	8001e4c <GPS_parse+0x11c>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8001d7a:	4b42      	ldr	r3, [pc, #264]	; (8001e84 <GPS_parse+0x154>)
 8001d7c:	691a      	ldr	r2, [r3, #16]
 8001d7e:	4b41      	ldr	r3, [pc, #260]	; (8001e84 <GPS_parse+0x154>)
 8001d80:	7e1b      	ldrb	r3, [r3, #24]
 8001d82:	4619      	mov	r1, r3
 8001d84:	4610      	mov	r0, r2
 8001d86:	f000 f8a1 	bl	8001ecc <GPS_nmea_to_dec>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	4b3d      	ldr	r3, [pc, #244]	; (8001e84 <GPS_parse+0x154>)
 8001d8e:	605a      	str	r2, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8001d90:	4b3c      	ldr	r3, [pc, #240]	; (8001e84 <GPS_parse+0x154>)
 8001d92:	68da      	ldr	r2, [r3, #12]
 8001d94:	4b3b      	ldr	r3, [pc, #236]	; (8001e84 <GPS_parse+0x154>)
 8001d96:	7e5b      	ldrb	r3, [r3, #25]
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4610      	mov	r0, r2
 8001d9c:	f000 f896 	bl	8001ecc <GPS_nmea_to_dec>
 8001da0:	4602      	mov	r2, r0
 8001da2:	4b38      	ldr	r3, [pc, #224]	; (8001e84 <GPS_parse+0x154>)
 8001da4:	601a      	str	r2, [r3, #0]
    		return;
 8001da6:	e051      	b.n	8001e4c <GPS_parse+0x11c>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GPRMC", 6)){
 8001da8:	2206      	movs	r2, #6
 8001daa:	4937      	ldr	r1, [pc, #220]	; (8001e88 <GPS_parse+0x158>)
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f005 f96d 	bl	800708c <strncmp>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d114      	bne.n	8001de2 <GPS_parse+0xb2>
    	if(sscanf(GPSstrParse, "$GPRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1)
 8001db8:	4b34      	ldr	r3, [pc, #208]	; (8001e8c <GPS_parse+0x15c>)
 8001dba:	9305      	str	r3, [sp, #20]
 8001dbc:	4b34      	ldr	r3, [pc, #208]	; (8001e90 <GPS_parse+0x160>)
 8001dbe:	9304      	str	r3, [sp, #16]
 8001dc0:	4b34      	ldr	r3, [pc, #208]	; (8001e94 <GPS_parse+0x164>)
 8001dc2:	9303      	str	r3, [sp, #12]
 8001dc4:	4b29      	ldr	r3, [pc, #164]	; (8001e6c <GPS_parse+0x13c>)
 8001dc6:	9302      	str	r3, [sp, #8]
 8001dc8:	4b29      	ldr	r3, [pc, #164]	; (8001e70 <GPS_parse+0x140>)
 8001dca:	9301      	str	r3, [sp, #4]
 8001dcc:	4b29      	ldr	r3, [pc, #164]	; (8001e74 <GPS_parse+0x144>)
 8001dce:	9300      	str	r3, [sp, #0]
 8001dd0:	4b29      	ldr	r3, [pc, #164]	; (8001e78 <GPS_parse+0x148>)
 8001dd2:	4a2a      	ldr	r2, [pc, #168]	; (8001e7c <GPS_parse+0x14c>)
 8001dd4:	4930      	ldr	r1, [pc, #192]	; (8001e98 <GPS_parse+0x168>)
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f005 f92c 	bl	8007034 <siscanf>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	e034      	b.n	8001e4c <GPS_parse+0x11c>
    		return;

    }
    else if (!strncmp(GPSstrParse, "$GPGLL", 6)){
 8001de2:	2206      	movs	r2, #6
 8001de4:	492d      	ldr	r1, [pc, #180]	; (8001e9c <GPS_parse+0x16c>)
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f005 f950 	bl	800708c <strncmp>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d110      	bne.n	8001e14 <GPS_parse+0xe4>
        if(sscanf(GPSstrParse, "$GPGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1)
 8001df2:	4b2b      	ldr	r3, [pc, #172]	; (8001ea0 <GPS_parse+0x170>)
 8001df4:	9303      	str	r3, [sp, #12]
 8001df6:	4b21      	ldr	r3, [pc, #132]	; (8001e7c <GPS_parse+0x14c>)
 8001df8:	9302      	str	r3, [sp, #8]
 8001dfa:	4b1c      	ldr	r3, [pc, #112]	; (8001e6c <GPS_parse+0x13c>)
 8001dfc:	9301      	str	r3, [sp, #4]
 8001dfe:	4b1c      	ldr	r3, [pc, #112]	; (8001e70 <GPS_parse+0x140>)
 8001e00:	9300      	str	r3, [sp, #0]
 8001e02:	4b1c      	ldr	r3, [pc, #112]	; (8001e74 <GPS_parse+0x144>)
 8001e04:	4a1c      	ldr	r2, [pc, #112]	; (8001e78 <GPS_parse+0x148>)
 8001e06:	4927      	ldr	r1, [pc, #156]	; (8001ea4 <GPS_parse+0x174>)
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f005 f913 	bl	8007034 <siscanf>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	e01b      	b.n	8001e4c <GPS_parse+0x11c>
            return;
    }
    else if (!strncmp(GPSstrParse, "$GPVTG", 6)){
 8001e14:	2206      	movs	r2, #6
 8001e16:	4924      	ldr	r1, [pc, #144]	; (8001ea8 <GPS_parse+0x178>)
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f005 f937 	bl	800708c <strncmp>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d113      	bne.n	8001e4c <GPS_parse+0x11c>
        if(sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 8001e24:	4b21      	ldr	r3, [pc, #132]	; (8001eac <GPS_parse+0x17c>)
 8001e26:	9305      	str	r3, [sp, #20]
 8001e28:	4b21      	ldr	r3, [pc, #132]	; (8001eb0 <GPS_parse+0x180>)
 8001e2a:	9304      	str	r3, [sp, #16]
 8001e2c:	4b21      	ldr	r3, [pc, #132]	; (8001eb4 <GPS_parse+0x184>)
 8001e2e:	9303      	str	r3, [sp, #12]
 8001e30:	4b18      	ldr	r3, [pc, #96]	; (8001e94 <GPS_parse+0x164>)
 8001e32:	9302      	str	r3, [sp, #8]
 8001e34:	4b20      	ldr	r3, [pc, #128]	; (8001eb8 <GPS_parse+0x188>)
 8001e36:	9301      	str	r3, [sp, #4]
 8001e38:	4b20      	ldr	r3, [pc, #128]	; (8001ebc <GPS_parse+0x18c>)
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	4b20      	ldr	r3, [pc, #128]	; (8001ec0 <GPS_parse+0x190>)
 8001e3e:	4a21      	ldr	r2, [pc, #132]	; (8001ec4 <GPS_parse+0x194>)
 8001e40:	4921      	ldr	r1, [pc, #132]	; (8001ec8 <GPS_parse+0x198>)
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f005 f8f6 	bl	8007034 <siscanf>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
            return;
    }
}
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	08009d90 	.word	0x08009d90
 8001e58:	200002cc 	.word	0x200002cc
 8001e5c:	200002c8 	.word	0x200002c8
 8001e60:	200002c4 	.word	0x200002c4
 8001e64:	200002c0 	.word	0x200002c0
 8001e68:	200002bc 	.word	0x200002bc
 8001e6c:	200002b9 	.word	0x200002b9
 8001e70:	200002ac 	.word	0x200002ac
 8001e74:	200002b8 	.word	0x200002b8
 8001e78:	200002b0 	.word	0x200002b0
 8001e7c:	200002b4 	.word	0x200002b4
 8001e80:	08009d98 	.word	0x08009d98
 8001e84:	200002a0 	.word	0x200002a0
 8001e88:	08009dc0 	.word	0x08009dc0
 8001e8c:	200002d8 	.word	0x200002d8
 8001e90:	200002d4 	.word	0x200002d4
 8001e94:	200002d0 	.word	0x200002d0
 8001e98:	08009dc8 	.word	0x08009dc8
 8001e9c:	08009de8 	.word	0x08009de8
 8001ea0:	200002dc 	.word	0x200002dc
 8001ea4:	08009df0 	.word	0x08009df0
 8001ea8:	08009e0c 	.word	0x08009e0c
 8001eac:	200002f4 	.word	0x200002f4
 8001eb0:	200002f0 	.word	0x200002f0
 8001eb4:	200002ed 	.word	0x200002ed
 8001eb8:	200002ec 	.word	0x200002ec
 8001ebc:	200002e8 	.word	0x200002e8
 8001ec0:	200002e4 	.word	0x200002e4
 8001ec4:	200002e0 	.word	0x200002e0
 8001ec8:	08009e14 	.word	0x08009e14

08001ecc <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 8001ed8:	491b      	ldr	r1, [pc, #108]	; (8001f48 <GPS_nmea_to_dec+0x7c>)
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f7ff f806 	bl	8000eec <__aeabi_fdiv>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff f914 	bl	8001110 <__aeabi_f2iz>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	2264      	movs	r2, #100	; 0x64
 8001ef0:	fb02 f303 	mul.w	r3, r2, r3
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7fe fef1 	bl	8000cdc <__aeabi_i2f>
 8001efa:	4603      	mov	r3, r0
 8001efc:	4619      	mov	r1, r3
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7fe fe36 	bl	8000b70 <__aeabi_fsub>
 8001f04:	4603      	mov	r3, r0
 8001f06:	60fb      	str	r3, [r7, #12]
    float dec_deg = minutes / 60;
 8001f08:	4910      	ldr	r1, [pc, #64]	; (8001f4c <GPS_nmea_to_dec+0x80>)
 8001f0a:	68f8      	ldr	r0, [r7, #12]
 8001f0c:	f7fe ffee 	bl	8000eec <__aeabi_fdiv>
 8001f10:	4603      	mov	r3, r0
 8001f12:	60bb      	str	r3, [r7, #8]
    float decimal = degree + dec_deg;
 8001f14:	6938      	ldr	r0, [r7, #16]
 8001f16:	f7fe fee1 	bl	8000cdc <__aeabi_i2f>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	68b8      	ldr	r0, [r7, #8]
 8001f20:	f7fe fe28 	bl	8000b74 <__addsf3>
 8001f24:	4603      	mov	r3, r0
 8001f26:	617b      	str	r3, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 8001f28:	78fb      	ldrb	r3, [r7, #3]
 8001f2a:	2b53      	cmp	r3, #83	; 0x53
 8001f2c:	d002      	beq.n	8001f34 <GPS_nmea_to_dec+0x68>
 8001f2e:	78fb      	ldrb	r3, [r7, #3]
 8001f30:	2b57      	cmp	r3, #87	; 0x57
 8001f32:	d103      	bne.n	8001f3c <GPS_nmea_to_dec+0x70>
        decimal *= -1;
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001f3a:	617b      	str	r3, [r7, #20]
    }
    return decimal;
 8001f3c:	697b      	ldr	r3, [r7, #20]
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3718      	adds	r7, #24
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	42c80000 	.word	0x42c80000
 8001f4c:	42700000 	.word	0x42700000

08001f50 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001f54:	4b12      	ldr	r3, [pc, #72]	; (8001fa0 <MX_I2C1_Init+0x50>)
 8001f56:	4a13      	ldr	r2, [pc, #76]	; (8001fa4 <MX_I2C1_Init+0x54>)
 8001f58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001f5a:	4b11      	ldr	r3, [pc, #68]	; (8001fa0 <MX_I2C1_Init+0x50>)
 8001f5c:	4a12      	ldr	r2, [pc, #72]	; (8001fa8 <MX_I2C1_Init+0x58>)
 8001f5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f60:	4b0f      	ldr	r3, [pc, #60]	; (8001fa0 <MX_I2C1_Init+0x50>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f66:	4b0e      	ldr	r3, [pc, #56]	; (8001fa0 <MX_I2C1_Init+0x50>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f6c:	4b0c      	ldr	r3, [pc, #48]	; (8001fa0 <MX_I2C1_Init+0x50>)
 8001f6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f72:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f74:	4b0a      	ldr	r3, [pc, #40]	; (8001fa0 <MX_I2C1_Init+0x50>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f7a:	4b09      	ldr	r3, [pc, #36]	; (8001fa0 <MX_I2C1_Init+0x50>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f80:	4b07      	ldr	r3, [pc, #28]	; (8001fa0 <MX_I2C1_Init+0x50>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f86:	4b06      	ldr	r3, [pc, #24]	; (8001fa0 <MX_I2C1_Init+0x50>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f8c:	4804      	ldr	r0, [pc, #16]	; (8001fa0 <MX_I2C1_Init+0x50>)
 8001f8e:	f001 ffc1 	bl	8003f14 <HAL_I2C_Init>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f98:	f000 fb42 	bl	8002620 <Error_Handler>
  }

}
 8001f9c:	bf00      	nop
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	20000378 	.word	0x20000378
 8001fa4:	40005400 	.word	0x40005400
 8001fa8:	000186a0 	.word	0x000186a0

08001fac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b088      	sub	sp, #32
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb4:	f107 0310 	add.w	r3, r7, #16
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	605a      	str	r2, [r3, #4]
 8001fbe:	609a      	str	r2, [r3, #8]
 8001fc0:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a15      	ldr	r2, [pc, #84]	; (800201c <HAL_I2C_MspInit+0x70>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d123      	bne.n	8002014 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fcc:	4b14      	ldr	r3, [pc, #80]	; (8002020 <HAL_I2C_MspInit+0x74>)
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	4a13      	ldr	r2, [pc, #76]	; (8002020 <HAL_I2C_MspInit+0x74>)
 8001fd2:	f043 0308 	orr.w	r3, r3, #8
 8001fd6:	6193      	str	r3, [r2, #24]
 8001fd8:	4b11      	ldr	r3, [pc, #68]	; (8002020 <HAL_I2C_MspInit+0x74>)
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	f003 0308 	and.w	r3, r3, #8
 8001fe0:	60fb      	str	r3, [r7, #12]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001fe4:	23c0      	movs	r3, #192	; 0xc0
 8001fe6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fe8:	2312      	movs	r3, #18
 8001fea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fec:	2303      	movs	r3, #3
 8001fee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ff0:	f107 0310 	add.w	r3, r7, #16
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	480b      	ldr	r0, [pc, #44]	; (8002024 <HAL_I2C_MspInit+0x78>)
 8001ff8:	f001 fe02 	bl	8003c00 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ffc:	4b08      	ldr	r3, [pc, #32]	; (8002020 <HAL_I2C_MspInit+0x74>)
 8001ffe:	69db      	ldr	r3, [r3, #28]
 8002000:	4a07      	ldr	r2, [pc, #28]	; (8002020 <HAL_I2C_MspInit+0x74>)
 8002002:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002006:	61d3      	str	r3, [r2, #28]
 8002008:	4b05      	ldr	r3, [pc, #20]	; (8002020 <HAL_I2C_MspInit+0x74>)
 800200a:	69db      	ldr	r3, [r3, #28]
 800200c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002010:	60bb      	str	r3, [r7, #8]
 8002012:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002014:	bf00      	nop
 8002016:	3720      	adds	r7, #32
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	40005400 	.word	0x40005400
 8002020:	40021000 	.word	0x40021000
 8002024:	40010c00 	.word	0x40010c00

08002028 <airQuality>:





float airQuality(){
 8002028:	b590      	push	{r4, r7, lr}
 800202a:	b09d      	sub	sp, #116	; 0x74
 800202c:	af00      	add	r7, sp, #0
float Value[22];////取22个值做滤波用
	  float AD_Value;
	  HAL_ADCEx_Calibration_Start(&hadc1);
 800202e:	4858      	ldr	r0, [pc, #352]	; (8002190 <airQuality+0x168>)
 8002030:	f001 fbc6 	bl	80037c0 <HAL_ADCEx_Calibration_Start>
     for(char n=0;n<22;n++)
 8002034:	2300      	movs	r3, #0
 8002036:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 800203a:	e031      	b.n	80020a0 <airQuality+0x78>

     {
         HAL_ADC_Start(&hadc1);
 800203c:	4854      	ldr	r0, [pc, #336]	; (8002190 <airQuality+0x168>)
 800203e:	f001 f84f 	bl	80030e0 <HAL_ADC_Start>
         HAL_ADC_PollForConversion(&hadc1, 10);    //等待转换完成，第二个参数表示超时时间，单位ms
 8002042:	210a      	movs	r1, #10
 8002044:	4852      	ldr	r0, [pc, #328]	; (8002190 <airQuality+0x168>)
 8002046:	f001 f925 	bl	8003294 <HAL_ADC_PollForConversion>
         if(HAL_IS_BIT_SET(HAL_ADC_GetState(&hadc1), HAL_ADC_STATE_REG_EOC))
 800204a:	4851      	ldr	r0, [pc, #324]	; (8002190 <airQuality+0x168>)
 800204c:	f001 fb20 	bl	8003690 <HAL_ADC_GetState>
 8002050:	4603      	mov	r3, r0
 8002052:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002056:	2b00      	cmp	r3, #0
 8002058:	d01d      	beq.n	8002096 <airQuality+0x6e>
         {
             Value[n]=HAL_ADC_GetValue(&hadc1);
 800205a:	484d      	ldr	r0, [pc, #308]	; (8002190 <airQuality+0x168>)
 800205c:	f001 fa14 	bl	8003488 <HAL_ADC_GetValue>
 8002060:	4603      	mov	r3, r0
 8002062:	f897 406b 	ldrb.w	r4, [r7, #107]	; 0x6b
 8002066:	4618      	mov	r0, r3
 8002068:	f7fe fe34 	bl	8000cd4 <__aeabi_ui2f>
 800206c:	4602      	mov	r2, r0
 800206e:	00a3      	lsls	r3, r4, #2
 8002070:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8002074:	440b      	add	r3, r1
 8002076:	f843 2c70 	str.w	r2, [r3, #-112]
             AD_Value += Value[n];
 800207a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8002084:	4413      	add	r3, r2
 8002086:	f853 3c70 	ldr.w	r3, [r3, #-112]
 800208a:	4619      	mov	r1, r3
 800208c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800208e:	f7fe fd71 	bl	8000b74 <__addsf3>
 8002092:	4603      	mov	r3, r0
 8002094:	66fb      	str	r3, [r7, #108]	; 0x6c
     for(char n=0;n<22;n++)
 8002096:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800209a:	3301      	adds	r3, #1
 800209c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 80020a0:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80020a4:	2b15      	cmp	r3, #21
 80020a6:	d9c9      	bls.n	800203c <airQuality+0x14>
         }
     }
     HAL_ADC_Stop(&hadc1);
 80020a8:	4839      	ldr	r0, [pc, #228]	; (8002190 <airQuality+0x168>)
 80020aa:	f001 f8c7 	bl	800323c <HAL_ADC_Stop>

     float max = Value[0];
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	667b      	str	r3, [r7, #100]	; 0x64
     float min = Value[0];
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	663b      	str	r3, [r7, #96]	; 0x60
     for(char n=0;n<22;n++)//取最大值、最小值
 80020b6:	2300      	movs	r3, #0
 80020b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80020bc:	e038      	b.n	8002130 <airQuality+0x108>
     {
         max = (Value[n]<max)?max:Value[n];
 80020be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80020c8:	4413      	add	r3, r2
 80020ca:	f853 3c70 	ldr.w	r3, [r3, #-112]
 80020ce:	4619      	mov	r1, r3
 80020d0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80020d2:	f7ff f813 	bl	80010fc <__aeabi_fcmpgt>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <airQuality+0xb8>
 80020dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80020de:	e007      	b.n	80020f0 <airQuality+0xc8>
 80020e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80020ea:	4413      	add	r3, r2
 80020ec:	f853 3c70 	ldr.w	r3, [r3, #-112]
 80020f0:	667b      	str	r3, [r7, #100]	; 0x64
         min = (min<Value[n])?min:Value[n];
 80020f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80020fc:	4413      	add	r3, r2
 80020fe:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8002102:	4619      	mov	r1, r3
 8002104:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002106:	f7fe ffdb 	bl	80010c0 <__aeabi_fcmplt>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <airQuality+0xec>
 8002110:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002112:	e007      	b.n	8002124 <airQuality+0xfc>
 8002114:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800211e:	4413      	add	r3, r2
 8002120:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8002124:	663b      	str	r3, [r7, #96]	; 0x60
     for(char n=0;n<22;n++)//取最大值、最小值
 8002126:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800212a:	3301      	adds	r3, #1
 800212c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002130:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002134:	2b15      	cmp	r3, #21
 8002136:	d9c2      	bls.n	80020be <airQuality+0x96>
     }

     float result = (float)((AD_Value - max - min) / 20) * (3.311 / 4096);
 8002138:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800213a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800213c:	f7fe fd18 	bl	8000b70 <__aeabi_fsub>
 8002140:	4603      	mov	r3, r0
 8002142:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002144:	4618      	mov	r0, r3
 8002146:	f7fe fd13 	bl	8000b70 <__aeabi_fsub>
 800214a:	4603      	mov	r3, r0
 800214c:	4911      	ldr	r1, [pc, #68]	; (8002194 <airQuality+0x16c>)
 800214e:	4618      	mov	r0, r3
 8002150:	f7fe fecc 	bl	8000eec <__aeabi_fdiv>
 8002154:	4603      	mov	r3, r0
 8002156:	4618      	mov	r0, r3
 8002158:	f7fe f966 	bl	8000428 <__aeabi_f2d>
 800215c:	a30a      	add	r3, pc, #40	; (adr r3, 8002188 <airQuality+0x160>)
 800215e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002162:	f7fe f9b9 	bl	80004d8 <__aeabi_dmul>
 8002166:	4603      	mov	r3, r0
 8002168:	460c      	mov	r4, r1
 800216a:	4618      	mov	r0, r3
 800216c:	4621      	mov	r1, r4
 800216e:	f7fe fcab 	bl	8000ac8 <__aeabi_d2f>
 8002172:	4603      	mov	r3, r0
 8002174:	65bb      	str	r3, [r7, #88]	; 0x58

     return result * 1000;
 8002176:	4908      	ldr	r1, [pc, #32]	; (8002198 <airQuality+0x170>)
 8002178:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800217a:	f7fe fe03 	bl	8000d84 <__aeabi_fmul>
 800217e:	4603      	mov	r3, r0
}
 8002180:	4618      	mov	r0, r3
 8002182:	3774      	adds	r7, #116	; 0x74
 8002184:	46bd      	mov	sp, r7
 8002186:	bd90      	pop	{r4, r7, pc}
 8002188:	916872b0 	.word	0x916872b0
 800218c:	3f4a7ced 	.word	0x3f4a7ced
 8002190:	20000270 	.word	0x20000270
 8002194:	41a00000 	.word	0x41a00000
 8002198:	447a0000 	.word	0x447a0000

0800219c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800219c:	b590      	push	{r4, r7, lr}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021a2:	f000 fe41 	bl	8002e28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021a6:	f000 f8df 	bl	8002368 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021aa:	f7ff fc7b 	bl	8001aa4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80021ae:	f000 fd2b 	bl	8002c08 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80021b2:	f000 fd53 	bl	8002c5c <MX_USART3_UART_Init>
  MX_I2C1_Init();
 80021b6:	f7ff fecb 	bl	8001f50 <MX_I2C1_Init>
  MX_ADC1_Init();
 80021ba:	f7ff fbf9 	bl	80019b0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */


  HAL_UART_Receive_IT(&huart3, uart3_rxbuf, 1);
 80021be:	2201      	movs	r2, #1
 80021c0:	4956      	ldr	r1, [pc, #344]	; (800231c <main+0x180>)
 80021c2:	4857      	ldr	r0, [pc, #348]	; (8002320 <main+0x184>)
 80021c4:	f004 f9a9 	bl	800651a <HAL_UART_Receive_IT>
  BMP180_SetOversampling(BMP180_ULTRA);
 80021c8:	2003      	movs	r0, #3
 80021ca:	f7fe ffe7 	bl	800119c <BMP180_SetOversampling>
  BMP180_UpdateCalibrationData();
 80021ce:	f7fe fff5 	bl	80011bc <BMP180_UpdateCalibrationData>
  MLX90614_Init(&hi2c1);
 80021d2:	4854      	ldr	r0, [pc, #336]	; (8002324 <main+0x188>)
 80021d4:	f000 fc5c 	bl	8002a90 <MLX90614_Init>
  MLX90614_SetEmissivity(0.985);
 80021d8:	4853      	ldr	r0, [pc, #332]	; (8002328 <main+0x18c>)
 80021da:	f000 fbd5 	bl	8002988 <MLX90614_SetEmissivity>
  GPS_Init();
 80021de:	f7ff fcff 	bl	8001be0 <GPS_Init>

HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13, GPIO_PIN_SET);
 80021e2:	2201      	movs	r2, #1
 80021e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021e8:	4850      	ldr	r0, [pc, #320]	; (800232c <main+0x190>)
 80021ea:	f001 fe7a 	bl	8003ee2 <HAL_GPIO_WritePin>


//	  HAL_Delay(1000);
//	  {

	  temperature = BMP180_GetRawTemperature();
 80021ee:	f7ff f8e5 	bl	80013bc <BMP180_GetRawTemperature>
 80021f2:	4603      	mov	r3, r0
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7fe fd71 	bl	8000cdc <__aeabi_i2f>
 80021fa:	4602      	mov	r2, r0
 80021fc:	4b4c      	ldr	r3, [pc, #304]	; (8002330 <main+0x194>)
 80021fe:	601a      	str	r2, [r3, #0]
	  pressure = BMP180_GetPressure();
 8002200:	f7ff f920 	bl	8001444 <BMP180_GetPressure>
 8002204:	4603      	mov	r3, r0
 8002206:	461a      	mov	r2, r3
 8002208:	4b4a      	ldr	r3, [pc, #296]	; (8002334 <main+0x198>)
 800220a:	601a      	str	r2, [r3, #0]
	  MLX90614_ReadAmbientTemperature(&AmbientTemperature);
 800220c:	484a      	ldr	r0, [pc, #296]	; (8002338 <main+0x19c>)
 800220e:	f000 fb5f 	bl	80028d0 <MLX90614_ReadAmbientTemperature>
	  sound = HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_12);
 8002212:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002216:	4849      	ldr	r0, [pc, #292]	; (800233c <main+0x1a0>)
 8002218:	f001 fe4c 	bl	8003eb4 <HAL_GPIO_ReadPin>
 800221c:	4603      	mov	r3, r0
 800221e:	4618      	mov	r0, r3
 8002220:	f7fe fd58 	bl	8000cd4 <__aeabi_ui2f>
 8002224:	4602      	mov	r2, r0
 8002226:	4b46      	ldr	r3, [pc, #280]	; (8002340 <main+0x1a4>)
 8002228:	601a      	str	r2, [r3, #0]
	  MLX90614_ReadObjectTemperature(&ObjectTemperature);
 800222a:	4846      	ldr	r0, [pc, #280]	; (8002344 <main+0x1a8>)
 800222c:	f000 fb6b 	bl	8002906 <MLX90614_ReadObjectTemperature>
	  MLX90614_GetEmissivity(&Emissivity);
 8002230:	4845      	ldr	r0, [pc, #276]	; (8002348 <main+0x1ac>)
 8002232:	f000 fb83 	bl	800293c <MLX90614_GetEmissivity>
	  AirQuality = airQuality();
 8002236:	f7ff fef7 	bl	8002028 <airQuality>
 800223a:	4602      	mov	r2, r0
 800223c:	4b43      	ldr	r3, [pc, #268]	; (800234c <main+0x1b0>)
 800223e:	601a      	str	r2, [r3, #0]

	  DHT11data = DHT_getData (DHT11);
 8002240:	4c43      	ldr	r4, [pc, #268]	; (8002350 <main+0x1b4>)
 8002242:	463b      	mov	r3, r7
 8002244:	2100      	movs	r1, #0
 8002246:	4618      	mov	r0, r3
 8002248:	f7ff fa76 	bl	8001738 <DHT_getData>
 800224c:	4622      	mov	r2, r4
 800224e:	463b      	mov	r3, r7
 8002250:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002254:	e882 0003 	stmia.w	r2, {r0, r1}
	  if (DHT11data.hum != 0) humidity = DHT11data.hum;
 8002258:	4b3d      	ldr	r3, [pc, #244]	; (8002350 <main+0x1b4>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f04f 0100 	mov.w	r1, #0
 8002260:	4618      	mov	r0, r3
 8002262:	f7fe ff23 	bl	80010ac <__aeabi_fcmpeq>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d103      	bne.n	8002274 <main+0xd8>
 800226c:	4b38      	ldr	r3, [pc, #224]	; (8002350 <main+0x1b4>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a38      	ldr	r2, [pc, #224]	; (8002354 <main+0x1b8>)
 8002272:	6013      	str	r3, [r2, #0]



//确定包头
	  package1[0] = 0;
 8002274:	4b38      	ldr	r3, [pc, #224]	; (8002358 <main+0x1bc>)
 8002276:	2200      	movs	r2, #0
 8002278:	601a      	str	r2, [r3, #0]
	  package2[0] = 1;
 800227a:	4b38      	ldr	r3, [pc, #224]	; (800235c <main+0x1c0>)
 800227c:	2201      	movs	r2, #1
 800227e:	601a      	str	r2, [r3, #0]
	  package3[0] = 2;
 8002280:	4b37      	ldr	r3, [pc, #220]	; (8002360 <main+0x1c4>)
 8002282:	2202      	movs	r2, #2
 8002284:	601a      	str	r2, [r3, #0]
//包1
	  package1[1] = pressure;
 8002286:	4b2b      	ldr	r3, [pc, #172]	; (8002334 <main+0x198>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a33      	ldr	r2, [pc, #204]	; (8002358 <main+0x1bc>)
 800228c:	6053      	str	r3, [r2, #4]
	  package1[2] = temperature;
 800228e:	4b28      	ldr	r3, [pc, #160]	; (8002330 <main+0x194>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f7fe ff62 	bl	800115c <__aeabi_f2uiz>
 8002298:	4602      	mov	r2, r0
 800229a:	4b2f      	ldr	r3, [pc, #188]	; (8002358 <main+0x1bc>)
 800229c:	609a      	str	r2, [r3, #8]
	  memcpy(&package1[3],&AmbientTemperature,4);
 800229e:	4b26      	ldr	r3, [pc, #152]	; (8002338 <main+0x19c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a2d      	ldr	r2, [pc, #180]	; (8002358 <main+0x1bc>)
 80022a4:	60d3      	str	r3, [r2, #12]
	  memcpy(&package1[4],&ObjectTemperature,4);
 80022a6:	4b27      	ldr	r3, [pc, #156]	; (8002344 <main+0x1a8>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a2b      	ldr	r2, [pc, #172]	; (8002358 <main+0x1bc>)
 80022ac:	6113      	str	r3, [r2, #16]

//包2
	  memcpy(&package2[1],&AirQuality,4);
 80022ae:	4b27      	ldr	r3, [pc, #156]	; (800234c <main+0x1b0>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a2a      	ldr	r2, [pc, #168]	; (800235c <main+0x1c0>)
 80022b4:	6053      	str	r3, [r2, #4]
	  memcpy(&package2[2],&sound,4);
 80022b6:	4b22      	ldr	r3, [pc, #136]	; (8002340 <main+0x1a4>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a28      	ldr	r2, [pc, #160]	; (800235c <main+0x1c0>)
 80022bc:	6093      	str	r3, [r2, #8]

	  //直接把GPS经度（float类型） memcpy到数据包内
	  memcpy(&package2[3],&GPS.dec_longitude,4);
 80022be:	4b29      	ldr	r3, [pc, #164]	; (8002364 <main+0x1c8>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a26      	ldr	r2, [pc, #152]	; (800235c <main+0x1c0>)
 80022c4:	60d3      	str	r3, [r2, #12]
	  memcpy(&package2[4],&GPS.dec_latitude,4);
 80022c6:	4b27      	ldr	r3, [pc, #156]	; (8002364 <main+0x1c8>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	4a24      	ldr	r2, [pc, #144]	; (800235c <main+0x1c0>)
 80022cc:	6113      	str	r3, [r2, #16]
//包3
	  memcpy(&package3[1],&GPS.msl_altitude,4);
 80022ce:	4b25      	ldr	r3, [pc, #148]	; (8002364 <main+0x1c8>)
 80022d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d2:	4a23      	ldr	r2, [pc, #140]	; (8002360 <main+0x1c4>)
 80022d4:	6053      	str	r3, [r2, #4]
	  memcpy(&package3[2],&GPS.speed_km,4);
 80022d6:	4b23      	ldr	r3, [pc, #140]	; (8002364 <main+0x1c8>)
 80022d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022da:	4a21      	ldr	r2, [pc, #132]	; (8002360 <main+0x1c4>)
 80022dc:	6093      	str	r3, [r2, #8]
	  package3[3] = GPS.satelites;
 80022de:	4b21      	ldr	r3, [pc, #132]	; (8002364 <main+0x1c8>)
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	461a      	mov	r2, r3
 80022e4:	4b1e      	ldr	r3, [pc, #120]	; (8002360 <main+0x1c4>)
 80022e6:	60da      	str	r2, [r3, #12]
	  memcpy(&package3[4],&humidity,4);
 80022e8:	4b1a      	ldr	r3, [pc, #104]	; (8002354 <main+0x1b8>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a1c      	ldr	r2, [pc, #112]	; (8002360 <main+0x1c4>)
 80022ee:	6113      	str	r3, [r2, #16]

	  HAL_UART_Transmit(&huart3,package1,20,0xFFFF);
 80022f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022f4:	2214      	movs	r2, #20
 80022f6:	4918      	ldr	r1, [pc, #96]	; (8002358 <main+0x1bc>)
 80022f8:	4809      	ldr	r0, [pc, #36]	; (8002320 <main+0x184>)
 80022fa:	f004 f87c 	bl	80063f6 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart3,package2,20,0xFFFF);
 80022fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002302:	2214      	movs	r2, #20
 8002304:	4915      	ldr	r1, [pc, #84]	; (800235c <main+0x1c0>)
 8002306:	4806      	ldr	r0, [pc, #24]	; (8002320 <main+0x184>)
 8002308:	f004 f875 	bl	80063f6 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart3,package3,24,0xFFFF);
 800230c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002310:	2218      	movs	r2, #24
 8002312:	4913      	ldr	r1, [pc, #76]	; (8002360 <main+0x1c4>)
 8002314:	4802      	ldr	r0, [pc, #8]	; (8002320 <main+0x184>)
 8002316:	f004 f86e 	bl	80063f6 <HAL_UART_Transmit>
  {
 800231a:	e768      	b.n	80021ee <main+0x52>
 800231c:	200003e4 	.word	0x200003e4
 8002320:	200003f4 	.word	0x200003f4
 8002324:	20000378 	.word	0x20000378
 8002328:	3f7c28f6 	.word	0x3f7c28f6
 800232c:	40011000 	.word	0x40011000
 8002330:	20000204 	.word	0x20000204
 8002334:	2000020c 	.word	0x2000020c
 8002338:	200003e0 	.word	0x200003e0
 800233c:	40010800 	.word	0x40010800
 8002340:	20000200 	.word	0x20000200
 8002344:	200003cc 	.word	0x200003cc
 8002348:	200003d4 	.word	0x200003d4
 800234c:	20000208 	.word	0x20000208
 8002350:	200003e8 	.word	0x200003e8
 8002354:	200003dc 	.word	0x200003dc
 8002358:	20000210 	.word	0x20000210
 800235c:	20000224 	.word	0x20000224
 8002360:	20000238 	.word	0x20000238
 8002364:	200002a0 	.word	0x200002a0

08002368 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b094      	sub	sp, #80	; 0x50
 800236c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800236e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002372:	2228      	movs	r2, #40	; 0x28
 8002374:	2100      	movs	r1, #0
 8002376:	4618      	mov	r0, r3
 8002378:	f004 fc50 	bl	8006c1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800237c:	f107 0314 	add.w	r3, r7, #20
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	605a      	str	r2, [r3, #4]
 8002386:	609a      	str	r2, [r3, #8]
 8002388:	60da      	str	r2, [r3, #12]
 800238a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800238c:	1d3b      	adds	r3, r7, #4
 800238e:	2200      	movs	r2, #0
 8002390:	601a      	str	r2, [r3, #0]
 8002392:	605a      	str	r2, [r3, #4]
 8002394:	609a      	str	r2, [r3, #8]
 8002396:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002398:	2301      	movs	r3, #1
 800239a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800239c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80023a2:	2300      	movs	r3, #0
 80023a4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023a6:	2301      	movs	r3, #1
 80023a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023aa:	2302      	movs	r3, #2
 80023ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80023b4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80023b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023be:	4618      	mov	r0, r3
 80023c0:	f003 fa3e 	bl	8005840 <HAL_RCC_OscConfig>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <SystemClock_Config+0x66>
  {
    Error_Handler();
 80023ca:	f000 f929 	bl	8002620 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023ce:	230f      	movs	r3, #15
 80023d0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023d2:	2302      	movs	r3, #2
 80023d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023d6:	2300      	movs	r3, #0
 80023d8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80023da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023de:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023e0:	2300      	movs	r3, #0
 80023e2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80023e4:	f107 0314 	add.w	r3, r7, #20
 80023e8:	2102      	movs	r1, #2
 80023ea:	4618      	mov	r0, r3
 80023ec:	f003 fca8 	bl	8005d40 <HAL_RCC_ClockConfig>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <SystemClock_Config+0x92>
  {
    Error_Handler();
 80023f6:	f000 f913 	bl	8002620 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80023fa:	2302      	movs	r3, #2
 80023fc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80023fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002402:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002404:	1d3b      	adds	r3, r7, #4
 8002406:	4618      	mov	r0, r3
 8002408:	f003 fe36 	bl	8006078 <HAL_RCCEx_PeriphCLKConfig>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002412:	f000 f905 	bl	8002620 <Error_Handler>
  }
}
 8002416:	bf00      	nop
 8002418:	3750      	adds	r7, #80	; 0x50
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
	...

08002420 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
//串口3连接了蓝牙
	 if(huart->Instance == USART2)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a75      	ldr	r2, [pc, #468]	; (8002604 <HAL_UART_RxCpltCallback+0x1e4>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d101      	bne.n	8002436 <HAL_UART_RxCpltCallback+0x16>
	      {


		 	GPS_UART_CallBack();
 8002432:	f7ff fbe3 	bl	8001bfc <GPS_UART_CallBack>

			    // 重新注册一次，要不然下次收不到了（上个函数内部已经注册）
	      }
	 if(huart->Instance == USART3)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a73      	ldr	r2, [pc, #460]	; (8002608 <HAL_UART_RxCpltCallback+0x1e8>)
 800243c:	4293      	cmp	r3, r2
 800243e:	f040 80dc 	bne.w	80025fa <HAL_UART_RxCpltCallback+0x1da>
	      {
			//收到前驱信息
					if (uart3_rxbuf[0] == 0x03) {
 8002442:	4b72      	ldr	r3, [pc, #456]	; (800260c <HAL_UART_RxCpltCallback+0x1ec>)
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	2b03      	cmp	r3, #3
 8002448:	d102      	bne.n	8002450 <HAL_UART_RxCpltCallback+0x30>
						WheelDrive = 0x03;
 800244a:	4b71      	ldr	r3, [pc, #452]	; (8002610 <HAL_UART_RxCpltCallback+0x1f0>)
 800244c:	2203      	movs	r2, #3
 800244e:	701a      	strb	r2, [r3, #0]
					}
			//收到四驱信息
					if (uart3_rxbuf[0] == 0x04) {
 8002450:	4b6e      	ldr	r3, [pc, #440]	; (800260c <HAL_UART_RxCpltCallback+0x1ec>)
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	2b04      	cmp	r3, #4
 8002456:	d102      	bne.n	800245e <HAL_UART_RxCpltCallback+0x3e>
						WheelDrive = 0x04;
 8002458:	4b6d      	ldr	r3, [pc, #436]	; (8002610 <HAL_UART_RxCpltCallback+0x1f0>)
 800245a:	2204      	movs	r2, #4
 800245c:	701a      	strb	r2, [r3, #0]
					}
			//收到后驱信息
					if (uart3_rxbuf[0] == 0x05) {
 800245e:	4b6b      	ldr	r3, [pc, #428]	; (800260c <HAL_UART_RxCpltCallback+0x1ec>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	2b05      	cmp	r3, #5
 8002464:	d102      	bne.n	800246c <HAL_UART_RxCpltCallback+0x4c>
						WheelDrive = 0x05;
 8002466:	4b6a      	ldr	r3, [pc, #424]	; (8002610 <HAL_UART_RxCpltCallback+0x1f0>)
 8002468:	2205      	movs	r2, #5
 800246a:	701a      	strb	r2, [r3, #0]




			//收到前进信息
			if (uart3_rxbuf[0] == 0xAA) {
 800246c:	4b67      	ldr	r3, [pc, #412]	; (800260c <HAL_UART_RxCpltCallback+0x1ec>)
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	2baa      	cmp	r3, #170	; 0xaa
 8002472:	d139      	bne.n	80024e8 <HAL_UART_RxCpltCallback+0xc8>

				if(WheelDrive == 0x03)
 8002474:	4b66      	ldr	r3, [pc, #408]	; (8002610 <HAL_UART_RxCpltCallback+0x1f0>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	2b03      	cmp	r3, #3
 800247a:	d10c      	bne.n	8002496 <HAL_UART_RxCpltCallback+0x76>
				{
				  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8, GPIO_PIN_RESET);
 800247c:	2200      	movs	r2, #0
 800247e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002482:	4864      	ldr	r0, [pc, #400]	; (8002614 <HAL_UART_RxCpltCallback+0x1f4>)
 8002484:	f001 fd2d 	bl	8003ee2 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9, GPIO_PIN_SET);
 8002488:	2201      	movs	r2, #1
 800248a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800248e:	4861      	ldr	r0, [pc, #388]	; (8002614 <HAL_UART_RxCpltCallback+0x1f4>)
 8002490:	f001 fd27 	bl	8003ee2 <HAL_GPIO_WritePin>
 8002494:	e028      	b.n	80024e8 <HAL_UART_RxCpltCallback+0xc8>
				}
				else if (WheelDrive == 0x05)
 8002496:	4b5e      	ldr	r3, [pc, #376]	; (8002610 <HAL_UART_RxCpltCallback+0x1f0>)
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	2b05      	cmp	r3, #5
 800249c:	d10c      	bne.n	80024b8 <HAL_UART_RxCpltCallback+0x98>
				{
				  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10, GPIO_PIN_SET);
 800249e:	2201      	movs	r2, #1
 80024a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80024a4:	485b      	ldr	r0, [pc, #364]	; (8002614 <HAL_UART_RxCpltCallback+0x1f4>)
 80024a6:	f001 fd1c 	bl	8003ee2 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11, GPIO_PIN_RESET);
 80024aa:	2200      	movs	r2, #0
 80024ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024b0:	4858      	ldr	r0, [pc, #352]	; (8002614 <HAL_UART_RxCpltCallback+0x1f4>)
 80024b2:	f001 fd16 	bl	8003ee2 <HAL_GPIO_WritePin>
 80024b6:	e017      	b.n	80024e8 <HAL_UART_RxCpltCallback+0xc8>
				}
				else {
				  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8, GPIO_PIN_RESET);
 80024b8:	2200      	movs	r2, #0
 80024ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024be:	4855      	ldr	r0, [pc, #340]	; (8002614 <HAL_UART_RxCpltCallback+0x1f4>)
 80024c0:	f001 fd0f 	bl	8003ee2 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9, GPIO_PIN_SET);
 80024c4:	2201      	movs	r2, #1
 80024c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024ca:	4852      	ldr	r0, [pc, #328]	; (8002614 <HAL_UART_RxCpltCallback+0x1f4>)
 80024cc:	f001 fd09 	bl	8003ee2 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10, GPIO_PIN_SET);
 80024d0:	2201      	movs	r2, #1
 80024d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80024d6:	484f      	ldr	r0, [pc, #316]	; (8002614 <HAL_UART_RxCpltCallback+0x1f4>)
 80024d8:	f001 fd03 	bl	8003ee2 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11, GPIO_PIN_RESET);
 80024dc:	2200      	movs	r2, #0
 80024de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024e2:	484c      	ldr	r0, [pc, #304]	; (8002614 <HAL_UART_RxCpltCallback+0x1f4>)
 80024e4:	f001 fcfd 	bl	8003ee2 <HAL_GPIO_WritePin>
				}
			}
			//收到后退信息
			if (uart3_rxbuf[0] == 0xBB) {
 80024e8:	4b48      	ldr	r3, [pc, #288]	; (800260c <HAL_UART_RxCpltCallback+0x1ec>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	2bbb      	cmp	r3, #187	; 0xbb
 80024ee:	d139      	bne.n	8002564 <HAL_UART_RxCpltCallback+0x144>

				if(WheelDrive == 0x03)
 80024f0:	4b47      	ldr	r3, [pc, #284]	; (8002610 <HAL_UART_RxCpltCallback+0x1f0>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	2b03      	cmp	r3, #3
 80024f6:	d10c      	bne.n	8002512 <HAL_UART_RxCpltCallback+0xf2>
				{
				  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8, GPIO_PIN_SET);
 80024f8:	2201      	movs	r2, #1
 80024fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024fe:	4845      	ldr	r0, [pc, #276]	; (8002614 <HAL_UART_RxCpltCallback+0x1f4>)
 8002500:	f001 fcef 	bl	8003ee2 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9, GPIO_PIN_RESET);
 8002504:	2200      	movs	r2, #0
 8002506:	f44f 7100 	mov.w	r1, #512	; 0x200
 800250a:	4842      	ldr	r0, [pc, #264]	; (8002614 <HAL_UART_RxCpltCallback+0x1f4>)
 800250c:	f001 fce9 	bl	8003ee2 <HAL_GPIO_WritePin>
 8002510:	e028      	b.n	8002564 <HAL_UART_RxCpltCallback+0x144>
				}
				else if (WheelDrive == 0x05)
 8002512:	4b3f      	ldr	r3, [pc, #252]	; (8002610 <HAL_UART_RxCpltCallback+0x1f0>)
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	2b05      	cmp	r3, #5
 8002518:	d10c      	bne.n	8002534 <HAL_UART_RxCpltCallback+0x114>
				{
				  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10, GPIO_PIN_RESET);
 800251a:	2200      	movs	r2, #0
 800251c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002520:	483c      	ldr	r0, [pc, #240]	; (8002614 <HAL_UART_RxCpltCallback+0x1f4>)
 8002522:	f001 fcde 	bl	8003ee2 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11, GPIO_PIN_SET);
 8002526:	2201      	movs	r2, #1
 8002528:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800252c:	4839      	ldr	r0, [pc, #228]	; (8002614 <HAL_UART_RxCpltCallback+0x1f4>)
 800252e:	f001 fcd8 	bl	8003ee2 <HAL_GPIO_WritePin>
 8002532:	e017      	b.n	8002564 <HAL_UART_RxCpltCallback+0x144>
				}
				else {
				  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8, GPIO_PIN_SET);
 8002534:	2201      	movs	r2, #1
 8002536:	f44f 7180 	mov.w	r1, #256	; 0x100
 800253a:	4836      	ldr	r0, [pc, #216]	; (8002614 <HAL_UART_RxCpltCallback+0x1f4>)
 800253c:	f001 fcd1 	bl	8003ee2 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9, GPIO_PIN_RESET);
 8002540:	2200      	movs	r2, #0
 8002542:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002546:	4833      	ldr	r0, [pc, #204]	; (8002614 <HAL_UART_RxCpltCallback+0x1f4>)
 8002548:	f001 fccb 	bl	8003ee2 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10, GPIO_PIN_RESET);
 800254c:	2200      	movs	r2, #0
 800254e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002552:	4830      	ldr	r0, [pc, #192]	; (8002614 <HAL_UART_RxCpltCallback+0x1f4>)
 8002554:	f001 fcc5 	bl	8003ee2 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11, GPIO_PIN_SET);
 8002558:	2201      	movs	r2, #1
 800255a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800255e:	482d      	ldr	r0, [pc, #180]	; (8002614 <HAL_UART_RxCpltCallback+0x1f4>)
 8002560:	f001 fcbf 	bl	8003ee2 <HAL_GPIO_WritePin>
				}

			}

			//收到左转信息
					if (uart3_rxbuf[0] == 0xCC) {
 8002564:	4b29      	ldr	r3, [pc, #164]	; (800260c <HAL_UART_RxCpltCallback+0x1ec>)
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	2bcc      	cmp	r3, #204	; 0xcc
 800256a:	d109      	bne.n	8002580 <HAL_UART_RxCpltCallback+0x160>

						  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0, GPIO_PIN_RESET);
 800256c:	2200      	movs	r2, #0
 800256e:	2101      	movs	r1, #1
 8002570:	4829      	ldr	r0, [pc, #164]	; (8002618 <HAL_UART_RxCpltCallback+0x1f8>)
 8002572:	f001 fcb6 	bl	8003ee2 <HAL_GPIO_WritePin>
						  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1, GPIO_PIN_SET);
 8002576:	2201      	movs	r2, #1
 8002578:	2102      	movs	r1, #2
 800257a:	4827      	ldr	r0, [pc, #156]	; (8002618 <HAL_UART_RxCpltCallback+0x1f8>)
 800257c:	f001 fcb1 	bl	8003ee2 <HAL_GPIO_WritePin>
					}



			//收到右转信息
					if (uart3_rxbuf[0] == 0xDD) {
 8002580:	4b22      	ldr	r3, [pc, #136]	; (800260c <HAL_UART_RxCpltCallback+0x1ec>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	2bdd      	cmp	r3, #221	; 0xdd
 8002586:	d109      	bne.n	800259c <HAL_UART_RxCpltCallback+0x17c>

						  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0, GPIO_PIN_SET);
 8002588:	2201      	movs	r2, #1
 800258a:	2101      	movs	r1, #1
 800258c:	4822      	ldr	r0, [pc, #136]	; (8002618 <HAL_UART_RxCpltCallback+0x1f8>)
 800258e:	f001 fca8 	bl	8003ee2 <HAL_GPIO_WritePin>
						  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1, GPIO_PIN_RESET);
 8002592:	2200      	movs	r2, #0
 8002594:	2102      	movs	r1, #2
 8002596:	4820      	ldr	r0, [pc, #128]	; (8002618 <HAL_UART_RxCpltCallback+0x1f8>)
 8002598:	f001 fca3 	bl	8003ee2 <HAL_GPIO_WritePin>

					}
			//收到右转信息
			if (uart3_rxbuf[0] == 0x02) {
 800259c:	4b1b      	ldr	r3, [pc, #108]	; (800260c <HAL_UART_RxCpltCallback+0x1ec>)
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d109      	bne.n	80025b8 <HAL_UART_RxCpltCallback+0x198>

				  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0, GPIO_PIN_RESET);
 80025a4:	2200      	movs	r2, #0
 80025a6:	2101      	movs	r1, #1
 80025a8:	481b      	ldr	r0, [pc, #108]	; (8002618 <HAL_UART_RxCpltCallback+0x1f8>)
 80025aa:	f001 fc9a 	bl	8003ee2 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1, GPIO_PIN_RESET);
 80025ae:	2200      	movs	r2, #0
 80025b0:	2102      	movs	r1, #2
 80025b2:	4819      	ldr	r0, [pc, #100]	; (8002618 <HAL_UART_RxCpltCallback+0x1f8>)
 80025b4:	f001 fc95 	bl	8003ee2 <HAL_GPIO_WritePin>




			//停止信息（待机 00 ）
			if (uart3_rxbuf[0] == 0x01) {
 80025b8:	4b14      	ldr	r3, [pc, #80]	; (800260c <HAL_UART_RxCpltCallback+0x1ec>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d117      	bne.n	80025f0 <HAL_UART_RxCpltCallback+0x1d0>

				  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8, GPIO_PIN_RESET);
 80025c0:	2200      	movs	r2, #0
 80025c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025c6:	4813      	ldr	r0, [pc, #76]	; (8002614 <HAL_UART_RxCpltCallback+0x1f4>)
 80025c8:	f001 fc8b 	bl	8003ee2 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9, GPIO_PIN_RESET);
 80025cc:	2200      	movs	r2, #0
 80025ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025d2:	4810      	ldr	r0, [pc, #64]	; (8002614 <HAL_UART_RxCpltCallback+0x1f4>)
 80025d4:	f001 fc85 	bl	8003ee2 <HAL_GPIO_WritePin>
				  	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10, GPIO_PIN_RESET);
 80025d8:	2200      	movs	r2, #0
 80025da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80025de:	480d      	ldr	r0, [pc, #52]	; (8002614 <HAL_UART_RxCpltCallback+0x1f4>)
 80025e0:	f001 fc7f 	bl	8003ee2 <HAL_GPIO_WritePin>
				  	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11, GPIO_PIN_RESET);
 80025e4:	2200      	movs	r2, #0
 80025e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025ea:	480a      	ldr	r0, [pc, #40]	; (8002614 <HAL_UART_RxCpltCallback+0x1f4>)
 80025ec:	f001 fc79 	bl	8003ee2 <HAL_GPIO_WritePin>

			}

			HAL_UART_Receive_IT(&huart3, uart3_rxbuf, 1);       // 重新注册一次，要不然下次收不到了
 80025f0:	2201      	movs	r2, #1
 80025f2:	4906      	ldr	r1, [pc, #24]	; (800260c <HAL_UART_RxCpltCallback+0x1ec>)
 80025f4:	4809      	ldr	r0, [pc, #36]	; (800261c <HAL_UART_RxCpltCallback+0x1fc>)
 80025f6:	f003 ff90 	bl	800651a <HAL_UART_Receive_IT>
	      }



}
 80025fa:	bf00      	nop
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	40004400 	.word	0x40004400
 8002608:	40004800 	.word	0x40004800
 800260c:	200003e4 	.word	0x200003e4
 8002610:	20000000 	.word	0x20000000
 8002614:	40010800 	.word	0x40010800
 8002618:	40010c00 	.word	0x40010c00
 800261c:	200003f4 	.word	0x200003f4

08002620 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002624:	bf00      	nop
 8002626:	46bd      	mov	sp, r7
 8002628:	bc80      	pop	{r7}
 800262a:	4770      	bx	lr

0800262c <MLX90614_Read16>:

uint8_t ObjectTemperature;
uint8_t AmbientTemperature;

MLX90614_STATUS MLX90614_Read16(uint8_t Register, uint16_t *Result)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b088      	sub	sp, #32
 8002630:	af04      	add	r7, sp, #16
 8002632:	4603      	mov	r3, r0
 8002634:	6039      	str	r1, [r7, #0]
 8002636:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp[2];

	if(HAL_OK != HAL_I2C_Mem_Read(mlx90614_i2c, MLX90614_DEFAULT_ADDRESS, Register, 1, tmp, 2, 10))
 8002638:	4b11      	ldr	r3, [pc, #68]	; (8002680 <MLX90614_Read16+0x54>)
 800263a:	6818      	ldr	r0, [r3, #0]
 800263c:	79fb      	ldrb	r3, [r7, #7]
 800263e:	b29a      	uxth	r2, r3
 8002640:	230a      	movs	r3, #10
 8002642:	9302      	str	r3, [sp, #8]
 8002644:	2302      	movs	r3, #2
 8002646:	9301      	str	r3, [sp, #4]
 8002648:	f107 030c 	add.w	r3, r7, #12
 800264c:	9300      	str	r3, [sp, #0]
 800264e:	2301      	movs	r3, #1
 8002650:	21b4      	movs	r1, #180	; 0xb4
 8002652:	f002 f9e9 	bl	8004a28 <HAL_I2C_Mem_Read>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <MLX90614_Read16+0x34>
	{
		return MLX90614_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e00a      	b.n	8002676 <MLX90614_Read16+0x4a>
	}

	*Result = (uint16_t)tmp[1]<<8 | tmp[0];
 8002660:	7b7b      	ldrb	r3, [r7, #13]
 8002662:	021b      	lsls	r3, r3, #8
 8002664:	b21a      	sxth	r2, r3
 8002666:	7b3b      	ldrb	r3, [r7, #12]
 8002668:	b21b      	sxth	r3, r3
 800266a:	4313      	orrs	r3, r2
 800266c:	b21b      	sxth	r3, r3
 800266e:	b29a      	uxth	r2, r3
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	801a      	strh	r2, [r3, #0]

	return MLX90614_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	200003f0 	.word	0x200003f0

08002684 <MLX90614_Read16Eeprom>:

MLX90614_STATUS MLX90614_Read16Eeprom(uint8_t Address, uint16_t *Result)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b088      	sub	sp, #32
 8002688:	af04      	add	r7, sp, #16
 800268a:	4603      	mov	r3, r0
 800268c:	6039      	str	r1, [r7, #0]
 800268e:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp[2];

	Address &= 0x1F;
 8002690:	79fb      	ldrb	r3, [r7, #7]
 8002692:	f003 031f 	and.w	r3, r3, #31
 8002696:	71fb      	strb	r3, [r7, #7]
	Address |= 0x20;
 8002698:	79fb      	ldrb	r3, [r7, #7]
 800269a:	f043 0320 	orr.w	r3, r3, #32
 800269e:	71fb      	strb	r3, [r7, #7]

	if(HAL_OK != HAL_I2C_Mem_Read(mlx90614_i2c, MLX90614_DEFAULT_ADDRESS, Address, 1, tmp, 2, 10))
 80026a0:	4b11      	ldr	r3, [pc, #68]	; (80026e8 <MLX90614_Read16Eeprom+0x64>)
 80026a2:	6818      	ldr	r0, [r3, #0]
 80026a4:	79fb      	ldrb	r3, [r7, #7]
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	230a      	movs	r3, #10
 80026aa:	9302      	str	r3, [sp, #8]
 80026ac:	2302      	movs	r3, #2
 80026ae:	9301      	str	r3, [sp, #4]
 80026b0:	f107 030c 	add.w	r3, r7, #12
 80026b4:	9300      	str	r3, [sp, #0]
 80026b6:	2301      	movs	r3, #1
 80026b8:	21b4      	movs	r1, #180	; 0xb4
 80026ba:	f002 f9b5 	bl	8004a28 <HAL_I2C_Mem_Read>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <MLX90614_Read16Eeprom+0x44>
	{
		return MLX90614_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e00a      	b.n	80026de <MLX90614_Read16Eeprom+0x5a>
	}

	*Result = (uint16_t)tmp[1]<<8 | tmp[0];
 80026c8:	7b7b      	ldrb	r3, [r7, #13]
 80026ca:	021b      	lsls	r3, r3, #8
 80026cc:	b21a      	sxth	r2, r3
 80026ce:	7b3b      	ldrb	r3, [r7, #12]
 80026d0:	b21b      	sxth	r3, r3
 80026d2:	4313      	orrs	r3, r2
 80026d4:	b21b      	sxth	r3, r3
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	801a      	strh	r2, [r3, #0]

	return MLX90614_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	200003f0 	.word	0x200003f0

080026ec <crc8>:


uint8_t crc8(uint8_t InCrc, uint8_t InData)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	4603      	mov	r3, r0
 80026f4:	460a      	mov	r2, r1
 80026f6:	71fb      	strb	r3, [r7, #7]
 80026f8:	4613      	mov	r3, r2
 80026fa:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	uint8_t Data;
	Data = InCrc ^= InData;
 80026fc:	79fa      	ldrb	r2, [r7, #7]
 80026fe:	79bb      	ldrb	r3, [r7, #6]
 8002700:	4053      	eors	r3, r2
 8002702:	71fb      	strb	r3, [r7, #7]
 8002704:	79fb      	ldrb	r3, [r7, #7]
 8002706:	73bb      	strb	r3, [r7, #14]
	for ( i = 0; i < 8; i++ )
 8002708:	2300      	movs	r3, #0
 800270a:	73fb      	strb	r3, [r7, #15]
 800270c:	e011      	b.n	8002732 <crc8+0x46>
	{
		if (( Data & 0x80 ) != 0 )
 800270e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002712:	2b00      	cmp	r3, #0
 8002714:	da07      	bge.n	8002726 <crc8+0x3a>
		{
			Data <<= 1;
 8002716:	7bbb      	ldrb	r3, [r7, #14]
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	73bb      	strb	r3, [r7, #14]
			Data ^= 0x07;
 800271c:	7bbb      	ldrb	r3, [r7, #14]
 800271e:	f083 0307 	eor.w	r3, r3, #7
 8002722:	73bb      	strb	r3, [r7, #14]
 8002724:	e002      	b.n	800272c <crc8+0x40>
		}
		else
		{
			Data <<= 1;
 8002726:	7bbb      	ldrb	r3, [r7, #14]
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	73bb      	strb	r3, [r7, #14]
	for ( i = 0; i < 8; i++ )
 800272c:	7bfb      	ldrb	r3, [r7, #15]
 800272e:	3301      	adds	r3, #1
 8002730:	73fb      	strb	r3, [r7, #15]
 8002732:	7bfb      	ldrb	r3, [r7, #15]
 8002734:	2b07      	cmp	r3, #7
 8002736:	d9ea      	bls.n	800270e <crc8+0x22>
		}
	}
	return Data;
 8002738:	7bbb      	ldrb	r3, [r7, #14]
}
 800273a:	4618      	mov	r0, r3
 800273c:	3714      	adds	r7, #20
 800273e:	46bd      	mov	sp, r7
 8002740:	bc80      	pop	{r7}
 8002742:	4770      	bx	lr

08002744 <MLX90614_Write16Crc>:

MLX90614_STATUS MLX90614_Write16Crc(uint8_t Address, uint16_t Value)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b088      	sub	sp, #32
 8002748:	af04      	add	r7, sp, #16
 800274a:	4603      	mov	r3, r0
 800274c:	460a      	mov	r2, r1
 800274e:	71fb      	strb	r3, [r7, #7]
 8002750:	4613      	mov	r3, r2
 8002752:	80bb      	strh	r3, [r7, #4]
	uint8_t Crc;
	uint8_t tmp[3];

	Address &= 0x1F;
 8002754:	79fb      	ldrb	r3, [r7, #7]
 8002756:	f003 031f 	and.w	r3, r3, #31
 800275a:	71fb      	strb	r3, [r7, #7]
	Address |= 0x20;
 800275c:	79fb      	ldrb	r3, [r7, #7]
 800275e:	f043 0320 	orr.w	r3, r3, #32
 8002762:	71fb      	strb	r3, [r7, #7]

	Crc = crc8(0, MLX90614_DEFAULT_ADDRESS);
 8002764:	21b4      	movs	r1, #180	; 0xb4
 8002766:	2000      	movs	r0, #0
 8002768:	f7ff ffc0 	bl	80026ec <crc8>
 800276c:	4603      	mov	r3, r0
 800276e:	73fb      	strb	r3, [r7, #15]
	Crc = crc8(Crc, Address);
 8002770:	79fa      	ldrb	r2, [r7, #7]
 8002772:	7bfb      	ldrb	r3, [r7, #15]
 8002774:	4611      	mov	r1, r2
 8002776:	4618      	mov	r0, r3
 8002778:	f7ff ffb8 	bl	80026ec <crc8>
 800277c:	4603      	mov	r3, r0
 800277e:	73fb      	strb	r3, [r7, #15]
	Crc = crc8(Crc, Value & 0xFF);
 8002780:	88bb      	ldrh	r3, [r7, #4]
 8002782:	b2da      	uxtb	r2, r3
 8002784:	7bfb      	ldrb	r3, [r7, #15]
 8002786:	4611      	mov	r1, r2
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff ffaf 	bl	80026ec <crc8>
 800278e:	4603      	mov	r3, r0
 8002790:	73fb      	strb	r3, [r7, #15]
	Crc = crc8(Crc, Value>>8);
 8002792:	88bb      	ldrh	r3, [r7, #4]
 8002794:	0a1b      	lsrs	r3, r3, #8
 8002796:	b29b      	uxth	r3, r3
 8002798:	b2da      	uxtb	r2, r3
 800279a:	7bfb      	ldrb	r3, [r7, #15]
 800279c:	4611      	mov	r1, r2
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff ffa4 	bl	80026ec <crc8>
 80027a4:	4603      	mov	r3, r0
 80027a6:	73fb      	strb	r3, [r7, #15]

	tmp[0] = Value & 0xFF;
 80027a8:	88bb      	ldrh	r3, [r7, #4]
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	733b      	strb	r3, [r7, #12]
	tmp[1] = Value>>8;
 80027ae:	88bb      	ldrh	r3, [r7, #4]
 80027b0:	0a1b      	lsrs	r3, r3, #8
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	737b      	strb	r3, [r7, #13]
	tmp[2] = Crc;
 80027b8:	7bfb      	ldrb	r3, [r7, #15]
 80027ba:	73bb      	strb	r3, [r7, #14]

	if(HAL_OK != HAL_I2C_Mem_Write(mlx90614_i2c, MLX90614_DEFAULT_ADDRESS, Address, 1, tmp, 3, 10))
 80027bc:	4b0c      	ldr	r3, [pc, #48]	; (80027f0 <MLX90614_Write16Crc+0xac>)
 80027be:	6818      	ldr	r0, [r3, #0]
 80027c0:	79fb      	ldrb	r3, [r7, #7]
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	230a      	movs	r3, #10
 80027c6:	9302      	str	r3, [sp, #8]
 80027c8:	2303      	movs	r3, #3
 80027ca:	9301      	str	r3, [sp, #4]
 80027cc:	f107 030c 	add.w	r3, r7, #12
 80027d0:	9300      	str	r3, [sp, #0]
 80027d2:	2301      	movs	r3, #1
 80027d4:	21b4      	movs	r1, #180	; 0xb4
 80027d6:	f002 f82d 	bl	8004834 <HAL_I2C_Mem_Write>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <MLX90614_Write16Crc+0xa0>
	{
		return MLX90614_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e000      	b.n	80027e6 <MLX90614_Write16Crc+0xa2>
	}

	return MLX90614_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	200003f0 	.word	0x200003f0

080027f4 <MLX90614_Write16Eeprom>:

MLX90614_STATUS MLX90614_Write16Eeprom(uint8_t Address, uint16_t Value)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	4603      	mov	r3, r0
 80027fc:	460a      	mov	r2, r1
 80027fe:	71fb      	strb	r3, [r7, #7]
 8002800:	4613      	mov	r3, r2
 8002802:	80bb      	strh	r3, [r7, #4]

	uint16_t Verify;

	if(MLX90614_OK != MLX90614_Write16Crc(Address, 0))
 8002804:	79fb      	ldrb	r3, [r7, #7]
 8002806:	2100      	movs	r1, #0
 8002808:	4618      	mov	r0, r3
 800280a:	f7ff ff9b 	bl	8002744 <MLX90614_Write16Crc>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d001      	beq.n	8002818 <MLX90614_Write16Eeprom+0x24>
	{
		return MLX90614_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e01e      	b.n	8002856 <MLX90614_Write16Eeprom+0x62>
	}

	HAL_Delay(10); // Erasing time ~5ms;
 8002818:	200a      	movs	r0, #10
 800281a:	f000 fb67 	bl	8002eec <HAL_Delay>

	if(MLX90614_OK != MLX90614_Write16Crc(Address, Value))
 800281e:	88ba      	ldrh	r2, [r7, #4]
 8002820:	79fb      	ldrb	r3, [r7, #7]
 8002822:	4611      	mov	r1, r2
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff ff8d 	bl	8002744 <MLX90614_Write16Crc>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <MLX90614_Write16Eeprom+0x40>
	{
		return MLX90614_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e010      	b.n	8002856 <MLX90614_Write16Eeprom+0x62>
	}

	HAL_Delay(10); // Writing time ~5ms;
 8002834:	200a      	movs	r0, #10
 8002836:	f000 fb59 	bl	8002eec <HAL_Delay>

	MLX90614_Read16Eeprom(Address, &Verify);
 800283a:	f107 020e 	add.w	r2, r7, #14
 800283e:	79fb      	ldrb	r3, [r7, #7]
 8002840:	4611      	mov	r1, r2
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff ff1e 	bl	8002684 <MLX90614_Read16Eeprom>
	if(Verify != Value)
 8002848:	89fb      	ldrh	r3, [r7, #14]
 800284a:	88ba      	ldrh	r2, [r7, #4]
 800284c:	429a      	cmp	r2, r3
 800284e:	d001      	beq.n	8002854 <MLX90614_Write16Eeprom+0x60>
	{
		return MLX90614_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e000      	b.n	8002856 <MLX90614_Write16Eeprom+0x62>
	}

	return MLX90614_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
	...

08002860 <MLX90614_KelvinToCelsius>:

float MLX90614_KelvinToCelsius(uint16_t Temperature)
{
 8002860:	b590      	push	{r4, r7, lr}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	4603      	mov	r3, r0
 8002868:	80fb      	strh	r3, [r7, #6]
	float Result;

	Result = (float)Temperature * 0.02;
 800286a:	88fb      	ldrh	r3, [r7, #6]
 800286c:	4618      	mov	r0, r3
 800286e:	f7fe fa31 	bl	8000cd4 <__aeabi_ui2f>
 8002872:	4603      	mov	r3, r0
 8002874:	4618      	mov	r0, r3
 8002876:	f7fd fdd7 	bl	8000428 <__aeabi_f2d>
 800287a:	a311      	add	r3, pc, #68	; (adr r3, 80028c0 <MLX90614_KelvinToCelsius+0x60>)
 800287c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002880:	f7fd fe2a 	bl	80004d8 <__aeabi_dmul>
 8002884:	4603      	mov	r3, r0
 8002886:	460c      	mov	r4, r1
 8002888:	4618      	mov	r0, r3
 800288a:	4621      	mov	r1, r4
 800288c:	f7fe f91c 	bl	8000ac8 <__aeabi_d2f>
 8002890:	4603      	mov	r3, r0
 8002892:	60fb      	str	r3, [r7, #12]
	Result = Result - 273.15;
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	f7fd fdc7 	bl	8000428 <__aeabi_f2d>
 800289a:	a30b      	add	r3, pc, #44	; (adr r3, 80028c8 <MLX90614_KelvinToCelsius+0x68>)
 800289c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a0:	f7fd fc62 	bl	8000168 <__aeabi_dsub>
 80028a4:	4603      	mov	r3, r0
 80028a6:	460c      	mov	r4, r1
 80028a8:	4618      	mov	r0, r3
 80028aa:	4621      	mov	r1, r4
 80028ac:	f7fe f90c 	bl	8000ac8 <__aeabi_d2f>
 80028b0:	4603      	mov	r3, r0
 80028b2:	60fb      	str	r3, [r7, #12]

	return Result;
 80028b4:	68fb      	ldr	r3, [r7, #12]
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3714      	adds	r7, #20
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd90      	pop	{r4, r7, pc}
 80028be:	bf00      	nop
 80028c0:	47ae147b 	.word	0x47ae147b
 80028c4:	3f947ae1 	.word	0x3f947ae1
 80028c8:	66666666 	.word	0x66666666
 80028cc:	40711266 	.word	0x40711266

080028d0 <MLX90614_ReadAmbientTemperature>:

MLX90614_STATUS MLX90614_ReadAmbientTemperature(float *Temperature)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
	uint16_t tmp;

	if(MLX90614_OK != MLX90614_Read16(MLX90614_TA, &tmp))
 80028d8:	f107 030e 	add.w	r3, r7, #14
 80028dc:	4619      	mov	r1, r3
 80028de:	2006      	movs	r0, #6
 80028e0:	f7ff fea4 	bl	800262c <MLX90614_Read16>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <MLX90614_ReadAmbientTemperature+0x1e>
	{
		return MLX90614_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e007      	b.n	80028fe <MLX90614_ReadAmbientTemperature+0x2e>
	}

	*Temperature = MLX90614_KelvinToCelsius(tmp);
 80028ee:	89fb      	ldrh	r3, [r7, #14]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7ff ffb5 	bl	8002860 <MLX90614_KelvinToCelsius>
 80028f6:	4602      	mov	r2, r0
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	601a      	str	r2, [r3, #0]

	return MLX90614_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3710      	adds	r7, #16
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <MLX90614_ReadObjectTemperature>:

MLX90614_STATUS MLX90614_ReadObjectTemperature(float *Temperature)
{
 8002906:	b580      	push	{r7, lr}
 8002908:	b084      	sub	sp, #16
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
	uint16_t tmp;

	if(MLX90614_OK != MLX90614_Read16(MLX90614_TOBJ1, &tmp))
 800290e:	f107 030e 	add.w	r3, r7, #14
 8002912:	4619      	mov	r1, r3
 8002914:	2007      	movs	r0, #7
 8002916:	f7ff fe89 	bl	800262c <MLX90614_Read16>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d001      	beq.n	8002924 <MLX90614_ReadObjectTemperature+0x1e>
	{
		return MLX90614_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e007      	b.n	8002934 <MLX90614_ReadObjectTemperature+0x2e>
	}

	*Temperature = MLX90614_KelvinToCelsius(tmp);
 8002924:	89fb      	ldrh	r3, [r7, #14]
 8002926:	4618      	mov	r0, r3
 8002928:	f7ff ff9a 	bl	8002860 <MLX90614_KelvinToCelsius>
 800292c:	4602      	mov	r2, r0
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	601a      	str	r2, [r3, #0]

	return MLX90614_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	3710      	adds	r7, #16
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <MLX90614_GetEmissivity>:
	return MLX90614_OK;
}


MLX90614_STATUS MLX90614_GetEmissivity(float *Emissivity)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
	uint16_t tmp;

	if(MLX90614_OK != MLX90614_Read16Eeprom(MLX90614_EMISS, &tmp))
 8002944:	f107 030e 	add.w	r3, r7, #14
 8002948:	4619      	mov	r1, r3
 800294a:	2004      	movs	r0, #4
 800294c:	f7ff fe9a 	bl	8002684 <MLX90614_Read16Eeprom>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <MLX90614_GetEmissivity+0x1e>
	{
		return MLX90614_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e00d      	b.n	8002976 <MLX90614_GetEmissivity+0x3a>
	}

	*Emissivity = (float)tmp/65535.0;
 800295a:	89fb      	ldrh	r3, [r7, #14]
 800295c:	4618      	mov	r0, r3
 800295e:	f7fe f9b9 	bl	8000cd4 <__aeabi_ui2f>
 8002962:	4603      	mov	r3, r0
 8002964:	4906      	ldr	r1, [pc, #24]	; (8002980 <MLX90614_GetEmissivity+0x44>)
 8002966:	4618      	mov	r0, r3
 8002968:	f7fe fac0 	bl	8000eec <__aeabi_fdiv>
 800296c:	4603      	mov	r3, r0
 800296e:	461a      	mov	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	601a      	str	r2, [r3, #0]

	return MLX90614_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	477fff00 	.word	0x477fff00
 8002984:	00000000 	.word	0x00000000

08002988 <MLX90614_SetEmissivity>:


MLX90614_STATUS MLX90614_SetEmissivity(float Emissivity)
{
 8002988:	b590      	push	{r4, r7, lr}
 800298a:	b085      	sub	sp, #20
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
	if (Emissivity < 0.1 || Emissivity > 1)
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f7fd fd49 	bl	8000428 <__aeabi_f2d>
 8002996:	a33a      	add	r3, pc, #232	; (adr r3, 8002a80 <MLX90614_SetEmissivity+0xf8>)
 8002998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800299c:	f7fe f80e 	bl	80009bc <__aeabi_dcmplt>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d107      	bne.n	80029b6 <MLX90614_SetEmissivity+0x2e>
 80029a6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f7fe fba6 	bl	80010fc <__aeabi_fcmpgt>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <MLX90614_SetEmissivity+0x32>
		return MLX90614_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e05b      	b.n	8002a72 <MLX90614_SetEmissivity+0xea>
	uint16_t current_emissivity;
	uint16_t current_calibration;
	uint16_t new_emissivity;
	uint16_t new_calibration;

	MLX90614_Read16Eeprom(MLX90614_EMISS, &current_emissivity);
 80029ba:	f107 030a 	add.w	r3, r7, #10
 80029be:	4619      	mov	r1, r3
 80029c0:	2004      	movs	r0, #4
 80029c2:	f7ff fe5f 	bl	8002684 <MLX90614_Read16Eeprom>
	MLX90614_Read16Eeprom(MLX90614_EMISS_CALIBRATION, &current_calibration);
 80029c6:	f107 0308 	add.w	r3, r7, #8
 80029ca:	4619      	mov	r1, r3
 80029cc:	200f      	movs	r0, #15
 80029ce:	f7ff fe59 	bl	8002684 <MLX90614_Read16Eeprom>

	new_emissivity = (uint16_t)round(65535.0 * Emissivity);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f7fd fd28 	bl	8000428 <__aeabi_f2d>
 80029d8:	a32b      	add	r3, pc, #172	; (adr r3, 8002a88 <MLX90614_SetEmissivity+0x100>)
 80029da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029de:	f7fd fd7b 	bl	80004d8 <__aeabi_dmul>
 80029e2:	4603      	mov	r3, r0
 80029e4:	460c      	mov	r4, r1
 80029e6:	4618      	mov	r0, r3
 80029e8:	4621      	mov	r1, r4
 80029ea:	f007 f979 	bl	8009ce0 <round>
 80029ee:	4603      	mov	r3, r0
 80029f0:	460c      	mov	r4, r1
 80029f2:	4618      	mov	r0, r3
 80029f4:	4621      	mov	r1, r4
 80029f6:	f7fe f847 	bl	8000a88 <__aeabi_d2uiz>
 80029fa:	4603      	mov	r3, r0
 80029fc:	81fb      	strh	r3, [r7, #14]

	if(new_emissivity == current_emissivity)
 80029fe:	897b      	ldrh	r3, [r7, #10]
 8002a00:	89fa      	ldrh	r2, [r7, #14]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d101      	bne.n	8002a0a <MLX90614_SetEmissivity+0x82>
	{
		return MLX90614_OK;
 8002a06:	2300      	movs	r3, #0
 8002a08:	e033      	b.n	8002a72 <MLX90614_SetEmissivity+0xea>
	}

	new_calibration = (uint16_t)(((float)current_emissivity / new_emissivity) * current_calibration);
 8002a0a:	897b      	ldrh	r3, [r7, #10]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7fe f961 	bl	8000cd4 <__aeabi_ui2f>
 8002a12:	4604      	mov	r4, r0
 8002a14:	89fb      	ldrh	r3, [r7, #14]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7fe f960 	bl	8000cdc <__aeabi_i2f>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	4619      	mov	r1, r3
 8002a20:	4620      	mov	r0, r4
 8002a22:	f7fe fa63 	bl	8000eec <__aeabi_fdiv>
 8002a26:	4603      	mov	r3, r0
 8002a28:	461c      	mov	r4, r3
 8002a2a:	893b      	ldrh	r3, [r7, #8]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7fe f955 	bl	8000cdc <__aeabi_i2f>
 8002a32:	4603      	mov	r3, r0
 8002a34:	4619      	mov	r1, r3
 8002a36:	4620      	mov	r0, r4
 8002a38:	f7fe f9a4 	bl	8000d84 <__aeabi_fmul>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7fe fb8c 	bl	800115c <__aeabi_f2uiz>
 8002a44:	4603      	mov	r3, r0
 8002a46:	81bb      	strh	r3, [r7, #12]

	if(MLX90614_OK != MLX90614_Write16Eeprom(MLX90614_EMISS, new_emissivity))
 8002a48:	89fb      	ldrh	r3, [r7, #14]
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	2004      	movs	r0, #4
 8002a4e:	f7ff fed1 	bl	80027f4 <MLX90614_Write16Eeprom>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <MLX90614_SetEmissivity+0xd4>
	{
		return MLX90614_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e00a      	b.n	8002a72 <MLX90614_SetEmissivity+0xea>
	}

	if(MLX90614_OK != MLX90614_Write16Eeprom(MLX90614_EMISS_CALIBRATION, new_calibration))
 8002a5c:	89bb      	ldrh	r3, [r7, #12]
 8002a5e:	4619      	mov	r1, r3
 8002a60:	200f      	movs	r0, #15
 8002a62:	f7ff fec7 	bl	80027f4 <MLX90614_Write16Eeprom>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <MLX90614_SetEmissivity+0xe8>
	{
		return MLX90614_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e000      	b.n	8002a72 <MLX90614_SetEmissivity+0xea>
	}

	return MLX90614_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3714      	adds	r7, #20
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd90      	pop	{r4, r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	f3af 8000 	nop.w
 8002a80:	9999999a 	.word	0x9999999a
 8002a84:	3fb99999 	.word	0x3fb99999
 8002a88:	00000000 	.word	0x00000000
 8002a8c:	40efffe0 	.word	0x40efffe0

08002a90 <MLX90614_Init>:
}



MLX90614_STATUS MLX90614_Init(I2C_HandleTypeDef *hi2c)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
	mlx90614_i2c = hi2c;
 8002a98:	4a04      	ldr	r2, [pc, #16]	; (8002aac <MLX90614_Init+0x1c>)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6013      	str	r3, [r2, #0]

	return MLX90614_OK;
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bc80      	pop	{r7}
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	200003f0 	.word	0x200003f0

08002ab0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002ab6:	4b15      	ldr	r3, [pc, #84]	; (8002b0c <HAL_MspInit+0x5c>)
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	4a14      	ldr	r2, [pc, #80]	; (8002b0c <HAL_MspInit+0x5c>)
 8002abc:	f043 0301 	orr.w	r3, r3, #1
 8002ac0:	6193      	str	r3, [r2, #24]
 8002ac2:	4b12      	ldr	r3, [pc, #72]	; (8002b0c <HAL_MspInit+0x5c>)
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	60bb      	str	r3, [r7, #8]
 8002acc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ace:	4b0f      	ldr	r3, [pc, #60]	; (8002b0c <HAL_MspInit+0x5c>)
 8002ad0:	69db      	ldr	r3, [r3, #28]
 8002ad2:	4a0e      	ldr	r2, [pc, #56]	; (8002b0c <HAL_MspInit+0x5c>)
 8002ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ad8:	61d3      	str	r3, [r2, #28]
 8002ada:	4b0c      	ldr	r3, [pc, #48]	; (8002b0c <HAL_MspInit+0x5c>)
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae2:	607b      	str	r3, [r7, #4]
 8002ae4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002ae6:	4b0a      	ldr	r3, [pc, #40]	; (8002b10 <HAL_MspInit+0x60>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	60fb      	str	r3, [r7, #12]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002af2:	60fb      	str	r3, [r7, #12]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	4a04      	ldr	r2, [pc, #16]	; (8002b10 <HAL_MspInit+0x60>)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b02:	bf00      	nop
 8002b04:	3714      	adds	r7, #20
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bc80      	pop	{r7}
 8002b0a:	4770      	bx	lr
 8002b0c:	40021000 	.word	0x40021000
 8002b10:	40010000 	.word	0x40010000

08002b14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002b18:	bf00      	nop
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bc80      	pop	{r7}
 8002b1e:	4770      	bx	lr

08002b20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b24:	e7fe      	b.n	8002b24 <HardFault_Handler+0x4>

08002b26 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b26:	b480      	push	{r7}
 8002b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b2a:	e7fe      	b.n	8002b2a <MemManage_Handler+0x4>

08002b2c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b30:	e7fe      	b.n	8002b30 <BusFault_Handler+0x4>

08002b32 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b32:	b480      	push	{r7}
 8002b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b36:	e7fe      	b.n	8002b36 <UsageFault_Handler+0x4>

08002b38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b3c:	bf00      	nop
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bc80      	pop	{r7}
 8002b42:	4770      	bx	lr

08002b44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b48:	bf00      	nop
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bc80      	pop	{r7}
 8002b4e:	4770      	bx	lr

08002b50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b54:	bf00      	nop
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bc80      	pop	{r7}
 8002b5a:	4770      	bx	lr

08002b5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b60:	f000 f9a8 	bl	8002eb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b64:	bf00      	nop
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002b6c:	4802      	ldr	r0, [pc, #8]	; (8002b78 <USART2_IRQHandler+0x10>)
 8002b6e:	f003 fd29 	bl	80065c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002b72:	bf00      	nop
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	20000434 	.word	0x20000434

08002b7c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002b80:	4802      	ldr	r0, [pc, #8]	; (8002b8c <USART3_IRQHandler+0x10>)
 8002b82:	f003 fd1f 	bl	80065c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002b86:	bf00      	nop
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	200003f4 	.word	0x200003f4

08002b90 <_sbrk>:
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b086      	sub	sp, #24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	4a14      	ldr	r2, [pc, #80]	; (8002bec <_sbrk+0x5c>)
 8002b9a:	4b15      	ldr	r3, [pc, #84]	; (8002bf0 <_sbrk+0x60>)
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	617b      	str	r3, [r7, #20]
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	613b      	str	r3, [r7, #16]
 8002ba4:	4b13      	ldr	r3, [pc, #76]	; (8002bf4 <_sbrk+0x64>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d102      	bne.n	8002bb2 <_sbrk+0x22>
 8002bac:	4b11      	ldr	r3, [pc, #68]	; (8002bf4 <_sbrk+0x64>)
 8002bae:	4a12      	ldr	r2, [pc, #72]	; (8002bf8 <_sbrk+0x68>)
 8002bb0:	601a      	str	r2, [r3, #0]
 8002bb2:	4b10      	ldr	r3, [pc, #64]	; (8002bf4 <_sbrk+0x64>)
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4413      	add	r3, r2
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d207      	bcs.n	8002bd0 <_sbrk+0x40>
 8002bc0:	f004 f802 	bl	8006bc8 <__errno>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	230c      	movs	r3, #12
 8002bc8:	6013      	str	r3, [r2, #0]
 8002bca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002bce:	e009      	b.n	8002be4 <_sbrk+0x54>
 8002bd0:	4b08      	ldr	r3, [pc, #32]	; (8002bf4 <_sbrk+0x64>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	60fb      	str	r3, [r7, #12]
 8002bd6:	4b07      	ldr	r3, [pc, #28]	; (8002bf4 <_sbrk+0x64>)
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4413      	add	r3, r2
 8002bde:	4a05      	ldr	r2, [pc, #20]	; (8002bf4 <_sbrk+0x64>)
 8002be0:	6013      	str	r3, [r2, #0]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	4618      	mov	r0, r3
 8002be6:	3718      	adds	r7, #24
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	20005000 	.word	0x20005000
 8002bf0:	00000400 	.word	0x00000400
 8002bf4:	2000024c 	.word	0x2000024c
 8002bf8:	20000480 	.word	0x20000480

08002bfc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c00:	bf00      	nop
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bc80      	pop	{r7}
 8002c06:	4770      	bx	lr

08002c08 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002c0c:	4b11      	ldr	r3, [pc, #68]	; (8002c54 <MX_USART2_UART_Init+0x4c>)
 8002c0e:	4a12      	ldr	r2, [pc, #72]	; (8002c58 <MX_USART2_UART_Init+0x50>)
 8002c10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002c12:	4b10      	ldr	r3, [pc, #64]	; (8002c54 <MX_USART2_UART_Init+0x4c>)
 8002c14:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002c18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c1a:	4b0e      	ldr	r3, [pc, #56]	; (8002c54 <MX_USART2_UART_Init+0x4c>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c20:	4b0c      	ldr	r3, [pc, #48]	; (8002c54 <MX_USART2_UART_Init+0x4c>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c26:	4b0b      	ldr	r3, [pc, #44]	; (8002c54 <MX_USART2_UART_Init+0x4c>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c2c:	4b09      	ldr	r3, [pc, #36]	; (8002c54 <MX_USART2_UART_Init+0x4c>)
 8002c2e:	220c      	movs	r2, #12
 8002c30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c32:	4b08      	ldr	r3, [pc, #32]	; (8002c54 <MX_USART2_UART_Init+0x4c>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c38:	4b06      	ldr	r3, [pc, #24]	; (8002c54 <MX_USART2_UART_Init+0x4c>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c3e:	4805      	ldr	r0, [pc, #20]	; (8002c54 <MX_USART2_UART_Init+0x4c>)
 8002c40:	f003 fb8c 	bl	800635c <HAL_UART_Init>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002c4a:	f7ff fce9 	bl	8002620 <Error_Handler>
  }

}
 8002c4e:	bf00      	nop
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	20000434 	.word	0x20000434
 8002c58:	40004400 	.word	0x40004400

08002c5c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8002c60:	4b11      	ldr	r3, [pc, #68]	; (8002ca8 <MX_USART3_UART_Init+0x4c>)
 8002c62:	4a12      	ldr	r2, [pc, #72]	; (8002cac <MX_USART3_UART_Init+0x50>)
 8002c64:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002c66:	4b10      	ldr	r3, [pc, #64]	; (8002ca8 <MX_USART3_UART_Init+0x4c>)
 8002c68:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002c6c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002c6e:	4b0e      	ldr	r3, [pc, #56]	; (8002ca8 <MX_USART3_UART_Init+0x4c>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002c74:	4b0c      	ldr	r3, [pc, #48]	; (8002ca8 <MX_USART3_UART_Init+0x4c>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002c7a:	4b0b      	ldr	r3, [pc, #44]	; (8002ca8 <MX_USART3_UART_Init+0x4c>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002c80:	4b09      	ldr	r3, [pc, #36]	; (8002ca8 <MX_USART3_UART_Init+0x4c>)
 8002c82:	220c      	movs	r2, #12
 8002c84:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c86:	4b08      	ldr	r3, [pc, #32]	; (8002ca8 <MX_USART3_UART_Init+0x4c>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c8c:	4b06      	ldr	r3, [pc, #24]	; (8002ca8 <MX_USART3_UART_Init+0x4c>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002c92:	4805      	ldr	r0, [pc, #20]	; (8002ca8 <MX_USART3_UART_Init+0x4c>)
 8002c94:	f003 fb62 	bl	800635c <HAL_UART_Init>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002c9e:	f7ff fcbf 	bl	8002620 <Error_Handler>
  }

}
 8002ca2:	bf00      	nop
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	200003f4 	.word	0x200003f4
 8002cac:	40004800 	.word	0x40004800

08002cb0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b08a      	sub	sp, #40	; 0x28
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb8:	f107 0318 	add.w	r3, r7, #24
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	605a      	str	r2, [r3, #4]
 8002cc2:	609a      	str	r2, [r3, #8]
 8002cc4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a3f      	ldr	r2, [pc, #252]	; (8002dc8 <HAL_UART_MspInit+0x118>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d138      	bne.n	8002d42 <HAL_UART_MspInit+0x92>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002cd0:	4b3e      	ldr	r3, [pc, #248]	; (8002dcc <HAL_UART_MspInit+0x11c>)
 8002cd2:	69db      	ldr	r3, [r3, #28]
 8002cd4:	4a3d      	ldr	r2, [pc, #244]	; (8002dcc <HAL_UART_MspInit+0x11c>)
 8002cd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cda:	61d3      	str	r3, [r2, #28]
 8002cdc:	4b3b      	ldr	r3, [pc, #236]	; (8002dcc <HAL_UART_MspInit+0x11c>)
 8002cde:	69db      	ldr	r3, [r3, #28]
 8002ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce4:	617b      	str	r3, [r7, #20]
 8002ce6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ce8:	4b38      	ldr	r3, [pc, #224]	; (8002dcc <HAL_UART_MspInit+0x11c>)
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	4a37      	ldr	r2, [pc, #220]	; (8002dcc <HAL_UART_MspInit+0x11c>)
 8002cee:	f043 0304 	orr.w	r3, r3, #4
 8002cf2:	6193      	str	r3, [r2, #24]
 8002cf4:	4b35      	ldr	r3, [pc, #212]	; (8002dcc <HAL_UART_MspInit+0x11c>)
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	f003 0304 	and.w	r3, r3, #4
 8002cfc:	613b      	str	r3, [r7, #16]
 8002cfe:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002d00:	2304      	movs	r3, #4
 8002d02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d04:	2302      	movs	r3, #2
 8002d06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d0c:	f107 0318 	add.w	r3, r7, #24
 8002d10:	4619      	mov	r1, r3
 8002d12:	482f      	ldr	r0, [pc, #188]	; (8002dd0 <HAL_UART_MspInit+0x120>)
 8002d14:	f000 ff74 	bl	8003c00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002d18:	2308      	movs	r3, #8
 8002d1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d20:	2300      	movs	r3, #0
 8002d22:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d24:	f107 0318 	add.w	r3, r7, #24
 8002d28:	4619      	mov	r1, r3
 8002d2a:	4829      	ldr	r0, [pc, #164]	; (8002dd0 <HAL_UART_MspInit+0x120>)
 8002d2c:	f000 ff68 	bl	8003c00 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002d30:	2200      	movs	r2, #0
 8002d32:	2100      	movs	r1, #0
 8002d34:	2026      	movs	r0, #38	; 0x26
 8002d36:	f000 feb6 	bl	8003aa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002d3a:	2026      	movs	r0, #38	; 0x26
 8002d3c:	f000 fecf 	bl	8003ade <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002d40:	e03e      	b.n	8002dc0 <HAL_UART_MspInit+0x110>
  else if(uartHandle->Instance==USART3)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a23      	ldr	r2, [pc, #140]	; (8002dd4 <HAL_UART_MspInit+0x124>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d139      	bne.n	8002dc0 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002d4c:	4b1f      	ldr	r3, [pc, #124]	; (8002dcc <HAL_UART_MspInit+0x11c>)
 8002d4e:	69db      	ldr	r3, [r3, #28]
 8002d50:	4a1e      	ldr	r2, [pc, #120]	; (8002dcc <HAL_UART_MspInit+0x11c>)
 8002d52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d56:	61d3      	str	r3, [r2, #28]
 8002d58:	4b1c      	ldr	r3, [pc, #112]	; (8002dcc <HAL_UART_MspInit+0x11c>)
 8002d5a:	69db      	ldr	r3, [r3, #28]
 8002d5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d60:	60fb      	str	r3, [r7, #12]
 8002d62:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d64:	4b19      	ldr	r3, [pc, #100]	; (8002dcc <HAL_UART_MspInit+0x11c>)
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	4a18      	ldr	r2, [pc, #96]	; (8002dcc <HAL_UART_MspInit+0x11c>)
 8002d6a:	f043 0308 	orr.w	r3, r3, #8
 8002d6e:	6193      	str	r3, [r2, #24]
 8002d70:	4b16      	ldr	r3, [pc, #88]	; (8002dcc <HAL_UART_MspInit+0x11c>)
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	f003 0308 	and.w	r3, r3, #8
 8002d78:	60bb      	str	r3, [r7, #8]
 8002d7a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002d7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d82:	2302      	movs	r3, #2
 8002d84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d86:	2303      	movs	r3, #3
 8002d88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d8a:	f107 0318 	add.w	r3, r7, #24
 8002d8e:	4619      	mov	r1, r3
 8002d90:	4811      	ldr	r0, [pc, #68]	; (8002dd8 <HAL_UART_MspInit+0x128>)
 8002d92:	f000 ff35 	bl	8003c00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002d96:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da0:	2300      	movs	r3, #0
 8002da2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002da4:	f107 0318 	add.w	r3, r7, #24
 8002da8:	4619      	mov	r1, r3
 8002daa:	480b      	ldr	r0, [pc, #44]	; (8002dd8 <HAL_UART_MspInit+0x128>)
 8002dac:	f000 ff28 	bl	8003c00 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002db0:	2200      	movs	r2, #0
 8002db2:	2100      	movs	r1, #0
 8002db4:	2027      	movs	r0, #39	; 0x27
 8002db6:	f000 fe76 	bl	8003aa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002dba:	2027      	movs	r0, #39	; 0x27
 8002dbc:	f000 fe8f 	bl	8003ade <HAL_NVIC_EnableIRQ>
}
 8002dc0:	bf00      	nop
 8002dc2:	3728      	adds	r7, #40	; 0x28
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	40004400 	.word	0x40004400
 8002dcc:	40021000 	.word	0x40021000
 8002dd0:	40010800 	.word	0x40010800
 8002dd4:	40004800 	.word	0x40004800
 8002dd8:	40010c00 	.word	0x40010c00

08002ddc <Reset_Handler>:
 8002ddc:	2100      	movs	r1, #0
 8002dde:	e003      	b.n	8002de8 <LoopCopyDataInit>

08002de0 <CopyDataInit>:
 8002de0:	4b0b      	ldr	r3, [pc, #44]	; (8002e10 <LoopFillZerobss+0x14>)
 8002de2:	585b      	ldr	r3, [r3, r1]
 8002de4:	5043      	str	r3, [r0, r1]
 8002de6:	3104      	adds	r1, #4

08002de8 <LoopCopyDataInit>:
 8002de8:	480a      	ldr	r0, [pc, #40]	; (8002e14 <LoopFillZerobss+0x18>)
 8002dea:	4b0b      	ldr	r3, [pc, #44]	; (8002e18 <LoopFillZerobss+0x1c>)
 8002dec:	1842      	adds	r2, r0, r1
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d3f6      	bcc.n	8002de0 <CopyDataInit>
 8002df2:	4a0a      	ldr	r2, [pc, #40]	; (8002e1c <LoopFillZerobss+0x20>)
 8002df4:	e002      	b.n	8002dfc <LoopFillZerobss>

08002df6 <FillZerobss>:
 8002df6:	2300      	movs	r3, #0
 8002df8:	f842 3b04 	str.w	r3, [r2], #4

08002dfc <LoopFillZerobss>:
 8002dfc:	4b08      	ldr	r3, [pc, #32]	; (8002e20 <LoopFillZerobss+0x24>)
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d3f9      	bcc.n	8002df6 <FillZerobss>
 8002e02:	f7ff fefb 	bl	8002bfc <SystemInit>
 8002e06:	f003 fee5 	bl	8006bd4 <__libc_init_array>
 8002e0a:	f7ff f9c7 	bl	800219c <main>
 8002e0e:	4770      	bx	lr
 8002e10:	0800a1b4 	.word	0x0800a1b4
 8002e14:	20000000 	.word	0x20000000
 8002e18:	200001e0 	.word	0x200001e0
 8002e1c:	200001e0 	.word	0x200001e0
 8002e20:	2000047c 	.word	0x2000047c

08002e24 <ADC1_2_IRQHandler>:
 8002e24:	e7fe      	b.n	8002e24 <ADC1_2_IRQHandler>
	...

08002e28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e2c:	4b08      	ldr	r3, [pc, #32]	; (8002e50 <HAL_Init+0x28>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a07      	ldr	r2, [pc, #28]	; (8002e50 <HAL_Init+0x28>)
 8002e32:	f043 0310 	orr.w	r3, r3, #16
 8002e36:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e38:	2003      	movs	r0, #3
 8002e3a:	f000 fe29 	bl	8003a90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e3e:	2000      	movs	r0, #0
 8002e40:	f000 f808 	bl	8002e54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e44:	f7ff fe34 	bl	8002ab0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	40022000 	.word	0x40022000

08002e54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e5c:	4b12      	ldr	r3, [pc, #72]	; (8002ea8 <HAL_InitTick+0x54>)
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	4b12      	ldr	r3, [pc, #72]	; (8002eac <HAL_InitTick+0x58>)
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	4619      	mov	r1, r3
 8002e66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e72:	4618      	mov	r0, r3
 8002e74:	f000 fe41 	bl	8003afa <HAL_SYSTICK_Config>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e00e      	b.n	8002ea0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2b0f      	cmp	r3, #15
 8002e86:	d80a      	bhi.n	8002e9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e88:	2200      	movs	r2, #0
 8002e8a:	6879      	ldr	r1, [r7, #4]
 8002e8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e90:	f000 fe09 	bl	8003aa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e94:	4a06      	ldr	r2, [pc, #24]	; (8002eb0 <HAL_InitTick+0x5c>)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	e000      	b.n	8002ea0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3708      	adds	r7, #8
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	20000004 	.word	0x20000004
 8002eac:	2000000c 	.word	0x2000000c
 8002eb0:	20000008 	.word	0x20000008

08002eb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002eb8:	4b05      	ldr	r3, [pc, #20]	; (8002ed0 <HAL_IncTick+0x1c>)
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	4b05      	ldr	r3, [pc, #20]	; (8002ed4 <HAL_IncTick+0x20>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	4a03      	ldr	r2, [pc, #12]	; (8002ed4 <HAL_IncTick+0x20>)
 8002ec6:	6013      	str	r3, [r2, #0]
}
 8002ec8:	bf00      	nop
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bc80      	pop	{r7}
 8002ece:	4770      	bx	lr
 8002ed0:	2000000c 	.word	0x2000000c
 8002ed4:	20000474 	.word	0x20000474

08002ed8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	af00      	add	r7, sp, #0
  return uwTick;
 8002edc:	4b02      	ldr	r3, [pc, #8]	; (8002ee8 <HAL_GetTick+0x10>)
 8002ede:	681b      	ldr	r3, [r3, #0]
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bc80      	pop	{r7}
 8002ee6:	4770      	bx	lr
 8002ee8:	20000474 	.word	0x20000474

08002eec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ef4:	f7ff fff0 	bl	8002ed8 <HAL_GetTick>
 8002ef8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f04:	d005      	beq.n	8002f12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f06:	4b09      	ldr	r3, [pc, #36]	; (8002f2c <HAL_Delay+0x40>)
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	4413      	add	r3, r2
 8002f10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f12:	bf00      	nop
 8002f14:	f7ff ffe0 	bl	8002ed8 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d8f7      	bhi.n	8002f14 <HAL_Delay+0x28>
  {
  }
}
 8002f24:	bf00      	nop
 8002f26:	3710      	adds	r7, #16
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	2000000c 	.word	0x2000000c

08002f30 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002f40:	2300      	movs	r3, #0
 8002f42:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002f44:	2300      	movs	r3, #0
 8002f46:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d101      	bne.n	8002f52 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e0be      	b.n	80030d0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d109      	bne.n	8002f74 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f7fe fd5c 	bl	8001a2c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f000 fbe9 	bl	800374c <ADC_ConversionStop_Disable>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f82:	f003 0310 	and.w	r3, r3, #16
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	f040 8099 	bne.w	80030be <HAL_ADC_Init+0x18e>
 8002f8c:	7dfb      	ldrb	r3, [r7, #23]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f040 8095 	bne.w	80030be <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f98:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f9c:	f023 0302 	bic.w	r3, r3, #2
 8002fa0:	f043 0202 	orr.w	r2, r3, #2
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002fb0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	7b1b      	ldrb	r3, [r3, #12]
 8002fb6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002fb8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002fba:	68ba      	ldr	r2, [r7, #8]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fc8:	d003      	beq.n	8002fd2 <HAL_ADC_Init+0xa2>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d102      	bne.n	8002fd8 <HAL_ADC_Init+0xa8>
 8002fd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fd6:	e000      	b.n	8002fda <HAL_ADC_Init+0xaa>
 8002fd8:	2300      	movs	r3, #0
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	7d1b      	ldrb	r3, [r3, #20]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d119      	bne.n	800301c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	7b1b      	ldrb	r3, [r3, #12]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d109      	bne.n	8003004 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	035a      	lsls	r2, r3, #13
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003000:	613b      	str	r3, [r7, #16]
 8003002:	e00b      	b.n	800301c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003008:	f043 0220 	orr.w	r2, r3, #32
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003014:	f043 0201 	orr.w	r2, r3, #1
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	430a      	orrs	r2, r1
 800302e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	689a      	ldr	r2, [r3, #8]
 8003036:	4b28      	ldr	r3, [pc, #160]	; (80030d8 <HAL_ADC_Init+0x1a8>)
 8003038:	4013      	ands	r3, r2
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	6812      	ldr	r2, [r2, #0]
 800303e:	68b9      	ldr	r1, [r7, #8]
 8003040:	430b      	orrs	r3, r1
 8003042:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800304c:	d003      	beq.n	8003056 <HAL_ADC_Init+0x126>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d104      	bne.n	8003060 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	3b01      	subs	r3, #1
 800305c:	051b      	lsls	r3, r3, #20
 800305e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003066:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	430a      	orrs	r2, r1
 8003072:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689a      	ldr	r2, [r3, #8]
 800307a:	4b18      	ldr	r3, [pc, #96]	; (80030dc <HAL_ADC_Init+0x1ac>)
 800307c:	4013      	ands	r3, r2
 800307e:	68ba      	ldr	r2, [r7, #8]
 8003080:	429a      	cmp	r2, r3
 8003082:	d10b      	bne.n	800309c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308e:	f023 0303 	bic.w	r3, r3, #3
 8003092:	f043 0201 	orr.w	r2, r3, #1
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800309a:	e018      	b.n	80030ce <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a0:	f023 0312 	bic.w	r3, r3, #18
 80030a4:	f043 0210 	orr.w	r2, r3, #16
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b0:	f043 0201 	orr.w	r2, r3, #1
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80030bc:	e007      	b.n	80030ce <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c2:	f043 0210 	orr.w	r2, r3, #16
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80030ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3718      	adds	r7, #24
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	ffe1f7fd 	.word	0xffe1f7fd
 80030dc:	ff1f0efe 	.word	0xff1f0efe

080030e0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030e8:	2300      	movs	r3, #0
 80030ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d101      	bne.n	80030fa <HAL_ADC_Start+0x1a>
 80030f6:	2302      	movs	r3, #2
 80030f8:	e098      	b.n	800322c <HAL_ADC_Start+0x14c>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2201      	movs	r2, #1
 80030fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 fad0 	bl	80036a8 <ADC_Enable>
 8003108:	4603      	mov	r3, r0
 800310a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800310c:	7bfb      	ldrb	r3, [r7, #15]
 800310e:	2b00      	cmp	r3, #0
 8003110:	f040 8087 	bne.w	8003222 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003118:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800311c:	f023 0301 	bic.w	r3, r3, #1
 8003120:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a41      	ldr	r2, [pc, #260]	; (8003234 <HAL_ADC_Start+0x154>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d105      	bne.n	800313e <HAL_ADC_Start+0x5e>
 8003132:	4b41      	ldr	r3, [pc, #260]	; (8003238 <HAL_ADC_Start+0x158>)
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d115      	bne.n	800316a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003142:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003154:	2b00      	cmp	r3, #0
 8003156:	d026      	beq.n	80031a6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003160:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003168:	e01d      	b.n	80031a6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a2f      	ldr	r2, [pc, #188]	; (8003238 <HAL_ADC_Start+0x158>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d004      	beq.n	800318a <HAL_ADC_Start+0xaa>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a2b      	ldr	r2, [pc, #172]	; (8003234 <HAL_ADC_Start+0x154>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d10d      	bne.n	80031a6 <HAL_ADC_Start+0xc6>
 800318a:	4b2b      	ldr	r3, [pc, #172]	; (8003238 <HAL_ADC_Start+0x158>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003192:	2b00      	cmp	r3, #0
 8003194:	d007      	beq.n	80031a6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800319e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d006      	beq.n	80031c0 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b6:	f023 0206 	bic.w	r2, r3, #6
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80031be:	e002      	b.n	80031c6 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f06f 0202 	mvn.w	r2, #2
 80031d6:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80031e2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80031e6:	d113      	bne.n	8003210 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80031ec:	4a11      	ldr	r2, [pc, #68]	; (8003234 <HAL_ADC_Start+0x154>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d105      	bne.n	80031fe <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80031f2:	4b11      	ldr	r3, [pc, #68]	; (8003238 <HAL_ADC_Start+0x158>)
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d108      	bne.n	8003210 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	689a      	ldr	r2, [r3, #8]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800320c:	609a      	str	r2, [r3, #8]
 800320e:	e00c      	b.n	800322a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	689a      	ldr	r2, [r3, #8]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800321e:	609a      	str	r2, [r3, #8]
 8003220:	e003      	b.n	800322a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800322a:	7bfb      	ldrb	r3, [r7, #15]
}
 800322c:	4618      	mov	r0, r3
 800322e:	3710      	adds	r7, #16
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	40012800 	.word	0x40012800
 8003238:	40012400 	.word	0x40012400

0800323c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003244:	2300      	movs	r3, #0
 8003246:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800324e:	2b01      	cmp	r3, #1
 8003250:	d101      	bne.n	8003256 <HAL_ADC_Stop+0x1a>
 8003252:	2302      	movs	r3, #2
 8003254:	e01a      	b.n	800328c <HAL_ADC_Stop+0x50>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2201      	movs	r2, #1
 800325a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 fa74 	bl	800374c <ADC_ConversionStop_Disable>
 8003264:	4603      	mov	r3, r0
 8003266:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003268:	7bfb      	ldrb	r3, [r7, #15]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d109      	bne.n	8003282 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003272:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003276:	f023 0301 	bic.w	r3, r3, #1
 800327a:	f043 0201 	orr.w	r2, r3, #1
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800328a:	7bfb      	ldrb	r3, [r7, #15]
}
 800328c:	4618      	mov	r0, r3
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003294:	b590      	push	{r4, r7, lr}
 8003296:	b087      	sub	sp, #28
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800329e:	2300      	movs	r3, #0
 80032a0:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80032a2:	2300      	movs	r3, #0
 80032a4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80032aa:	f7ff fe15 	bl	8002ed8 <HAL_GetTick>
 80032ae:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00b      	beq.n	80032d6 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c2:	f043 0220 	orr.w	r2, r3, #32
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e0c8      	b.n	8003468 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d12a      	bne.n	800333a <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ea:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d123      	bne.n	800333a <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80032f2:	e01a      	b.n	800332a <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032fa:	d016      	beq.n	800332a <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d007      	beq.n	8003312 <HAL_ADC_PollForConversion+0x7e>
 8003302:	f7ff fde9 	bl	8002ed8 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	683a      	ldr	r2, [r7, #0]
 800330e:	429a      	cmp	r2, r3
 8003310:	d20b      	bcs.n	800332a <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003316:	f043 0204 	orr.w	r2, r3, #4
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e09e      	b.n	8003468 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d0dd      	beq.n	80032f4 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003338:	e06c      	b.n	8003414 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800333a:	4b4d      	ldr	r3, [pc, #308]	; (8003470 <HAL_ADC_PollForConversion+0x1dc>)
 800333c:	681c      	ldr	r4, [r3, #0]
 800333e:	2002      	movs	r0, #2
 8003340:	f002 ff50 	bl	80061e4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003344:	4603      	mov	r3, r0
 8003346:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	6919      	ldr	r1, [r3, #16]
 8003350:	4b48      	ldr	r3, [pc, #288]	; (8003474 <HAL_ADC_PollForConversion+0x1e0>)
 8003352:	400b      	ands	r3, r1
 8003354:	2b00      	cmp	r3, #0
 8003356:	d118      	bne.n	800338a <HAL_ADC_PollForConversion+0xf6>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68d9      	ldr	r1, [r3, #12]
 800335e:	4b46      	ldr	r3, [pc, #280]	; (8003478 <HAL_ADC_PollForConversion+0x1e4>)
 8003360:	400b      	ands	r3, r1
 8003362:	2b00      	cmp	r3, #0
 8003364:	d111      	bne.n	800338a <HAL_ADC_PollForConversion+0xf6>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	6919      	ldr	r1, [r3, #16]
 800336c:	4b43      	ldr	r3, [pc, #268]	; (800347c <HAL_ADC_PollForConversion+0x1e8>)
 800336e:	400b      	ands	r3, r1
 8003370:	2b00      	cmp	r3, #0
 8003372:	d108      	bne.n	8003386 <HAL_ADC_PollForConversion+0xf2>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68d9      	ldr	r1, [r3, #12]
 800337a:	4b41      	ldr	r3, [pc, #260]	; (8003480 <HAL_ADC_PollForConversion+0x1ec>)
 800337c:	400b      	ands	r3, r1
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <HAL_ADC_PollForConversion+0xf2>
 8003382:	2314      	movs	r3, #20
 8003384:	e020      	b.n	80033c8 <HAL_ADC_PollForConversion+0x134>
 8003386:	2329      	movs	r3, #41	; 0x29
 8003388:	e01e      	b.n	80033c8 <HAL_ADC_PollForConversion+0x134>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	6919      	ldr	r1, [r3, #16]
 8003390:	4b3a      	ldr	r3, [pc, #232]	; (800347c <HAL_ADC_PollForConversion+0x1e8>)
 8003392:	400b      	ands	r3, r1
 8003394:	2b00      	cmp	r3, #0
 8003396:	d106      	bne.n	80033a6 <HAL_ADC_PollForConversion+0x112>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68d9      	ldr	r1, [r3, #12]
 800339e:	4b38      	ldr	r3, [pc, #224]	; (8003480 <HAL_ADC_PollForConversion+0x1ec>)
 80033a0:	400b      	ands	r3, r1
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00d      	beq.n	80033c2 <HAL_ADC_PollForConversion+0x12e>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	6919      	ldr	r1, [r3, #16]
 80033ac:	4b35      	ldr	r3, [pc, #212]	; (8003484 <HAL_ADC_PollForConversion+0x1f0>)
 80033ae:	400b      	ands	r3, r1
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d108      	bne.n	80033c6 <HAL_ADC_PollForConversion+0x132>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68d9      	ldr	r1, [r3, #12]
 80033ba:	4b32      	ldr	r3, [pc, #200]	; (8003484 <HAL_ADC_PollForConversion+0x1f0>)
 80033bc:	400b      	ands	r3, r1
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <HAL_ADC_PollForConversion+0x132>
 80033c2:	2354      	movs	r3, #84	; 0x54
 80033c4:	e000      	b.n	80033c8 <HAL_ADC_PollForConversion+0x134>
 80033c6:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80033c8:	fb02 f303 	mul.w	r3, r2, r3
 80033cc:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80033ce:	e01d      	b.n	800340c <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033d6:	d016      	beq.n	8003406 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d007      	beq.n	80033ee <HAL_ADC_PollForConversion+0x15a>
 80033de:	f7ff fd7b 	bl	8002ed8 <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	683a      	ldr	r2, [r7, #0]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d20b      	bcs.n	8003406 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f2:	f043 0204 	orr.w	r2, r3, #4
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e030      	b.n	8003468 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	3301      	adds	r3, #1
 800340a:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	429a      	cmp	r2, r3
 8003412:	d8dd      	bhi.n	80033d0 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f06f 0212 	mvn.w	r2, #18
 800341c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003422:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003434:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003438:	d115      	bne.n	8003466 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800343e:	2b00      	cmp	r3, #0
 8003440:	d111      	bne.n	8003466 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003446:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003452:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d105      	bne.n	8003466 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345e:	f043 0201 	orr.w	r2, r3, #1
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003466:	2300      	movs	r3, #0
}
 8003468:	4618      	mov	r0, r3
 800346a:	371c      	adds	r7, #28
 800346c:	46bd      	mov	sp, r7
 800346e:	bd90      	pop	{r4, r7, pc}
 8003470:	20000004 	.word	0x20000004
 8003474:	24924924 	.word	0x24924924
 8003478:	00924924 	.word	0x00924924
 800347c:	12492492 	.word	0x12492492
 8003480:	00492492 	.word	0x00492492
 8003484:	00249249 	.word	0x00249249

08003488 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003496:	4618      	mov	r0, r3
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	bc80      	pop	{r7}
 800349e:	4770      	bx	lr

080034a0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80034a0:	b480      	push	{r7}
 80034a2:	b085      	sub	sp, #20
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034aa:	2300      	movs	r3, #0
 80034ac:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80034ae:	2300      	movs	r3, #0
 80034b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d101      	bne.n	80034c0 <HAL_ADC_ConfigChannel+0x20>
 80034bc:	2302      	movs	r3, #2
 80034be:	e0dc      	b.n	800367a <HAL_ADC_ConfigChannel+0x1da>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	2b06      	cmp	r3, #6
 80034ce:	d81c      	bhi.n	800350a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	685a      	ldr	r2, [r3, #4]
 80034da:	4613      	mov	r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	4413      	add	r3, r2
 80034e0:	3b05      	subs	r3, #5
 80034e2:	221f      	movs	r2, #31
 80034e4:	fa02 f303 	lsl.w	r3, r2, r3
 80034e8:	43db      	mvns	r3, r3
 80034ea:	4019      	ands	r1, r3
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	6818      	ldr	r0, [r3, #0]
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685a      	ldr	r2, [r3, #4]
 80034f4:	4613      	mov	r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	4413      	add	r3, r2
 80034fa:	3b05      	subs	r3, #5
 80034fc:	fa00 f203 	lsl.w	r2, r0, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	430a      	orrs	r2, r1
 8003506:	635a      	str	r2, [r3, #52]	; 0x34
 8003508:	e03c      	b.n	8003584 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	2b0c      	cmp	r3, #12
 8003510:	d81c      	bhi.n	800354c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	685a      	ldr	r2, [r3, #4]
 800351c:	4613      	mov	r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	4413      	add	r3, r2
 8003522:	3b23      	subs	r3, #35	; 0x23
 8003524:	221f      	movs	r2, #31
 8003526:	fa02 f303 	lsl.w	r3, r2, r3
 800352a:	43db      	mvns	r3, r3
 800352c:	4019      	ands	r1, r3
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	6818      	ldr	r0, [r3, #0]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	685a      	ldr	r2, [r3, #4]
 8003536:	4613      	mov	r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	4413      	add	r3, r2
 800353c:	3b23      	subs	r3, #35	; 0x23
 800353e:	fa00 f203 	lsl.w	r2, r0, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	430a      	orrs	r2, r1
 8003548:	631a      	str	r2, [r3, #48]	; 0x30
 800354a:	e01b      	b.n	8003584 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685a      	ldr	r2, [r3, #4]
 8003556:	4613      	mov	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	4413      	add	r3, r2
 800355c:	3b41      	subs	r3, #65	; 0x41
 800355e:	221f      	movs	r2, #31
 8003560:	fa02 f303 	lsl.w	r3, r2, r3
 8003564:	43db      	mvns	r3, r3
 8003566:	4019      	ands	r1, r3
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	6818      	ldr	r0, [r3, #0]
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685a      	ldr	r2, [r3, #4]
 8003570:	4613      	mov	r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	4413      	add	r3, r2
 8003576:	3b41      	subs	r3, #65	; 0x41
 8003578:	fa00 f203 	lsl.w	r2, r0, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	430a      	orrs	r2, r1
 8003582:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2b09      	cmp	r3, #9
 800358a:	d91c      	bls.n	80035c6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68d9      	ldr	r1, [r3, #12]
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	4613      	mov	r3, r2
 8003598:	005b      	lsls	r3, r3, #1
 800359a:	4413      	add	r3, r2
 800359c:	3b1e      	subs	r3, #30
 800359e:	2207      	movs	r2, #7
 80035a0:	fa02 f303 	lsl.w	r3, r2, r3
 80035a4:	43db      	mvns	r3, r3
 80035a6:	4019      	ands	r1, r3
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	6898      	ldr	r0, [r3, #8]
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	4613      	mov	r3, r2
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	4413      	add	r3, r2
 80035b6:	3b1e      	subs	r3, #30
 80035b8:	fa00 f203 	lsl.w	r2, r0, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	430a      	orrs	r2, r1
 80035c2:	60da      	str	r2, [r3, #12]
 80035c4:	e019      	b.n	80035fa <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	6919      	ldr	r1, [r3, #16]
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	4613      	mov	r3, r2
 80035d2:	005b      	lsls	r3, r3, #1
 80035d4:	4413      	add	r3, r2
 80035d6:	2207      	movs	r2, #7
 80035d8:	fa02 f303 	lsl.w	r3, r2, r3
 80035dc:	43db      	mvns	r3, r3
 80035de:	4019      	ands	r1, r3
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	6898      	ldr	r0, [r3, #8]
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	4613      	mov	r3, r2
 80035ea:	005b      	lsls	r3, r3, #1
 80035ec:	4413      	add	r3, r2
 80035ee:	fa00 f203 	lsl.w	r2, r0, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	430a      	orrs	r2, r1
 80035f8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2b10      	cmp	r3, #16
 8003600:	d003      	beq.n	800360a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003606:	2b11      	cmp	r3, #17
 8003608:	d132      	bne.n	8003670 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a1d      	ldr	r2, [pc, #116]	; (8003684 <HAL_ADC_ConfigChannel+0x1e4>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d125      	bne.n	8003660 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d126      	bne.n	8003670 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	689a      	ldr	r2, [r3, #8]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003630:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2b10      	cmp	r3, #16
 8003638:	d11a      	bne.n	8003670 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800363a:	4b13      	ldr	r3, [pc, #76]	; (8003688 <HAL_ADC_ConfigChannel+0x1e8>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a13      	ldr	r2, [pc, #76]	; (800368c <HAL_ADC_ConfigChannel+0x1ec>)
 8003640:	fba2 2303 	umull	r2, r3, r2, r3
 8003644:	0c9a      	lsrs	r2, r3, #18
 8003646:	4613      	mov	r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	4413      	add	r3, r2
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003650:	e002      	b.n	8003658 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	3b01      	subs	r3, #1
 8003656:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1f9      	bne.n	8003652 <HAL_ADC_ConfigChannel+0x1b2>
 800365e:	e007      	b.n	8003670 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003664:	f043 0220 	orr.w	r2, r3, #32
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003678:	7bfb      	ldrb	r3, [r7, #15]
}
 800367a:	4618      	mov	r0, r3
 800367c:	3714      	adds	r7, #20
 800367e:	46bd      	mov	sp, r7
 8003680:	bc80      	pop	{r7}
 8003682:	4770      	bx	lr
 8003684:	40012400 	.word	0x40012400
 8003688:	20000004 	.word	0x20000004
 800368c:	431bde83 	.word	0x431bde83

08003690 <HAL_ADC_GetState>:
  * @brief  return the ADC state
  * @param  hadc: ADC handle
  * @retval HAL state
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  /* Return ADC state */
  return hadc->State;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800369c:	4618      	mov	r0, r3
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bc80      	pop	{r7}
 80036a4:	4770      	bx	lr
	...

080036a8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036b0:	2300      	movs	r3, #0
 80036b2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80036b4:	2300      	movs	r3, #0
 80036b6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d039      	beq.n	800373a <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	689a      	ldr	r2, [r3, #8]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f042 0201 	orr.w	r2, r2, #1
 80036d4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80036d6:	4b1b      	ldr	r3, [pc, #108]	; (8003744 <ADC_Enable+0x9c>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a1b      	ldr	r2, [pc, #108]	; (8003748 <ADC_Enable+0xa0>)
 80036dc:	fba2 2303 	umull	r2, r3, r2, r3
 80036e0:	0c9b      	lsrs	r3, r3, #18
 80036e2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80036e4:	e002      	b.n	80036ec <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	3b01      	subs	r3, #1
 80036ea:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1f9      	bne.n	80036e6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80036f2:	f7ff fbf1 	bl	8002ed8 <HAL_GetTick>
 80036f6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80036f8:	e018      	b.n	800372c <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80036fa:	f7ff fbed 	bl	8002ed8 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	2b02      	cmp	r3, #2
 8003706:	d911      	bls.n	800372c <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800370c:	f043 0210 	orr.w	r2, r3, #16
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003718:	f043 0201 	orr.w	r2, r3, #1
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e007      	b.n	800373c <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b01      	cmp	r3, #1
 8003738:	d1df      	bne.n	80036fa <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	3710      	adds	r7, #16
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	20000004 	.word	0x20000004
 8003748:	431bde83 	.word	0x431bde83

0800374c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003754:	2300      	movs	r3, #0
 8003756:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	2b01      	cmp	r3, #1
 8003764:	d127      	bne.n	80037b6 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	689a      	ldr	r2, [r3, #8]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f022 0201 	bic.w	r2, r2, #1
 8003774:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003776:	f7ff fbaf 	bl	8002ed8 <HAL_GetTick>
 800377a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800377c:	e014      	b.n	80037a8 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800377e:	f7ff fbab 	bl	8002ed8 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	2b02      	cmp	r3, #2
 800378a:	d90d      	bls.n	80037a8 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003790:	f043 0210 	orr.w	r2, r3, #16
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800379c:	f043 0201 	orr.w	r2, r3, #1
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e007      	b.n	80037b8 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d0e3      	beq.n	800377e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80037c0:	b590      	push	{r4, r7, lr}
 80037c2:	b087      	sub	sp, #28
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037c8:	2300      	movs	r3, #0
 80037ca:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80037cc:	2300      	movs	r3, #0
 80037ce:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d101      	bne.n	80037de <HAL_ADCEx_Calibration_Start+0x1e>
 80037da:	2302      	movs	r3, #2
 80037dc:	e086      	b.n	80038ec <HAL_ADCEx_Calibration_Start+0x12c>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f7ff ffb0 	bl	800374c <ADC_ConversionStop_Disable>
 80037ec:	4603      	mov	r3, r0
 80037ee:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80037f0:	7dfb      	ldrb	r3, [r7, #23]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d175      	bne.n	80038e2 <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80037fe:	f023 0302 	bic.w	r3, r3, #2
 8003802:	f043 0202 	orr.w	r2, r3, #2
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800380a:	4b3a      	ldr	r3, [pc, #232]	; (80038f4 <HAL_ADCEx_Calibration_Start+0x134>)
 800380c:	681c      	ldr	r4, [r3, #0]
 800380e:	2002      	movs	r0, #2
 8003810:	f002 fce8 	bl	80061e4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003814:	4603      	mov	r3, r0
 8003816:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800381a:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 800381c:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 800381e:	e002      	b.n	8003826 <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	3b01      	subs	r3, #1
 8003824:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d1f9      	bne.n	8003820 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f7ff ff3b 	bl	80036a8 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	689a      	ldr	r2, [r3, #8]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f042 0208 	orr.w	r2, r2, #8
 8003840:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003842:	f7ff fb49 	bl	8002ed8 <HAL_GetTick>
 8003846:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003848:	e014      	b.n	8003874 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800384a:	f7ff fb45 	bl	8002ed8 <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	2b0a      	cmp	r3, #10
 8003856:	d90d      	bls.n	8003874 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385c:	f023 0312 	bic.w	r3, r3, #18
 8003860:	f043 0210 	orr.w	r2, r3, #16
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e03b      	b.n	80038ec <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f003 0308 	and.w	r3, r3, #8
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1e3      	bne.n	800384a <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	689a      	ldr	r2, [r3, #8]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f042 0204 	orr.w	r2, r2, #4
 8003890:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003892:	f7ff fb21 	bl	8002ed8 <HAL_GetTick>
 8003896:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003898:	e014      	b.n	80038c4 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800389a:	f7ff fb1d 	bl	8002ed8 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	2b0a      	cmp	r3, #10
 80038a6:	d90d      	bls.n	80038c4 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ac:	f023 0312 	bic.w	r3, r3, #18
 80038b0:	f043 0210 	orr.w	r2, r3, #16
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e013      	b.n	80038ec <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f003 0304 	and.w	r3, r3, #4
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1e3      	bne.n	800389a <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d6:	f023 0303 	bic.w	r3, r3, #3
 80038da:	f043 0201 	orr.w	r2, r3, #1
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80038ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	371c      	adds	r7, #28
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd90      	pop	{r4, r7, pc}
 80038f4:	20000004 	.word	0x20000004

080038f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f003 0307 	and.w	r3, r3, #7
 8003906:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003908:	4b0c      	ldr	r3, [pc, #48]	; (800393c <__NVIC_SetPriorityGrouping+0x44>)
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800390e:	68ba      	ldr	r2, [r7, #8]
 8003910:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003914:	4013      	ands	r3, r2
 8003916:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003920:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003928:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800392a:	4a04      	ldr	r2, [pc, #16]	; (800393c <__NVIC_SetPriorityGrouping+0x44>)
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	60d3      	str	r3, [r2, #12]
}
 8003930:	bf00      	nop
 8003932:	3714      	adds	r7, #20
 8003934:	46bd      	mov	sp, r7
 8003936:	bc80      	pop	{r7}
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	e000ed00 	.word	0xe000ed00

08003940 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003944:	4b04      	ldr	r3, [pc, #16]	; (8003958 <__NVIC_GetPriorityGrouping+0x18>)
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	0a1b      	lsrs	r3, r3, #8
 800394a:	f003 0307 	and.w	r3, r3, #7
}
 800394e:	4618      	mov	r0, r3
 8003950:	46bd      	mov	sp, r7
 8003952:	bc80      	pop	{r7}
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	e000ed00 	.word	0xe000ed00

0800395c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	4603      	mov	r3, r0
 8003964:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800396a:	2b00      	cmp	r3, #0
 800396c:	db0b      	blt.n	8003986 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800396e:	79fb      	ldrb	r3, [r7, #7]
 8003970:	f003 021f 	and.w	r2, r3, #31
 8003974:	4906      	ldr	r1, [pc, #24]	; (8003990 <__NVIC_EnableIRQ+0x34>)
 8003976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800397a:	095b      	lsrs	r3, r3, #5
 800397c:	2001      	movs	r0, #1
 800397e:	fa00 f202 	lsl.w	r2, r0, r2
 8003982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003986:	bf00      	nop
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	bc80      	pop	{r7}
 800398e:	4770      	bx	lr
 8003990:	e000e100 	.word	0xe000e100

08003994 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	4603      	mov	r3, r0
 800399c:	6039      	str	r1, [r7, #0]
 800399e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	db0a      	blt.n	80039be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	b2da      	uxtb	r2, r3
 80039ac:	490c      	ldr	r1, [pc, #48]	; (80039e0 <__NVIC_SetPriority+0x4c>)
 80039ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039b2:	0112      	lsls	r2, r2, #4
 80039b4:	b2d2      	uxtb	r2, r2
 80039b6:	440b      	add	r3, r1
 80039b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039bc:	e00a      	b.n	80039d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	b2da      	uxtb	r2, r3
 80039c2:	4908      	ldr	r1, [pc, #32]	; (80039e4 <__NVIC_SetPriority+0x50>)
 80039c4:	79fb      	ldrb	r3, [r7, #7]
 80039c6:	f003 030f 	and.w	r3, r3, #15
 80039ca:	3b04      	subs	r3, #4
 80039cc:	0112      	lsls	r2, r2, #4
 80039ce:	b2d2      	uxtb	r2, r2
 80039d0:	440b      	add	r3, r1
 80039d2:	761a      	strb	r2, [r3, #24]
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	bc80      	pop	{r7}
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	e000e100 	.word	0xe000e100
 80039e4:	e000ed00 	.word	0xe000ed00

080039e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b089      	sub	sp, #36	; 0x24
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f003 0307 	and.w	r3, r3, #7
 80039fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	f1c3 0307 	rsb	r3, r3, #7
 8003a02:	2b04      	cmp	r3, #4
 8003a04:	bf28      	it	cs
 8003a06:	2304      	movcs	r3, #4
 8003a08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	3304      	adds	r3, #4
 8003a0e:	2b06      	cmp	r3, #6
 8003a10:	d902      	bls.n	8003a18 <NVIC_EncodePriority+0x30>
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	3b03      	subs	r3, #3
 8003a16:	e000      	b.n	8003a1a <NVIC_EncodePriority+0x32>
 8003a18:	2300      	movs	r3, #0
 8003a1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	fa02 f303 	lsl.w	r3, r2, r3
 8003a26:	43da      	mvns	r2, r3
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	401a      	ands	r2, r3
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	fa01 f303 	lsl.w	r3, r1, r3
 8003a3a:	43d9      	mvns	r1, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a40:	4313      	orrs	r3, r2
         );
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3724      	adds	r7, #36	; 0x24
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bc80      	pop	{r7}
 8003a4a:	4770      	bx	lr

08003a4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	3b01      	subs	r3, #1
 8003a58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a5c:	d301      	bcc.n	8003a62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e00f      	b.n	8003a82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a62:	4a0a      	ldr	r2, [pc, #40]	; (8003a8c <SysTick_Config+0x40>)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	3b01      	subs	r3, #1
 8003a68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a6a:	210f      	movs	r1, #15
 8003a6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a70:	f7ff ff90 	bl	8003994 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a74:	4b05      	ldr	r3, [pc, #20]	; (8003a8c <SysTick_Config+0x40>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a7a:	4b04      	ldr	r3, [pc, #16]	; (8003a8c <SysTick_Config+0x40>)
 8003a7c:	2207      	movs	r2, #7
 8003a7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3708      	adds	r7, #8
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	e000e010 	.word	0xe000e010

08003a90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f7ff ff2d 	bl	80038f8 <__NVIC_SetPriorityGrouping>
}
 8003a9e:	bf00      	nop
 8003aa0:	3708      	adds	r7, #8
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b086      	sub	sp, #24
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	4603      	mov	r3, r0
 8003aae:	60b9      	str	r1, [r7, #8]
 8003ab0:	607a      	str	r2, [r7, #4]
 8003ab2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ab8:	f7ff ff42 	bl	8003940 <__NVIC_GetPriorityGrouping>
 8003abc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	68b9      	ldr	r1, [r7, #8]
 8003ac2:	6978      	ldr	r0, [r7, #20]
 8003ac4:	f7ff ff90 	bl	80039e8 <NVIC_EncodePriority>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ace:	4611      	mov	r1, r2
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7ff ff5f 	bl	8003994 <__NVIC_SetPriority>
}
 8003ad6:	bf00      	nop
 8003ad8:	3718      	adds	r7, #24
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b082      	sub	sp, #8
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7ff ff35 	bl	800395c <__NVIC_EnableIRQ>
}
 8003af2:	bf00      	nop
 8003af4:	3708      	adds	r7, #8
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b082      	sub	sp, #8
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f7ff ffa2 	bl	8003a4c <SysTick_Config>
 8003b08:	4603      	mov	r3, r0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
	...

08003b14 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d005      	beq.n	8003b36 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2204      	movs	r2, #4
 8003b2e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	73fb      	strb	r3, [r7, #15]
 8003b34:	e051      	b.n	8003bda <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f022 020e 	bic.w	r2, r2, #14
 8003b44:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f022 0201 	bic.w	r2, r2, #1
 8003b54:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a22      	ldr	r2, [pc, #136]	; (8003be4 <HAL_DMA_Abort_IT+0xd0>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d029      	beq.n	8003bb4 <HAL_DMA_Abort_IT+0xa0>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a20      	ldr	r2, [pc, #128]	; (8003be8 <HAL_DMA_Abort_IT+0xd4>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d022      	beq.n	8003bb0 <HAL_DMA_Abort_IT+0x9c>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a1f      	ldr	r2, [pc, #124]	; (8003bec <HAL_DMA_Abort_IT+0xd8>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d01a      	beq.n	8003baa <HAL_DMA_Abort_IT+0x96>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a1d      	ldr	r2, [pc, #116]	; (8003bf0 <HAL_DMA_Abort_IT+0xdc>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d012      	beq.n	8003ba4 <HAL_DMA_Abort_IT+0x90>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a1c      	ldr	r2, [pc, #112]	; (8003bf4 <HAL_DMA_Abort_IT+0xe0>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d00a      	beq.n	8003b9e <HAL_DMA_Abort_IT+0x8a>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a1a      	ldr	r2, [pc, #104]	; (8003bf8 <HAL_DMA_Abort_IT+0xe4>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d102      	bne.n	8003b98 <HAL_DMA_Abort_IT+0x84>
 8003b92:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003b96:	e00e      	b.n	8003bb6 <HAL_DMA_Abort_IT+0xa2>
 8003b98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b9c:	e00b      	b.n	8003bb6 <HAL_DMA_Abort_IT+0xa2>
 8003b9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ba2:	e008      	b.n	8003bb6 <HAL_DMA_Abort_IT+0xa2>
 8003ba4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ba8:	e005      	b.n	8003bb6 <HAL_DMA_Abort_IT+0xa2>
 8003baa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003bae:	e002      	b.n	8003bb6 <HAL_DMA_Abort_IT+0xa2>
 8003bb0:	2310      	movs	r3, #16
 8003bb2:	e000      	b.n	8003bb6 <HAL_DMA_Abort_IT+0xa2>
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	4a11      	ldr	r2, [pc, #68]	; (8003bfc <HAL_DMA_Abort_IT+0xe8>)
 8003bb8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d003      	beq.n	8003bda <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	4798      	blx	r3
    } 
  }
  return status;
 8003bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3710      	adds	r7, #16
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	40020008 	.word	0x40020008
 8003be8:	4002001c 	.word	0x4002001c
 8003bec:	40020030 	.word	0x40020030
 8003bf0:	40020044 	.word	0x40020044
 8003bf4:	40020058 	.word	0x40020058
 8003bf8:	4002006c 	.word	0x4002006c
 8003bfc:	40020000 	.word	0x40020000

08003c00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b08b      	sub	sp, #44	; 0x2c
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c12:	e127      	b.n	8003e64 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003c14:	2201      	movs	r2, #1
 8003c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c18:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	69fa      	ldr	r2, [r7, #28]
 8003c24:	4013      	ands	r3, r2
 8003c26:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003c28:	69ba      	ldr	r2, [r7, #24]
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	f040 8116 	bne.w	8003e5e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	2b12      	cmp	r3, #18
 8003c38:	d034      	beq.n	8003ca4 <HAL_GPIO_Init+0xa4>
 8003c3a:	2b12      	cmp	r3, #18
 8003c3c:	d80d      	bhi.n	8003c5a <HAL_GPIO_Init+0x5a>
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d02b      	beq.n	8003c9a <HAL_GPIO_Init+0x9a>
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d804      	bhi.n	8003c50 <HAL_GPIO_Init+0x50>
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d031      	beq.n	8003cae <HAL_GPIO_Init+0xae>
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d01c      	beq.n	8003c88 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003c4e:	e048      	b.n	8003ce2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003c50:	2b03      	cmp	r3, #3
 8003c52:	d043      	beq.n	8003cdc <HAL_GPIO_Init+0xdc>
 8003c54:	2b11      	cmp	r3, #17
 8003c56:	d01b      	beq.n	8003c90 <HAL_GPIO_Init+0x90>
          break;
 8003c58:	e043      	b.n	8003ce2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003c5a:	4a89      	ldr	r2, [pc, #548]	; (8003e80 <HAL_GPIO_Init+0x280>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d026      	beq.n	8003cae <HAL_GPIO_Init+0xae>
 8003c60:	4a87      	ldr	r2, [pc, #540]	; (8003e80 <HAL_GPIO_Init+0x280>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d806      	bhi.n	8003c74 <HAL_GPIO_Init+0x74>
 8003c66:	4a87      	ldr	r2, [pc, #540]	; (8003e84 <HAL_GPIO_Init+0x284>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d020      	beq.n	8003cae <HAL_GPIO_Init+0xae>
 8003c6c:	4a86      	ldr	r2, [pc, #536]	; (8003e88 <HAL_GPIO_Init+0x288>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d01d      	beq.n	8003cae <HAL_GPIO_Init+0xae>
          break;
 8003c72:	e036      	b.n	8003ce2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003c74:	4a85      	ldr	r2, [pc, #532]	; (8003e8c <HAL_GPIO_Init+0x28c>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d019      	beq.n	8003cae <HAL_GPIO_Init+0xae>
 8003c7a:	4a85      	ldr	r2, [pc, #532]	; (8003e90 <HAL_GPIO_Init+0x290>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d016      	beq.n	8003cae <HAL_GPIO_Init+0xae>
 8003c80:	4a84      	ldr	r2, [pc, #528]	; (8003e94 <HAL_GPIO_Init+0x294>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d013      	beq.n	8003cae <HAL_GPIO_Init+0xae>
          break;
 8003c86:	e02c      	b.n	8003ce2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	623b      	str	r3, [r7, #32]
          break;
 8003c8e:	e028      	b.n	8003ce2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	3304      	adds	r3, #4
 8003c96:	623b      	str	r3, [r7, #32]
          break;
 8003c98:	e023      	b.n	8003ce2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	3308      	adds	r3, #8
 8003ca0:	623b      	str	r3, [r7, #32]
          break;
 8003ca2:	e01e      	b.n	8003ce2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	330c      	adds	r3, #12
 8003caa:	623b      	str	r3, [r7, #32]
          break;
 8003cac:	e019      	b.n	8003ce2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d102      	bne.n	8003cbc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003cb6:	2304      	movs	r3, #4
 8003cb8:	623b      	str	r3, [r7, #32]
          break;
 8003cba:	e012      	b.n	8003ce2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d105      	bne.n	8003cd0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003cc4:	2308      	movs	r3, #8
 8003cc6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	69fa      	ldr	r2, [r7, #28]
 8003ccc:	611a      	str	r2, [r3, #16]
          break;
 8003cce:	e008      	b.n	8003ce2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003cd0:	2308      	movs	r3, #8
 8003cd2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	69fa      	ldr	r2, [r7, #28]
 8003cd8:	615a      	str	r2, [r3, #20]
          break;
 8003cda:	e002      	b.n	8003ce2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	623b      	str	r3, [r7, #32]
          break;
 8003ce0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	2bff      	cmp	r3, #255	; 0xff
 8003ce6:	d801      	bhi.n	8003cec <HAL_GPIO_Init+0xec>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	e001      	b.n	8003cf0 <HAL_GPIO_Init+0xf0>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	3304      	adds	r3, #4
 8003cf0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	2bff      	cmp	r3, #255	; 0xff
 8003cf6:	d802      	bhi.n	8003cfe <HAL_GPIO_Init+0xfe>
 8003cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	e002      	b.n	8003d04 <HAL_GPIO_Init+0x104>
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d00:	3b08      	subs	r3, #8
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	210f      	movs	r1, #15
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d12:	43db      	mvns	r3, r3
 8003d14:	401a      	ands	r2, r3
 8003d16:	6a39      	ldr	r1, [r7, #32]
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d1e:	431a      	orrs	r2, r3
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f000 8096 	beq.w	8003e5e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003d32:	4b59      	ldr	r3, [pc, #356]	; (8003e98 <HAL_GPIO_Init+0x298>)
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	4a58      	ldr	r2, [pc, #352]	; (8003e98 <HAL_GPIO_Init+0x298>)
 8003d38:	f043 0301 	orr.w	r3, r3, #1
 8003d3c:	6193      	str	r3, [r2, #24]
 8003d3e:	4b56      	ldr	r3, [pc, #344]	; (8003e98 <HAL_GPIO_Init+0x298>)
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	60bb      	str	r3, [r7, #8]
 8003d48:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003d4a:	4a54      	ldr	r2, [pc, #336]	; (8003e9c <HAL_GPIO_Init+0x29c>)
 8003d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4e:	089b      	lsrs	r3, r3, #2
 8003d50:	3302      	adds	r3, #2
 8003d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d56:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5a:	f003 0303 	and.w	r3, r3, #3
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	220f      	movs	r2, #15
 8003d62:	fa02 f303 	lsl.w	r3, r2, r3
 8003d66:	43db      	mvns	r3, r3
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a4b      	ldr	r2, [pc, #300]	; (8003ea0 <HAL_GPIO_Init+0x2a0>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d013      	beq.n	8003d9e <HAL_GPIO_Init+0x19e>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a4a      	ldr	r2, [pc, #296]	; (8003ea4 <HAL_GPIO_Init+0x2a4>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d00d      	beq.n	8003d9a <HAL_GPIO_Init+0x19a>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a49      	ldr	r2, [pc, #292]	; (8003ea8 <HAL_GPIO_Init+0x2a8>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d007      	beq.n	8003d96 <HAL_GPIO_Init+0x196>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a48      	ldr	r2, [pc, #288]	; (8003eac <HAL_GPIO_Init+0x2ac>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d101      	bne.n	8003d92 <HAL_GPIO_Init+0x192>
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e006      	b.n	8003da0 <HAL_GPIO_Init+0x1a0>
 8003d92:	2304      	movs	r3, #4
 8003d94:	e004      	b.n	8003da0 <HAL_GPIO_Init+0x1a0>
 8003d96:	2302      	movs	r3, #2
 8003d98:	e002      	b.n	8003da0 <HAL_GPIO_Init+0x1a0>
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e000      	b.n	8003da0 <HAL_GPIO_Init+0x1a0>
 8003d9e:	2300      	movs	r3, #0
 8003da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003da2:	f002 0203 	and.w	r2, r2, #3
 8003da6:	0092      	lsls	r2, r2, #2
 8003da8:	4093      	lsls	r3, r2
 8003daa:	68fa      	ldr	r2, [r7, #12]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003db0:	493a      	ldr	r1, [pc, #232]	; (8003e9c <HAL_GPIO_Init+0x29c>)
 8003db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db4:	089b      	lsrs	r3, r3, #2
 8003db6:	3302      	adds	r3, #2
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d006      	beq.n	8003dd8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003dca:	4b39      	ldr	r3, [pc, #228]	; (8003eb0 <HAL_GPIO_Init+0x2b0>)
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	4938      	ldr	r1, [pc, #224]	; (8003eb0 <HAL_GPIO_Init+0x2b0>)
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	600b      	str	r3, [r1, #0]
 8003dd6:	e006      	b.n	8003de6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003dd8:	4b35      	ldr	r3, [pc, #212]	; (8003eb0 <HAL_GPIO_Init+0x2b0>)
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	43db      	mvns	r3, r3
 8003de0:	4933      	ldr	r1, [pc, #204]	; (8003eb0 <HAL_GPIO_Init+0x2b0>)
 8003de2:	4013      	ands	r3, r2
 8003de4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d006      	beq.n	8003e00 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003df2:	4b2f      	ldr	r3, [pc, #188]	; (8003eb0 <HAL_GPIO_Init+0x2b0>)
 8003df4:	685a      	ldr	r2, [r3, #4]
 8003df6:	492e      	ldr	r1, [pc, #184]	; (8003eb0 <HAL_GPIO_Init+0x2b0>)
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	604b      	str	r3, [r1, #4]
 8003dfe:	e006      	b.n	8003e0e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003e00:	4b2b      	ldr	r3, [pc, #172]	; (8003eb0 <HAL_GPIO_Init+0x2b0>)
 8003e02:	685a      	ldr	r2, [r3, #4]
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	43db      	mvns	r3, r3
 8003e08:	4929      	ldr	r1, [pc, #164]	; (8003eb0 <HAL_GPIO_Init+0x2b0>)
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d006      	beq.n	8003e28 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003e1a:	4b25      	ldr	r3, [pc, #148]	; (8003eb0 <HAL_GPIO_Init+0x2b0>)
 8003e1c:	689a      	ldr	r2, [r3, #8]
 8003e1e:	4924      	ldr	r1, [pc, #144]	; (8003eb0 <HAL_GPIO_Init+0x2b0>)
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	608b      	str	r3, [r1, #8]
 8003e26:	e006      	b.n	8003e36 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003e28:	4b21      	ldr	r3, [pc, #132]	; (8003eb0 <HAL_GPIO_Init+0x2b0>)
 8003e2a:	689a      	ldr	r2, [r3, #8]
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	43db      	mvns	r3, r3
 8003e30:	491f      	ldr	r1, [pc, #124]	; (8003eb0 <HAL_GPIO_Init+0x2b0>)
 8003e32:	4013      	ands	r3, r2
 8003e34:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d006      	beq.n	8003e50 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003e42:	4b1b      	ldr	r3, [pc, #108]	; (8003eb0 <HAL_GPIO_Init+0x2b0>)
 8003e44:	68da      	ldr	r2, [r3, #12]
 8003e46:	491a      	ldr	r1, [pc, #104]	; (8003eb0 <HAL_GPIO_Init+0x2b0>)
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	60cb      	str	r3, [r1, #12]
 8003e4e:	e006      	b.n	8003e5e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003e50:	4b17      	ldr	r3, [pc, #92]	; (8003eb0 <HAL_GPIO_Init+0x2b0>)
 8003e52:	68da      	ldr	r2, [r3, #12]
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	43db      	mvns	r3, r3
 8003e58:	4915      	ldr	r1, [pc, #84]	; (8003eb0 <HAL_GPIO_Init+0x2b0>)
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e60:	3301      	adds	r3, #1
 8003e62:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	f47f aed0 	bne.w	8003c14 <HAL_GPIO_Init+0x14>
  }
}
 8003e74:	bf00      	nop
 8003e76:	372c      	adds	r7, #44	; 0x2c
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bc80      	pop	{r7}
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	10210000 	.word	0x10210000
 8003e84:	10110000 	.word	0x10110000
 8003e88:	10120000 	.word	0x10120000
 8003e8c:	10310000 	.word	0x10310000
 8003e90:	10320000 	.word	0x10320000
 8003e94:	10220000 	.word	0x10220000
 8003e98:	40021000 	.word	0x40021000
 8003e9c:	40010000 	.word	0x40010000
 8003ea0:	40010800 	.word	0x40010800
 8003ea4:	40010c00 	.word	0x40010c00
 8003ea8:	40011000 	.word	0x40011000
 8003eac:	40011400 	.word	0x40011400
 8003eb0:	40010400 	.word	0x40010400

08003eb4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	689a      	ldr	r2, [r3, #8]
 8003ec4:	887b      	ldrh	r3, [r7, #2]
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d002      	beq.n	8003ed2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	73fb      	strb	r3, [r7, #15]
 8003ed0:	e001      	b.n	8003ed6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3714      	adds	r7, #20
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bc80      	pop	{r7}
 8003ee0:	4770      	bx	lr

08003ee2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ee2:	b480      	push	{r7}
 8003ee4:	b083      	sub	sp, #12
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
 8003eea:	460b      	mov	r3, r1
 8003eec:	807b      	strh	r3, [r7, #2]
 8003eee:	4613      	mov	r3, r2
 8003ef0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ef2:	787b      	ldrb	r3, [r7, #1]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d003      	beq.n	8003f00 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ef8:	887a      	ldrh	r2, [r7, #2]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003efe:	e003      	b.n	8003f08 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003f00:	887b      	ldrh	r3, [r7, #2]
 8003f02:	041a      	lsls	r2, r3, #16
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	611a      	str	r2, [r3, #16]
}
 8003f08:	bf00      	nop
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bc80      	pop	{r7}
 8003f10:	4770      	bx	lr
	...

08003f14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d101      	bne.n	8003f26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e11f      	b.n	8004166 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d106      	bne.n	8003f40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f7fe f836 	bl	8001fac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2224      	movs	r2, #36	; 0x24
 8003f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f022 0201 	bic.w	r2, r2, #1
 8003f56:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f66:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f76:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f78:	f002 f838 	bl	8005fec <HAL_RCC_GetPCLK1Freq>
 8003f7c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	4a7b      	ldr	r2, [pc, #492]	; (8004170 <HAL_I2C_Init+0x25c>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d807      	bhi.n	8003f98 <HAL_I2C_Init+0x84>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	4a7a      	ldr	r2, [pc, #488]	; (8004174 <HAL_I2C_Init+0x260>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	bf94      	ite	ls
 8003f90:	2301      	movls	r3, #1
 8003f92:	2300      	movhi	r3, #0
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	e006      	b.n	8003fa6 <HAL_I2C_Init+0x92>
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	4a77      	ldr	r2, [pc, #476]	; (8004178 <HAL_I2C_Init+0x264>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	bf94      	ite	ls
 8003fa0:	2301      	movls	r3, #1
 8003fa2:	2300      	movhi	r3, #0
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d001      	beq.n	8003fae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e0db      	b.n	8004166 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	4a72      	ldr	r2, [pc, #456]	; (800417c <HAL_I2C_Init+0x268>)
 8003fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb6:	0c9b      	lsrs	r3, r3, #18
 8003fb8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68ba      	ldr	r2, [r7, #8]
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	6a1b      	ldr	r3, [r3, #32]
 8003fd4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	4a64      	ldr	r2, [pc, #400]	; (8004170 <HAL_I2C_Init+0x25c>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d802      	bhi.n	8003fe8 <HAL_I2C_Init+0xd4>
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	e009      	b.n	8003ffc <HAL_I2C_Init+0xe8>
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003fee:	fb02 f303 	mul.w	r3, r2, r3
 8003ff2:	4a63      	ldr	r2, [pc, #396]	; (8004180 <HAL_I2C_Init+0x26c>)
 8003ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff8:	099b      	lsrs	r3, r3, #6
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	6812      	ldr	r2, [r2, #0]
 8004000:	430b      	orrs	r3, r1
 8004002:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800400e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	4956      	ldr	r1, [pc, #344]	; (8004170 <HAL_I2C_Init+0x25c>)
 8004018:	428b      	cmp	r3, r1
 800401a:	d80d      	bhi.n	8004038 <HAL_I2C_Init+0x124>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	1e59      	subs	r1, r3, #1
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	005b      	lsls	r3, r3, #1
 8004026:	fbb1 f3f3 	udiv	r3, r1, r3
 800402a:	3301      	adds	r3, #1
 800402c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004030:	2b04      	cmp	r3, #4
 8004032:	bf38      	it	cc
 8004034:	2304      	movcc	r3, #4
 8004036:	e04f      	b.n	80040d8 <HAL_I2C_Init+0x1c4>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d111      	bne.n	8004064 <HAL_I2C_Init+0x150>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	1e58      	subs	r0, r3, #1
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6859      	ldr	r1, [r3, #4]
 8004048:	460b      	mov	r3, r1
 800404a:	005b      	lsls	r3, r3, #1
 800404c:	440b      	add	r3, r1
 800404e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004052:	3301      	adds	r3, #1
 8004054:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004058:	2b00      	cmp	r3, #0
 800405a:	bf0c      	ite	eq
 800405c:	2301      	moveq	r3, #1
 800405e:	2300      	movne	r3, #0
 8004060:	b2db      	uxtb	r3, r3
 8004062:	e012      	b.n	800408a <HAL_I2C_Init+0x176>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	1e58      	subs	r0, r3, #1
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6859      	ldr	r1, [r3, #4]
 800406c:	460b      	mov	r3, r1
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	440b      	add	r3, r1
 8004072:	0099      	lsls	r1, r3, #2
 8004074:	440b      	add	r3, r1
 8004076:	fbb0 f3f3 	udiv	r3, r0, r3
 800407a:	3301      	adds	r3, #1
 800407c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004080:	2b00      	cmp	r3, #0
 8004082:	bf0c      	ite	eq
 8004084:	2301      	moveq	r3, #1
 8004086:	2300      	movne	r3, #0
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b00      	cmp	r3, #0
 800408c:	d001      	beq.n	8004092 <HAL_I2C_Init+0x17e>
 800408e:	2301      	movs	r3, #1
 8004090:	e022      	b.n	80040d8 <HAL_I2C_Init+0x1c4>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d10e      	bne.n	80040b8 <HAL_I2C_Init+0x1a4>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	1e58      	subs	r0, r3, #1
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6859      	ldr	r1, [r3, #4]
 80040a2:	460b      	mov	r3, r1
 80040a4:	005b      	lsls	r3, r3, #1
 80040a6:	440b      	add	r3, r1
 80040a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80040ac:	3301      	adds	r3, #1
 80040ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040b6:	e00f      	b.n	80040d8 <HAL_I2C_Init+0x1c4>
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	1e58      	subs	r0, r3, #1
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6859      	ldr	r1, [r3, #4]
 80040c0:	460b      	mov	r3, r1
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	440b      	add	r3, r1
 80040c6:	0099      	lsls	r1, r3, #2
 80040c8:	440b      	add	r3, r1
 80040ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80040ce:	3301      	adds	r3, #1
 80040d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040d8:	6879      	ldr	r1, [r7, #4]
 80040da:	6809      	ldr	r1, [r1, #0]
 80040dc:	4313      	orrs	r3, r2
 80040de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	69da      	ldr	r2, [r3, #28]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	431a      	orrs	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	430a      	orrs	r2, r1
 80040fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004106:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	6911      	ldr	r1, [r2, #16]
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	68d2      	ldr	r2, [r2, #12]
 8004112:	4311      	orrs	r1, r2
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	6812      	ldr	r2, [r2, #0]
 8004118:	430b      	orrs	r3, r1
 800411a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	695a      	ldr	r2, [r3, #20]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	431a      	orrs	r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	430a      	orrs	r2, r1
 8004136:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f042 0201 	orr.w	r2, r2, #1
 8004146:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2220      	movs	r2, #32
 8004152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3710      	adds	r7, #16
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	000186a0 	.word	0x000186a0
 8004174:	001e847f 	.word	0x001e847f
 8004178:	003d08ff 	.word	0x003d08ff
 800417c:	431bde83 	.word	0x431bde83
 8004180:	10624dd3 	.word	0x10624dd3

08004184 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b088      	sub	sp, #32
 8004188:	af02      	add	r7, sp, #8
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	607a      	str	r2, [r7, #4]
 800418e:	461a      	mov	r2, r3
 8004190:	460b      	mov	r3, r1
 8004192:	817b      	strh	r3, [r7, #10]
 8004194:	4613      	mov	r3, r2
 8004196:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004198:	f7fe fe9e 	bl	8002ed8 <HAL_GetTick>
 800419c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b20      	cmp	r3, #32
 80041a8:	f040 80e0 	bne.w	800436c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	9300      	str	r3, [sp, #0]
 80041b0:	2319      	movs	r3, #25
 80041b2:	2201      	movs	r2, #1
 80041b4:	4970      	ldr	r1, [pc, #448]	; (8004378 <HAL_I2C_Master_Transmit+0x1f4>)
 80041b6:	68f8      	ldr	r0, [r7, #12]
 80041b8:	f001 f966 	bl	8005488 <I2C_WaitOnFlagUntilTimeout>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d001      	beq.n	80041c6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80041c2:	2302      	movs	r3, #2
 80041c4:	e0d3      	b.n	800436e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d101      	bne.n	80041d4 <HAL_I2C_Master_Transmit+0x50>
 80041d0:	2302      	movs	r3, #2
 80041d2:	e0cc      	b.n	800436e <HAL_I2C_Master_Transmit+0x1ea>
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0301 	and.w	r3, r3, #1
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d007      	beq.n	80041fa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f042 0201 	orr.w	r2, r2, #1
 80041f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004208:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2221      	movs	r2, #33	; 0x21
 800420e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2210      	movs	r2, #16
 8004216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2200      	movs	r2, #0
 800421e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	893a      	ldrh	r2, [r7, #8]
 800422a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004230:	b29a      	uxth	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	4a50      	ldr	r2, [pc, #320]	; (800437c <HAL_I2C_Master_Transmit+0x1f8>)
 800423a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800423c:	8979      	ldrh	r1, [r7, #10]
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	6a3a      	ldr	r2, [r7, #32]
 8004242:	68f8      	ldr	r0, [r7, #12]
 8004244:	f000 fe52 	bl	8004eec <I2C_MasterRequestWrite>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d001      	beq.n	8004252 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e08d      	b.n	800436e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004252:	2300      	movs	r3, #0
 8004254:	613b      	str	r3, [r7, #16]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	695b      	ldr	r3, [r3, #20]
 800425c:	613b      	str	r3, [r7, #16]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	699b      	ldr	r3, [r3, #24]
 8004264:	613b      	str	r3, [r7, #16]
 8004266:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004268:	e066      	b.n	8004338 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800426a:	697a      	ldr	r2, [r7, #20]
 800426c:	6a39      	ldr	r1, [r7, #32]
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f001 f9e0 	bl	8005634 <I2C_WaitOnTXEFlagUntilTimeout>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00d      	beq.n	8004296 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427e:	2b04      	cmp	r3, #4
 8004280:	d107      	bne.n	8004292 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004290:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e06b      	b.n	800436e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429a:	781a      	ldrb	r2, [r3, #0]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a6:	1c5a      	adds	r2, r3, #1
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	3b01      	subs	r3, #1
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042be:	3b01      	subs	r3, #1
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	695b      	ldr	r3, [r3, #20]
 80042cc:	f003 0304 	and.w	r3, r3, #4
 80042d0:	2b04      	cmp	r3, #4
 80042d2:	d11b      	bne.n	800430c <HAL_I2C_Master_Transmit+0x188>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d017      	beq.n	800430c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e0:	781a      	ldrb	r2, [r3, #0]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ec:	1c5a      	adds	r2, r3, #1
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	3b01      	subs	r3, #1
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004304:	3b01      	subs	r3, #1
 8004306:	b29a      	uxth	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800430c:	697a      	ldr	r2, [r7, #20]
 800430e:	6a39      	ldr	r1, [r7, #32]
 8004310:	68f8      	ldr	r0, [r7, #12]
 8004312:	f001 f9d0 	bl	80056b6 <I2C_WaitOnBTFFlagUntilTimeout>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00d      	beq.n	8004338 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004320:	2b04      	cmp	r3, #4
 8004322:	d107      	bne.n	8004334 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004332:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e01a      	b.n	800436e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800433c:	2b00      	cmp	r3, #0
 800433e:	d194      	bne.n	800426a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800434e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2220      	movs	r2, #32
 8004354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2200      	movs	r2, #0
 800435c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004368:	2300      	movs	r3, #0
 800436a:	e000      	b.n	800436e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800436c:	2302      	movs	r3, #2
  }
}
 800436e:	4618      	mov	r0, r3
 8004370:	3718      	adds	r7, #24
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	00100002 	.word	0x00100002
 800437c:	ffff0000 	.word	0xffff0000

08004380 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b08c      	sub	sp, #48	; 0x30
 8004384:	af02      	add	r7, sp, #8
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	607a      	str	r2, [r7, #4]
 800438a:	461a      	mov	r2, r3
 800438c:	460b      	mov	r3, r1
 800438e:	817b      	strh	r3, [r7, #10]
 8004390:	4613      	mov	r3, r2
 8004392:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8004394:	2300      	movs	r3, #0
 8004396:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004398:	f7fe fd9e 	bl	8002ed8 <HAL_GetTick>
 800439c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	2b20      	cmp	r3, #32
 80043a8:	f040 8238 	bne.w	800481c <HAL_I2C_Master_Receive+0x49c>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ae:	9300      	str	r3, [sp, #0]
 80043b0:	2319      	movs	r3, #25
 80043b2:	2201      	movs	r2, #1
 80043b4:	497e      	ldr	r1, [pc, #504]	; (80045b0 <HAL_I2C_Master_Receive+0x230>)
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f001 f866 	bl	8005488 <I2C_WaitOnFlagUntilTimeout>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d001      	beq.n	80043c6 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80043c2:	2302      	movs	r3, #2
 80043c4:	e22b      	b.n	800481e <HAL_I2C_Master_Receive+0x49e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d101      	bne.n	80043d4 <HAL_I2C_Master_Receive+0x54>
 80043d0:	2302      	movs	r3, #2
 80043d2:	e224      	b.n	800481e <HAL_I2C_Master_Receive+0x49e>
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0301 	and.w	r3, r3, #1
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d007      	beq.n	80043fa <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f042 0201 	orr.w	r2, r2, #1
 80043f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004408:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2222      	movs	r2, #34	; 0x22
 800440e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2210      	movs	r2, #16
 8004416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2200      	movs	r2, #0
 800441e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	893a      	ldrh	r2, [r7, #8]
 800442a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004430:	b29a      	uxth	r2, r3
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	4a5e      	ldr	r2, [pc, #376]	; (80045b4 <HAL_I2C_Master_Receive+0x234>)
 800443a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800443c:	8979      	ldrh	r1, [r7, #10]
 800443e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004440:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004442:	68f8      	ldr	r0, [r7, #12]
 8004444:	f000 fdd4 	bl	8004ff0 <I2C_MasterRequestRead>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d001      	beq.n	8004452 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e1e5      	b.n	800481e <HAL_I2C_Master_Receive+0x49e>
    }

    if (hi2c->XferSize == 0U)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004456:	2b00      	cmp	r3, #0
 8004458:	d113      	bne.n	8004482 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800445a:	2300      	movs	r3, #0
 800445c:	61fb      	str	r3, [r7, #28]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	695b      	ldr	r3, [r3, #20]
 8004464:	61fb      	str	r3, [r7, #28]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	699b      	ldr	r3, [r3, #24]
 800446c:	61fb      	str	r3, [r7, #28]
 800446e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800447e:	601a      	str	r2, [r3, #0]
 8004480:	e1b9      	b.n	80047f6 <HAL_I2C_Master_Receive+0x476>
    }
    else if (hi2c->XferSize == 1U)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004486:	2b01      	cmp	r3, #1
 8004488:	d11d      	bne.n	80044c6 <HAL_I2C_Master_Receive+0x146>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004498:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800449a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800449c:	2300      	movs	r3, #0
 800449e:	61bb      	str	r3, [r7, #24]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	61bb      	str	r3, [r7, #24]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	61bb      	str	r3, [r7, #24]
 80044b0:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044c0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80044c2:	b662      	cpsie	i
 80044c4:	e197      	b.n	80047f6 <HAL_I2C_Master_Receive+0x476>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d11d      	bne.n	800450a <HAL_I2C_Master_Receive+0x18a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044dc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80044de:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044e0:	2300      	movs	r3, #0
 80044e2:	617b      	str	r3, [r7, #20]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	617b      	str	r3, [r7, #20]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	699b      	ldr	r3, [r3, #24]
 80044f2:	617b      	str	r3, [r7, #20]
 80044f4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004504:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004506:	b662      	cpsie	i
 8004508:	e175      	b.n	80047f6 <HAL_I2C_Master_Receive+0x476>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004518:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800451a:	2300      	movs	r3, #0
 800451c:	613b      	str	r3, [r7, #16]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	695b      	ldr	r3, [r3, #20]
 8004524:	613b      	str	r3, [r7, #16]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	699b      	ldr	r3, [r3, #24]
 800452c:	613b      	str	r3, [r7, #16]
 800452e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004530:	e161      	b.n	80047f6 <HAL_I2C_Master_Receive+0x476>
    {
      if (hi2c->XferSize <= 3U)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004536:	2b03      	cmp	r3, #3
 8004538:	f200 811a 	bhi.w	8004770 <HAL_I2C_Master_Receive+0x3f0>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004540:	2b01      	cmp	r3, #1
 8004542:	d123      	bne.n	800458c <HAL_I2C_Master_Receive+0x20c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004546:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004548:	68f8      	ldr	r0, [r7, #12]
 800454a:	f001 f8f5 	bl	8005738 <I2C_WaitOnRXNEFlagUntilTimeout>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d001      	beq.n	8004558 <HAL_I2C_Master_Receive+0x1d8>
          {
            return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e162      	b.n	800481e <HAL_I2C_Master_Receive+0x49e>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	691a      	ldr	r2, [r3, #16]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004562:	b2d2      	uxtb	r2, r2
 8004564:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456a:	1c5a      	adds	r2, r3, #1
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004574:	3b01      	subs	r3, #1
 8004576:	b29a      	uxth	r2, r3
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004580:	b29b      	uxth	r3, r3
 8004582:	3b01      	subs	r3, #1
 8004584:	b29a      	uxth	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	855a      	strh	r2, [r3, #42]	; 0x2a
 800458a:	e134      	b.n	80047f6 <HAL_I2C_Master_Receive+0x476>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004590:	2b02      	cmp	r3, #2
 8004592:	d150      	bne.n	8004636 <HAL_I2C_Master_Receive+0x2b6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004596:	9300      	str	r3, [sp, #0]
 8004598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800459a:	2200      	movs	r2, #0
 800459c:	4906      	ldr	r1, [pc, #24]	; (80045b8 <HAL_I2C_Master_Receive+0x238>)
 800459e:	68f8      	ldr	r0, [r7, #12]
 80045a0:	f000 ff72 	bl	8005488 <I2C_WaitOnFlagUntilTimeout>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d008      	beq.n	80045bc <HAL_I2C_Master_Receive+0x23c>
          {
            return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e137      	b.n	800481e <HAL_I2C_Master_Receive+0x49e>
 80045ae:	bf00      	nop
 80045b0:	00100002 	.word	0x00100002
 80045b4:	ffff0000 	.word	0xffff0000
 80045b8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80045bc:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045cc:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	691a      	ldr	r2, [r3, #16]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d8:	b2d2      	uxtb	r2, r2
 80045da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e0:	1c5a      	adds	r2, r3, #1
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ea:	3b01      	subs	r3, #1
 80045ec:	b29a      	uxth	r2, r3
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	3b01      	subs	r3, #1
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004600:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	691a      	ldr	r2, [r3, #16]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460c:	b2d2      	uxtb	r2, r2
 800460e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004614:	1c5a      	adds	r2, r3, #1
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800461e:	3b01      	subs	r3, #1
 8004620:	b29a      	uxth	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800462a:	b29b      	uxth	r3, r3
 800462c:	3b01      	subs	r3, #1
 800462e:	b29a      	uxth	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004634:	e0df      	b.n	80047f6 <HAL_I2C_Master_Receive+0x476>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004638:	9300      	str	r3, [sp, #0]
 800463a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800463c:	2200      	movs	r2, #0
 800463e:	497a      	ldr	r1, [pc, #488]	; (8004828 <HAL_I2C_Master_Receive+0x4a8>)
 8004640:	68f8      	ldr	r0, [r7, #12]
 8004642:	f000 ff21 	bl	8005488 <I2C_WaitOnFlagUntilTimeout>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d001      	beq.n	8004650 <HAL_I2C_Master_Receive+0x2d0>
          {
            return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e0e6      	b.n	800481e <HAL_I2C_Master_Receive+0x49e>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800465e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004660:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	691a      	ldr	r2, [r3, #16]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466c:	b2d2      	uxtb	r2, r2
 800466e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004674:	1c5a      	adds	r2, r3, #1
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800467e:	3b01      	subs	r3, #1
 8004680:	b29a      	uxth	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800468a:	b29b      	uxth	r3, r3
 800468c:	3b01      	subs	r3, #1
 800468e:	b29a      	uxth	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004694:	4b65      	ldr	r3, [pc, #404]	; (800482c <HAL_I2C_Master_Receive+0x4ac>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	08db      	lsrs	r3, r3, #3
 800469a:	4a65      	ldr	r2, [pc, #404]	; (8004830 <HAL_I2C_Master_Receive+0x4b0>)
 800469c:	fba2 2303 	umull	r2, r3, r2, r3
 80046a0:	0a1a      	lsrs	r2, r3, #8
 80046a2:	4613      	mov	r3, r2
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	4413      	add	r3, r2
 80046a8:	00da      	lsls	r2, r3, #3
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80046ae:	6a3b      	ldr	r3, [r7, #32]
 80046b0:	3b01      	subs	r3, #1
 80046b2:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80046b4:	6a3b      	ldr	r3, [r7, #32]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d117      	bne.n	80046ea <HAL_I2C_Master_Receive+0x36a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2200      	movs	r2, #0
 80046be:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2220      	movs	r2, #32
 80046c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d4:	f043 0220 	orr.w	r2, r3, #32
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80046dc:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e099      	b.n	800481e <HAL_I2C_Master_Receive+0x49e>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	695b      	ldr	r3, [r3, #20]
 80046f0:	f003 0304 	and.w	r3, r3, #4
 80046f4:	2b04      	cmp	r3, #4
 80046f6:	d1da      	bne.n	80046ae <HAL_I2C_Master_Receive+0x32e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004706:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	691a      	ldr	r2, [r3, #16]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004712:	b2d2      	uxtb	r2, r2
 8004714:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471a:	1c5a      	adds	r2, r3, #1
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004724:	3b01      	subs	r3, #1
 8004726:	b29a      	uxth	r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004730:	b29b      	uxth	r3, r3
 8004732:	3b01      	subs	r3, #1
 8004734:	b29a      	uxth	r2, r3
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	855a      	strh	r2, [r3, #42]	; 0x2a
 800473a:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	691a      	ldr	r2, [r3, #16]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004746:	b2d2      	uxtb	r2, r2
 8004748:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474e:	1c5a      	adds	r2, r3, #1
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004758:	3b01      	subs	r3, #1
 800475a:	b29a      	uxth	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004764:	b29b      	uxth	r3, r3
 8004766:	3b01      	subs	r3, #1
 8004768:	b29a      	uxth	r2, r3
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800476e:	e042      	b.n	80047f6 <HAL_I2C_Master_Receive+0x476>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004772:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	f000 ffdf 	bl	8005738 <I2C_WaitOnRXNEFlagUntilTimeout>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d001      	beq.n	8004784 <HAL_I2C_Master_Receive+0x404>
        {
          return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e04c      	b.n	800481e <HAL_I2C_Master_Receive+0x49e>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	691a      	ldr	r2, [r3, #16]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478e:	b2d2      	uxtb	r2, r2
 8004790:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004796:	1c5a      	adds	r2, r3, #1
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047a0:	3b01      	subs	r3, #1
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	3b01      	subs	r3, #1
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	695b      	ldr	r3, [r3, #20]
 80047bc:	f003 0304 	and.w	r3, r3, #4
 80047c0:	2b04      	cmp	r3, #4
 80047c2:	d118      	bne.n	80047f6 <HAL_I2C_Master_Receive+0x476>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	691a      	ldr	r2, [r3, #16]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ce:	b2d2      	uxtb	r2, r2
 80047d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d6:	1c5a      	adds	r2, r3, #1
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047e0:	3b01      	subs	r3, #1
 80047e2:	b29a      	uxth	r2, r3
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	3b01      	subs	r3, #1
 80047f0:	b29a      	uxth	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	f47f ae99 	bne.w	8004532 <HAL_I2C_Master_Receive+0x1b2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2220      	movs	r2, #32
 8004804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2200      	movs	r2, #0
 800480c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004818:	2300      	movs	r3, #0
 800481a:	e000      	b.n	800481e <HAL_I2C_Master_Receive+0x49e>
  }
  else
  {
    return HAL_BUSY;
 800481c:	2302      	movs	r3, #2
  }
}
 800481e:	4618      	mov	r0, r3
 8004820:	3728      	adds	r7, #40	; 0x28
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	00010004 	.word	0x00010004
 800482c:	20000004 	.word	0x20000004
 8004830:	14f8b589 	.word	0x14f8b589

08004834 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b088      	sub	sp, #32
 8004838:	af02      	add	r7, sp, #8
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	4608      	mov	r0, r1
 800483e:	4611      	mov	r1, r2
 8004840:	461a      	mov	r2, r3
 8004842:	4603      	mov	r3, r0
 8004844:	817b      	strh	r3, [r7, #10]
 8004846:	460b      	mov	r3, r1
 8004848:	813b      	strh	r3, [r7, #8]
 800484a:	4613      	mov	r3, r2
 800484c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800484e:	f7fe fb43 	bl	8002ed8 <HAL_GetTick>
 8004852:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800485a:	b2db      	uxtb	r3, r3
 800485c:	2b20      	cmp	r3, #32
 800485e:	f040 80d9 	bne.w	8004a14 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	9300      	str	r3, [sp, #0]
 8004866:	2319      	movs	r3, #25
 8004868:	2201      	movs	r2, #1
 800486a:	496d      	ldr	r1, [pc, #436]	; (8004a20 <HAL_I2C_Mem_Write+0x1ec>)
 800486c:	68f8      	ldr	r0, [r7, #12]
 800486e:	f000 fe0b 	bl	8005488 <I2C_WaitOnFlagUntilTimeout>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d001      	beq.n	800487c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004878:	2302      	movs	r3, #2
 800487a:	e0cc      	b.n	8004a16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004882:	2b01      	cmp	r3, #1
 8004884:	d101      	bne.n	800488a <HAL_I2C_Mem_Write+0x56>
 8004886:	2302      	movs	r3, #2
 8004888:	e0c5      	b.n	8004a16 <HAL_I2C_Mem_Write+0x1e2>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0301 	and.w	r3, r3, #1
 800489c:	2b01      	cmp	r3, #1
 800489e:	d007      	beq.n	80048b0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f042 0201 	orr.w	r2, r2, #1
 80048ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2221      	movs	r2, #33	; 0x21
 80048c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2240      	movs	r2, #64	; 0x40
 80048cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2200      	movs	r2, #0
 80048d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6a3a      	ldr	r2, [r7, #32]
 80048da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80048e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048e6:	b29a      	uxth	r2, r3
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	4a4d      	ldr	r2, [pc, #308]	; (8004a24 <HAL_I2C_Mem_Write+0x1f0>)
 80048f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80048f2:	88f8      	ldrh	r0, [r7, #6]
 80048f4:	893a      	ldrh	r2, [r7, #8]
 80048f6:	8979      	ldrh	r1, [r7, #10]
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	9301      	str	r3, [sp, #4]
 80048fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fe:	9300      	str	r3, [sp, #0]
 8004900:	4603      	mov	r3, r0
 8004902:	68f8      	ldr	r0, [r7, #12]
 8004904:	f000 fc42 	bl	800518c <I2C_RequestMemoryWrite>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d052      	beq.n	80049b4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e081      	b.n	8004a16 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004912:	697a      	ldr	r2, [r7, #20]
 8004914:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004916:	68f8      	ldr	r0, [r7, #12]
 8004918:	f000 fe8c 	bl	8005634 <I2C_WaitOnTXEFlagUntilTimeout>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00d      	beq.n	800493e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004926:	2b04      	cmp	r3, #4
 8004928:	d107      	bne.n	800493a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004938:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e06b      	b.n	8004a16 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004942:	781a      	ldrb	r2, [r3, #0]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494e:	1c5a      	adds	r2, r3, #1
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004958:	3b01      	subs	r3, #1
 800495a:	b29a      	uxth	r2, r3
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004964:	b29b      	uxth	r3, r3
 8004966:	3b01      	subs	r3, #1
 8004968:	b29a      	uxth	r2, r3
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	695b      	ldr	r3, [r3, #20]
 8004974:	f003 0304 	and.w	r3, r3, #4
 8004978:	2b04      	cmp	r3, #4
 800497a:	d11b      	bne.n	80049b4 <HAL_I2C_Mem_Write+0x180>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004980:	2b00      	cmp	r3, #0
 8004982:	d017      	beq.n	80049b4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004988:	781a      	ldrb	r2, [r3, #0]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004994:	1c5a      	adds	r2, r3, #1
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800499e:	3b01      	subs	r3, #1
 80049a0:	b29a      	uxth	r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	3b01      	subs	r3, #1
 80049ae:	b29a      	uxth	r2, r3
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d1aa      	bne.n	8004912 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049bc:	697a      	ldr	r2, [r7, #20]
 80049be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	f000 fe78 	bl	80056b6 <I2C_WaitOnBTFFlagUntilTimeout>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d00d      	beq.n	80049e8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d0:	2b04      	cmp	r3, #4
 80049d2:	d107      	bne.n	80049e4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049e2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e016      	b.n	8004a16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2220      	movs	r2, #32
 80049fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004a10:	2300      	movs	r3, #0
 8004a12:	e000      	b.n	8004a16 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004a14:	2302      	movs	r3, #2
  }
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3718      	adds	r7, #24
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	00100002 	.word	0x00100002
 8004a24:	ffff0000 	.word	0xffff0000

08004a28 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b08c      	sub	sp, #48	; 0x30
 8004a2c:	af02      	add	r7, sp, #8
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	4608      	mov	r0, r1
 8004a32:	4611      	mov	r1, r2
 8004a34:	461a      	mov	r2, r3
 8004a36:	4603      	mov	r3, r0
 8004a38:	817b      	strh	r3, [r7, #10]
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	813b      	strh	r3, [r7, #8]
 8004a3e:	4613      	mov	r3, r2
 8004a40:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004a42:	2300      	movs	r3, #0
 8004a44:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a46:	f7fe fa47 	bl	8002ed8 <HAL_GetTick>
 8004a4a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	2b20      	cmp	r3, #32
 8004a56:	f040 823d 	bne.w	8004ed4 <HAL_I2C_Mem_Read+0x4ac>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5c:	9300      	str	r3, [sp, #0]
 8004a5e:	2319      	movs	r3, #25
 8004a60:	2201      	movs	r2, #1
 8004a62:	4981      	ldr	r1, [pc, #516]	; (8004c68 <HAL_I2C_Mem_Read+0x240>)
 8004a64:	68f8      	ldr	r0, [r7, #12]
 8004a66:	f000 fd0f 	bl	8005488 <I2C_WaitOnFlagUntilTimeout>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d001      	beq.n	8004a74 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004a70:	2302      	movs	r3, #2
 8004a72:	e230      	b.n	8004ed6 <HAL_I2C_Mem_Read+0x4ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d101      	bne.n	8004a82 <HAL_I2C_Mem_Read+0x5a>
 8004a7e:	2302      	movs	r3, #2
 8004a80:	e229      	b.n	8004ed6 <HAL_I2C_Mem_Read+0x4ae>
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2201      	movs	r2, #1
 8004a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0301 	and.w	r3, r3, #1
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d007      	beq.n	8004aa8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f042 0201 	orr.w	r2, r2, #1
 8004aa6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ab6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2222      	movs	r2, #34	; 0x22
 8004abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2240      	movs	r2, #64	; 0x40
 8004ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ad2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004ad8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ade:	b29a      	uxth	r2, r3
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	4a61      	ldr	r2, [pc, #388]	; (8004c6c <HAL_I2C_Mem_Read+0x244>)
 8004ae8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004aea:	88f8      	ldrh	r0, [r7, #6]
 8004aec:	893a      	ldrh	r2, [r7, #8]
 8004aee:	8979      	ldrh	r1, [r7, #10]
 8004af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af2:	9301      	str	r3, [sp, #4]
 8004af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af6:	9300      	str	r3, [sp, #0]
 8004af8:	4603      	mov	r3, r0
 8004afa:	68f8      	ldr	r0, [r7, #12]
 8004afc:	f000 fbdc 	bl	80052b8 <I2C_RequestMemoryRead>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d001      	beq.n	8004b0a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e1e5      	b.n	8004ed6 <HAL_I2C_Mem_Read+0x4ae>
    }

    if (hi2c->XferSize == 0U)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d113      	bne.n	8004b3a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b12:	2300      	movs	r3, #0
 8004b14:	61fb      	str	r3, [r7, #28]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	695b      	ldr	r3, [r3, #20]
 8004b1c:	61fb      	str	r3, [r7, #28]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	699b      	ldr	r3, [r3, #24]
 8004b24:	61fb      	str	r3, [r7, #28]
 8004b26:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b36:	601a      	str	r2, [r3, #0]
 8004b38:	e1b9      	b.n	8004eae <HAL_I2C_Mem_Read+0x486>
    }
    else if (hi2c->XferSize == 1U)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d11d      	bne.n	8004b7e <HAL_I2C_Mem_Read+0x156>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b50:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004b52:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b54:	2300      	movs	r3, #0
 8004b56:	61bb      	str	r3, [r7, #24]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	695b      	ldr	r3, [r3, #20]
 8004b5e:	61bb      	str	r3, [r7, #24]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	699b      	ldr	r3, [r3, #24]
 8004b66:	61bb      	str	r3, [r7, #24]
 8004b68:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b78:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004b7a:	b662      	cpsie	i
 8004b7c:	e197      	b.n	8004eae <HAL_I2C_Mem_Read+0x486>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d11d      	bne.n	8004bc2 <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b94:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004b96:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b98:	2300      	movs	r3, #0
 8004b9a:	617b      	str	r3, [r7, #20]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	617b      	str	r3, [r7, #20]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	699b      	ldr	r3, [r3, #24]
 8004baa:	617b      	str	r3, [r7, #20]
 8004bac:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bbc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004bbe:	b662      	cpsie	i
 8004bc0:	e175      	b.n	8004eae <HAL_I2C_Mem_Read+0x486>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004bd0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	613b      	str	r3, [r7, #16]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	695b      	ldr	r3, [r3, #20]
 8004bdc:	613b      	str	r3, [r7, #16]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	613b      	str	r3, [r7, #16]
 8004be6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004be8:	e161      	b.n	8004eae <HAL_I2C_Mem_Read+0x486>
    {
      if (hi2c->XferSize <= 3U)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bee:	2b03      	cmp	r3, #3
 8004bf0:	f200 811a 	bhi.w	8004e28 <HAL_I2C_Mem_Read+0x400>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d123      	bne.n	8004c44 <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bfe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c00:	68f8      	ldr	r0, [r7, #12]
 8004c02:	f000 fd99 	bl	8005738 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d001      	beq.n	8004c10 <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e162      	b.n	8004ed6 <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	691a      	ldr	r2, [r3, #16]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1a:	b2d2      	uxtb	r2, r2
 8004c1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c22:	1c5a      	adds	r2, r3, #1
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c2c:	3b01      	subs	r3, #1
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	3b01      	subs	r3, #1
 8004c3c:	b29a      	uxth	r2, r3
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c42:	e134      	b.n	8004eae <HAL_I2C_Mem_Read+0x486>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d150      	bne.n	8004cee <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4e:	9300      	str	r3, [sp, #0]
 8004c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c52:	2200      	movs	r2, #0
 8004c54:	4906      	ldr	r1, [pc, #24]	; (8004c70 <HAL_I2C_Mem_Read+0x248>)
 8004c56:	68f8      	ldr	r0, [r7, #12]
 8004c58:	f000 fc16 	bl	8005488 <I2C_WaitOnFlagUntilTimeout>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d008      	beq.n	8004c74 <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e137      	b.n	8004ed6 <HAL_I2C_Mem_Read+0x4ae>
 8004c66:	bf00      	nop
 8004c68:	00100002 	.word	0x00100002
 8004c6c:	ffff0000 	.word	0xffff0000
 8004c70:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004c74:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c84:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	691a      	ldr	r2, [r3, #16]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c90:	b2d2      	uxtb	r2, r2
 8004c92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c98:	1c5a      	adds	r2, r3, #1
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	b29a      	uxth	r2, r3
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	b29a      	uxth	r2, r3
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004cb8:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	691a      	ldr	r2, [r3, #16]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc4:	b2d2      	uxtb	r2, r2
 8004cc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ccc:	1c5a      	adds	r2, r3, #1
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	b29a      	uxth	r2, r3
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	3b01      	subs	r3, #1
 8004ce6:	b29a      	uxth	r2, r3
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004cec:	e0df      	b.n	8004eae <HAL_I2C_Mem_Read+0x486>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf0:	9300      	str	r3, [sp, #0]
 8004cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	497a      	ldr	r1, [pc, #488]	; (8004ee0 <HAL_I2C_Mem_Read+0x4b8>)
 8004cf8:	68f8      	ldr	r0, [r7, #12]
 8004cfa:	f000 fbc5 	bl	8005488 <I2C_WaitOnFlagUntilTimeout>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d001      	beq.n	8004d08 <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e0e6      	b.n	8004ed6 <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d16:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004d18:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	691a      	ldr	r2, [r3, #16]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d24:	b2d2      	uxtb	r2, r2
 8004d26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2c:	1c5a      	adds	r2, r3, #1
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d36:	3b01      	subs	r3, #1
 8004d38:	b29a      	uxth	r2, r3
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	3b01      	subs	r3, #1
 8004d46:	b29a      	uxth	r2, r3
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004d4c:	4b65      	ldr	r3, [pc, #404]	; (8004ee4 <HAL_I2C_Mem_Read+0x4bc>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	08db      	lsrs	r3, r3, #3
 8004d52:	4a65      	ldr	r2, [pc, #404]	; (8004ee8 <HAL_I2C_Mem_Read+0x4c0>)
 8004d54:	fba2 2303 	umull	r2, r3, r2, r3
 8004d58:	0a1a      	lsrs	r2, r3, #8
 8004d5a:	4613      	mov	r3, r2
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	4413      	add	r3, r2
 8004d60:	00da      	lsls	r2, r3, #3
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004d66:	6a3b      	ldr	r3, [r7, #32]
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004d6c:	6a3b      	ldr	r3, [r7, #32]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d117      	bne.n	8004da2 <HAL_I2C_Mem_Read+0x37a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2200      	movs	r2, #0
 8004d76:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2220      	movs	r2, #32
 8004d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8c:	f043 0220 	orr.w	r2, r3, #32
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004d94:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e099      	b.n	8004ed6 <HAL_I2C_Mem_Read+0x4ae>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	695b      	ldr	r3, [r3, #20]
 8004da8:	f003 0304 	and.w	r3, r3, #4
 8004dac:	2b04      	cmp	r3, #4
 8004dae:	d1da      	bne.n	8004d66 <HAL_I2C_Mem_Read+0x33e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dbe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	691a      	ldr	r2, [r3, #16]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dca:	b2d2      	uxtb	r2, r2
 8004dcc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd2:	1c5a      	adds	r2, r3, #1
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	b29a      	uxth	r2, r3
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	3b01      	subs	r3, #1
 8004dec:	b29a      	uxth	r2, r3
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004df2:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	691a      	ldr	r2, [r3, #16]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfe:	b2d2      	uxtb	r2, r2
 8004e00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e06:	1c5a      	adds	r2, r3, #1
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e10:	3b01      	subs	r3, #1
 8004e12:	b29a      	uxth	r2, r3
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	3b01      	subs	r3, #1
 8004e20:	b29a      	uxth	r2, r3
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e26:	e042      	b.n	8004eae <HAL_I2C_Mem_Read+0x486>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e2c:	68f8      	ldr	r0, [r7, #12]
 8004e2e:	f000 fc83 	bl	8005738 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d001      	beq.n	8004e3c <HAL_I2C_Mem_Read+0x414>
        {
          return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e04c      	b.n	8004ed6 <HAL_I2C_Mem_Read+0x4ae>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	691a      	ldr	r2, [r3, #16]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e46:	b2d2      	uxtb	r2, r2
 8004e48:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4e:	1c5a      	adds	r2, r3, #1
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	b29a      	uxth	r2, r3
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	3b01      	subs	r3, #1
 8004e68:	b29a      	uxth	r2, r3
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	695b      	ldr	r3, [r3, #20]
 8004e74:	f003 0304 	and.w	r3, r3, #4
 8004e78:	2b04      	cmp	r3, #4
 8004e7a:	d118      	bne.n	8004eae <HAL_I2C_Mem_Read+0x486>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	691a      	ldr	r2, [r3, #16]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e86:	b2d2      	uxtb	r2, r2
 8004e88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8e:	1c5a      	adds	r2, r3, #1
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e98:	3b01      	subs	r3, #1
 8004e9a:	b29a      	uxth	r2, r3
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	b29a      	uxth	r2, r3
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	f47f ae99 	bne.w	8004bea <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2220      	movs	r2, #32
 8004ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	e000      	b.n	8004ed6 <HAL_I2C_Mem_Read+0x4ae>
  }
  else
  {
    return HAL_BUSY;
 8004ed4:	2302      	movs	r3, #2
  }
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3728      	adds	r7, #40	; 0x28
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	00010004 	.word	0x00010004
 8004ee4:	20000004 	.word	0x20000004
 8004ee8:	14f8b589 	.word	0x14f8b589

08004eec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b088      	sub	sp, #32
 8004ef0:	af02      	add	r7, sp, #8
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	607a      	str	r2, [r7, #4]
 8004ef6:	603b      	str	r3, [r7, #0]
 8004ef8:	460b      	mov	r3, r1
 8004efa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f00:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	2b08      	cmp	r3, #8
 8004f06:	d006      	beq.n	8004f16 <I2C_MasterRequestWrite+0x2a>
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d003      	beq.n	8004f16 <I2C_MasterRequestWrite+0x2a>
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f14:	d108      	bne.n	8004f28 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f24:	601a      	str	r2, [r3, #0]
 8004f26:	e00b      	b.n	8004f40 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f2c:	2b12      	cmp	r3, #18
 8004f2e:	d107      	bne.n	8004f40 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f3e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	9300      	str	r3, [sp, #0]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f4c:	68f8      	ldr	r0, [r7, #12]
 8004f4e:	f000 fa9b 	bl	8005488 <I2C_WaitOnFlagUntilTimeout>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d00d      	beq.n	8004f74 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f66:	d103      	bne.n	8004f70 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f6e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004f70:	2303      	movs	r3, #3
 8004f72:	e035      	b.n	8004fe0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f7c:	d108      	bne.n	8004f90 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f7e:	897b      	ldrh	r3, [r7, #10]
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	461a      	mov	r2, r3
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f8c:	611a      	str	r2, [r3, #16]
 8004f8e:	e01b      	b.n	8004fc8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004f90:	897b      	ldrh	r3, [r7, #10]
 8004f92:	11db      	asrs	r3, r3, #7
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	f003 0306 	and.w	r3, r3, #6
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	f063 030f 	orn	r3, r3, #15
 8004fa0:	b2da      	uxtb	r2, r3
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	490e      	ldr	r1, [pc, #56]	; (8004fe8 <I2C_MasterRequestWrite+0xfc>)
 8004fae:	68f8      	ldr	r0, [r7, #12]
 8004fb0:	f000 fac1 	bl	8005536 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d001      	beq.n	8004fbe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e010      	b.n	8004fe0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004fbe:	897b      	ldrh	r3, [r7, #10]
 8004fc0:	b2da      	uxtb	r2, r3
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	4907      	ldr	r1, [pc, #28]	; (8004fec <I2C_MasterRequestWrite+0x100>)
 8004fce:	68f8      	ldr	r0, [r7, #12]
 8004fd0:	f000 fab1 	bl	8005536 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d001      	beq.n	8004fde <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e000      	b.n	8004fe0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004fde:	2300      	movs	r3, #0
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3718      	adds	r7, #24
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	00010008 	.word	0x00010008
 8004fec:	00010002 	.word	0x00010002

08004ff0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b088      	sub	sp, #32
 8004ff4:	af02      	add	r7, sp, #8
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	607a      	str	r2, [r7, #4]
 8004ffa:	603b      	str	r3, [r7, #0]
 8004ffc:	460b      	mov	r3, r1
 8004ffe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005004:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005014:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	2b08      	cmp	r3, #8
 800501a:	d006      	beq.n	800502a <I2C_MasterRequestRead+0x3a>
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	2b01      	cmp	r3, #1
 8005020:	d003      	beq.n	800502a <I2C_MasterRequestRead+0x3a>
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005028:	d108      	bne.n	800503c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005038:	601a      	str	r2, [r3, #0]
 800503a:	e00b      	b.n	8005054 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005040:	2b11      	cmp	r3, #17
 8005042:	d107      	bne.n	8005054 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005052:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	9300      	str	r3, [sp, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	f000 fa11 	bl	8005488 <I2C_WaitOnFlagUntilTimeout>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d00d      	beq.n	8005088 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005076:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800507a:	d103      	bne.n	8005084 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005082:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	e079      	b.n	800517c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	691b      	ldr	r3, [r3, #16]
 800508c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005090:	d108      	bne.n	80050a4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005092:	897b      	ldrh	r3, [r7, #10]
 8005094:	b2db      	uxtb	r3, r3
 8005096:	f043 0301 	orr.w	r3, r3, #1
 800509a:	b2da      	uxtb	r2, r3
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	611a      	str	r2, [r3, #16]
 80050a2:	e05f      	b.n	8005164 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80050a4:	897b      	ldrh	r3, [r7, #10]
 80050a6:	11db      	asrs	r3, r3, #7
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	f003 0306 	and.w	r3, r3, #6
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	f063 030f 	orn	r3, r3, #15
 80050b4:	b2da      	uxtb	r2, r3
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	4930      	ldr	r1, [pc, #192]	; (8005184 <I2C_MasterRequestRead+0x194>)
 80050c2:	68f8      	ldr	r0, [r7, #12]
 80050c4:	f000 fa37 	bl	8005536 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d001      	beq.n	80050d2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e054      	b.n	800517c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80050d2:	897b      	ldrh	r3, [r7, #10]
 80050d4:	b2da      	uxtb	r2, r3
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	4929      	ldr	r1, [pc, #164]	; (8005188 <I2C_MasterRequestRead+0x198>)
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	f000 fa27 	bl	8005536 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d001      	beq.n	80050f2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e044      	b.n	800517c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050f2:	2300      	movs	r3, #0
 80050f4:	613b      	str	r3, [r7, #16]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	695b      	ldr	r3, [r3, #20]
 80050fc:	613b      	str	r3, [r7, #16]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	699b      	ldr	r3, [r3, #24]
 8005104:	613b      	str	r3, [r7, #16]
 8005106:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005116:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	9300      	str	r3, [sp, #0]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005124:	68f8      	ldr	r0, [r7, #12]
 8005126:	f000 f9af 	bl	8005488 <I2C_WaitOnFlagUntilTimeout>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d00d      	beq.n	800514c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800513a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800513e:	d103      	bne.n	8005148 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005146:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e017      	b.n	800517c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800514c:	897b      	ldrh	r3, [r7, #10]
 800514e:	11db      	asrs	r3, r3, #7
 8005150:	b2db      	uxtb	r3, r3
 8005152:	f003 0306 	and.w	r3, r3, #6
 8005156:	b2db      	uxtb	r3, r3
 8005158:	f063 030e 	orn	r3, r3, #14
 800515c:	b2da      	uxtb	r2, r3
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	4907      	ldr	r1, [pc, #28]	; (8005188 <I2C_MasterRequestRead+0x198>)
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f000 f9e3 	bl	8005536 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d001      	beq.n	800517a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e000      	b.n	800517c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800517a:	2300      	movs	r3, #0
}
 800517c:	4618      	mov	r0, r3
 800517e:	3718      	adds	r7, #24
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}
 8005184:	00010008 	.word	0x00010008
 8005188:	00010002 	.word	0x00010002

0800518c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b088      	sub	sp, #32
 8005190:	af02      	add	r7, sp, #8
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	4608      	mov	r0, r1
 8005196:	4611      	mov	r1, r2
 8005198:	461a      	mov	r2, r3
 800519a:	4603      	mov	r3, r0
 800519c:	817b      	strh	r3, [r7, #10]
 800519e:	460b      	mov	r3, r1
 80051a0:	813b      	strh	r3, [r7, #8]
 80051a2:	4613      	mov	r3, r2
 80051a4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b8:	9300      	str	r3, [sp, #0]
 80051ba:	6a3b      	ldr	r3, [r7, #32]
 80051bc:	2200      	movs	r2, #0
 80051be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80051c2:	68f8      	ldr	r0, [r7, #12]
 80051c4:	f000 f960 	bl	8005488 <I2C_WaitOnFlagUntilTimeout>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d00d      	beq.n	80051ea <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051dc:	d103      	bne.n	80051e6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80051e6:	2303      	movs	r3, #3
 80051e8:	e05f      	b.n	80052aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80051ea:	897b      	ldrh	r3, [r7, #10]
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	461a      	mov	r2, r3
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80051f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fc:	6a3a      	ldr	r2, [r7, #32]
 80051fe:	492d      	ldr	r1, [pc, #180]	; (80052b4 <I2C_RequestMemoryWrite+0x128>)
 8005200:	68f8      	ldr	r0, [r7, #12]
 8005202:	f000 f998 	bl	8005536 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d001      	beq.n	8005210 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e04c      	b.n	80052aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005210:	2300      	movs	r3, #0
 8005212:	617b      	str	r3, [r7, #20]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	695b      	ldr	r3, [r3, #20]
 800521a:	617b      	str	r3, [r7, #20]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	617b      	str	r3, [r7, #20]
 8005224:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005228:	6a39      	ldr	r1, [r7, #32]
 800522a:	68f8      	ldr	r0, [r7, #12]
 800522c:	f000 fa02 	bl	8005634 <I2C_WaitOnTXEFlagUntilTimeout>
 8005230:	4603      	mov	r3, r0
 8005232:	2b00      	cmp	r3, #0
 8005234:	d00d      	beq.n	8005252 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523a:	2b04      	cmp	r3, #4
 800523c:	d107      	bne.n	800524e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800524c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e02b      	b.n	80052aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005252:	88fb      	ldrh	r3, [r7, #6]
 8005254:	2b01      	cmp	r3, #1
 8005256:	d105      	bne.n	8005264 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005258:	893b      	ldrh	r3, [r7, #8]
 800525a:	b2da      	uxtb	r2, r3
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	611a      	str	r2, [r3, #16]
 8005262:	e021      	b.n	80052a8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005264:	893b      	ldrh	r3, [r7, #8]
 8005266:	0a1b      	lsrs	r3, r3, #8
 8005268:	b29b      	uxth	r3, r3
 800526a:	b2da      	uxtb	r2, r3
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005272:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005274:	6a39      	ldr	r1, [r7, #32]
 8005276:	68f8      	ldr	r0, [r7, #12]
 8005278:	f000 f9dc 	bl	8005634 <I2C_WaitOnTXEFlagUntilTimeout>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d00d      	beq.n	800529e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005286:	2b04      	cmp	r3, #4
 8005288:	d107      	bne.n	800529a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005298:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e005      	b.n	80052aa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800529e:	893b      	ldrh	r3, [r7, #8]
 80052a0:	b2da      	uxtb	r2, r3
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3718      	adds	r7, #24
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop
 80052b4:	00010002 	.word	0x00010002

080052b8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b088      	sub	sp, #32
 80052bc:	af02      	add	r7, sp, #8
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	4608      	mov	r0, r1
 80052c2:	4611      	mov	r1, r2
 80052c4:	461a      	mov	r2, r3
 80052c6:	4603      	mov	r3, r0
 80052c8:	817b      	strh	r3, [r7, #10]
 80052ca:	460b      	mov	r3, r1
 80052cc:	813b      	strh	r3, [r7, #8]
 80052ce:	4613      	mov	r3, r2
 80052d0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80052e0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f4:	9300      	str	r3, [sp, #0]
 80052f6:	6a3b      	ldr	r3, [r7, #32]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80052fe:	68f8      	ldr	r0, [r7, #12]
 8005300:	f000 f8c2 	bl	8005488 <I2C_WaitOnFlagUntilTimeout>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00d      	beq.n	8005326 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005314:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005318:	d103      	bne.n	8005322 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005320:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e0aa      	b.n	800547c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005326:	897b      	ldrh	r3, [r7, #10]
 8005328:	b2db      	uxtb	r3, r3
 800532a:	461a      	mov	r2, r3
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005334:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005338:	6a3a      	ldr	r2, [r7, #32]
 800533a:	4952      	ldr	r1, [pc, #328]	; (8005484 <I2C_RequestMemoryRead+0x1cc>)
 800533c:	68f8      	ldr	r0, [r7, #12]
 800533e:	f000 f8fa 	bl	8005536 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005342:	4603      	mov	r3, r0
 8005344:	2b00      	cmp	r3, #0
 8005346:	d001      	beq.n	800534c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e097      	b.n	800547c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800534c:	2300      	movs	r3, #0
 800534e:	617b      	str	r3, [r7, #20]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	695b      	ldr	r3, [r3, #20]
 8005356:	617b      	str	r3, [r7, #20]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	617b      	str	r3, [r7, #20]
 8005360:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005364:	6a39      	ldr	r1, [r7, #32]
 8005366:	68f8      	ldr	r0, [r7, #12]
 8005368:	f000 f964 	bl	8005634 <I2C_WaitOnTXEFlagUntilTimeout>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00d      	beq.n	800538e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005376:	2b04      	cmp	r3, #4
 8005378:	d107      	bne.n	800538a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005388:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e076      	b.n	800547c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800538e:	88fb      	ldrh	r3, [r7, #6]
 8005390:	2b01      	cmp	r3, #1
 8005392:	d105      	bne.n	80053a0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005394:	893b      	ldrh	r3, [r7, #8]
 8005396:	b2da      	uxtb	r2, r3
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	611a      	str	r2, [r3, #16]
 800539e:	e021      	b.n	80053e4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80053a0:	893b      	ldrh	r3, [r7, #8]
 80053a2:	0a1b      	lsrs	r3, r3, #8
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	b2da      	uxtb	r2, r3
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053b0:	6a39      	ldr	r1, [r7, #32]
 80053b2:	68f8      	ldr	r0, [r7, #12]
 80053b4:	f000 f93e 	bl	8005634 <I2C_WaitOnTXEFlagUntilTimeout>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00d      	beq.n	80053da <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c2:	2b04      	cmp	r3, #4
 80053c4:	d107      	bne.n	80053d6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e050      	b.n	800547c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053da:	893b      	ldrh	r3, [r7, #8]
 80053dc:	b2da      	uxtb	r2, r3
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053e6:	6a39      	ldr	r1, [r7, #32]
 80053e8:	68f8      	ldr	r0, [r7, #12]
 80053ea:	f000 f923 	bl	8005634 <I2C_WaitOnTXEFlagUntilTimeout>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d00d      	beq.n	8005410 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f8:	2b04      	cmp	r3, #4
 80053fa:	d107      	bne.n	800540c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800540a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e035      	b.n	800547c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800541e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005422:	9300      	str	r3, [sp, #0]
 8005424:	6a3b      	ldr	r3, [r7, #32]
 8005426:	2200      	movs	r2, #0
 8005428:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800542c:	68f8      	ldr	r0, [r7, #12]
 800542e:	f000 f82b 	bl	8005488 <I2C_WaitOnFlagUntilTimeout>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d00d      	beq.n	8005454 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005442:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005446:	d103      	bne.n	8005450 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800544e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	e013      	b.n	800547c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005454:	897b      	ldrh	r3, [r7, #10]
 8005456:	b2db      	uxtb	r3, r3
 8005458:	f043 0301 	orr.w	r3, r3, #1
 800545c:	b2da      	uxtb	r2, r3
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005466:	6a3a      	ldr	r2, [r7, #32]
 8005468:	4906      	ldr	r1, [pc, #24]	; (8005484 <I2C_RequestMemoryRead+0x1cc>)
 800546a:	68f8      	ldr	r0, [r7, #12]
 800546c:	f000 f863 	bl	8005536 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005470:	4603      	mov	r3, r0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d001      	beq.n	800547a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e000      	b.n	800547c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	3718      	adds	r7, #24
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}
 8005484:	00010002 	.word	0x00010002

08005488 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	603b      	str	r3, [r7, #0]
 8005494:	4613      	mov	r3, r2
 8005496:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005498:	e025      	b.n	80054e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054a0:	d021      	beq.n	80054e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054a2:	f7fd fd19 	bl	8002ed8 <HAL_GetTick>
 80054a6:	4602      	mov	r2, r0
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	683a      	ldr	r2, [r7, #0]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d302      	bcc.n	80054b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d116      	bne.n	80054e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2200      	movs	r2, #0
 80054bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2220      	movs	r2, #32
 80054c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d2:	f043 0220 	orr.w	r2, r3, #32
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2200      	movs	r2, #0
 80054de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e023      	b.n	800552e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	0c1b      	lsrs	r3, r3, #16
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d10d      	bne.n	800550c <I2C_WaitOnFlagUntilTimeout+0x84>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	43da      	mvns	r2, r3
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	4013      	ands	r3, r2
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	2b00      	cmp	r3, #0
 8005500:	bf0c      	ite	eq
 8005502:	2301      	moveq	r3, #1
 8005504:	2300      	movne	r3, #0
 8005506:	b2db      	uxtb	r3, r3
 8005508:	461a      	mov	r2, r3
 800550a:	e00c      	b.n	8005526 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	699b      	ldr	r3, [r3, #24]
 8005512:	43da      	mvns	r2, r3
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	4013      	ands	r3, r2
 8005518:	b29b      	uxth	r3, r3
 800551a:	2b00      	cmp	r3, #0
 800551c:	bf0c      	ite	eq
 800551e:	2301      	moveq	r3, #1
 8005520:	2300      	movne	r3, #0
 8005522:	b2db      	uxtb	r3, r3
 8005524:	461a      	mov	r2, r3
 8005526:	79fb      	ldrb	r3, [r7, #7]
 8005528:	429a      	cmp	r2, r3
 800552a:	d0b6      	beq.n	800549a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3710      	adds	r7, #16
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}

08005536 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005536:	b580      	push	{r7, lr}
 8005538:	b084      	sub	sp, #16
 800553a:	af00      	add	r7, sp, #0
 800553c:	60f8      	str	r0, [r7, #12]
 800553e:	60b9      	str	r1, [r7, #8]
 8005540:	607a      	str	r2, [r7, #4]
 8005542:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005544:	e051      	b.n	80055ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	695b      	ldr	r3, [r3, #20]
 800554c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005550:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005554:	d123      	bne.n	800559e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005564:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800556e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2200      	movs	r2, #0
 8005574:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2220      	movs	r2, #32
 800557a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2200      	movs	r2, #0
 8005582:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558a:	f043 0204 	orr.w	r2, r3, #4
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2200      	movs	r2, #0
 8005596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e046      	b.n	800562c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055a4:	d021      	beq.n	80055ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055a6:	f7fd fc97 	bl	8002ed8 <HAL_GetTick>
 80055aa:	4602      	mov	r2, r0
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	1ad3      	subs	r3, r2, r3
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d302      	bcc.n	80055bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d116      	bne.n	80055ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2200      	movs	r2, #0
 80055c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2220      	movs	r2, #32
 80055c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d6:	f043 0220 	orr.w	r2, r3, #32
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e020      	b.n	800562c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	0c1b      	lsrs	r3, r3, #16
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d10c      	bne.n	800560e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	43da      	mvns	r2, r3
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	4013      	ands	r3, r2
 8005600:	b29b      	uxth	r3, r3
 8005602:	2b00      	cmp	r3, #0
 8005604:	bf14      	ite	ne
 8005606:	2301      	movne	r3, #1
 8005608:	2300      	moveq	r3, #0
 800560a:	b2db      	uxtb	r3, r3
 800560c:	e00b      	b.n	8005626 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	699b      	ldr	r3, [r3, #24]
 8005614:	43da      	mvns	r2, r3
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	4013      	ands	r3, r2
 800561a:	b29b      	uxth	r3, r3
 800561c:	2b00      	cmp	r3, #0
 800561e:	bf14      	ite	ne
 8005620:	2301      	movne	r3, #1
 8005622:	2300      	moveq	r3, #0
 8005624:	b2db      	uxtb	r3, r3
 8005626:	2b00      	cmp	r3, #0
 8005628:	d18d      	bne.n	8005546 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800562a:	2300      	movs	r3, #0
}
 800562c:	4618      	mov	r0, r3
 800562e:	3710      	adds	r7, #16
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b084      	sub	sp, #16
 8005638:	af00      	add	r7, sp, #0
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	60b9      	str	r1, [r7, #8]
 800563e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005640:	e02d      	b.n	800569e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005642:	68f8      	ldr	r0, [r7, #12]
 8005644:	f000 f8ce 	bl	80057e4 <I2C_IsAcknowledgeFailed>
 8005648:	4603      	mov	r3, r0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d001      	beq.n	8005652 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e02d      	b.n	80056ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005658:	d021      	beq.n	800569e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800565a:	f7fd fc3d 	bl	8002ed8 <HAL_GetTick>
 800565e:	4602      	mov	r2, r0
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	68ba      	ldr	r2, [r7, #8]
 8005666:	429a      	cmp	r2, r3
 8005668:	d302      	bcc.n	8005670 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d116      	bne.n	800569e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2200      	movs	r2, #0
 8005674:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2220      	movs	r2, #32
 800567a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2200      	movs	r2, #0
 8005682:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568a:	f043 0220 	orr.w	r2, r3, #32
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2200      	movs	r2, #0
 8005696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e007      	b.n	80056ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	695b      	ldr	r3, [r3, #20]
 80056a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056a8:	2b80      	cmp	r3, #128	; 0x80
 80056aa:	d1ca      	bne.n	8005642 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056b6:	b580      	push	{r7, lr}
 80056b8:	b084      	sub	sp, #16
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	60f8      	str	r0, [r7, #12]
 80056be:	60b9      	str	r1, [r7, #8]
 80056c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80056c2:	e02d      	b.n	8005720 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80056c4:	68f8      	ldr	r0, [r7, #12]
 80056c6:	f000 f88d 	bl	80057e4 <I2C_IsAcknowledgeFailed>
 80056ca:	4603      	mov	r3, r0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d001      	beq.n	80056d4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	e02d      	b.n	8005730 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056da:	d021      	beq.n	8005720 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056dc:	f7fd fbfc 	bl	8002ed8 <HAL_GetTick>
 80056e0:	4602      	mov	r2, r0
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	68ba      	ldr	r2, [r7, #8]
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d302      	bcc.n	80056f2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d116      	bne.n	8005720 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2200      	movs	r2, #0
 80056f6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2220      	movs	r2, #32
 80056fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2200      	movs	r2, #0
 8005704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800570c:	f043 0220 	orr.w	r2, r3, #32
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2200      	movs	r2, #0
 8005718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e007      	b.n	8005730 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	695b      	ldr	r3, [r3, #20]
 8005726:	f003 0304 	and.w	r3, r3, #4
 800572a:	2b04      	cmp	r3, #4
 800572c:	d1ca      	bne.n	80056c4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800572e:	2300      	movs	r3, #0
}
 8005730:	4618      	mov	r0, r3
 8005732:	3710      	adds	r7, #16
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}

08005738 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005744:	e042      	b.n	80057cc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	695b      	ldr	r3, [r3, #20]
 800574c:	f003 0310 	and.w	r3, r3, #16
 8005750:	2b10      	cmp	r3, #16
 8005752:	d119      	bne.n	8005788 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f06f 0210 	mvn.w	r2, #16
 800575c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2200      	movs	r2, #0
 8005762:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2220      	movs	r2, #32
 8005768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2200      	movs	r2, #0
 8005770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2200      	movs	r2, #0
 8005780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	e029      	b.n	80057dc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005788:	f7fd fba6 	bl	8002ed8 <HAL_GetTick>
 800578c:	4602      	mov	r2, r0
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	68ba      	ldr	r2, [r7, #8]
 8005794:	429a      	cmp	r2, r3
 8005796:	d302      	bcc.n	800579e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d116      	bne.n	80057cc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2200      	movs	r2, #0
 80057a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2220      	movs	r2, #32
 80057a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b8:	f043 0220 	orr.w	r2, r3, #32
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2200      	movs	r2, #0
 80057c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e007      	b.n	80057dc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	695b      	ldr	r3, [r3, #20]
 80057d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057d6:	2b40      	cmp	r3, #64	; 0x40
 80057d8:	d1b5      	bne.n	8005746 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80057da:	2300      	movs	r3, #0
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3710      	adds	r7, #16
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	695b      	ldr	r3, [r3, #20]
 80057f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057fa:	d11b      	bne.n	8005834 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005804:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2220      	movs	r2, #32
 8005810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005820:	f043 0204 	orr.w	r2, r3, #4
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e000      	b.n	8005836 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	370c      	adds	r7, #12
 800583a:	46bd      	mov	sp, r7
 800583c:	bc80      	pop	{r7}
 800583e:	4770      	bx	lr

08005840 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b086      	sub	sp, #24
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d101      	bne.n	8005852 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e26c      	b.n	8005d2c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 0301 	and.w	r3, r3, #1
 800585a:	2b00      	cmp	r3, #0
 800585c:	f000 8087 	beq.w	800596e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005860:	4b92      	ldr	r3, [pc, #584]	; (8005aac <HAL_RCC_OscConfig+0x26c>)
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	f003 030c 	and.w	r3, r3, #12
 8005868:	2b04      	cmp	r3, #4
 800586a:	d00c      	beq.n	8005886 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800586c:	4b8f      	ldr	r3, [pc, #572]	; (8005aac <HAL_RCC_OscConfig+0x26c>)
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	f003 030c 	and.w	r3, r3, #12
 8005874:	2b08      	cmp	r3, #8
 8005876:	d112      	bne.n	800589e <HAL_RCC_OscConfig+0x5e>
 8005878:	4b8c      	ldr	r3, [pc, #560]	; (8005aac <HAL_RCC_OscConfig+0x26c>)
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005884:	d10b      	bne.n	800589e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005886:	4b89      	ldr	r3, [pc, #548]	; (8005aac <HAL_RCC_OscConfig+0x26c>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800588e:	2b00      	cmp	r3, #0
 8005890:	d06c      	beq.n	800596c <HAL_RCC_OscConfig+0x12c>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d168      	bne.n	800596c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e246      	b.n	8005d2c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058a6:	d106      	bne.n	80058b6 <HAL_RCC_OscConfig+0x76>
 80058a8:	4b80      	ldr	r3, [pc, #512]	; (8005aac <HAL_RCC_OscConfig+0x26c>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a7f      	ldr	r2, [pc, #508]	; (8005aac <HAL_RCC_OscConfig+0x26c>)
 80058ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058b2:	6013      	str	r3, [r2, #0]
 80058b4:	e02e      	b.n	8005914 <HAL_RCC_OscConfig+0xd4>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d10c      	bne.n	80058d8 <HAL_RCC_OscConfig+0x98>
 80058be:	4b7b      	ldr	r3, [pc, #492]	; (8005aac <HAL_RCC_OscConfig+0x26c>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a7a      	ldr	r2, [pc, #488]	; (8005aac <HAL_RCC_OscConfig+0x26c>)
 80058c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058c8:	6013      	str	r3, [r2, #0]
 80058ca:	4b78      	ldr	r3, [pc, #480]	; (8005aac <HAL_RCC_OscConfig+0x26c>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a77      	ldr	r2, [pc, #476]	; (8005aac <HAL_RCC_OscConfig+0x26c>)
 80058d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058d4:	6013      	str	r3, [r2, #0]
 80058d6:	e01d      	b.n	8005914 <HAL_RCC_OscConfig+0xd4>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80058e0:	d10c      	bne.n	80058fc <HAL_RCC_OscConfig+0xbc>
 80058e2:	4b72      	ldr	r3, [pc, #456]	; (8005aac <HAL_RCC_OscConfig+0x26c>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a71      	ldr	r2, [pc, #452]	; (8005aac <HAL_RCC_OscConfig+0x26c>)
 80058e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058ec:	6013      	str	r3, [r2, #0]
 80058ee:	4b6f      	ldr	r3, [pc, #444]	; (8005aac <HAL_RCC_OscConfig+0x26c>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a6e      	ldr	r2, [pc, #440]	; (8005aac <HAL_RCC_OscConfig+0x26c>)
 80058f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058f8:	6013      	str	r3, [r2, #0]
 80058fa:	e00b      	b.n	8005914 <HAL_RCC_OscConfig+0xd4>
 80058fc:	4b6b      	ldr	r3, [pc, #428]	; (8005aac <HAL_RCC_OscConfig+0x26c>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a6a      	ldr	r2, [pc, #424]	; (8005aac <HAL_RCC_OscConfig+0x26c>)
 8005902:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005906:	6013      	str	r3, [r2, #0]
 8005908:	4b68      	ldr	r3, [pc, #416]	; (8005aac <HAL_RCC_OscConfig+0x26c>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a67      	ldr	r2, [pc, #412]	; (8005aac <HAL_RCC_OscConfig+0x26c>)
 800590e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005912:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d013      	beq.n	8005944 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800591c:	f7fd fadc 	bl	8002ed8 <HAL_GetTick>
 8005920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005922:	e008      	b.n	8005936 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005924:	f7fd fad8 	bl	8002ed8 <HAL_GetTick>
 8005928:	4602      	mov	r2, r0
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	2b64      	cmp	r3, #100	; 0x64
 8005930:	d901      	bls.n	8005936 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	e1fa      	b.n	8005d2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005936:	4b5d      	ldr	r3, [pc, #372]	; (8005aac <HAL_RCC_OscConfig+0x26c>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800593e:	2b00      	cmp	r3, #0
 8005940:	d0f0      	beq.n	8005924 <HAL_RCC_OscConfig+0xe4>
 8005942:	e014      	b.n	800596e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005944:	f7fd fac8 	bl	8002ed8 <HAL_GetTick>
 8005948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800594a:	e008      	b.n	800595e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800594c:	f7fd fac4 	bl	8002ed8 <HAL_GetTick>
 8005950:	4602      	mov	r2, r0
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	1ad3      	subs	r3, r2, r3
 8005956:	2b64      	cmp	r3, #100	; 0x64
 8005958:	d901      	bls.n	800595e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800595a:	2303      	movs	r3, #3
 800595c:	e1e6      	b.n	8005d2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800595e:	4b53      	ldr	r3, [pc, #332]	; (8005aac <HAL_RCC_OscConfig+0x26c>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005966:	2b00      	cmp	r3, #0
 8005968:	d1f0      	bne.n	800594c <HAL_RCC_OscConfig+0x10c>
 800596a:	e000      	b.n	800596e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800596c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 0302 	and.w	r3, r3, #2
 8005976:	2b00      	cmp	r3, #0
 8005978:	d063      	beq.n	8005a42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800597a:	4b4c      	ldr	r3, [pc, #304]	; (8005aac <HAL_RCC_OscConfig+0x26c>)
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	f003 030c 	and.w	r3, r3, #12
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00b      	beq.n	800599e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005986:	4b49      	ldr	r3, [pc, #292]	; (8005aac <HAL_RCC_OscConfig+0x26c>)
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	f003 030c 	and.w	r3, r3, #12
 800598e:	2b08      	cmp	r3, #8
 8005990:	d11c      	bne.n	80059cc <HAL_RCC_OscConfig+0x18c>
 8005992:	4b46      	ldr	r3, [pc, #280]	; (8005aac <HAL_RCC_OscConfig+0x26c>)
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800599a:	2b00      	cmp	r3, #0
 800599c:	d116      	bne.n	80059cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800599e:	4b43      	ldr	r3, [pc, #268]	; (8005aac <HAL_RCC_OscConfig+0x26c>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 0302 	and.w	r3, r3, #2
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d005      	beq.n	80059b6 <HAL_RCC_OscConfig+0x176>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	691b      	ldr	r3, [r3, #16]
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d001      	beq.n	80059b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e1ba      	b.n	8005d2c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059b6:	4b3d      	ldr	r3, [pc, #244]	; (8005aac <HAL_RCC_OscConfig+0x26c>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	695b      	ldr	r3, [r3, #20]
 80059c2:	00db      	lsls	r3, r3, #3
 80059c4:	4939      	ldr	r1, [pc, #228]	; (8005aac <HAL_RCC_OscConfig+0x26c>)
 80059c6:	4313      	orrs	r3, r2
 80059c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059ca:	e03a      	b.n	8005a42 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	691b      	ldr	r3, [r3, #16]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d020      	beq.n	8005a16 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80059d4:	4b36      	ldr	r3, [pc, #216]	; (8005ab0 <HAL_RCC_OscConfig+0x270>)
 80059d6:	2201      	movs	r2, #1
 80059d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059da:	f7fd fa7d 	bl	8002ed8 <HAL_GetTick>
 80059de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059e0:	e008      	b.n	80059f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059e2:	f7fd fa79 	bl	8002ed8 <HAL_GetTick>
 80059e6:	4602      	mov	r2, r0
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	1ad3      	subs	r3, r2, r3
 80059ec:	2b02      	cmp	r3, #2
 80059ee:	d901      	bls.n	80059f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80059f0:	2303      	movs	r3, #3
 80059f2:	e19b      	b.n	8005d2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059f4:	4b2d      	ldr	r3, [pc, #180]	; (8005aac <HAL_RCC_OscConfig+0x26c>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 0302 	and.w	r3, r3, #2
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d0f0      	beq.n	80059e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a00:	4b2a      	ldr	r3, [pc, #168]	; (8005aac <HAL_RCC_OscConfig+0x26c>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	695b      	ldr	r3, [r3, #20]
 8005a0c:	00db      	lsls	r3, r3, #3
 8005a0e:	4927      	ldr	r1, [pc, #156]	; (8005aac <HAL_RCC_OscConfig+0x26c>)
 8005a10:	4313      	orrs	r3, r2
 8005a12:	600b      	str	r3, [r1, #0]
 8005a14:	e015      	b.n	8005a42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a16:	4b26      	ldr	r3, [pc, #152]	; (8005ab0 <HAL_RCC_OscConfig+0x270>)
 8005a18:	2200      	movs	r2, #0
 8005a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a1c:	f7fd fa5c 	bl	8002ed8 <HAL_GetTick>
 8005a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a22:	e008      	b.n	8005a36 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a24:	f7fd fa58 	bl	8002ed8 <HAL_GetTick>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	1ad3      	subs	r3, r2, r3
 8005a2e:	2b02      	cmp	r3, #2
 8005a30:	d901      	bls.n	8005a36 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005a32:	2303      	movs	r3, #3
 8005a34:	e17a      	b.n	8005d2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a36:	4b1d      	ldr	r3, [pc, #116]	; (8005aac <HAL_RCC_OscConfig+0x26c>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 0302 	and.w	r3, r3, #2
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d1f0      	bne.n	8005a24 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 0308 	and.w	r3, r3, #8
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d03a      	beq.n	8005ac4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	699b      	ldr	r3, [r3, #24]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d019      	beq.n	8005a8a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a56:	4b17      	ldr	r3, [pc, #92]	; (8005ab4 <HAL_RCC_OscConfig+0x274>)
 8005a58:	2201      	movs	r2, #1
 8005a5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a5c:	f7fd fa3c 	bl	8002ed8 <HAL_GetTick>
 8005a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a62:	e008      	b.n	8005a76 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a64:	f7fd fa38 	bl	8002ed8 <HAL_GetTick>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	1ad3      	subs	r3, r2, r3
 8005a6e:	2b02      	cmp	r3, #2
 8005a70:	d901      	bls.n	8005a76 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005a72:	2303      	movs	r3, #3
 8005a74:	e15a      	b.n	8005d2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a76:	4b0d      	ldr	r3, [pc, #52]	; (8005aac <HAL_RCC_OscConfig+0x26c>)
 8005a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7a:	f003 0302 	and.w	r3, r3, #2
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d0f0      	beq.n	8005a64 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005a82:	2001      	movs	r0, #1
 8005a84:	f000 fada 	bl	800603c <RCC_Delay>
 8005a88:	e01c      	b.n	8005ac4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a8a:	4b0a      	ldr	r3, [pc, #40]	; (8005ab4 <HAL_RCC_OscConfig+0x274>)
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a90:	f7fd fa22 	bl	8002ed8 <HAL_GetTick>
 8005a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a96:	e00f      	b.n	8005ab8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a98:	f7fd fa1e 	bl	8002ed8 <HAL_GetTick>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	2b02      	cmp	r3, #2
 8005aa4:	d908      	bls.n	8005ab8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005aa6:	2303      	movs	r3, #3
 8005aa8:	e140      	b.n	8005d2c <HAL_RCC_OscConfig+0x4ec>
 8005aaa:	bf00      	nop
 8005aac:	40021000 	.word	0x40021000
 8005ab0:	42420000 	.word	0x42420000
 8005ab4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ab8:	4b9e      	ldr	r3, [pc, #632]	; (8005d34 <HAL_RCC_OscConfig+0x4f4>)
 8005aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005abc:	f003 0302 	and.w	r3, r3, #2
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d1e9      	bne.n	8005a98 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 0304 	and.w	r3, r3, #4
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	f000 80a6 	beq.w	8005c1e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ad6:	4b97      	ldr	r3, [pc, #604]	; (8005d34 <HAL_RCC_OscConfig+0x4f4>)
 8005ad8:	69db      	ldr	r3, [r3, #28]
 8005ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d10d      	bne.n	8005afe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ae2:	4b94      	ldr	r3, [pc, #592]	; (8005d34 <HAL_RCC_OscConfig+0x4f4>)
 8005ae4:	69db      	ldr	r3, [r3, #28]
 8005ae6:	4a93      	ldr	r2, [pc, #588]	; (8005d34 <HAL_RCC_OscConfig+0x4f4>)
 8005ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005aec:	61d3      	str	r3, [r2, #28]
 8005aee:	4b91      	ldr	r3, [pc, #580]	; (8005d34 <HAL_RCC_OscConfig+0x4f4>)
 8005af0:	69db      	ldr	r3, [r3, #28]
 8005af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005af6:	60bb      	str	r3, [r7, #8]
 8005af8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005afa:	2301      	movs	r3, #1
 8005afc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005afe:	4b8e      	ldr	r3, [pc, #568]	; (8005d38 <HAL_RCC_OscConfig+0x4f8>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d118      	bne.n	8005b3c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b0a:	4b8b      	ldr	r3, [pc, #556]	; (8005d38 <HAL_RCC_OscConfig+0x4f8>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a8a      	ldr	r2, [pc, #552]	; (8005d38 <HAL_RCC_OscConfig+0x4f8>)
 8005b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b16:	f7fd f9df 	bl	8002ed8 <HAL_GetTick>
 8005b1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b1c:	e008      	b.n	8005b30 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b1e:	f7fd f9db 	bl	8002ed8 <HAL_GetTick>
 8005b22:	4602      	mov	r2, r0
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	1ad3      	subs	r3, r2, r3
 8005b28:	2b64      	cmp	r3, #100	; 0x64
 8005b2a:	d901      	bls.n	8005b30 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005b2c:	2303      	movs	r3, #3
 8005b2e:	e0fd      	b.n	8005d2c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b30:	4b81      	ldr	r3, [pc, #516]	; (8005d38 <HAL_RCC_OscConfig+0x4f8>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d0f0      	beq.n	8005b1e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d106      	bne.n	8005b52 <HAL_RCC_OscConfig+0x312>
 8005b44:	4b7b      	ldr	r3, [pc, #492]	; (8005d34 <HAL_RCC_OscConfig+0x4f4>)
 8005b46:	6a1b      	ldr	r3, [r3, #32]
 8005b48:	4a7a      	ldr	r2, [pc, #488]	; (8005d34 <HAL_RCC_OscConfig+0x4f4>)
 8005b4a:	f043 0301 	orr.w	r3, r3, #1
 8005b4e:	6213      	str	r3, [r2, #32]
 8005b50:	e02d      	b.n	8005bae <HAL_RCC_OscConfig+0x36e>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d10c      	bne.n	8005b74 <HAL_RCC_OscConfig+0x334>
 8005b5a:	4b76      	ldr	r3, [pc, #472]	; (8005d34 <HAL_RCC_OscConfig+0x4f4>)
 8005b5c:	6a1b      	ldr	r3, [r3, #32]
 8005b5e:	4a75      	ldr	r2, [pc, #468]	; (8005d34 <HAL_RCC_OscConfig+0x4f4>)
 8005b60:	f023 0301 	bic.w	r3, r3, #1
 8005b64:	6213      	str	r3, [r2, #32]
 8005b66:	4b73      	ldr	r3, [pc, #460]	; (8005d34 <HAL_RCC_OscConfig+0x4f4>)
 8005b68:	6a1b      	ldr	r3, [r3, #32]
 8005b6a:	4a72      	ldr	r2, [pc, #456]	; (8005d34 <HAL_RCC_OscConfig+0x4f4>)
 8005b6c:	f023 0304 	bic.w	r3, r3, #4
 8005b70:	6213      	str	r3, [r2, #32]
 8005b72:	e01c      	b.n	8005bae <HAL_RCC_OscConfig+0x36e>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	2b05      	cmp	r3, #5
 8005b7a:	d10c      	bne.n	8005b96 <HAL_RCC_OscConfig+0x356>
 8005b7c:	4b6d      	ldr	r3, [pc, #436]	; (8005d34 <HAL_RCC_OscConfig+0x4f4>)
 8005b7e:	6a1b      	ldr	r3, [r3, #32]
 8005b80:	4a6c      	ldr	r2, [pc, #432]	; (8005d34 <HAL_RCC_OscConfig+0x4f4>)
 8005b82:	f043 0304 	orr.w	r3, r3, #4
 8005b86:	6213      	str	r3, [r2, #32]
 8005b88:	4b6a      	ldr	r3, [pc, #424]	; (8005d34 <HAL_RCC_OscConfig+0x4f4>)
 8005b8a:	6a1b      	ldr	r3, [r3, #32]
 8005b8c:	4a69      	ldr	r2, [pc, #420]	; (8005d34 <HAL_RCC_OscConfig+0x4f4>)
 8005b8e:	f043 0301 	orr.w	r3, r3, #1
 8005b92:	6213      	str	r3, [r2, #32]
 8005b94:	e00b      	b.n	8005bae <HAL_RCC_OscConfig+0x36e>
 8005b96:	4b67      	ldr	r3, [pc, #412]	; (8005d34 <HAL_RCC_OscConfig+0x4f4>)
 8005b98:	6a1b      	ldr	r3, [r3, #32]
 8005b9a:	4a66      	ldr	r2, [pc, #408]	; (8005d34 <HAL_RCC_OscConfig+0x4f4>)
 8005b9c:	f023 0301 	bic.w	r3, r3, #1
 8005ba0:	6213      	str	r3, [r2, #32]
 8005ba2:	4b64      	ldr	r3, [pc, #400]	; (8005d34 <HAL_RCC_OscConfig+0x4f4>)
 8005ba4:	6a1b      	ldr	r3, [r3, #32]
 8005ba6:	4a63      	ldr	r2, [pc, #396]	; (8005d34 <HAL_RCC_OscConfig+0x4f4>)
 8005ba8:	f023 0304 	bic.w	r3, r3, #4
 8005bac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d015      	beq.n	8005be2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bb6:	f7fd f98f 	bl	8002ed8 <HAL_GetTick>
 8005bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bbc:	e00a      	b.n	8005bd4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bbe:	f7fd f98b 	bl	8002ed8 <HAL_GetTick>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	1ad3      	subs	r3, r2, r3
 8005bc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d901      	bls.n	8005bd4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005bd0:	2303      	movs	r3, #3
 8005bd2:	e0ab      	b.n	8005d2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bd4:	4b57      	ldr	r3, [pc, #348]	; (8005d34 <HAL_RCC_OscConfig+0x4f4>)
 8005bd6:	6a1b      	ldr	r3, [r3, #32]
 8005bd8:	f003 0302 	and.w	r3, r3, #2
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d0ee      	beq.n	8005bbe <HAL_RCC_OscConfig+0x37e>
 8005be0:	e014      	b.n	8005c0c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005be2:	f7fd f979 	bl	8002ed8 <HAL_GetTick>
 8005be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005be8:	e00a      	b.n	8005c00 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bea:	f7fd f975 	bl	8002ed8 <HAL_GetTick>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d901      	bls.n	8005c00 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	e095      	b.n	8005d2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c00:	4b4c      	ldr	r3, [pc, #304]	; (8005d34 <HAL_RCC_OscConfig+0x4f4>)
 8005c02:	6a1b      	ldr	r3, [r3, #32]
 8005c04:	f003 0302 	and.w	r3, r3, #2
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d1ee      	bne.n	8005bea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005c0c:	7dfb      	ldrb	r3, [r7, #23]
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d105      	bne.n	8005c1e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c12:	4b48      	ldr	r3, [pc, #288]	; (8005d34 <HAL_RCC_OscConfig+0x4f4>)
 8005c14:	69db      	ldr	r3, [r3, #28]
 8005c16:	4a47      	ldr	r2, [pc, #284]	; (8005d34 <HAL_RCC_OscConfig+0x4f4>)
 8005c18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c1c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	69db      	ldr	r3, [r3, #28]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	f000 8081 	beq.w	8005d2a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c28:	4b42      	ldr	r3, [pc, #264]	; (8005d34 <HAL_RCC_OscConfig+0x4f4>)
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	f003 030c 	and.w	r3, r3, #12
 8005c30:	2b08      	cmp	r3, #8
 8005c32:	d061      	beq.n	8005cf8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	69db      	ldr	r3, [r3, #28]
 8005c38:	2b02      	cmp	r3, #2
 8005c3a:	d146      	bne.n	8005cca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c3c:	4b3f      	ldr	r3, [pc, #252]	; (8005d3c <HAL_RCC_OscConfig+0x4fc>)
 8005c3e:	2200      	movs	r2, #0
 8005c40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c42:	f7fd f949 	bl	8002ed8 <HAL_GetTick>
 8005c46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c48:	e008      	b.n	8005c5c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c4a:	f7fd f945 	bl	8002ed8 <HAL_GetTick>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	1ad3      	subs	r3, r2, r3
 8005c54:	2b02      	cmp	r3, #2
 8005c56:	d901      	bls.n	8005c5c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005c58:	2303      	movs	r3, #3
 8005c5a:	e067      	b.n	8005d2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c5c:	4b35      	ldr	r3, [pc, #212]	; (8005d34 <HAL_RCC_OscConfig+0x4f4>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d1f0      	bne.n	8005c4a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6a1b      	ldr	r3, [r3, #32]
 8005c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c70:	d108      	bne.n	8005c84 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005c72:	4b30      	ldr	r3, [pc, #192]	; (8005d34 <HAL_RCC_OscConfig+0x4f4>)
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	492d      	ldr	r1, [pc, #180]	; (8005d34 <HAL_RCC_OscConfig+0x4f4>)
 8005c80:	4313      	orrs	r3, r2
 8005c82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c84:	4b2b      	ldr	r3, [pc, #172]	; (8005d34 <HAL_RCC_OscConfig+0x4f4>)
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6a19      	ldr	r1, [r3, #32]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c94:	430b      	orrs	r3, r1
 8005c96:	4927      	ldr	r1, [pc, #156]	; (8005d34 <HAL_RCC_OscConfig+0x4f4>)
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c9c:	4b27      	ldr	r3, [pc, #156]	; (8005d3c <HAL_RCC_OscConfig+0x4fc>)
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ca2:	f7fd f919 	bl	8002ed8 <HAL_GetTick>
 8005ca6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005ca8:	e008      	b.n	8005cbc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005caa:	f7fd f915 	bl	8002ed8 <HAL_GetTick>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	1ad3      	subs	r3, r2, r3
 8005cb4:	2b02      	cmp	r3, #2
 8005cb6:	d901      	bls.n	8005cbc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	e037      	b.n	8005d2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005cbc:	4b1d      	ldr	r3, [pc, #116]	; (8005d34 <HAL_RCC_OscConfig+0x4f4>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d0f0      	beq.n	8005caa <HAL_RCC_OscConfig+0x46a>
 8005cc8:	e02f      	b.n	8005d2a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cca:	4b1c      	ldr	r3, [pc, #112]	; (8005d3c <HAL_RCC_OscConfig+0x4fc>)
 8005ccc:	2200      	movs	r2, #0
 8005cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cd0:	f7fd f902 	bl	8002ed8 <HAL_GetTick>
 8005cd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005cd6:	e008      	b.n	8005cea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cd8:	f7fd f8fe 	bl	8002ed8 <HAL_GetTick>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	1ad3      	subs	r3, r2, r3
 8005ce2:	2b02      	cmp	r3, #2
 8005ce4:	d901      	bls.n	8005cea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	e020      	b.n	8005d2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005cea:	4b12      	ldr	r3, [pc, #72]	; (8005d34 <HAL_RCC_OscConfig+0x4f4>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d1f0      	bne.n	8005cd8 <HAL_RCC_OscConfig+0x498>
 8005cf6:	e018      	b.n	8005d2a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	69db      	ldr	r3, [r3, #28]
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d101      	bne.n	8005d04 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e013      	b.n	8005d2c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005d04:	4b0b      	ldr	r3, [pc, #44]	; (8005d34 <HAL_RCC_OscConfig+0x4f4>)
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6a1b      	ldr	r3, [r3, #32]
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d106      	bne.n	8005d26 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d001      	beq.n	8005d2a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e000      	b.n	8005d2c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005d2a:	2300      	movs	r3, #0
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3718      	adds	r7, #24
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	40021000 	.word	0x40021000
 8005d38:	40007000 	.word	0x40007000
 8005d3c:	42420060 	.word	0x42420060

08005d40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d101      	bne.n	8005d54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e0d0      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d54:	4b6a      	ldr	r3, [pc, #424]	; (8005f00 <HAL_RCC_ClockConfig+0x1c0>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 0307 	and.w	r3, r3, #7
 8005d5c:	683a      	ldr	r2, [r7, #0]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d910      	bls.n	8005d84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d62:	4b67      	ldr	r3, [pc, #412]	; (8005f00 <HAL_RCC_ClockConfig+0x1c0>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f023 0207 	bic.w	r2, r3, #7
 8005d6a:	4965      	ldr	r1, [pc, #404]	; (8005f00 <HAL_RCC_ClockConfig+0x1c0>)
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d72:	4b63      	ldr	r3, [pc, #396]	; (8005f00 <HAL_RCC_ClockConfig+0x1c0>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 0307 	and.w	r3, r3, #7
 8005d7a:	683a      	ldr	r2, [r7, #0]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d001      	beq.n	8005d84 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e0b8      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 0302 	and.w	r3, r3, #2
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d020      	beq.n	8005dd2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 0304 	and.w	r3, r3, #4
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d005      	beq.n	8005da8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d9c:	4b59      	ldr	r3, [pc, #356]	; (8005f04 <HAL_RCC_ClockConfig+0x1c4>)
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	4a58      	ldr	r2, [pc, #352]	; (8005f04 <HAL_RCC_ClockConfig+0x1c4>)
 8005da2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005da6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 0308 	and.w	r3, r3, #8
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d005      	beq.n	8005dc0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005db4:	4b53      	ldr	r3, [pc, #332]	; (8005f04 <HAL_RCC_ClockConfig+0x1c4>)
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	4a52      	ldr	r2, [pc, #328]	; (8005f04 <HAL_RCC_ClockConfig+0x1c4>)
 8005dba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005dbe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005dc0:	4b50      	ldr	r3, [pc, #320]	; (8005f04 <HAL_RCC_ClockConfig+0x1c4>)
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	494d      	ldr	r1, [pc, #308]	; (8005f04 <HAL_RCC_ClockConfig+0x1c4>)
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f003 0301 	and.w	r3, r3, #1
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d040      	beq.n	8005e60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d107      	bne.n	8005df6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005de6:	4b47      	ldr	r3, [pc, #284]	; (8005f04 <HAL_RCC_ClockConfig+0x1c4>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d115      	bne.n	8005e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e07f      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	2b02      	cmp	r3, #2
 8005dfc:	d107      	bne.n	8005e0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dfe:	4b41      	ldr	r3, [pc, #260]	; (8005f04 <HAL_RCC_ClockConfig+0x1c4>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d109      	bne.n	8005e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e073      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e0e:	4b3d      	ldr	r3, [pc, #244]	; (8005f04 <HAL_RCC_ClockConfig+0x1c4>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 0302 	and.w	r3, r3, #2
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d101      	bne.n	8005e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e06b      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e1e:	4b39      	ldr	r3, [pc, #228]	; (8005f04 <HAL_RCC_ClockConfig+0x1c4>)
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	f023 0203 	bic.w	r2, r3, #3
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	4936      	ldr	r1, [pc, #216]	; (8005f04 <HAL_RCC_ClockConfig+0x1c4>)
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e30:	f7fd f852 	bl	8002ed8 <HAL_GetTick>
 8005e34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e36:	e00a      	b.n	8005e4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e38:	f7fd f84e 	bl	8002ed8 <HAL_GetTick>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d901      	bls.n	8005e4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	e053      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e4e:	4b2d      	ldr	r3, [pc, #180]	; (8005f04 <HAL_RCC_ClockConfig+0x1c4>)
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	f003 020c 	and.w	r2, r3, #12
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d1eb      	bne.n	8005e38 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005e60:	4b27      	ldr	r3, [pc, #156]	; (8005f00 <HAL_RCC_ClockConfig+0x1c0>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 0307 	and.w	r3, r3, #7
 8005e68:	683a      	ldr	r2, [r7, #0]
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d210      	bcs.n	8005e90 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e6e:	4b24      	ldr	r3, [pc, #144]	; (8005f00 <HAL_RCC_ClockConfig+0x1c0>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f023 0207 	bic.w	r2, r3, #7
 8005e76:	4922      	ldr	r1, [pc, #136]	; (8005f00 <HAL_RCC_ClockConfig+0x1c0>)
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e7e:	4b20      	ldr	r3, [pc, #128]	; (8005f00 <HAL_RCC_ClockConfig+0x1c0>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f003 0307 	and.w	r3, r3, #7
 8005e86:	683a      	ldr	r2, [r7, #0]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d001      	beq.n	8005e90 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e032      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f003 0304 	and.w	r3, r3, #4
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d008      	beq.n	8005eae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e9c:	4b19      	ldr	r3, [pc, #100]	; (8005f04 <HAL_RCC_ClockConfig+0x1c4>)
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	4916      	ldr	r1, [pc, #88]	; (8005f04 <HAL_RCC_ClockConfig+0x1c4>)
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f003 0308 	and.w	r3, r3, #8
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d009      	beq.n	8005ece <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005eba:	4b12      	ldr	r3, [pc, #72]	; (8005f04 <HAL_RCC_ClockConfig+0x1c4>)
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	00db      	lsls	r3, r3, #3
 8005ec8:	490e      	ldr	r1, [pc, #56]	; (8005f04 <HAL_RCC_ClockConfig+0x1c4>)
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005ece:	f000 f821 	bl	8005f14 <HAL_RCC_GetSysClockFreq>
 8005ed2:	4601      	mov	r1, r0
 8005ed4:	4b0b      	ldr	r3, [pc, #44]	; (8005f04 <HAL_RCC_ClockConfig+0x1c4>)
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	091b      	lsrs	r3, r3, #4
 8005eda:	f003 030f 	and.w	r3, r3, #15
 8005ede:	4a0a      	ldr	r2, [pc, #40]	; (8005f08 <HAL_RCC_ClockConfig+0x1c8>)
 8005ee0:	5cd3      	ldrb	r3, [r2, r3]
 8005ee2:	fa21 f303 	lsr.w	r3, r1, r3
 8005ee6:	4a09      	ldr	r2, [pc, #36]	; (8005f0c <HAL_RCC_ClockConfig+0x1cc>)
 8005ee8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005eea:	4b09      	ldr	r3, [pc, #36]	; (8005f10 <HAL_RCC_ClockConfig+0x1d0>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f7fc ffb0 	bl	8002e54 <HAL_InitTick>

  return HAL_OK;
 8005ef4:	2300      	movs	r3, #0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3710      	adds	r7, #16
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	40022000 	.word	0x40022000
 8005f04:	40021000 	.word	0x40021000
 8005f08:	08009e70 	.word	0x08009e70
 8005f0c:	20000004 	.word	0x20000004
 8005f10:	20000008 	.word	0x20000008

08005f14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f14:	b490      	push	{r4, r7}
 8005f16:	b08a      	sub	sp, #40	; 0x28
 8005f18:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005f1a:	4b2a      	ldr	r3, [pc, #168]	; (8005fc4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005f1c:	1d3c      	adds	r4, r7, #4
 8005f1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005f20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005f24:	4b28      	ldr	r3, [pc, #160]	; (8005fc8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005f26:	881b      	ldrh	r3, [r3, #0]
 8005f28:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	61fb      	str	r3, [r7, #28]
 8005f2e:	2300      	movs	r3, #0
 8005f30:	61bb      	str	r3, [r7, #24]
 8005f32:	2300      	movs	r3, #0
 8005f34:	627b      	str	r3, [r7, #36]	; 0x24
 8005f36:	2300      	movs	r3, #0
 8005f38:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005f3e:	4b23      	ldr	r3, [pc, #140]	; (8005fcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	f003 030c 	and.w	r3, r3, #12
 8005f4a:	2b04      	cmp	r3, #4
 8005f4c:	d002      	beq.n	8005f54 <HAL_RCC_GetSysClockFreq+0x40>
 8005f4e:	2b08      	cmp	r3, #8
 8005f50:	d003      	beq.n	8005f5a <HAL_RCC_GetSysClockFreq+0x46>
 8005f52:	e02d      	b.n	8005fb0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005f54:	4b1e      	ldr	r3, [pc, #120]	; (8005fd0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005f56:	623b      	str	r3, [r7, #32]
      break;
 8005f58:	e02d      	b.n	8005fb6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	0c9b      	lsrs	r3, r3, #18
 8005f5e:	f003 030f 	and.w	r3, r3, #15
 8005f62:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005f66:	4413      	add	r3, r2
 8005f68:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005f6c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d013      	beq.n	8005fa0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005f78:	4b14      	ldr	r3, [pc, #80]	; (8005fcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	0c5b      	lsrs	r3, r3, #17
 8005f7e:	f003 0301 	and.w	r3, r3, #1
 8005f82:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005f86:	4413      	add	r3, r2
 8005f88:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005f8c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	4a0f      	ldr	r2, [pc, #60]	; (8005fd0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005f92:	fb02 f203 	mul.w	r2, r2, r3
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f9c:	627b      	str	r3, [r7, #36]	; 0x24
 8005f9e:	e004      	b.n	8005faa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	4a0c      	ldr	r2, [pc, #48]	; (8005fd4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005fa4:	fb02 f303 	mul.w	r3, r2, r3
 8005fa8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fac:	623b      	str	r3, [r7, #32]
      break;
 8005fae:	e002      	b.n	8005fb6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005fb0:	4b07      	ldr	r3, [pc, #28]	; (8005fd0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005fb2:	623b      	str	r3, [r7, #32]
      break;
 8005fb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005fb6:	6a3b      	ldr	r3, [r7, #32]
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3728      	adds	r7, #40	; 0x28
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bc90      	pop	{r4, r7}
 8005fc0:	4770      	bx	lr
 8005fc2:	bf00      	nop
 8005fc4:	08009e34 	.word	0x08009e34
 8005fc8:	08009e44 	.word	0x08009e44
 8005fcc:	40021000 	.word	0x40021000
 8005fd0:	007a1200 	.word	0x007a1200
 8005fd4:	003d0900 	.word	0x003d0900

08005fd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005fdc:	4b02      	ldr	r3, [pc, #8]	; (8005fe8 <HAL_RCC_GetHCLKFreq+0x10>)
 8005fde:	681b      	ldr	r3, [r3, #0]
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bc80      	pop	{r7}
 8005fe6:	4770      	bx	lr
 8005fe8:	20000004 	.word	0x20000004

08005fec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005ff0:	f7ff fff2 	bl	8005fd8 <HAL_RCC_GetHCLKFreq>
 8005ff4:	4601      	mov	r1, r0
 8005ff6:	4b05      	ldr	r3, [pc, #20]	; (800600c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	0a1b      	lsrs	r3, r3, #8
 8005ffc:	f003 0307 	and.w	r3, r3, #7
 8006000:	4a03      	ldr	r2, [pc, #12]	; (8006010 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006002:	5cd3      	ldrb	r3, [r2, r3]
 8006004:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006008:	4618      	mov	r0, r3
 800600a:	bd80      	pop	{r7, pc}
 800600c:	40021000 	.word	0x40021000
 8006010:	08009e80 	.word	0x08009e80

08006014 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006018:	f7ff ffde 	bl	8005fd8 <HAL_RCC_GetHCLKFreq>
 800601c:	4601      	mov	r1, r0
 800601e:	4b05      	ldr	r3, [pc, #20]	; (8006034 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	0adb      	lsrs	r3, r3, #11
 8006024:	f003 0307 	and.w	r3, r3, #7
 8006028:	4a03      	ldr	r2, [pc, #12]	; (8006038 <HAL_RCC_GetPCLK2Freq+0x24>)
 800602a:	5cd3      	ldrb	r3, [r2, r3]
 800602c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006030:	4618      	mov	r0, r3
 8006032:	bd80      	pop	{r7, pc}
 8006034:	40021000 	.word	0x40021000
 8006038:	08009e80 	.word	0x08009e80

0800603c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800603c:	b480      	push	{r7}
 800603e:	b085      	sub	sp, #20
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006044:	4b0a      	ldr	r3, [pc, #40]	; (8006070 <RCC_Delay+0x34>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a0a      	ldr	r2, [pc, #40]	; (8006074 <RCC_Delay+0x38>)
 800604a:	fba2 2303 	umull	r2, r3, r2, r3
 800604e:	0a5b      	lsrs	r3, r3, #9
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	fb02 f303 	mul.w	r3, r2, r3
 8006056:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006058:	bf00      	nop
  }
  while (Delay --);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	1e5a      	subs	r2, r3, #1
 800605e:	60fa      	str	r2, [r7, #12]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d1f9      	bne.n	8006058 <RCC_Delay+0x1c>
}
 8006064:	bf00      	nop
 8006066:	3714      	adds	r7, #20
 8006068:	46bd      	mov	sp, r7
 800606a:	bc80      	pop	{r7}
 800606c:	4770      	bx	lr
 800606e:	bf00      	nop
 8006070:	20000004 	.word	0x20000004
 8006074:	10624dd3 	.word	0x10624dd3

08006078 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b086      	sub	sp, #24
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006080:	2300      	movs	r3, #0
 8006082:	613b      	str	r3, [r7, #16]
 8006084:	2300      	movs	r3, #0
 8006086:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f003 0301 	and.w	r3, r3, #1
 8006090:	2b00      	cmp	r3, #0
 8006092:	d07d      	beq.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8006094:	2300      	movs	r3, #0
 8006096:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006098:	4b4f      	ldr	r3, [pc, #316]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800609a:	69db      	ldr	r3, [r3, #28]
 800609c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d10d      	bne.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060a4:	4b4c      	ldr	r3, [pc, #304]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060a6:	69db      	ldr	r3, [r3, #28]
 80060a8:	4a4b      	ldr	r2, [pc, #300]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060ae:	61d3      	str	r3, [r2, #28]
 80060b0:	4b49      	ldr	r3, [pc, #292]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060b2:	69db      	ldr	r3, [r3, #28]
 80060b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060b8:	60bb      	str	r3, [r7, #8]
 80060ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060bc:	2301      	movs	r3, #1
 80060be:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060c0:	4b46      	ldr	r3, [pc, #280]	; (80061dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d118      	bne.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80060cc:	4b43      	ldr	r3, [pc, #268]	; (80061dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a42      	ldr	r2, [pc, #264]	; (80061dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80060d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060d8:	f7fc fefe 	bl	8002ed8 <HAL_GetTick>
 80060dc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060de:	e008      	b.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060e0:	f7fc fefa 	bl	8002ed8 <HAL_GetTick>
 80060e4:	4602      	mov	r2, r0
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	1ad3      	subs	r3, r2, r3
 80060ea:	2b64      	cmp	r3, #100	; 0x64
 80060ec:	d901      	bls.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80060ee:	2303      	movs	r3, #3
 80060f0:	e06d      	b.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060f2:	4b3a      	ldr	r3, [pc, #232]	; (80061dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d0f0      	beq.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80060fe:	4b36      	ldr	r3, [pc, #216]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006100:	6a1b      	ldr	r3, [r3, #32]
 8006102:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006106:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d02e      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006116:	68fa      	ldr	r2, [r7, #12]
 8006118:	429a      	cmp	r2, r3
 800611a:	d027      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800611c:	4b2e      	ldr	r3, [pc, #184]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800611e:	6a1b      	ldr	r3, [r3, #32]
 8006120:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006124:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006126:	4b2e      	ldr	r3, [pc, #184]	; (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006128:	2201      	movs	r2, #1
 800612a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800612c:	4b2c      	ldr	r3, [pc, #176]	; (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800612e:	2200      	movs	r2, #0
 8006130:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006132:	4a29      	ldr	r2, [pc, #164]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f003 0301 	and.w	r3, r3, #1
 800613e:	2b00      	cmp	r3, #0
 8006140:	d014      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006142:	f7fc fec9 	bl	8002ed8 <HAL_GetTick>
 8006146:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006148:	e00a      	b.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800614a:	f7fc fec5 	bl	8002ed8 <HAL_GetTick>
 800614e:	4602      	mov	r2, r0
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	1ad3      	subs	r3, r2, r3
 8006154:	f241 3288 	movw	r2, #5000	; 0x1388
 8006158:	4293      	cmp	r3, r2
 800615a:	d901      	bls.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800615c:	2303      	movs	r3, #3
 800615e:	e036      	b.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006160:	4b1d      	ldr	r3, [pc, #116]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006162:	6a1b      	ldr	r3, [r3, #32]
 8006164:	f003 0302 	and.w	r3, r3, #2
 8006168:	2b00      	cmp	r3, #0
 800616a:	d0ee      	beq.n	800614a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800616c:	4b1a      	ldr	r3, [pc, #104]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800616e:	6a1b      	ldr	r3, [r3, #32]
 8006170:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	4917      	ldr	r1, [pc, #92]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800617a:	4313      	orrs	r3, r2
 800617c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800617e:	7dfb      	ldrb	r3, [r7, #23]
 8006180:	2b01      	cmp	r3, #1
 8006182:	d105      	bne.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006184:	4b14      	ldr	r3, [pc, #80]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006186:	69db      	ldr	r3, [r3, #28]
 8006188:	4a13      	ldr	r2, [pc, #76]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800618a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800618e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 0302 	and.w	r3, r3, #2
 8006198:	2b00      	cmp	r3, #0
 800619a:	d008      	beq.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800619c:	4b0e      	ldr	r3, [pc, #56]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	490b      	ldr	r1, [pc, #44]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061aa:	4313      	orrs	r3, r2
 80061ac:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 0310 	and.w	r3, r3, #16
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d008      	beq.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80061ba:	4b07      	ldr	r3, [pc, #28]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	4904      	ldr	r1, [pc, #16]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061c8:	4313      	orrs	r3, r2
 80061ca:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80061cc:	2300      	movs	r3, #0
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3718      	adds	r7, #24
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}
 80061d6:	bf00      	nop
 80061d8:	40021000 	.word	0x40021000
 80061dc:	40007000 	.word	0x40007000
 80061e0:	42420440 	.word	0x42420440

080061e4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80061e4:	b590      	push	{r4, r7, lr}
 80061e6:	b08d      	sub	sp, #52	; 0x34
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80061ec:	4b55      	ldr	r3, [pc, #340]	; (8006344 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80061ee:	f107 040c 	add.w	r4, r7, #12
 80061f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80061f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80061f8:	4b53      	ldr	r3, [pc, #332]	; (8006348 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80061fa:	881b      	ldrh	r3, [r3, #0]
 80061fc:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80061fe:	2300      	movs	r3, #0
 8006200:	627b      	str	r3, [r7, #36]	; 0x24
 8006202:	2300      	movs	r3, #0
 8006204:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006206:	2300      	movs	r3, #0
 8006208:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800620a:	2300      	movs	r3, #0
 800620c:	61fb      	str	r3, [r7, #28]
 800620e:	2300      	movs	r3, #0
 8006210:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2b02      	cmp	r3, #2
 8006216:	d07f      	beq.n	8006318 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8006218:	2b10      	cmp	r3, #16
 800621a:	d002      	beq.n	8006222 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 800621c:	2b01      	cmp	r3, #1
 800621e:	d048      	beq.n	80062b2 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8006220:	e08b      	b.n	800633a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8006222:	4b4a      	ldr	r3, [pc, #296]	; (800634c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8006228:	4b48      	ldr	r3, [pc, #288]	; (800634c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006230:	2b00      	cmp	r3, #0
 8006232:	d07f      	beq.n	8006334 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	0c9b      	lsrs	r3, r3, #18
 8006238:	f003 030f 	and.w	r3, r3, #15
 800623c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006240:	4413      	add	r3, r2
 8006242:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006246:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006248:	69fb      	ldr	r3, [r7, #28]
 800624a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800624e:	2b00      	cmp	r3, #0
 8006250:	d018      	beq.n	8006284 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006252:	4b3e      	ldr	r3, [pc, #248]	; (800634c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	0c5b      	lsrs	r3, r3, #17
 8006258:	f003 0301 	and.w	r3, r3, #1
 800625c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006260:	4413      	add	r3, r2
 8006262:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006266:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800626e:	2b00      	cmp	r3, #0
 8006270:	d00d      	beq.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8006272:	4a37      	ldr	r2, [pc, #220]	; (8006350 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8006274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006276:	fbb2 f2f3 	udiv	r2, r2, r3
 800627a:	6a3b      	ldr	r3, [r7, #32]
 800627c:	fb02 f303 	mul.w	r3, r2, r3
 8006280:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006282:	e004      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006284:	6a3b      	ldr	r3, [r7, #32]
 8006286:	4a33      	ldr	r2, [pc, #204]	; (8006354 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006288:	fb02 f303 	mul.w	r3, r2, r3
 800628c:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800628e:	4b2f      	ldr	r3, [pc, #188]	; (800634c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006296:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800629a:	d102      	bne.n	80062a2 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 800629c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800629e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80062a0:	e048      	b.n	8006334 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 80062a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a4:	005b      	lsls	r3, r3, #1
 80062a6:	4a2c      	ldr	r2, [pc, #176]	; (8006358 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80062a8:	fba2 2303 	umull	r2, r3, r2, r3
 80062ac:	085b      	lsrs	r3, r3, #1
 80062ae:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80062b0:	e040      	b.n	8006334 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 80062b2:	4b26      	ldr	r3, [pc, #152]	; (800634c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80062b4:	6a1b      	ldr	r3, [r3, #32]
 80062b6:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80062b8:	69fb      	ldr	r3, [r7, #28]
 80062ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062c2:	d108      	bne.n	80062d6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	f003 0302 	and.w	r3, r3, #2
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d003      	beq.n	80062d6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 80062ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80062d4:	e01f      	b.n	8006316 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80062d6:	69fb      	ldr	r3, [r7, #28]
 80062d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062e0:	d109      	bne.n	80062f6 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 80062e2:	4b1a      	ldr	r3, [pc, #104]	; (800634c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80062e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e6:	f003 0302 	and.w	r3, r3, #2
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d003      	beq.n	80062f6 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 80062ee:	f649 4340 	movw	r3, #40000	; 0x9c40
 80062f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80062f4:	e00f      	b.n	8006316 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006300:	d11a      	bne.n	8006338 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8006302:	4b12      	ldr	r3, [pc, #72]	; (800634c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800630a:	2b00      	cmp	r3, #0
 800630c:	d014      	beq.n	8006338 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 800630e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006312:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006314:	e010      	b.n	8006338 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8006316:	e00f      	b.n	8006338 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8006318:	f7ff fe7c 	bl	8006014 <HAL_RCC_GetPCLK2Freq>
 800631c:	4602      	mov	r2, r0
 800631e:	4b0b      	ldr	r3, [pc, #44]	; (800634c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	0b9b      	lsrs	r3, r3, #14
 8006324:	f003 0303 	and.w	r3, r3, #3
 8006328:	3301      	adds	r3, #1
 800632a:	005b      	lsls	r3, r3, #1
 800632c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006330:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006332:	e002      	b.n	800633a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8006334:	bf00      	nop
 8006336:	e000      	b.n	800633a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8006338:	bf00      	nop
    }
  }
  return (frequency);
 800633a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800633c:	4618      	mov	r0, r3
 800633e:	3734      	adds	r7, #52	; 0x34
 8006340:	46bd      	mov	sp, r7
 8006342:	bd90      	pop	{r4, r7, pc}
 8006344:	08009e48 	.word	0x08009e48
 8006348:	08009e58 	.word	0x08009e58
 800634c:	40021000 	.word	0x40021000
 8006350:	007a1200 	.word	0x007a1200
 8006354:	003d0900 	.word	0x003d0900
 8006358:	aaaaaaab 	.word	0xaaaaaaab

0800635c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b082      	sub	sp, #8
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d101      	bne.n	800636e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	e03f      	b.n	80063ee <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006374:	b2db      	uxtb	r3, r3
 8006376:	2b00      	cmp	r3, #0
 8006378:	d106      	bne.n	8006388 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2200      	movs	r2, #0
 800637e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f7fc fc94 	bl	8002cb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2224      	movs	r2, #36	; 0x24
 800638c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	68da      	ldr	r2, [r3, #12]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800639e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f000 fb83 	bl	8006aac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	691a      	ldr	r2, [r3, #16]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80063b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	695a      	ldr	r2, [r3, #20]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80063c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	68da      	ldr	r2, [r3, #12]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80063d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2220      	movs	r2, #32
 80063e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2220      	movs	r2, #32
 80063e8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3708      	adds	r7, #8
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}

080063f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063f6:	b580      	push	{r7, lr}
 80063f8:	b08a      	sub	sp, #40	; 0x28
 80063fa:	af02      	add	r7, sp, #8
 80063fc:	60f8      	str	r0, [r7, #12]
 80063fe:	60b9      	str	r1, [r7, #8]
 8006400:	603b      	str	r3, [r7, #0]
 8006402:	4613      	mov	r3, r2
 8006404:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006406:	2300      	movs	r3, #0
 8006408:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006410:	b2db      	uxtb	r3, r3
 8006412:	2b20      	cmp	r3, #32
 8006414:	d17c      	bne.n	8006510 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d002      	beq.n	8006422 <HAL_UART_Transmit+0x2c>
 800641c:	88fb      	ldrh	r3, [r7, #6]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d101      	bne.n	8006426 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	e075      	b.n	8006512 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800642c:	2b01      	cmp	r3, #1
 800642e:	d101      	bne.n	8006434 <HAL_UART_Transmit+0x3e>
 8006430:	2302      	movs	r3, #2
 8006432:	e06e      	b.n	8006512 <HAL_UART_Transmit+0x11c>
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2200      	movs	r2, #0
 8006440:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2221      	movs	r2, #33	; 0x21
 8006446:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800644a:	f7fc fd45 	bl	8002ed8 <HAL_GetTick>
 800644e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	88fa      	ldrh	r2, [r7, #6]
 8006454:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	88fa      	ldrh	r2, [r7, #6]
 800645a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006464:	d108      	bne.n	8006478 <HAL_UART_Transmit+0x82>
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	691b      	ldr	r3, [r3, #16]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d104      	bne.n	8006478 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800646e:	2300      	movs	r3, #0
 8006470:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	61bb      	str	r3, [r7, #24]
 8006476:	e003      	b.n	8006480 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800647c:	2300      	movs	r3, #0
 800647e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2200      	movs	r2, #0
 8006484:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8006488:	e02a      	b.n	80064e0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	9300      	str	r3, [sp, #0]
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	2200      	movs	r2, #0
 8006492:	2180      	movs	r1, #128	; 0x80
 8006494:	68f8      	ldr	r0, [r7, #12]
 8006496:	f000 f9a7 	bl	80067e8 <UART_WaitOnFlagUntilTimeout>
 800649a:	4603      	mov	r3, r0
 800649c:	2b00      	cmp	r3, #0
 800649e:	d001      	beq.n	80064a4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80064a0:	2303      	movs	r3, #3
 80064a2:	e036      	b.n	8006512 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d10b      	bne.n	80064c2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80064aa:	69bb      	ldr	r3, [r7, #24]
 80064ac:	881b      	ldrh	r3, [r3, #0]
 80064ae:	461a      	mov	r2, r3
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80064ba:	69bb      	ldr	r3, [r7, #24]
 80064bc:	3302      	adds	r3, #2
 80064be:	61bb      	str	r3, [r7, #24]
 80064c0:	e007      	b.n	80064d2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	781a      	ldrb	r2, [r3, #0]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	3301      	adds	r3, #1
 80064d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	3b01      	subs	r3, #1
 80064da:	b29a      	uxth	r2, r3
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d1cf      	bne.n	800648a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	9300      	str	r3, [sp, #0]
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	2200      	movs	r2, #0
 80064f2:	2140      	movs	r1, #64	; 0x40
 80064f4:	68f8      	ldr	r0, [r7, #12]
 80064f6:	f000 f977 	bl	80067e8 <UART_WaitOnFlagUntilTimeout>
 80064fa:	4603      	mov	r3, r0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d001      	beq.n	8006504 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006500:	2303      	movs	r3, #3
 8006502:	e006      	b.n	8006512 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2220      	movs	r2, #32
 8006508:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800650c:	2300      	movs	r3, #0
 800650e:	e000      	b.n	8006512 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006510:	2302      	movs	r3, #2
  }
}
 8006512:	4618      	mov	r0, r3
 8006514:	3720      	adds	r7, #32
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}

0800651a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800651a:	b480      	push	{r7}
 800651c:	b085      	sub	sp, #20
 800651e:	af00      	add	r7, sp, #0
 8006520:	60f8      	str	r0, [r7, #12]
 8006522:	60b9      	str	r1, [r7, #8]
 8006524:	4613      	mov	r3, r2
 8006526:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800652e:	b2db      	uxtb	r3, r3
 8006530:	2b20      	cmp	r3, #32
 8006532:	d140      	bne.n	80065b6 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d002      	beq.n	8006540 <HAL_UART_Receive_IT+0x26>
 800653a:	88fb      	ldrh	r3, [r7, #6]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d101      	bne.n	8006544 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	e039      	b.n	80065b8 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800654a:	2b01      	cmp	r3, #1
 800654c:	d101      	bne.n	8006552 <HAL_UART_Receive_IT+0x38>
 800654e:	2302      	movs	r3, #2
 8006550:	e032      	b.n	80065b8 <HAL_UART_Receive_IT+0x9e>
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2201      	movs	r2, #1
 8006556:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	68ba      	ldr	r2, [r7, #8]
 800655e:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	88fa      	ldrh	r2, [r7, #6]
 8006564:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	88fa      	ldrh	r2, [r7, #6]
 800656a:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2200      	movs	r2, #0
 8006570:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2222      	movs	r2, #34	; 0x22
 8006576:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2200      	movs	r2, #0
 800657e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68da      	ldr	r2, [r3, #12]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006590:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	695a      	ldr	r2, [r3, #20]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f042 0201 	orr.w	r2, r2, #1
 80065a0:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68da      	ldr	r2, [r3, #12]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f042 0220 	orr.w	r2, r2, #32
 80065b0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80065b2:	2300      	movs	r3, #0
 80065b4:	e000      	b.n	80065b8 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80065b6:	2302      	movs	r3, #2
  }
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3714      	adds	r7, #20
 80065bc:	46bd      	mov	sp, r7
 80065be:	bc80      	pop	{r7}
 80065c0:	4770      	bx	lr
	...

080065c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b088      	sub	sp, #32
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	695b      	ldr	r3, [r3, #20]
 80065e2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80065e4:	2300      	movs	r3, #0
 80065e6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80065e8:	2300      	movs	r3, #0
 80065ea:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	f003 030f 	and.w	r3, r3, #15
 80065f2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d10d      	bne.n	8006616 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	f003 0320 	and.w	r3, r3, #32
 8006600:	2b00      	cmp	r3, #0
 8006602:	d008      	beq.n	8006616 <HAL_UART_IRQHandler+0x52>
 8006604:	69bb      	ldr	r3, [r7, #24]
 8006606:	f003 0320 	and.w	r3, r3, #32
 800660a:	2b00      	cmp	r3, #0
 800660c:	d003      	beq.n	8006616 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 f9cc 	bl	80069ac <UART_Receive_IT>
      return;
 8006614:	e0d1      	b.n	80067ba <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	2b00      	cmp	r3, #0
 800661a:	f000 80b0 	beq.w	800677e <HAL_UART_IRQHandler+0x1ba>
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	f003 0301 	and.w	r3, r3, #1
 8006624:	2b00      	cmp	r3, #0
 8006626:	d105      	bne.n	8006634 <HAL_UART_IRQHandler+0x70>
 8006628:	69bb      	ldr	r3, [r7, #24]
 800662a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800662e:	2b00      	cmp	r3, #0
 8006630:	f000 80a5 	beq.w	800677e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006634:	69fb      	ldr	r3, [r7, #28]
 8006636:	f003 0301 	and.w	r3, r3, #1
 800663a:	2b00      	cmp	r3, #0
 800663c:	d00a      	beq.n	8006654 <HAL_UART_IRQHandler+0x90>
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006644:	2b00      	cmp	r3, #0
 8006646:	d005      	beq.n	8006654 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800664c:	f043 0201 	orr.w	r2, r3, #1
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006654:	69fb      	ldr	r3, [r7, #28]
 8006656:	f003 0304 	and.w	r3, r3, #4
 800665a:	2b00      	cmp	r3, #0
 800665c:	d00a      	beq.n	8006674 <HAL_UART_IRQHandler+0xb0>
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	f003 0301 	and.w	r3, r3, #1
 8006664:	2b00      	cmp	r3, #0
 8006666:	d005      	beq.n	8006674 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800666c:	f043 0202 	orr.w	r2, r3, #2
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006674:	69fb      	ldr	r3, [r7, #28]
 8006676:	f003 0302 	and.w	r3, r3, #2
 800667a:	2b00      	cmp	r3, #0
 800667c:	d00a      	beq.n	8006694 <HAL_UART_IRQHandler+0xd0>
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	f003 0301 	and.w	r3, r3, #1
 8006684:	2b00      	cmp	r3, #0
 8006686:	d005      	beq.n	8006694 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800668c:	f043 0204 	orr.w	r2, r3, #4
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	f003 0308 	and.w	r3, r3, #8
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00f      	beq.n	80066be <HAL_UART_IRQHandler+0xfa>
 800669e:	69bb      	ldr	r3, [r7, #24]
 80066a0:	f003 0320 	and.w	r3, r3, #32
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d104      	bne.n	80066b2 <HAL_UART_IRQHandler+0xee>
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	f003 0301 	and.w	r3, r3, #1
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d005      	beq.n	80066be <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066b6:	f043 0208 	orr.w	r2, r3, #8
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d078      	beq.n	80067b8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	f003 0320 	and.w	r3, r3, #32
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d007      	beq.n	80066e0 <HAL_UART_IRQHandler+0x11c>
 80066d0:	69bb      	ldr	r3, [r7, #24]
 80066d2:	f003 0320 	and.w	r3, r3, #32
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d002      	beq.n	80066e0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 f966 	bl	80069ac <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	695b      	ldr	r3, [r3, #20]
 80066e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	bf14      	ite	ne
 80066ee:	2301      	movne	r3, #1
 80066f0:	2300      	moveq	r3, #0
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066fa:	f003 0308 	and.w	r3, r3, #8
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d102      	bne.n	8006708 <HAL_UART_IRQHandler+0x144>
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d031      	beq.n	800676c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f000 f8b7 	bl	800687c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	695b      	ldr	r3, [r3, #20]
 8006714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006718:	2b00      	cmp	r3, #0
 800671a:	d023      	beq.n	8006764 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	695a      	ldr	r2, [r3, #20]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800672a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006730:	2b00      	cmp	r3, #0
 8006732:	d013      	beq.n	800675c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006738:	4a21      	ldr	r2, [pc, #132]	; (80067c0 <HAL_UART_IRQHandler+0x1fc>)
 800673a:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006740:	4618      	mov	r0, r3
 8006742:	f7fd f9e7 	bl	8003b14 <HAL_DMA_Abort_IT>
 8006746:	4603      	mov	r3, r0
 8006748:	2b00      	cmp	r3, #0
 800674a:	d016      	beq.n	800677a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006756:	4610      	mov	r0, r2
 8006758:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800675a:	e00e      	b.n	800677a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f000 f83a 	bl	80067d6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006762:	e00a      	b.n	800677a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f000 f836 	bl	80067d6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800676a:	e006      	b.n	800677a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f000 f832 	bl	80067d6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006778:	e01e      	b.n	80067b8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800677a:	bf00      	nop
    return;
 800677c:	e01c      	b.n	80067b8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800677e:	69fb      	ldr	r3, [r7, #28]
 8006780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006784:	2b00      	cmp	r3, #0
 8006786:	d008      	beq.n	800679a <HAL_UART_IRQHandler+0x1d6>
 8006788:	69bb      	ldr	r3, [r7, #24]
 800678a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800678e:	2b00      	cmp	r3, #0
 8006790:	d003      	beq.n	800679a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 f8a3 	bl	80068de <UART_Transmit_IT>
    return;
 8006798:	e00f      	b.n	80067ba <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800679a:	69fb      	ldr	r3, [r7, #28]
 800679c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d00a      	beq.n	80067ba <HAL_UART_IRQHandler+0x1f6>
 80067a4:	69bb      	ldr	r3, [r7, #24]
 80067a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d005      	beq.n	80067ba <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 f8e4 	bl	800697c <UART_EndTransmit_IT>
    return;
 80067b4:	bf00      	nop
 80067b6:	e000      	b.n	80067ba <HAL_UART_IRQHandler+0x1f6>
    return;
 80067b8:	bf00      	nop
  }
}
 80067ba:	3720      	adds	r7, #32
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}
 80067c0:	080068b7 	.word	0x080068b7

080067c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80067cc:	bf00      	nop
 80067ce:	370c      	adds	r7, #12
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bc80      	pop	{r7}
 80067d4:	4770      	bx	lr

080067d6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80067d6:	b480      	push	{r7}
 80067d8:	b083      	sub	sp, #12
 80067da:	af00      	add	r7, sp, #0
 80067dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80067de:	bf00      	nop
 80067e0:	370c      	adds	r7, #12
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bc80      	pop	{r7}
 80067e6:	4770      	bx	lr

080067e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	60b9      	str	r1, [r7, #8]
 80067f2:	603b      	str	r3, [r7, #0]
 80067f4:	4613      	mov	r3, r2
 80067f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067f8:	e02c      	b.n	8006854 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067fa:	69bb      	ldr	r3, [r7, #24]
 80067fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006800:	d028      	beq.n	8006854 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d007      	beq.n	8006818 <UART_WaitOnFlagUntilTimeout+0x30>
 8006808:	f7fc fb66 	bl	8002ed8 <HAL_GetTick>
 800680c:	4602      	mov	r2, r0
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	1ad3      	subs	r3, r2, r3
 8006812:	69ba      	ldr	r2, [r7, #24]
 8006814:	429a      	cmp	r2, r3
 8006816:	d21d      	bcs.n	8006854 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	68da      	ldr	r2, [r3, #12]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006826:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	695a      	ldr	r2, [r3, #20]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f022 0201 	bic.w	r2, r2, #1
 8006836:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2220      	movs	r2, #32
 800683c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2220      	movs	r2, #32
 8006844:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2200      	movs	r2, #0
 800684c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006850:	2303      	movs	r3, #3
 8006852:	e00f      	b.n	8006874 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	4013      	ands	r3, r2
 800685e:	68ba      	ldr	r2, [r7, #8]
 8006860:	429a      	cmp	r2, r3
 8006862:	bf0c      	ite	eq
 8006864:	2301      	moveq	r3, #1
 8006866:	2300      	movne	r3, #0
 8006868:	b2db      	uxtb	r3, r3
 800686a:	461a      	mov	r2, r3
 800686c:	79fb      	ldrb	r3, [r7, #7]
 800686e:	429a      	cmp	r2, r3
 8006870:	d0c3      	beq.n	80067fa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006872:	2300      	movs	r3, #0
}
 8006874:	4618      	mov	r0, r3
 8006876:	3710      	adds	r7, #16
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	68da      	ldr	r2, [r3, #12]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006892:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	695a      	ldr	r2, [r3, #20]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f022 0201 	bic.w	r2, r2, #1
 80068a2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2220      	movs	r2, #32
 80068a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80068ac:	bf00      	nop
 80068ae:	370c      	adds	r7, #12
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bc80      	pop	{r7}
 80068b4:	4770      	bx	lr

080068b6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80068b6:	b580      	push	{r7, lr}
 80068b8:	b084      	sub	sp, #16
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2200      	movs	r2, #0
 80068c8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2200      	movs	r2, #0
 80068ce:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80068d0:	68f8      	ldr	r0, [r7, #12]
 80068d2:	f7ff ff80 	bl	80067d6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068d6:	bf00      	nop
 80068d8:	3710      	adds	r7, #16
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}

080068de <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80068de:	b480      	push	{r7}
 80068e0:	b085      	sub	sp, #20
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	2b21      	cmp	r3, #33	; 0x21
 80068f0:	d13e      	bne.n	8006970 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068fa:	d114      	bne.n	8006926 <UART_Transmit_IT+0x48>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	691b      	ldr	r3, [r3, #16]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d110      	bne.n	8006926 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6a1b      	ldr	r3, [r3, #32]
 8006908:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	881b      	ldrh	r3, [r3, #0]
 800690e:	461a      	mov	r2, r3
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006918:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6a1b      	ldr	r3, [r3, #32]
 800691e:	1c9a      	adds	r2, r3, #2
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	621a      	str	r2, [r3, #32]
 8006924:	e008      	b.n	8006938 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6a1b      	ldr	r3, [r3, #32]
 800692a:	1c59      	adds	r1, r3, #1
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	6211      	str	r1, [r2, #32]
 8006930:	781a      	ldrb	r2, [r3, #0]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800693c:	b29b      	uxth	r3, r3
 800693e:	3b01      	subs	r3, #1
 8006940:	b29b      	uxth	r3, r3
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	4619      	mov	r1, r3
 8006946:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006948:	2b00      	cmp	r3, #0
 800694a:	d10f      	bne.n	800696c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	68da      	ldr	r2, [r3, #12]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800695a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	68da      	ldr	r2, [r3, #12]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800696a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800696c:	2300      	movs	r3, #0
 800696e:	e000      	b.n	8006972 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006970:	2302      	movs	r3, #2
  }
}
 8006972:	4618      	mov	r0, r3
 8006974:	3714      	adds	r7, #20
 8006976:	46bd      	mov	sp, r7
 8006978:	bc80      	pop	{r7}
 800697a:	4770      	bx	lr

0800697c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b082      	sub	sp, #8
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	68da      	ldr	r2, [r3, #12]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006992:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2220      	movs	r2, #32
 8006998:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f7ff ff11 	bl	80067c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80069a2:	2300      	movs	r3, #0
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3708      	adds	r7, #8
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}

080069ac <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	2b22      	cmp	r3, #34	; 0x22
 80069be:	d170      	bne.n	8006aa2 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069c8:	d117      	bne.n	80069fa <UART_Receive_IT+0x4e>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d113      	bne.n	80069fa <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 80069d2:	2300      	movs	r3, #0
 80069d4:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069da:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069e8:	b29a      	uxth	r2, r3
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069f2:	1c9a      	adds	r2, r3, #2
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	629a      	str	r2, [r3, #40]	; 0x28
 80069f8:	e026      	b.n	8006a48 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069fe:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8006a00:	2300      	movs	r3, #0
 8006a02:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a0c:	d007      	beq.n	8006a1e <UART_Receive_IT+0x72>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d10a      	bne.n	8006a2c <UART_Receive_IT+0x80>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	691b      	ldr	r3, [r3, #16]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d106      	bne.n	8006a2c <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	b2da      	uxtb	r2, r3
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	701a      	strb	r2, [r3, #0]
 8006a2a:	e008      	b.n	8006a3e <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a38:	b2da      	uxtb	r2, r3
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a42:	1c5a      	adds	r2, r3, #1
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	3b01      	subs	r3, #1
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	4619      	mov	r1, r3
 8006a56:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d120      	bne.n	8006a9e <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	68da      	ldr	r2, [r3, #12]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f022 0220 	bic.w	r2, r2, #32
 8006a6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	68da      	ldr	r2, [r3, #12]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a7a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	695a      	ldr	r2, [r3, #20]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f022 0201 	bic.w	r2, r2, #1
 8006a8a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2220      	movs	r2, #32
 8006a90:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f7fb fcc3 	bl	8002420 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	e002      	b.n	8006aa4 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	e000      	b.n	8006aa4 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8006aa2:	2302      	movs	r3, #2
  }
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3710      	adds	r7, #16
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b084      	sub	sp, #16
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	68da      	ldr	r2, [r3, #12]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	430a      	orrs	r2, r1
 8006ac8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	689a      	ldr	r2, [r3, #8]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	691b      	ldr	r3, [r3, #16]
 8006ad2:	431a      	orrs	r2, r3
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	695b      	ldr	r3, [r3, #20]
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006ae6:	f023 030c 	bic.w	r3, r3, #12
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	6812      	ldr	r2, [r2, #0]
 8006aee:	68b9      	ldr	r1, [r7, #8]
 8006af0:	430b      	orrs	r3, r1
 8006af2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	695b      	ldr	r3, [r3, #20]
 8006afa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	699a      	ldr	r2, [r3, #24]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	430a      	orrs	r2, r1
 8006b08:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a2c      	ldr	r2, [pc, #176]	; (8006bc0 <UART_SetConfig+0x114>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d103      	bne.n	8006b1c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006b14:	f7ff fa7e 	bl	8006014 <HAL_RCC_GetPCLK2Freq>
 8006b18:	60f8      	str	r0, [r7, #12]
 8006b1a:	e002      	b.n	8006b22 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006b1c:	f7ff fa66 	bl	8005fec <HAL_RCC_GetPCLK1Freq>
 8006b20:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b22:	68fa      	ldr	r2, [r7, #12]
 8006b24:	4613      	mov	r3, r2
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	4413      	add	r3, r2
 8006b2a:	009a      	lsls	r2, r3, #2
 8006b2c:	441a      	add	r2, r3
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b38:	4a22      	ldr	r2, [pc, #136]	; (8006bc4 <UART_SetConfig+0x118>)
 8006b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b3e:	095b      	lsrs	r3, r3, #5
 8006b40:	0119      	lsls	r1, r3, #4
 8006b42:	68fa      	ldr	r2, [r7, #12]
 8006b44:	4613      	mov	r3, r2
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	4413      	add	r3, r2
 8006b4a:	009a      	lsls	r2, r3, #2
 8006b4c:	441a      	add	r2, r3
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	fbb2 f2f3 	udiv	r2, r2, r3
 8006b58:	4b1a      	ldr	r3, [pc, #104]	; (8006bc4 <UART_SetConfig+0x118>)
 8006b5a:	fba3 0302 	umull	r0, r3, r3, r2
 8006b5e:	095b      	lsrs	r3, r3, #5
 8006b60:	2064      	movs	r0, #100	; 0x64
 8006b62:	fb00 f303 	mul.w	r3, r0, r3
 8006b66:	1ad3      	subs	r3, r2, r3
 8006b68:	011b      	lsls	r3, r3, #4
 8006b6a:	3332      	adds	r3, #50	; 0x32
 8006b6c:	4a15      	ldr	r2, [pc, #84]	; (8006bc4 <UART_SetConfig+0x118>)
 8006b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b72:	095b      	lsrs	r3, r3, #5
 8006b74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b78:	4419      	add	r1, r3
 8006b7a:	68fa      	ldr	r2, [r7, #12]
 8006b7c:	4613      	mov	r3, r2
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	4413      	add	r3, r2
 8006b82:	009a      	lsls	r2, r3, #2
 8006b84:	441a      	add	r2, r3
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006b90:	4b0c      	ldr	r3, [pc, #48]	; (8006bc4 <UART_SetConfig+0x118>)
 8006b92:	fba3 0302 	umull	r0, r3, r3, r2
 8006b96:	095b      	lsrs	r3, r3, #5
 8006b98:	2064      	movs	r0, #100	; 0x64
 8006b9a:	fb00 f303 	mul.w	r3, r0, r3
 8006b9e:	1ad3      	subs	r3, r2, r3
 8006ba0:	011b      	lsls	r3, r3, #4
 8006ba2:	3332      	adds	r3, #50	; 0x32
 8006ba4:	4a07      	ldr	r2, [pc, #28]	; (8006bc4 <UART_SetConfig+0x118>)
 8006ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8006baa:	095b      	lsrs	r3, r3, #5
 8006bac:	f003 020f 	and.w	r2, r3, #15
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	440a      	add	r2, r1
 8006bb6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006bb8:	bf00      	nop
 8006bba:	3710      	adds	r7, #16
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}
 8006bc0:	40013800 	.word	0x40013800
 8006bc4:	51eb851f 	.word	0x51eb851f

08006bc8 <__errno>:
 8006bc8:	4b01      	ldr	r3, [pc, #4]	; (8006bd0 <__errno+0x8>)
 8006bca:	6818      	ldr	r0, [r3, #0]
 8006bcc:	4770      	bx	lr
 8006bce:	bf00      	nop
 8006bd0:	20000010 	.word	0x20000010

08006bd4 <__libc_init_array>:
 8006bd4:	b570      	push	{r4, r5, r6, lr}
 8006bd6:	2500      	movs	r5, #0
 8006bd8:	4e0c      	ldr	r6, [pc, #48]	; (8006c0c <__libc_init_array+0x38>)
 8006bda:	4c0d      	ldr	r4, [pc, #52]	; (8006c10 <__libc_init_array+0x3c>)
 8006bdc:	1ba4      	subs	r4, r4, r6
 8006bde:	10a4      	asrs	r4, r4, #2
 8006be0:	42a5      	cmp	r5, r4
 8006be2:	d109      	bne.n	8006bf8 <__libc_init_array+0x24>
 8006be4:	f003 f8c2 	bl	8009d6c <_init>
 8006be8:	2500      	movs	r5, #0
 8006bea:	4e0a      	ldr	r6, [pc, #40]	; (8006c14 <__libc_init_array+0x40>)
 8006bec:	4c0a      	ldr	r4, [pc, #40]	; (8006c18 <__libc_init_array+0x44>)
 8006bee:	1ba4      	subs	r4, r4, r6
 8006bf0:	10a4      	asrs	r4, r4, #2
 8006bf2:	42a5      	cmp	r5, r4
 8006bf4:	d105      	bne.n	8006c02 <__libc_init_array+0x2e>
 8006bf6:	bd70      	pop	{r4, r5, r6, pc}
 8006bf8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006bfc:	4798      	blx	r3
 8006bfe:	3501      	adds	r5, #1
 8006c00:	e7ee      	b.n	8006be0 <__libc_init_array+0xc>
 8006c02:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006c06:	4798      	blx	r3
 8006c08:	3501      	adds	r5, #1
 8006c0a:	e7f2      	b.n	8006bf2 <__libc_init_array+0x1e>
 8006c0c:	0800a1ac 	.word	0x0800a1ac
 8006c10:	0800a1ac 	.word	0x0800a1ac
 8006c14:	0800a1ac 	.word	0x0800a1ac
 8006c18:	0800a1b0 	.word	0x0800a1b0

08006c1c <memset>:
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	4402      	add	r2, r0
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d100      	bne.n	8006c26 <memset+0xa>
 8006c24:	4770      	bx	lr
 8006c26:	f803 1b01 	strb.w	r1, [r3], #1
 8006c2a:	e7f9      	b.n	8006c20 <memset+0x4>

08006c2c <_scanf_float>:
 8006c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c30:	469a      	mov	sl, r3
 8006c32:	688b      	ldr	r3, [r1, #8]
 8006c34:	4616      	mov	r6, r2
 8006c36:	1e5a      	subs	r2, r3, #1
 8006c38:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006c3c:	bf88      	it	hi
 8006c3e:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8006c42:	b087      	sub	sp, #28
 8006c44:	bf85      	ittet	hi
 8006c46:	189b      	addhi	r3, r3, r2
 8006c48:	9301      	strhi	r3, [sp, #4]
 8006c4a:	2300      	movls	r3, #0
 8006c4c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006c50:	4688      	mov	r8, r1
 8006c52:	f04f 0b00 	mov.w	fp, #0
 8006c56:	bf8c      	ite	hi
 8006c58:	608b      	strhi	r3, [r1, #8]
 8006c5a:	9301      	strls	r3, [sp, #4]
 8006c5c:	680b      	ldr	r3, [r1, #0]
 8006c5e:	4607      	mov	r7, r0
 8006c60:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006c64:	f848 3b1c 	str.w	r3, [r8], #28
 8006c68:	460c      	mov	r4, r1
 8006c6a:	4645      	mov	r5, r8
 8006c6c:	465a      	mov	r2, fp
 8006c6e:	46d9      	mov	r9, fp
 8006c70:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8006c74:	f8cd b008 	str.w	fp, [sp, #8]
 8006c78:	68a1      	ldr	r1, [r4, #8]
 8006c7a:	b181      	cbz	r1, 8006c9e <_scanf_float+0x72>
 8006c7c:	6833      	ldr	r3, [r6, #0]
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	2b49      	cmp	r3, #73	; 0x49
 8006c82:	d071      	beq.n	8006d68 <_scanf_float+0x13c>
 8006c84:	d84d      	bhi.n	8006d22 <_scanf_float+0xf6>
 8006c86:	2b39      	cmp	r3, #57	; 0x39
 8006c88:	d840      	bhi.n	8006d0c <_scanf_float+0xe0>
 8006c8a:	2b31      	cmp	r3, #49	; 0x31
 8006c8c:	f080 8088 	bcs.w	8006da0 <_scanf_float+0x174>
 8006c90:	2b2d      	cmp	r3, #45	; 0x2d
 8006c92:	f000 8090 	beq.w	8006db6 <_scanf_float+0x18a>
 8006c96:	d815      	bhi.n	8006cc4 <_scanf_float+0x98>
 8006c98:	2b2b      	cmp	r3, #43	; 0x2b
 8006c9a:	f000 808c 	beq.w	8006db6 <_scanf_float+0x18a>
 8006c9e:	f1b9 0f00 	cmp.w	r9, #0
 8006ca2:	d003      	beq.n	8006cac <_scanf_float+0x80>
 8006ca4:	6823      	ldr	r3, [r4, #0]
 8006ca6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006caa:	6023      	str	r3, [r4, #0]
 8006cac:	3a01      	subs	r2, #1
 8006cae:	2a01      	cmp	r2, #1
 8006cb0:	f200 80ea 	bhi.w	8006e88 <_scanf_float+0x25c>
 8006cb4:	4545      	cmp	r5, r8
 8006cb6:	f200 80dc 	bhi.w	8006e72 <_scanf_float+0x246>
 8006cba:	2601      	movs	r6, #1
 8006cbc:	4630      	mov	r0, r6
 8006cbe:	b007      	add	sp, #28
 8006cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cc4:	2b2e      	cmp	r3, #46	; 0x2e
 8006cc6:	f000 809f 	beq.w	8006e08 <_scanf_float+0x1dc>
 8006cca:	2b30      	cmp	r3, #48	; 0x30
 8006ccc:	d1e7      	bne.n	8006c9e <_scanf_float+0x72>
 8006cce:	6820      	ldr	r0, [r4, #0]
 8006cd0:	f410 7f80 	tst.w	r0, #256	; 0x100
 8006cd4:	d064      	beq.n	8006da0 <_scanf_float+0x174>
 8006cd6:	9b01      	ldr	r3, [sp, #4]
 8006cd8:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8006cdc:	6020      	str	r0, [r4, #0]
 8006cde:	f109 0901 	add.w	r9, r9, #1
 8006ce2:	b11b      	cbz	r3, 8006cec <_scanf_float+0xc0>
 8006ce4:	3b01      	subs	r3, #1
 8006ce6:	3101      	adds	r1, #1
 8006ce8:	9301      	str	r3, [sp, #4]
 8006cea:	60a1      	str	r1, [r4, #8]
 8006cec:	68a3      	ldr	r3, [r4, #8]
 8006cee:	3b01      	subs	r3, #1
 8006cf0:	60a3      	str	r3, [r4, #8]
 8006cf2:	6923      	ldr	r3, [r4, #16]
 8006cf4:	3301      	adds	r3, #1
 8006cf6:	6123      	str	r3, [r4, #16]
 8006cf8:	6873      	ldr	r3, [r6, #4]
 8006cfa:	3b01      	subs	r3, #1
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	6073      	str	r3, [r6, #4]
 8006d00:	f340 80ac 	ble.w	8006e5c <_scanf_float+0x230>
 8006d04:	6833      	ldr	r3, [r6, #0]
 8006d06:	3301      	adds	r3, #1
 8006d08:	6033      	str	r3, [r6, #0]
 8006d0a:	e7b5      	b.n	8006c78 <_scanf_float+0x4c>
 8006d0c:	2b45      	cmp	r3, #69	; 0x45
 8006d0e:	f000 8085 	beq.w	8006e1c <_scanf_float+0x1f0>
 8006d12:	2b46      	cmp	r3, #70	; 0x46
 8006d14:	d06a      	beq.n	8006dec <_scanf_float+0x1c0>
 8006d16:	2b41      	cmp	r3, #65	; 0x41
 8006d18:	d1c1      	bne.n	8006c9e <_scanf_float+0x72>
 8006d1a:	2a01      	cmp	r2, #1
 8006d1c:	d1bf      	bne.n	8006c9e <_scanf_float+0x72>
 8006d1e:	2202      	movs	r2, #2
 8006d20:	e046      	b.n	8006db0 <_scanf_float+0x184>
 8006d22:	2b65      	cmp	r3, #101	; 0x65
 8006d24:	d07a      	beq.n	8006e1c <_scanf_float+0x1f0>
 8006d26:	d818      	bhi.n	8006d5a <_scanf_float+0x12e>
 8006d28:	2b54      	cmp	r3, #84	; 0x54
 8006d2a:	d066      	beq.n	8006dfa <_scanf_float+0x1ce>
 8006d2c:	d811      	bhi.n	8006d52 <_scanf_float+0x126>
 8006d2e:	2b4e      	cmp	r3, #78	; 0x4e
 8006d30:	d1b5      	bne.n	8006c9e <_scanf_float+0x72>
 8006d32:	2a00      	cmp	r2, #0
 8006d34:	d146      	bne.n	8006dc4 <_scanf_float+0x198>
 8006d36:	f1b9 0f00 	cmp.w	r9, #0
 8006d3a:	d145      	bne.n	8006dc8 <_scanf_float+0x19c>
 8006d3c:	6821      	ldr	r1, [r4, #0]
 8006d3e:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8006d42:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8006d46:	d13f      	bne.n	8006dc8 <_scanf_float+0x19c>
 8006d48:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006d4c:	6021      	str	r1, [r4, #0]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	e02e      	b.n	8006db0 <_scanf_float+0x184>
 8006d52:	2b59      	cmp	r3, #89	; 0x59
 8006d54:	d01e      	beq.n	8006d94 <_scanf_float+0x168>
 8006d56:	2b61      	cmp	r3, #97	; 0x61
 8006d58:	e7de      	b.n	8006d18 <_scanf_float+0xec>
 8006d5a:	2b6e      	cmp	r3, #110	; 0x6e
 8006d5c:	d0e9      	beq.n	8006d32 <_scanf_float+0x106>
 8006d5e:	d815      	bhi.n	8006d8c <_scanf_float+0x160>
 8006d60:	2b66      	cmp	r3, #102	; 0x66
 8006d62:	d043      	beq.n	8006dec <_scanf_float+0x1c0>
 8006d64:	2b69      	cmp	r3, #105	; 0x69
 8006d66:	d19a      	bne.n	8006c9e <_scanf_float+0x72>
 8006d68:	f1bb 0f00 	cmp.w	fp, #0
 8006d6c:	d138      	bne.n	8006de0 <_scanf_float+0x1b4>
 8006d6e:	f1b9 0f00 	cmp.w	r9, #0
 8006d72:	d197      	bne.n	8006ca4 <_scanf_float+0x78>
 8006d74:	6821      	ldr	r1, [r4, #0]
 8006d76:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8006d7a:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8006d7e:	d195      	bne.n	8006cac <_scanf_float+0x80>
 8006d80:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006d84:	6021      	str	r1, [r4, #0]
 8006d86:	f04f 0b01 	mov.w	fp, #1
 8006d8a:	e011      	b.n	8006db0 <_scanf_float+0x184>
 8006d8c:	2b74      	cmp	r3, #116	; 0x74
 8006d8e:	d034      	beq.n	8006dfa <_scanf_float+0x1ce>
 8006d90:	2b79      	cmp	r3, #121	; 0x79
 8006d92:	d184      	bne.n	8006c9e <_scanf_float+0x72>
 8006d94:	f1bb 0f07 	cmp.w	fp, #7
 8006d98:	d181      	bne.n	8006c9e <_scanf_float+0x72>
 8006d9a:	f04f 0b08 	mov.w	fp, #8
 8006d9e:	e007      	b.n	8006db0 <_scanf_float+0x184>
 8006da0:	eb12 0f0b 	cmn.w	r2, fp
 8006da4:	f47f af7b 	bne.w	8006c9e <_scanf_float+0x72>
 8006da8:	6821      	ldr	r1, [r4, #0]
 8006daa:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8006dae:	6021      	str	r1, [r4, #0]
 8006db0:	702b      	strb	r3, [r5, #0]
 8006db2:	3501      	adds	r5, #1
 8006db4:	e79a      	b.n	8006cec <_scanf_float+0xc0>
 8006db6:	6821      	ldr	r1, [r4, #0]
 8006db8:	0608      	lsls	r0, r1, #24
 8006dba:	f57f af70 	bpl.w	8006c9e <_scanf_float+0x72>
 8006dbe:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006dc2:	e7f4      	b.n	8006dae <_scanf_float+0x182>
 8006dc4:	2a02      	cmp	r2, #2
 8006dc6:	d047      	beq.n	8006e58 <_scanf_float+0x22c>
 8006dc8:	f1bb 0f01 	cmp.w	fp, #1
 8006dcc:	d003      	beq.n	8006dd6 <_scanf_float+0x1aa>
 8006dce:	f1bb 0f04 	cmp.w	fp, #4
 8006dd2:	f47f af64 	bne.w	8006c9e <_scanf_float+0x72>
 8006dd6:	f10b 0b01 	add.w	fp, fp, #1
 8006dda:	fa5f fb8b 	uxtb.w	fp, fp
 8006dde:	e7e7      	b.n	8006db0 <_scanf_float+0x184>
 8006de0:	f1bb 0f03 	cmp.w	fp, #3
 8006de4:	d0f7      	beq.n	8006dd6 <_scanf_float+0x1aa>
 8006de6:	f1bb 0f05 	cmp.w	fp, #5
 8006dea:	e7f2      	b.n	8006dd2 <_scanf_float+0x1a6>
 8006dec:	f1bb 0f02 	cmp.w	fp, #2
 8006df0:	f47f af55 	bne.w	8006c9e <_scanf_float+0x72>
 8006df4:	f04f 0b03 	mov.w	fp, #3
 8006df8:	e7da      	b.n	8006db0 <_scanf_float+0x184>
 8006dfa:	f1bb 0f06 	cmp.w	fp, #6
 8006dfe:	f47f af4e 	bne.w	8006c9e <_scanf_float+0x72>
 8006e02:	f04f 0b07 	mov.w	fp, #7
 8006e06:	e7d3      	b.n	8006db0 <_scanf_float+0x184>
 8006e08:	6821      	ldr	r1, [r4, #0]
 8006e0a:	0588      	lsls	r0, r1, #22
 8006e0c:	f57f af47 	bpl.w	8006c9e <_scanf_float+0x72>
 8006e10:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8006e14:	6021      	str	r1, [r4, #0]
 8006e16:	f8cd 9008 	str.w	r9, [sp, #8]
 8006e1a:	e7c9      	b.n	8006db0 <_scanf_float+0x184>
 8006e1c:	6821      	ldr	r1, [r4, #0]
 8006e1e:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8006e22:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8006e26:	d006      	beq.n	8006e36 <_scanf_float+0x20a>
 8006e28:	0548      	lsls	r0, r1, #21
 8006e2a:	f57f af38 	bpl.w	8006c9e <_scanf_float+0x72>
 8006e2e:	f1b9 0f00 	cmp.w	r9, #0
 8006e32:	f43f af3b 	beq.w	8006cac <_scanf_float+0x80>
 8006e36:	0588      	lsls	r0, r1, #22
 8006e38:	bf58      	it	pl
 8006e3a:	9802      	ldrpl	r0, [sp, #8]
 8006e3c:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006e40:	bf58      	it	pl
 8006e42:	eba9 0000 	subpl.w	r0, r9, r0
 8006e46:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8006e4a:	bf58      	it	pl
 8006e4c:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8006e50:	6021      	str	r1, [r4, #0]
 8006e52:	f04f 0900 	mov.w	r9, #0
 8006e56:	e7ab      	b.n	8006db0 <_scanf_float+0x184>
 8006e58:	2203      	movs	r2, #3
 8006e5a:	e7a9      	b.n	8006db0 <_scanf_float+0x184>
 8006e5c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006e60:	4631      	mov	r1, r6
 8006e62:	4638      	mov	r0, r7
 8006e64:	9205      	str	r2, [sp, #20]
 8006e66:	4798      	blx	r3
 8006e68:	9a05      	ldr	r2, [sp, #20]
 8006e6a:	2800      	cmp	r0, #0
 8006e6c:	f43f af04 	beq.w	8006c78 <_scanf_float+0x4c>
 8006e70:	e715      	b.n	8006c9e <_scanf_float+0x72>
 8006e72:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006e76:	4632      	mov	r2, r6
 8006e78:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006e7c:	4638      	mov	r0, r7
 8006e7e:	4798      	blx	r3
 8006e80:	6923      	ldr	r3, [r4, #16]
 8006e82:	3b01      	subs	r3, #1
 8006e84:	6123      	str	r3, [r4, #16]
 8006e86:	e715      	b.n	8006cb4 <_scanf_float+0x88>
 8006e88:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8006e8c:	2b06      	cmp	r3, #6
 8006e8e:	d80a      	bhi.n	8006ea6 <_scanf_float+0x27a>
 8006e90:	f1bb 0f02 	cmp.w	fp, #2
 8006e94:	d967      	bls.n	8006f66 <_scanf_float+0x33a>
 8006e96:	f1ab 0b03 	sub.w	fp, fp, #3
 8006e9a:	fa5f fb8b 	uxtb.w	fp, fp
 8006e9e:	eba5 0b0b 	sub.w	fp, r5, fp
 8006ea2:	455d      	cmp	r5, fp
 8006ea4:	d14a      	bne.n	8006f3c <_scanf_float+0x310>
 8006ea6:	6823      	ldr	r3, [r4, #0]
 8006ea8:	05da      	lsls	r2, r3, #23
 8006eaa:	d51f      	bpl.n	8006eec <_scanf_float+0x2c0>
 8006eac:	055b      	lsls	r3, r3, #21
 8006eae:	d467      	bmi.n	8006f80 <_scanf_float+0x354>
 8006eb0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006eb4:	6923      	ldr	r3, [r4, #16]
 8006eb6:	2965      	cmp	r1, #101	; 0x65
 8006eb8:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8006ebc:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 8006ec0:	6123      	str	r3, [r4, #16]
 8006ec2:	d00d      	beq.n	8006ee0 <_scanf_float+0x2b4>
 8006ec4:	2945      	cmp	r1, #69	; 0x45
 8006ec6:	d00b      	beq.n	8006ee0 <_scanf_float+0x2b4>
 8006ec8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ecc:	4632      	mov	r2, r6
 8006ece:	4638      	mov	r0, r7
 8006ed0:	4798      	blx	r3
 8006ed2:	6923      	ldr	r3, [r4, #16]
 8006ed4:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8006ed8:	3b01      	subs	r3, #1
 8006eda:	f1a5 0b02 	sub.w	fp, r5, #2
 8006ede:	6123      	str	r3, [r4, #16]
 8006ee0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ee4:	4632      	mov	r2, r6
 8006ee6:	4638      	mov	r0, r7
 8006ee8:	4798      	blx	r3
 8006eea:	465d      	mov	r5, fp
 8006eec:	6826      	ldr	r6, [r4, #0]
 8006eee:	f016 0610 	ands.w	r6, r6, #16
 8006ef2:	d176      	bne.n	8006fe2 <_scanf_float+0x3b6>
 8006ef4:	702e      	strb	r6, [r5, #0]
 8006ef6:	6823      	ldr	r3, [r4, #0]
 8006ef8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006efc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f00:	d141      	bne.n	8006f86 <_scanf_float+0x35a>
 8006f02:	9b02      	ldr	r3, [sp, #8]
 8006f04:	eba9 0303 	sub.w	r3, r9, r3
 8006f08:	425a      	negs	r2, r3
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d148      	bne.n	8006fa0 <_scanf_float+0x374>
 8006f0e:	4641      	mov	r1, r8
 8006f10:	2200      	movs	r2, #0
 8006f12:	4638      	mov	r0, r7
 8006f14:	f000 fef0 	bl	8007cf8 <_strtod_r>
 8006f18:	6825      	ldr	r5, [r4, #0]
 8006f1a:	4680      	mov	r8, r0
 8006f1c:	f015 0f02 	tst.w	r5, #2
 8006f20:	4689      	mov	r9, r1
 8006f22:	f8da 3000 	ldr.w	r3, [sl]
 8006f26:	d046      	beq.n	8006fb6 <_scanf_float+0x38a>
 8006f28:	1d1a      	adds	r2, r3, #4
 8006f2a:	f8ca 2000 	str.w	r2, [sl]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	e9c3 8900 	strd	r8, r9, [r3]
 8006f34:	68e3      	ldr	r3, [r4, #12]
 8006f36:	3301      	adds	r3, #1
 8006f38:	60e3      	str	r3, [r4, #12]
 8006f3a:	e6bf      	b.n	8006cbc <_scanf_float+0x90>
 8006f3c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f40:	4632      	mov	r2, r6
 8006f42:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006f46:	4638      	mov	r0, r7
 8006f48:	4798      	blx	r3
 8006f4a:	6923      	ldr	r3, [r4, #16]
 8006f4c:	3b01      	subs	r3, #1
 8006f4e:	6123      	str	r3, [r4, #16]
 8006f50:	e7a7      	b.n	8006ea2 <_scanf_float+0x276>
 8006f52:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f56:	4632      	mov	r2, r6
 8006f58:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006f5c:	4638      	mov	r0, r7
 8006f5e:	4798      	blx	r3
 8006f60:	6923      	ldr	r3, [r4, #16]
 8006f62:	3b01      	subs	r3, #1
 8006f64:	6123      	str	r3, [r4, #16]
 8006f66:	4545      	cmp	r5, r8
 8006f68:	d8f3      	bhi.n	8006f52 <_scanf_float+0x326>
 8006f6a:	e6a6      	b.n	8006cba <_scanf_float+0x8e>
 8006f6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f70:	4632      	mov	r2, r6
 8006f72:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006f76:	4638      	mov	r0, r7
 8006f78:	4798      	blx	r3
 8006f7a:	6923      	ldr	r3, [r4, #16]
 8006f7c:	3b01      	subs	r3, #1
 8006f7e:	6123      	str	r3, [r4, #16]
 8006f80:	4545      	cmp	r5, r8
 8006f82:	d8f3      	bhi.n	8006f6c <_scanf_float+0x340>
 8006f84:	e699      	b.n	8006cba <_scanf_float+0x8e>
 8006f86:	9b03      	ldr	r3, [sp, #12]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d0c0      	beq.n	8006f0e <_scanf_float+0x2e2>
 8006f8c:	9904      	ldr	r1, [sp, #16]
 8006f8e:	230a      	movs	r3, #10
 8006f90:	4632      	mov	r2, r6
 8006f92:	3101      	adds	r1, #1
 8006f94:	4638      	mov	r0, r7
 8006f96:	f000 ff3b 	bl	8007e10 <_strtol_r>
 8006f9a:	9b03      	ldr	r3, [sp, #12]
 8006f9c:	9d04      	ldr	r5, [sp, #16]
 8006f9e:	1ac2      	subs	r2, r0, r3
 8006fa0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006fa4:	429d      	cmp	r5, r3
 8006fa6:	bf28      	it	cs
 8006fa8:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8006fac:	490e      	ldr	r1, [pc, #56]	; (8006fe8 <_scanf_float+0x3bc>)
 8006fae:	4628      	mov	r0, r5
 8006fb0:	f000 f820 	bl	8006ff4 <siprintf>
 8006fb4:	e7ab      	b.n	8006f0e <_scanf_float+0x2e2>
 8006fb6:	1d1f      	adds	r7, r3, #4
 8006fb8:	f015 0504 	ands.w	r5, r5, #4
 8006fbc:	f8ca 7000 	str.w	r7, [sl]
 8006fc0:	d1b5      	bne.n	8006f2e <_scanf_float+0x302>
 8006fc2:	681f      	ldr	r7, [r3, #0]
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	460b      	mov	r3, r1
 8006fc8:	f7f9 fd20 	bl	8000a0c <__aeabi_dcmpun>
 8006fcc:	b120      	cbz	r0, 8006fd8 <_scanf_float+0x3ac>
 8006fce:	4628      	mov	r0, r5
 8006fd0:	f000 f80c 	bl	8006fec <nanf>
 8006fd4:	6038      	str	r0, [r7, #0]
 8006fd6:	e7ad      	b.n	8006f34 <_scanf_float+0x308>
 8006fd8:	4640      	mov	r0, r8
 8006fda:	4649      	mov	r1, r9
 8006fdc:	f7f9 fd74 	bl	8000ac8 <__aeabi_d2f>
 8006fe0:	e7f8      	b.n	8006fd4 <_scanf_float+0x3a8>
 8006fe2:	2600      	movs	r6, #0
 8006fe4:	e66a      	b.n	8006cbc <_scanf_float+0x90>
 8006fe6:	bf00      	nop
 8006fe8:	08009e88 	.word	0x08009e88

08006fec <nanf>:
 8006fec:	4800      	ldr	r0, [pc, #0]	; (8006ff0 <nanf+0x4>)
 8006fee:	4770      	bx	lr
 8006ff0:	7fc00000 	.word	0x7fc00000

08006ff4 <siprintf>:
 8006ff4:	b40e      	push	{r1, r2, r3}
 8006ff6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006ffa:	b500      	push	{lr}
 8006ffc:	b09c      	sub	sp, #112	; 0x70
 8006ffe:	ab1d      	add	r3, sp, #116	; 0x74
 8007000:	9002      	str	r0, [sp, #8]
 8007002:	9006      	str	r0, [sp, #24]
 8007004:	9107      	str	r1, [sp, #28]
 8007006:	9104      	str	r1, [sp, #16]
 8007008:	4808      	ldr	r0, [pc, #32]	; (800702c <siprintf+0x38>)
 800700a:	4909      	ldr	r1, [pc, #36]	; (8007030 <siprintf+0x3c>)
 800700c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007010:	9105      	str	r1, [sp, #20]
 8007012:	6800      	ldr	r0, [r0, #0]
 8007014:	a902      	add	r1, sp, #8
 8007016:	9301      	str	r3, [sp, #4]
 8007018:	f001 ff20 	bl	8008e5c <_svfiprintf_r>
 800701c:	2200      	movs	r2, #0
 800701e:	9b02      	ldr	r3, [sp, #8]
 8007020:	701a      	strb	r2, [r3, #0]
 8007022:	b01c      	add	sp, #112	; 0x70
 8007024:	f85d eb04 	ldr.w	lr, [sp], #4
 8007028:	b003      	add	sp, #12
 800702a:	4770      	bx	lr
 800702c:	20000010 	.word	0x20000010
 8007030:	ffff0208 	.word	0xffff0208

08007034 <siscanf>:
 8007034:	b40e      	push	{r1, r2, r3}
 8007036:	f44f 7201 	mov.w	r2, #516	; 0x204
 800703a:	b530      	push	{r4, r5, lr}
 800703c:	b09c      	sub	sp, #112	; 0x70
 800703e:	ac1f      	add	r4, sp, #124	; 0x7c
 8007040:	f854 5b04 	ldr.w	r5, [r4], #4
 8007044:	f8ad 2014 	strh.w	r2, [sp, #20]
 8007048:	9002      	str	r0, [sp, #8]
 800704a:	9006      	str	r0, [sp, #24]
 800704c:	f7f9 f880 	bl	8000150 <strlen>
 8007050:	4b0b      	ldr	r3, [pc, #44]	; (8007080 <siscanf+0x4c>)
 8007052:	9003      	str	r0, [sp, #12]
 8007054:	930b      	str	r3, [sp, #44]	; 0x2c
 8007056:	2300      	movs	r3, #0
 8007058:	930f      	str	r3, [sp, #60]	; 0x3c
 800705a:	9314      	str	r3, [sp, #80]	; 0x50
 800705c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007060:	9007      	str	r0, [sp, #28]
 8007062:	4808      	ldr	r0, [pc, #32]	; (8007084 <siscanf+0x50>)
 8007064:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007068:	462a      	mov	r2, r5
 800706a:	4623      	mov	r3, r4
 800706c:	a902      	add	r1, sp, #8
 800706e:	6800      	ldr	r0, [r0, #0]
 8007070:	9401      	str	r4, [sp, #4]
 8007072:	f002 f845 	bl	8009100 <__ssvfiscanf_r>
 8007076:	b01c      	add	sp, #112	; 0x70
 8007078:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800707c:	b003      	add	sp, #12
 800707e:	4770      	bx	lr
 8007080:	08007089 	.word	0x08007089
 8007084:	20000010 	.word	0x20000010

08007088 <__seofread>:
 8007088:	2000      	movs	r0, #0
 800708a:	4770      	bx	lr

0800708c <strncmp>:
 800708c:	b510      	push	{r4, lr}
 800708e:	b16a      	cbz	r2, 80070ac <strncmp+0x20>
 8007090:	3901      	subs	r1, #1
 8007092:	1884      	adds	r4, r0, r2
 8007094:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007098:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800709c:	4293      	cmp	r3, r2
 800709e:	d103      	bne.n	80070a8 <strncmp+0x1c>
 80070a0:	42a0      	cmp	r0, r4
 80070a2:	d001      	beq.n	80070a8 <strncmp+0x1c>
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d1f5      	bne.n	8007094 <strncmp+0x8>
 80070a8:	1a98      	subs	r0, r3, r2
 80070aa:	bd10      	pop	{r4, pc}
 80070ac:	4610      	mov	r0, r2
 80070ae:	e7fc      	b.n	80070aa <strncmp+0x1e>

080070b0 <sulp>:
 80070b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070b4:	460f      	mov	r7, r1
 80070b6:	4690      	mov	r8, r2
 80070b8:	f001 fce0 	bl	8008a7c <__ulp>
 80070bc:	4604      	mov	r4, r0
 80070be:	460d      	mov	r5, r1
 80070c0:	f1b8 0f00 	cmp.w	r8, #0
 80070c4:	d011      	beq.n	80070ea <sulp+0x3a>
 80070c6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80070ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	dd0b      	ble.n	80070ea <sulp+0x3a>
 80070d2:	2400      	movs	r4, #0
 80070d4:	051b      	lsls	r3, r3, #20
 80070d6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80070da:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80070de:	4622      	mov	r2, r4
 80070e0:	462b      	mov	r3, r5
 80070e2:	f7f9 f9f9 	bl	80004d8 <__aeabi_dmul>
 80070e6:	4604      	mov	r4, r0
 80070e8:	460d      	mov	r5, r1
 80070ea:	4620      	mov	r0, r4
 80070ec:	4629      	mov	r1, r5
 80070ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070f2:	0000      	movs	r0, r0
 80070f4:	0000      	movs	r0, r0
	...

080070f8 <_strtod_l>:
 80070f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070fc:	461f      	mov	r7, r3
 80070fe:	2300      	movs	r3, #0
 8007100:	b0a1      	sub	sp, #132	; 0x84
 8007102:	4683      	mov	fp, r0
 8007104:	4638      	mov	r0, r7
 8007106:	460e      	mov	r6, r1
 8007108:	9217      	str	r2, [sp, #92]	; 0x5c
 800710a:	931c      	str	r3, [sp, #112]	; 0x70
 800710c:	f001 f9cc 	bl	80084a8 <__localeconv_l>
 8007110:	4680      	mov	r8, r0
 8007112:	6800      	ldr	r0, [r0, #0]
 8007114:	f7f9 f81c 	bl	8000150 <strlen>
 8007118:	f04f 0900 	mov.w	r9, #0
 800711c:	4604      	mov	r4, r0
 800711e:	f04f 0a00 	mov.w	sl, #0
 8007122:	961b      	str	r6, [sp, #108]	; 0x6c
 8007124:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007126:	781a      	ldrb	r2, [r3, #0]
 8007128:	2a0d      	cmp	r2, #13
 800712a:	d832      	bhi.n	8007192 <_strtod_l+0x9a>
 800712c:	2a09      	cmp	r2, #9
 800712e:	d236      	bcs.n	800719e <_strtod_l+0xa6>
 8007130:	2a00      	cmp	r2, #0
 8007132:	d03e      	beq.n	80071b2 <_strtod_l+0xba>
 8007134:	2300      	movs	r3, #0
 8007136:	930d      	str	r3, [sp, #52]	; 0x34
 8007138:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800713a:	782b      	ldrb	r3, [r5, #0]
 800713c:	2b30      	cmp	r3, #48	; 0x30
 800713e:	f040 80ac 	bne.w	800729a <_strtod_l+0x1a2>
 8007142:	786b      	ldrb	r3, [r5, #1]
 8007144:	2b58      	cmp	r3, #88	; 0x58
 8007146:	d001      	beq.n	800714c <_strtod_l+0x54>
 8007148:	2b78      	cmp	r3, #120	; 0x78
 800714a:	d167      	bne.n	800721c <_strtod_l+0x124>
 800714c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800714e:	9702      	str	r7, [sp, #8]
 8007150:	9301      	str	r3, [sp, #4]
 8007152:	ab1c      	add	r3, sp, #112	; 0x70
 8007154:	9300      	str	r3, [sp, #0]
 8007156:	4a89      	ldr	r2, [pc, #548]	; (800737c <_strtod_l+0x284>)
 8007158:	ab1d      	add	r3, sp, #116	; 0x74
 800715a:	a91b      	add	r1, sp, #108	; 0x6c
 800715c:	4658      	mov	r0, fp
 800715e:	f000 feb9 	bl	8007ed4 <__gethex>
 8007162:	f010 0407 	ands.w	r4, r0, #7
 8007166:	4606      	mov	r6, r0
 8007168:	d005      	beq.n	8007176 <_strtod_l+0x7e>
 800716a:	2c06      	cmp	r4, #6
 800716c:	d12b      	bne.n	80071c6 <_strtod_l+0xce>
 800716e:	2300      	movs	r3, #0
 8007170:	3501      	adds	r5, #1
 8007172:	951b      	str	r5, [sp, #108]	; 0x6c
 8007174:	930d      	str	r3, [sp, #52]	; 0x34
 8007176:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007178:	2b00      	cmp	r3, #0
 800717a:	f040 85a6 	bne.w	8007cca <_strtod_l+0xbd2>
 800717e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007180:	b1e3      	cbz	r3, 80071bc <_strtod_l+0xc4>
 8007182:	464a      	mov	r2, r9
 8007184:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8007188:	4610      	mov	r0, r2
 800718a:	4619      	mov	r1, r3
 800718c:	b021      	add	sp, #132	; 0x84
 800718e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007192:	2a2b      	cmp	r2, #43	; 0x2b
 8007194:	d015      	beq.n	80071c2 <_strtod_l+0xca>
 8007196:	2a2d      	cmp	r2, #45	; 0x2d
 8007198:	d004      	beq.n	80071a4 <_strtod_l+0xac>
 800719a:	2a20      	cmp	r2, #32
 800719c:	d1ca      	bne.n	8007134 <_strtod_l+0x3c>
 800719e:	3301      	adds	r3, #1
 80071a0:	931b      	str	r3, [sp, #108]	; 0x6c
 80071a2:	e7bf      	b.n	8007124 <_strtod_l+0x2c>
 80071a4:	2201      	movs	r2, #1
 80071a6:	920d      	str	r2, [sp, #52]	; 0x34
 80071a8:	1c5a      	adds	r2, r3, #1
 80071aa:	921b      	str	r2, [sp, #108]	; 0x6c
 80071ac:	785b      	ldrb	r3, [r3, #1]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d1c2      	bne.n	8007138 <_strtod_l+0x40>
 80071b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80071b4:	961b      	str	r6, [sp, #108]	; 0x6c
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	f040 8585 	bne.w	8007cc6 <_strtod_l+0xbce>
 80071bc:	464a      	mov	r2, r9
 80071be:	4653      	mov	r3, sl
 80071c0:	e7e2      	b.n	8007188 <_strtod_l+0x90>
 80071c2:	2200      	movs	r2, #0
 80071c4:	e7ef      	b.n	80071a6 <_strtod_l+0xae>
 80071c6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80071c8:	b13a      	cbz	r2, 80071da <_strtod_l+0xe2>
 80071ca:	2135      	movs	r1, #53	; 0x35
 80071cc:	a81e      	add	r0, sp, #120	; 0x78
 80071ce:	f001 fd48 	bl	8008c62 <__copybits>
 80071d2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80071d4:	4658      	mov	r0, fp
 80071d6:	f001 f9ba 	bl	800854e <_Bfree>
 80071da:	3c01      	subs	r4, #1
 80071dc:	2c04      	cmp	r4, #4
 80071de:	d806      	bhi.n	80071ee <_strtod_l+0xf6>
 80071e0:	e8df f004 	tbb	[pc, r4]
 80071e4:	1714030a 	.word	0x1714030a
 80071e8:	0a          	.byte	0x0a
 80071e9:	00          	.byte	0x00
 80071ea:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 80071ee:	0731      	lsls	r1, r6, #28
 80071f0:	d5c1      	bpl.n	8007176 <_strtod_l+0x7e>
 80071f2:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 80071f6:	e7be      	b.n	8007176 <_strtod_l+0x7e>
 80071f8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80071fa:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 80071fe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007202:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007206:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 800720a:	e7f0      	b.n	80071ee <_strtod_l+0xf6>
 800720c:	f8df a170 	ldr.w	sl, [pc, #368]	; 8007380 <_strtod_l+0x288>
 8007210:	e7ed      	b.n	80071ee <_strtod_l+0xf6>
 8007212:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8007216:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800721a:	e7e8      	b.n	80071ee <_strtod_l+0xf6>
 800721c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800721e:	1c5a      	adds	r2, r3, #1
 8007220:	921b      	str	r2, [sp, #108]	; 0x6c
 8007222:	785b      	ldrb	r3, [r3, #1]
 8007224:	2b30      	cmp	r3, #48	; 0x30
 8007226:	d0f9      	beq.n	800721c <_strtod_l+0x124>
 8007228:	2b00      	cmp	r3, #0
 800722a:	d0a4      	beq.n	8007176 <_strtod_l+0x7e>
 800722c:	2301      	movs	r3, #1
 800722e:	2500      	movs	r5, #0
 8007230:	220a      	movs	r2, #10
 8007232:	9307      	str	r3, [sp, #28]
 8007234:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007236:	9506      	str	r5, [sp, #24]
 8007238:	9308      	str	r3, [sp, #32]
 800723a:	9504      	str	r5, [sp, #16]
 800723c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800723e:	7807      	ldrb	r7, [r0, #0]
 8007240:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8007244:	b2d9      	uxtb	r1, r3
 8007246:	2909      	cmp	r1, #9
 8007248:	d929      	bls.n	800729e <_strtod_l+0x1a6>
 800724a:	4622      	mov	r2, r4
 800724c:	f8d8 1000 	ldr.w	r1, [r8]
 8007250:	f7ff ff1c 	bl	800708c <strncmp>
 8007254:	2800      	cmp	r0, #0
 8007256:	d031      	beq.n	80072bc <_strtod_l+0x1c4>
 8007258:	2000      	movs	r0, #0
 800725a:	463b      	mov	r3, r7
 800725c:	4602      	mov	r2, r0
 800725e:	9c04      	ldr	r4, [sp, #16]
 8007260:	9005      	str	r0, [sp, #20]
 8007262:	2b65      	cmp	r3, #101	; 0x65
 8007264:	d001      	beq.n	800726a <_strtod_l+0x172>
 8007266:	2b45      	cmp	r3, #69	; 0x45
 8007268:	d114      	bne.n	8007294 <_strtod_l+0x19c>
 800726a:	b924      	cbnz	r4, 8007276 <_strtod_l+0x17e>
 800726c:	b910      	cbnz	r0, 8007274 <_strtod_l+0x17c>
 800726e:	9b07      	ldr	r3, [sp, #28]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d09e      	beq.n	80071b2 <_strtod_l+0xba>
 8007274:	2400      	movs	r4, #0
 8007276:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8007278:	1c73      	adds	r3, r6, #1
 800727a:	931b      	str	r3, [sp, #108]	; 0x6c
 800727c:	7873      	ldrb	r3, [r6, #1]
 800727e:	2b2b      	cmp	r3, #43	; 0x2b
 8007280:	d078      	beq.n	8007374 <_strtod_l+0x27c>
 8007282:	2b2d      	cmp	r3, #45	; 0x2d
 8007284:	d070      	beq.n	8007368 <_strtod_l+0x270>
 8007286:	f04f 0c00 	mov.w	ip, #0
 800728a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800728e:	2f09      	cmp	r7, #9
 8007290:	d97c      	bls.n	800738c <_strtod_l+0x294>
 8007292:	961b      	str	r6, [sp, #108]	; 0x6c
 8007294:	f04f 0e00 	mov.w	lr, #0
 8007298:	e09a      	b.n	80073d0 <_strtod_l+0x2d8>
 800729a:	2300      	movs	r3, #0
 800729c:	e7c7      	b.n	800722e <_strtod_l+0x136>
 800729e:	9904      	ldr	r1, [sp, #16]
 80072a0:	3001      	adds	r0, #1
 80072a2:	2908      	cmp	r1, #8
 80072a4:	bfd7      	itett	le
 80072a6:	9906      	ldrle	r1, [sp, #24]
 80072a8:	fb02 3505 	mlagt	r5, r2, r5, r3
 80072ac:	fb02 3301 	mlale	r3, r2, r1, r3
 80072b0:	9306      	strle	r3, [sp, #24]
 80072b2:	9b04      	ldr	r3, [sp, #16]
 80072b4:	901b      	str	r0, [sp, #108]	; 0x6c
 80072b6:	3301      	adds	r3, #1
 80072b8:	9304      	str	r3, [sp, #16]
 80072ba:	e7bf      	b.n	800723c <_strtod_l+0x144>
 80072bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80072be:	191a      	adds	r2, r3, r4
 80072c0:	921b      	str	r2, [sp, #108]	; 0x6c
 80072c2:	9a04      	ldr	r2, [sp, #16]
 80072c4:	5d1b      	ldrb	r3, [r3, r4]
 80072c6:	2a00      	cmp	r2, #0
 80072c8:	d037      	beq.n	800733a <_strtod_l+0x242>
 80072ca:	4602      	mov	r2, r0
 80072cc:	9c04      	ldr	r4, [sp, #16]
 80072ce:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80072d2:	2909      	cmp	r1, #9
 80072d4:	d913      	bls.n	80072fe <_strtod_l+0x206>
 80072d6:	2101      	movs	r1, #1
 80072d8:	9105      	str	r1, [sp, #20]
 80072da:	e7c2      	b.n	8007262 <_strtod_l+0x16a>
 80072dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80072de:	3001      	adds	r0, #1
 80072e0:	1c5a      	adds	r2, r3, #1
 80072e2:	921b      	str	r2, [sp, #108]	; 0x6c
 80072e4:	785b      	ldrb	r3, [r3, #1]
 80072e6:	2b30      	cmp	r3, #48	; 0x30
 80072e8:	d0f8      	beq.n	80072dc <_strtod_l+0x1e4>
 80072ea:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80072ee:	2a08      	cmp	r2, #8
 80072f0:	f200 84f0 	bhi.w	8007cd4 <_strtod_l+0xbdc>
 80072f4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80072f6:	9208      	str	r2, [sp, #32]
 80072f8:	4602      	mov	r2, r0
 80072fa:	2000      	movs	r0, #0
 80072fc:	4604      	mov	r4, r0
 80072fe:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8007302:	f100 0101 	add.w	r1, r0, #1
 8007306:	d012      	beq.n	800732e <_strtod_l+0x236>
 8007308:	440a      	add	r2, r1
 800730a:	270a      	movs	r7, #10
 800730c:	4621      	mov	r1, r4
 800730e:	eb00 0c04 	add.w	ip, r0, r4
 8007312:	458c      	cmp	ip, r1
 8007314:	d113      	bne.n	800733e <_strtod_l+0x246>
 8007316:	1821      	adds	r1, r4, r0
 8007318:	2908      	cmp	r1, #8
 800731a:	f104 0401 	add.w	r4, r4, #1
 800731e:	4404      	add	r4, r0
 8007320:	dc19      	bgt.n	8007356 <_strtod_l+0x25e>
 8007322:	210a      	movs	r1, #10
 8007324:	9b06      	ldr	r3, [sp, #24]
 8007326:	fb01 e303 	mla	r3, r1, r3, lr
 800732a:	9306      	str	r3, [sp, #24]
 800732c:	2100      	movs	r1, #0
 800732e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007330:	1c58      	adds	r0, r3, #1
 8007332:	901b      	str	r0, [sp, #108]	; 0x6c
 8007334:	785b      	ldrb	r3, [r3, #1]
 8007336:	4608      	mov	r0, r1
 8007338:	e7c9      	b.n	80072ce <_strtod_l+0x1d6>
 800733a:	9804      	ldr	r0, [sp, #16]
 800733c:	e7d3      	b.n	80072e6 <_strtod_l+0x1ee>
 800733e:	2908      	cmp	r1, #8
 8007340:	f101 0101 	add.w	r1, r1, #1
 8007344:	dc03      	bgt.n	800734e <_strtod_l+0x256>
 8007346:	9b06      	ldr	r3, [sp, #24]
 8007348:	437b      	muls	r3, r7
 800734a:	9306      	str	r3, [sp, #24]
 800734c:	e7e1      	b.n	8007312 <_strtod_l+0x21a>
 800734e:	2910      	cmp	r1, #16
 8007350:	bfd8      	it	le
 8007352:	437d      	mulle	r5, r7
 8007354:	e7dd      	b.n	8007312 <_strtod_l+0x21a>
 8007356:	2c10      	cmp	r4, #16
 8007358:	bfdc      	itt	le
 800735a:	210a      	movle	r1, #10
 800735c:	fb01 e505 	mlale	r5, r1, r5, lr
 8007360:	e7e4      	b.n	800732c <_strtod_l+0x234>
 8007362:	2301      	movs	r3, #1
 8007364:	9305      	str	r3, [sp, #20]
 8007366:	e781      	b.n	800726c <_strtod_l+0x174>
 8007368:	f04f 0c01 	mov.w	ip, #1
 800736c:	1cb3      	adds	r3, r6, #2
 800736e:	931b      	str	r3, [sp, #108]	; 0x6c
 8007370:	78b3      	ldrb	r3, [r6, #2]
 8007372:	e78a      	b.n	800728a <_strtod_l+0x192>
 8007374:	f04f 0c00 	mov.w	ip, #0
 8007378:	e7f8      	b.n	800736c <_strtod_l+0x274>
 800737a:	bf00      	nop
 800737c:	08009e9c 	.word	0x08009e9c
 8007380:	7ff00000 	.word	0x7ff00000
 8007384:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007386:	1c5f      	adds	r7, r3, #1
 8007388:	971b      	str	r7, [sp, #108]	; 0x6c
 800738a:	785b      	ldrb	r3, [r3, #1]
 800738c:	2b30      	cmp	r3, #48	; 0x30
 800738e:	d0f9      	beq.n	8007384 <_strtod_l+0x28c>
 8007390:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8007394:	2f08      	cmp	r7, #8
 8007396:	f63f af7d 	bhi.w	8007294 <_strtod_l+0x19c>
 800739a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800739e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80073a0:	9309      	str	r3, [sp, #36]	; 0x24
 80073a2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80073a4:	1c5f      	adds	r7, r3, #1
 80073a6:	971b      	str	r7, [sp, #108]	; 0x6c
 80073a8:	785b      	ldrb	r3, [r3, #1]
 80073aa:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80073ae:	f1b8 0f09 	cmp.w	r8, #9
 80073b2:	d937      	bls.n	8007424 <_strtod_l+0x32c>
 80073b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80073b6:	1a7f      	subs	r7, r7, r1
 80073b8:	2f08      	cmp	r7, #8
 80073ba:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80073be:	dc37      	bgt.n	8007430 <_strtod_l+0x338>
 80073c0:	45be      	cmp	lr, r7
 80073c2:	bfa8      	it	ge
 80073c4:	46be      	movge	lr, r7
 80073c6:	f1bc 0f00 	cmp.w	ip, #0
 80073ca:	d001      	beq.n	80073d0 <_strtod_l+0x2d8>
 80073cc:	f1ce 0e00 	rsb	lr, lr, #0
 80073d0:	2c00      	cmp	r4, #0
 80073d2:	d151      	bne.n	8007478 <_strtod_l+0x380>
 80073d4:	2800      	cmp	r0, #0
 80073d6:	f47f aece 	bne.w	8007176 <_strtod_l+0x7e>
 80073da:	9a07      	ldr	r2, [sp, #28]
 80073dc:	2a00      	cmp	r2, #0
 80073de:	f47f aeca 	bne.w	8007176 <_strtod_l+0x7e>
 80073e2:	9a05      	ldr	r2, [sp, #20]
 80073e4:	2a00      	cmp	r2, #0
 80073e6:	f47f aee4 	bne.w	80071b2 <_strtod_l+0xba>
 80073ea:	2b4e      	cmp	r3, #78	; 0x4e
 80073ec:	d027      	beq.n	800743e <_strtod_l+0x346>
 80073ee:	dc21      	bgt.n	8007434 <_strtod_l+0x33c>
 80073f0:	2b49      	cmp	r3, #73	; 0x49
 80073f2:	f47f aede 	bne.w	80071b2 <_strtod_l+0xba>
 80073f6:	49a4      	ldr	r1, [pc, #656]	; (8007688 <_strtod_l+0x590>)
 80073f8:	a81b      	add	r0, sp, #108	; 0x6c
 80073fa:	f000 ff9f 	bl	800833c <__match>
 80073fe:	2800      	cmp	r0, #0
 8007400:	f43f aed7 	beq.w	80071b2 <_strtod_l+0xba>
 8007404:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007406:	49a1      	ldr	r1, [pc, #644]	; (800768c <_strtod_l+0x594>)
 8007408:	3b01      	subs	r3, #1
 800740a:	a81b      	add	r0, sp, #108	; 0x6c
 800740c:	931b      	str	r3, [sp, #108]	; 0x6c
 800740e:	f000 ff95 	bl	800833c <__match>
 8007412:	b910      	cbnz	r0, 800741a <_strtod_l+0x322>
 8007414:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007416:	3301      	adds	r3, #1
 8007418:	931b      	str	r3, [sp, #108]	; 0x6c
 800741a:	f8df a284 	ldr.w	sl, [pc, #644]	; 80076a0 <_strtod_l+0x5a8>
 800741e:	f04f 0900 	mov.w	r9, #0
 8007422:	e6a8      	b.n	8007176 <_strtod_l+0x7e>
 8007424:	210a      	movs	r1, #10
 8007426:	fb01 3e0e 	mla	lr, r1, lr, r3
 800742a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800742e:	e7b8      	b.n	80073a2 <_strtod_l+0x2aa>
 8007430:	46be      	mov	lr, r7
 8007432:	e7c8      	b.n	80073c6 <_strtod_l+0x2ce>
 8007434:	2b69      	cmp	r3, #105	; 0x69
 8007436:	d0de      	beq.n	80073f6 <_strtod_l+0x2fe>
 8007438:	2b6e      	cmp	r3, #110	; 0x6e
 800743a:	f47f aeba 	bne.w	80071b2 <_strtod_l+0xba>
 800743e:	4994      	ldr	r1, [pc, #592]	; (8007690 <_strtod_l+0x598>)
 8007440:	a81b      	add	r0, sp, #108	; 0x6c
 8007442:	f000 ff7b 	bl	800833c <__match>
 8007446:	2800      	cmp	r0, #0
 8007448:	f43f aeb3 	beq.w	80071b2 <_strtod_l+0xba>
 800744c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	2b28      	cmp	r3, #40	; 0x28
 8007452:	d10e      	bne.n	8007472 <_strtod_l+0x37a>
 8007454:	aa1e      	add	r2, sp, #120	; 0x78
 8007456:	498f      	ldr	r1, [pc, #572]	; (8007694 <_strtod_l+0x59c>)
 8007458:	a81b      	add	r0, sp, #108	; 0x6c
 800745a:	f000 ff83 	bl	8008364 <__hexnan>
 800745e:	2805      	cmp	r0, #5
 8007460:	d107      	bne.n	8007472 <_strtod_l+0x37a>
 8007462:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007464:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8007468:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 800746c:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8007470:	e681      	b.n	8007176 <_strtod_l+0x7e>
 8007472:	f8df a234 	ldr.w	sl, [pc, #564]	; 80076a8 <_strtod_l+0x5b0>
 8007476:	e7d2      	b.n	800741e <_strtod_l+0x326>
 8007478:	ebae 0302 	sub.w	r3, lr, r2
 800747c:	9307      	str	r3, [sp, #28]
 800747e:	9b04      	ldr	r3, [sp, #16]
 8007480:	9806      	ldr	r0, [sp, #24]
 8007482:	2b00      	cmp	r3, #0
 8007484:	bf08      	it	eq
 8007486:	4623      	moveq	r3, r4
 8007488:	2c10      	cmp	r4, #16
 800748a:	9304      	str	r3, [sp, #16]
 800748c:	46a0      	mov	r8, r4
 800748e:	bfa8      	it	ge
 8007490:	f04f 0810 	movge.w	r8, #16
 8007494:	f7f8 ffa6 	bl	80003e4 <__aeabi_ui2d>
 8007498:	2c09      	cmp	r4, #9
 800749a:	4681      	mov	r9, r0
 800749c:	468a      	mov	sl, r1
 800749e:	dc13      	bgt.n	80074c8 <_strtod_l+0x3d0>
 80074a0:	9b07      	ldr	r3, [sp, #28]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	f43f ae67 	beq.w	8007176 <_strtod_l+0x7e>
 80074a8:	9b07      	ldr	r3, [sp, #28]
 80074aa:	dd7e      	ble.n	80075aa <_strtod_l+0x4b2>
 80074ac:	2b16      	cmp	r3, #22
 80074ae:	dc65      	bgt.n	800757c <_strtod_l+0x484>
 80074b0:	4a79      	ldr	r2, [pc, #484]	; (8007698 <_strtod_l+0x5a0>)
 80074b2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80074b6:	464a      	mov	r2, r9
 80074b8:	e9de 0100 	ldrd	r0, r1, [lr]
 80074bc:	4653      	mov	r3, sl
 80074be:	f7f9 f80b 	bl	80004d8 <__aeabi_dmul>
 80074c2:	4681      	mov	r9, r0
 80074c4:	468a      	mov	sl, r1
 80074c6:	e656      	b.n	8007176 <_strtod_l+0x7e>
 80074c8:	4b73      	ldr	r3, [pc, #460]	; (8007698 <_strtod_l+0x5a0>)
 80074ca:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80074ce:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80074d2:	f7f9 f801 	bl	80004d8 <__aeabi_dmul>
 80074d6:	4606      	mov	r6, r0
 80074d8:	4628      	mov	r0, r5
 80074da:	460f      	mov	r7, r1
 80074dc:	f7f8 ff82 	bl	80003e4 <__aeabi_ui2d>
 80074e0:	4602      	mov	r2, r0
 80074e2:	460b      	mov	r3, r1
 80074e4:	4630      	mov	r0, r6
 80074e6:	4639      	mov	r1, r7
 80074e8:	f7f8 fe40 	bl	800016c <__adddf3>
 80074ec:	2c0f      	cmp	r4, #15
 80074ee:	4681      	mov	r9, r0
 80074f0:	468a      	mov	sl, r1
 80074f2:	ddd5      	ble.n	80074a0 <_strtod_l+0x3a8>
 80074f4:	9b07      	ldr	r3, [sp, #28]
 80074f6:	eba4 0808 	sub.w	r8, r4, r8
 80074fa:	4498      	add	r8, r3
 80074fc:	f1b8 0f00 	cmp.w	r8, #0
 8007500:	f340 809a 	ble.w	8007638 <_strtod_l+0x540>
 8007504:	f018 030f 	ands.w	r3, r8, #15
 8007508:	d00a      	beq.n	8007520 <_strtod_l+0x428>
 800750a:	4963      	ldr	r1, [pc, #396]	; (8007698 <_strtod_l+0x5a0>)
 800750c:	464a      	mov	r2, r9
 800750e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007512:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007516:	4653      	mov	r3, sl
 8007518:	f7f8 ffde 	bl	80004d8 <__aeabi_dmul>
 800751c:	4681      	mov	r9, r0
 800751e:	468a      	mov	sl, r1
 8007520:	f038 080f 	bics.w	r8, r8, #15
 8007524:	d077      	beq.n	8007616 <_strtod_l+0x51e>
 8007526:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800752a:	dd4b      	ble.n	80075c4 <_strtod_l+0x4cc>
 800752c:	f04f 0800 	mov.w	r8, #0
 8007530:	f8cd 8010 	str.w	r8, [sp, #16]
 8007534:	f8cd 8020 	str.w	r8, [sp, #32]
 8007538:	f8cd 8018 	str.w	r8, [sp, #24]
 800753c:	2322      	movs	r3, #34	; 0x22
 800753e:	f04f 0900 	mov.w	r9, #0
 8007542:	f8df a15c 	ldr.w	sl, [pc, #348]	; 80076a0 <_strtod_l+0x5a8>
 8007546:	f8cb 3000 	str.w	r3, [fp]
 800754a:	9b08      	ldr	r3, [sp, #32]
 800754c:	2b00      	cmp	r3, #0
 800754e:	f43f ae12 	beq.w	8007176 <_strtod_l+0x7e>
 8007552:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007554:	4658      	mov	r0, fp
 8007556:	f000 fffa 	bl	800854e <_Bfree>
 800755a:	9906      	ldr	r1, [sp, #24]
 800755c:	4658      	mov	r0, fp
 800755e:	f000 fff6 	bl	800854e <_Bfree>
 8007562:	9904      	ldr	r1, [sp, #16]
 8007564:	4658      	mov	r0, fp
 8007566:	f000 fff2 	bl	800854e <_Bfree>
 800756a:	9908      	ldr	r1, [sp, #32]
 800756c:	4658      	mov	r0, fp
 800756e:	f000 ffee 	bl	800854e <_Bfree>
 8007572:	4641      	mov	r1, r8
 8007574:	4658      	mov	r0, fp
 8007576:	f000 ffea 	bl	800854e <_Bfree>
 800757a:	e5fc      	b.n	8007176 <_strtod_l+0x7e>
 800757c:	9a07      	ldr	r2, [sp, #28]
 800757e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8007582:	4293      	cmp	r3, r2
 8007584:	dbb6      	blt.n	80074f4 <_strtod_l+0x3fc>
 8007586:	4d44      	ldr	r5, [pc, #272]	; (8007698 <_strtod_l+0x5a0>)
 8007588:	f1c4 040f 	rsb	r4, r4, #15
 800758c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8007590:	464a      	mov	r2, r9
 8007592:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007596:	4653      	mov	r3, sl
 8007598:	f7f8 ff9e 	bl	80004d8 <__aeabi_dmul>
 800759c:	9b07      	ldr	r3, [sp, #28]
 800759e:	1b1c      	subs	r4, r3, r4
 80075a0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80075a4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80075a8:	e789      	b.n	80074be <_strtod_l+0x3c6>
 80075aa:	f113 0f16 	cmn.w	r3, #22
 80075ae:	dba1      	blt.n	80074f4 <_strtod_l+0x3fc>
 80075b0:	4a39      	ldr	r2, [pc, #228]	; (8007698 <_strtod_l+0x5a0>)
 80075b2:	4648      	mov	r0, r9
 80075b4:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80075b8:	e9d2 2300 	ldrd	r2, r3, [r2]
 80075bc:	4651      	mov	r1, sl
 80075be:	f7f9 f8b5 	bl	800072c <__aeabi_ddiv>
 80075c2:	e77e      	b.n	80074c2 <_strtod_l+0x3ca>
 80075c4:	2300      	movs	r3, #0
 80075c6:	4648      	mov	r0, r9
 80075c8:	4651      	mov	r1, sl
 80075ca:	461d      	mov	r5, r3
 80075cc:	4e33      	ldr	r6, [pc, #204]	; (800769c <_strtod_l+0x5a4>)
 80075ce:	ea4f 1828 	mov.w	r8, r8, asr #4
 80075d2:	f1b8 0f01 	cmp.w	r8, #1
 80075d6:	dc21      	bgt.n	800761c <_strtod_l+0x524>
 80075d8:	b10b      	cbz	r3, 80075de <_strtod_l+0x4e6>
 80075da:	4681      	mov	r9, r0
 80075dc:	468a      	mov	sl, r1
 80075de:	4b2f      	ldr	r3, [pc, #188]	; (800769c <_strtod_l+0x5a4>)
 80075e0:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 80075e4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80075e8:	464a      	mov	r2, r9
 80075ea:	e9d5 0100 	ldrd	r0, r1, [r5]
 80075ee:	4653      	mov	r3, sl
 80075f0:	f7f8 ff72 	bl	80004d8 <__aeabi_dmul>
 80075f4:	4b2a      	ldr	r3, [pc, #168]	; (80076a0 <_strtod_l+0x5a8>)
 80075f6:	460a      	mov	r2, r1
 80075f8:	400b      	ands	r3, r1
 80075fa:	492a      	ldr	r1, [pc, #168]	; (80076a4 <_strtod_l+0x5ac>)
 80075fc:	4681      	mov	r9, r0
 80075fe:	428b      	cmp	r3, r1
 8007600:	d894      	bhi.n	800752c <_strtod_l+0x434>
 8007602:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007606:	428b      	cmp	r3, r1
 8007608:	bf86      	itte	hi
 800760a:	f04f 39ff 	movhi.w	r9, #4294967295	; 0xffffffff
 800760e:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 80076ac <_strtod_l+0x5b4>
 8007612:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 8007616:	2300      	movs	r3, #0
 8007618:	9305      	str	r3, [sp, #20]
 800761a:	e07b      	b.n	8007714 <_strtod_l+0x61c>
 800761c:	f018 0f01 	tst.w	r8, #1
 8007620:	d006      	beq.n	8007630 <_strtod_l+0x538>
 8007622:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8007626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800762a:	f7f8 ff55 	bl	80004d8 <__aeabi_dmul>
 800762e:	2301      	movs	r3, #1
 8007630:	3501      	adds	r5, #1
 8007632:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007636:	e7cc      	b.n	80075d2 <_strtod_l+0x4da>
 8007638:	d0ed      	beq.n	8007616 <_strtod_l+0x51e>
 800763a:	f1c8 0800 	rsb	r8, r8, #0
 800763e:	f018 020f 	ands.w	r2, r8, #15
 8007642:	d00a      	beq.n	800765a <_strtod_l+0x562>
 8007644:	4b14      	ldr	r3, [pc, #80]	; (8007698 <_strtod_l+0x5a0>)
 8007646:	4648      	mov	r0, r9
 8007648:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800764c:	4651      	mov	r1, sl
 800764e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007652:	f7f9 f86b 	bl	800072c <__aeabi_ddiv>
 8007656:	4681      	mov	r9, r0
 8007658:	468a      	mov	sl, r1
 800765a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800765e:	d0da      	beq.n	8007616 <_strtod_l+0x51e>
 8007660:	f1b8 0f1f 	cmp.w	r8, #31
 8007664:	dd24      	ble.n	80076b0 <_strtod_l+0x5b8>
 8007666:	f04f 0800 	mov.w	r8, #0
 800766a:	f8cd 8010 	str.w	r8, [sp, #16]
 800766e:	f8cd 8020 	str.w	r8, [sp, #32]
 8007672:	f8cd 8018 	str.w	r8, [sp, #24]
 8007676:	2322      	movs	r3, #34	; 0x22
 8007678:	f04f 0900 	mov.w	r9, #0
 800767c:	f04f 0a00 	mov.w	sl, #0
 8007680:	f8cb 3000 	str.w	r3, [fp]
 8007684:	e761      	b.n	800754a <_strtod_l+0x452>
 8007686:	bf00      	nop
 8007688:	08009e8d 	.word	0x08009e8d
 800768c:	08009e90 	.word	0x08009e90
 8007690:	08009e96 	.word	0x08009e96
 8007694:	08009eb0 	.word	0x08009eb0
 8007698:	08009f28 	.word	0x08009f28
 800769c:	08009f00 	.word	0x08009f00
 80076a0:	7ff00000 	.word	0x7ff00000
 80076a4:	7ca00000 	.word	0x7ca00000
 80076a8:	fff80000 	.word	0xfff80000
 80076ac:	7fefffff 	.word	0x7fefffff
 80076b0:	f018 0310 	ands.w	r3, r8, #16
 80076b4:	bf18      	it	ne
 80076b6:	236a      	movne	r3, #106	; 0x6a
 80076b8:	4648      	mov	r0, r9
 80076ba:	9305      	str	r3, [sp, #20]
 80076bc:	4651      	mov	r1, sl
 80076be:	2300      	movs	r3, #0
 80076c0:	4da1      	ldr	r5, [pc, #644]	; (8007948 <_strtod_l+0x850>)
 80076c2:	f1b8 0f00 	cmp.w	r8, #0
 80076c6:	f300 8113 	bgt.w	80078f0 <_strtod_l+0x7f8>
 80076ca:	b10b      	cbz	r3, 80076d0 <_strtod_l+0x5d8>
 80076cc:	4681      	mov	r9, r0
 80076ce:	468a      	mov	sl, r1
 80076d0:	9b05      	ldr	r3, [sp, #20]
 80076d2:	b1bb      	cbz	r3, 8007704 <_strtod_l+0x60c>
 80076d4:	f3ca 530a 	ubfx	r3, sl, #20, #11
 80076d8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80076dc:	2b00      	cmp	r3, #0
 80076de:	4651      	mov	r1, sl
 80076e0:	dd10      	ble.n	8007704 <_strtod_l+0x60c>
 80076e2:	2b1f      	cmp	r3, #31
 80076e4:	f340 8110 	ble.w	8007908 <_strtod_l+0x810>
 80076e8:	2b34      	cmp	r3, #52	; 0x34
 80076ea:	bfd8      	it	le
 80076ec:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 80076f0:	f04f 0900 	mov.w	r9, #0
 80076f4:	bfcf      	iteee	gt
 80076f6:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 80076fa:	3b20      	suble	r3, #32
 80076fc:	fa02 f303 	lslle.w	r3, r2, r3
 8007700:	ea03 0a01 	andle.w	sl, r3, r1
 8007704:	2200      	movs	r2, #0
 8007706:	2300      	movs	r3, #0
 8007708:	4648      	mov	r0, r9
 800770a:	4651      	mov	r1, sl
 800770c:	f7f9 f94c 	bl	80009a8 <__aeabi_dcmpeq>
 8007710:	2800      	cmp	r0, #0
 8007712:	d1a8      	bne.n	8007666 <_strtod_l+0x56e>
 8007714:	9b06      	ldr	r3, [sp, #24]
 8007716:	9a04      	ldr	r2, [sp, #16]
 8007718:	9300      	str	r3, [sp, #0]
 800771a:	9908      	ldr	r1, [sp, #32]
 800771c:	4623      	mov	r3, r4
 800771e:	4658      	mov	r0, fp
 8007720:	f000 ff67 	bl	80085f2 <__s2b>
 8007724:	9008      	str	r0, [sp, #32]
 8007726:	2800      	cmp	r0, #0
 8007728:	f43f af00 	beq.w	800752c <_strtod_l+0x434>
 800772c:	9a07      	ldr	r2, [sp, #28]
 800772e:	9b07      	ldr	r3, [sp, #28]
 8007730:	2a00      	cmp	r2, #0
 8007732:	f1c3 0300 	rsb	r3, r3, #0
 8007736:	bfa8      	it	ge
 8007738:	2300      	movge	r3, #0
 800773a:	f04f 0800 	mov.w	r8, #0
 800773e:	930e      	str	r3, [sp, #56]	; 0x38
 8007740:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007744:	9316      	str	r3, [sp, #88]	; 0x58
 8007746:	f8cd 8010 	str.w	r8, [sp, #16]
 800774a:	9b08      	ldr	r3, [sp, #32]
 800774c:	4658      	mov	r0, fp
 800774e:	6859      	ldr	r1, [r3, #4]
 8007750:	f000 fec9 	bl	80084e6 <_Balloc>
 8007754:	9006      	str	r0, [sp, #24]
 8007756:	2800      	cmp	r0, #0
 8007758:	f43f aef0 	beq.w	800753c <_strtod_l+0x444>
 800775c:	9b08      	ldr	r3, [sp, #32]
 800775e:	300c      	adds	r0, #12
 8007760:	691a      	ldr	r2, [r3, #16]
 8007762:	f103 010c 	add.w	r1, r3, #12
 8007766:	3202      	adds	r2, #2
 8007768:	0092      	lsls	r2, r2, #2
 800776a:	f000 feb1 	bl	80084d0 <memcpy>
 800776e:	ab1e      	add	r3, sp, #120	; 0x78
 8007770:	9301      	str	r3, [sp, #4]
 8007772:	ab1d      	add	r3, sp, #116	; 0x74
 8007774:	9300      	str	r3, [sp, #0]
 8007776:	464a      	mov	r2, r9
 8007778:	4653      	mov	r3, sl
 800777a:	4658      	mov	r0, fp
 800777c:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8007780:	f001 f9f2 	bl	8008b68 <__d2b>
 8007784:	901c      	str	r0, [sp, #112]	; 0x70
 8007786:	2800      	cmp	r0, #0
 8007788:	f43f aed8 	beq.w	800753c <_strtod_l+0x444>
 800778c:	2101      	movs	r1, #1
 800778e:	4658      	mov	r0, fp
 8007790:	f000 ffbb 	bl	800870a <__i2b>
 8007794:	9004      	str	r0, [sp, #16]
 8007796:	4603      	mov	r3, r0
 8007798:	2800      	cmp	r0, #0
 800779a:	f43f aecf 	beq.w	800753c <_strtod_l+0x444>
 800779e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80077a0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80077a2:	2d00      	cmp	r5, #0
 80077a4:	bfab      	itete	ge
 80077a6:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80077a8:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80077aa:	18ee      	addge	r6, r5, r3
 80077ac:	1b5c      	sublt	r4, r3, r5
 80077ae:	9b05      	ldr	r3, [sp, #20]
 80077b0:	bfa8      	it	ge
 80077b2:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 80077b4:	eba5 0503 	sub.w	r5, r5, r3
 80077b8:	4415      	add	r5, r2
 80077ba:	4b64      	ldr	r3, [pc, #400]	; (800794c <_strtod_l+0x854>)
 80077bc:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 80077c0:	bfb8      	it	lt
 80077c2:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80077c4:	429d      	cmp	r5, r3
 80077c6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80077ca:	f280 80af 	bge.w	800792c <_strtod_l+0x834>
 80077ce:	1b5b      	subs	r3, r3, r5
 80077d0:	2b1f      	cmp	r3, #31
 80077d2:	eba2 0203 	sub.w	r2, r2, r3
 80077d6:	f04f 0701 	mov.w	r7, #1
 80077da:	f300 809c 	bgt.w	8007916 <_strtod_l+0x81e>
 80077de:	2500      	movs	r5, #0
 80077e0:	fa07 f303 	lsl.w	r3, r7, r3
 80077e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80077e6:	18b7      	adds	r7, r6, r2
 80077e8:	9b05      	ldr	r3, [sp, #20]
 80077ea:	42be      	cmp	r6, r7
 80077ec:	4414      	add	r4, r2
 80077ee:	441c      	add	r4, r3
 80077f0:	4633      	mov	r3, r6
 80077f2:	bfa8      	it	ge
 80077f4:	463b      	movge	r3, r7
 80077f6:	42a3      	cmp	r3, r4
 80077f8:	bfa8      	it	ge
 80077fa:	4623      	movge	r3, r4
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	bfc2      	ittt	gt
 8007800:	1aff      	subgt	r7, r7, r3
 8007802:	1ae4      	subgt	r4, r4, r3
 8007804:	1af6      	subgt	r6, r6, r3
 8007806:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007808:	b1bb      	cbz	r3, 800783a <_strtod_l+0x742>
 800780a:	461a      	mov	r2, r3
 800780c:	9904      	ldr	r1, [sp, #16]
 800780e:	4658      	mov	r0, fp
 8007810:	f001 f81a 	bl	8008848 <__pow5mult>
 8007814:	9004      	str	r0, [sp, #16]
 8007816:	2800      	cmp	r0, #0
 8007818:	f43f ae90 	beq.w	800753c <_strtod_l+0x444>
 800781c:	4601      	mov	r1, r0
 800781e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007820:	4658      	mov	r0, fp
 8007822:	f000 ff7b 	bl	800871c <__multiply>
 8007826:	9009      	str	r0, [sp, #36]	; 0x24
 8007828:	2800      	cmp	r0, #0
 800782a:	f43f ae87 	beq.w	800753c <_strtod_l+0x444>
 800782e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007830:	4658      	mov	r0, fp
 8007832:	f000 fe8c 	bl	800854e <_Bfree>
 8007836:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007838:	931c      	str	r3, [sp, #112]	; 0x70
 800783a:	2f00      	cmp	r7, #0
 800783c:	dc7a      	bgt.n	8007934 <_strtod_l+0x83c>
 800783e:	9b07      	ldr	r3, [sp, #28]
 8007840:	2b00      	cmp	r3, #0
 8007842:	dd08      	ble.n	8007856 <_strtod_l+0x75e>
 8007844:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007846:	9906      	ldr	r1, [sp, #24]
 8007848:	4658      	mov	r0, fp
 800784a:	f000 fffd 	bl	8008848 <__pow5mult>
 800784e:	9006      	str	r0, [sp, #24]
 8007850:	2800      	cmp	r0, #0
 8007852:	f43f ae73 	beq.w	800753c <_strtod_l+0x444>
 8007856:	2c00      	cmp	r4, #0
 8007858:	dd08      	ble.n	800786c <_strtod_l+0x774>
 800785a:	4622      	mov	r2, r4
 800785c:	9906      	ldr	r1, [sp, #24]
 800785e:	4658      	mov	r0, fp
 8007860:	f001 f840 	bl	80088e4 <__lshift>
 8007864:	9006      	str	r0, [sp, #24]
 8007866:	2800      	cmp	r0, #0
 8007868:	f43f ae68 	beq.w	800753c <_strtod_l+0x444>
 800786c:	2e00      	cmp	r6, #0
 800786e:	dd08      	ble.n	8007882 <_strtod_l+0x78a>
 8007870:	4632      	mov	r2, r6
 8007872:	9904      	ldr	r1, [sp, #16]
 8007874:	4658      	mov	r0, fp
 8007876:	f001 f835 	bl	80088e4 <__lshift>
 800787a:	9004      	str	r0, [sp, #16]
 800787c:	2800      	cmp	r0, #0
 800787e:	f43f ae5d 	beq.w	800753c <_strtod_l+0x444>
 8007882:	9a06      	ldr	r2, [sp, #24]
 8007884:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007886:	4658      	mov	r0, fp
 8007888:	f001 f89a 	bl	80089c0 <__mdiff>
 800788c:	4680      	mov	r8, r0
 800788e:	2800      	cmp	r0, #0
 8007890:	f43f ae54 	beq.w	800753c <_strtod_l+0x444>
 8007894:	2400      	movs	r4, #0
 8007896:	68c3      	ldr	r3, [r0, #12]
 8007898:	9904      	ldr	r1, [sp, #16]
 800789a:	60c4      	str	r4, [r0, #12]
 800789c:	930c      	str	r3, [sp, #48]	; 0x30
 800789e:	f001 f875 	bl	800898c <__mcmp>
 80078a2:	42a0      	cmp	r0, r4
 80078a4:	da54      	bge.n	8007950 <_strtod_l+0x858>
 80078a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80078a8:	b9f3      	cbnz	r3, 80078e8 <_strtod_l+0x7f0>
 80078aa:	f1b9 0f00 	cmp.w	r9, #0
 80078ae:	d11b      	bne.n	80078e8 <_strtod_l+0x7f0>
 80078b0:	f3ca 0313 	ubfx	r3, sl, #0, #20
 80078b4:	b9c3      	cbnz	r3, 80078e8 <_strtod_l+0x7f0>
 80078b6:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80078ba:	0d1b      	lsrs	r3, r3, #20
 80078bc:	051b      	lsls	r3, r3, #20
 80078be:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80078c2:	d911      	bls.n	80078e8 <_strtod_l+0x7f0>
 80078c4:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80078c8:	b91b      	cbnz	r3, 80078d2 <_strtod_l+0x7da>
 80078ca:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	dd0a      	ble.n	80078e8 <_strtod_l+0x7f0>
 80078d2:	4641      	mov	r1, r8
 80078d4:	2201      	movs	r2, #1
 80078d6:	4658      	mov	r0, fp
 80078d8:	f001 f804 	bl	80088e4 <__lshift>
 80078dc:	9904      	ldr	r1, [sp, #16]
 80078de:	4680      	mov	r8, r0
 80078e0:	f001 f854 	bl	800898c <__mcmp>
 80078e4:	2800      	cmp	r0, #0
 80078e6:	dc68      	bgt.n	80079ba <_strtod_l+0x8c2>
 80078e8:	9b05      	ldr	r3, [sp, #20]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d172      	bne.n	80079d4 <_strtod_l+0x8dc>
 80078ee:	e630      	b.n	8007552 <_strtod_l+0x45a>
 80078f0:	f018 0f01 	tst.w	r8, #1
 80078f4:	d004      	beq.n	8007900 <_strtod_l+0x808>
 80078f6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80078fa:	f7f8 fded 	bl	80004d8 <__aeabi_dmul>
 80078fe:	2301      	movs	r3, #1
 8007900:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007904:	3508      	adds	r5, #8
 8007906:	e6dc      	b.n	80076c2 <_strtod_l+0x5ca>
 8007908:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800790c:	fa02 f303 	lsl.w	r3, r2, r3
 8007910:	ea03 0909 	and.w	r9, r3, r9
 8007914:	e6f6      	b.n	8007704 <_strtod_l+0x60c>
 8007916:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800791a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800791e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8007922:	35e2      	adds	r5, #226	; 0xe2
 8007924:	fa07 f505 	lsl.w	r5, r7, r5
 8007928:	970f      	str	r7, [sp, #60]	; 0x3c
 800792a:	e75c      	b.n	80077e6 <_strtod_l+0x6ee>
 800792c:	2301      	movs	r3, #1
 800792e:	2500      	movs	r5, #0
 8007930:	930f      	str	r3, [sp, #60]	; 0x3c
 8007932:	e758      	b.n	80077e6 <_strtod_l+0x6ee>
 8007934:	463a      	mov	r2, r7
 8007936:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007938:	4658      	mov	r0, fp
 800793a:	f000 ffd3 	bl	80088e4 <__lshift>
 800793e:	901c      	str	r0, [sp, #112]	; 0x70
 8007940:	2800      	cmp	r0, #0
 8007942:	f47f af7c 	bne.w	800783e <_strtod_l+0x746>
 8007946:	e5f9      	b.n	800753c <_strtod_l+0x444>
 8007948:	08009ec8 	.word	0x08009ec8
 800794c:	fffffc02 	.word	0xfffffc02
 8007950:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8007954:	f040 8089 	bne.w	8007a6a <_strtod_l+0x972>
 8007958:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800795a:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800795e:	b342      	cbz	r2, 80079b2 <_strtod_l+0x8ba>
 8007960:	4aaf      	ldr	r2, [pc, #700]	; (8007c20 <_strtod_l+0xb28>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d156      	bne.n	8007a14 <_strtod_l+0x91c>
 8007966:	9b05      	ldr	r3, [sp, #20]
 8007968:	4648      	mov	r0, r9
 800796a:	b1eb      	cbz	r3, 80079a8 <_strtod_l+0x8b0>
 800796c:	4653      	mov	r3, sl
 800796e:	4aad      	ldr	r2, [pc, #692]	; (8007c24 <_strtod_l+0xb2c>)
 8007970:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007974:	401a      	ands	r2, r3
 8007976:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800797a:	d818      	bhi.n	80079ae <_strtod_l+0x8b6>
 800797c:	0d12      	lsrs	r2, r2, #20
 800797e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007982:	fa01 f303 	lsl.w	r3, r1, r3
 8007986:	4298      	cmp	r0, r3
 8007988:	d144      	bne.n	8007a14 <_strtod_l+0x91c>
 800798a:	4ba7      	ldr	r3, [pc, #668]	; (8007c28 <_strtod_l+0xb30>)
 800798c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800798e:	429a      	cmp	r2, r3
 8007990:	d102      	bne.n	8007998 <_strtod_l+0x8a0>
 8007992:	3001      	adds	r0, #1
 8007994:	f43f add2 	beq.w	800753c <_strtod_l+0x444>
 8007998:	4ba2      	ldr	r3, [pc, #648]	; (8007c24 <_strtod_l+0xb2c>)
 800799a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800799c:	f04f 0900 	mov.w	r9, #0
 80079a0:	401a      	ands	r2, r3
 80079a2:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 80079a6:	e79f      	b.n	80078e8 <_strtod_l+0x7f0>
 80079a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80079ac:	e7eb      	b.n	8007986 <_strtod_l+0x88e>
 80079ae:	460b      	mov	r3, r1
 80079b0:	e7e9      	b.n	8007986 <_strtod_l+0x88e>
 80079b2:	bb7b      	cbnz	r3, 8007a14 <_strtod_l+0x91c>
 80079b4:	f1b9 0f00 	cmp.w	r9, #0
 80079b8:	d12c      	bne.n	8007a14 <_strtod_l+0x91c>
 80079ba:	9905      	ldr	r1, [sp, #20]
 80079bc:	4653      	mov	r3, sl
 80079be:	4a99      	ldr	r2, [pc, #612]	; (8007c24 <_strtod_l+0xb2c>)
 80079c0:	b1f1      	cbz	r1, 8007a00 <_strtod_l+0x908>
 80079c2:	ea02 010a 	and.w	r1, r2, sl
 80079c6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80079ca:	dc19      	bgt.n	8007a00 <_strtod_l+0x908>
 80079cc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80079d0:	f77f ae51 	ble.w	8007676 <_strtod_l+0x57e>
 80079d4:	2300      	movs	r3, #0
 80079d6:	4a95      	ldr	r2, [pc, #596]	; (8007c2c <_strtod_l+0xb34>)
 80079d8:	4648      	mov	r0, r9
 80079da:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80079de:	4651      	mov	r1, sl
 80079e0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80079e4:	f7f8 fd78 	bl	80004d8 <__aeabi_dmul>
 80079e8:	4681      	mov	r9, r0
 80079ea:	468a      	mov	sl, r1
 80079ec:	2900      	cmp	r1, #0
 80079ee:	f47f adb0 	bne.w	8007552 <_strtod_l+0x45a>
 80079f2:	2800      	cmp	r0, #0
 80079f4:	f47f adad 	bne.w	8007552 <_strtod_l+0x45a>
 80079f8:	2322      	movs	r3, #34	; 0x22
 80079fa:	f8cb 3000 	str.w	r3, [fp]
 80079fe:	e5a8      	b.n	8007552 <_strtod_l+0x45a>
 8007a00:	4013      	ands	r3, r2
 8007a02:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007a06:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 8007a0a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8007a0e:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 8007a12:	e769      	b.n	80078e8 <_strtod_l+0x7f0>
 8007a14:	b19d      	cbz	r5, 8007a3e <_strtod_l+0x946>
 8007a16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a18:	421d      	tst	r5, r3
 8007a1a:	f43f af65 	beq.w	80078e8 <_strtod_l+0x7f0>
 8007a1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a20:	9a05      	ldr	r2, [sp, #20]
 8007a22:	4648      	mov	r0, r9
 8007a24:	4651      	mov	r1, sl
 8007a26:	b173      	cbz	r3, 8007a46 <_strtod_l+0x94e>
 8007a28:	f7ff fb42 	bl	80070b0 <sulp>
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	460b      	mov	r3, r1
 8007a30:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007a34:	f7f8 fb9a 	bl	800016c <__adddf3>
 8007a38:	4681      	mov	r9, r0
 8007a3a:	468a      	mov	sl, r1
 8007a3c:	e754      	b.n	80078e8 <_strtod_l+0x7f0>
 8007a3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a40:	ea13 0f09 	tst.w	r3, r9
 8007a44:	e7e9      	b.n	8007a1a <_strtod_l+0x922>
 8007a46:	f7ff fb33 	bl	80070b0 <sulp>
 8007a4a:	4602      	mov	r2, r0
 8007a4c:	460b      	mov	r3, r1
 8007a4e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007a52:	f7f8 fb89 	bl	8000168 <__aeabi_dsub>
 8007a56:	2200      	movs	r2, #0
 8007a58:	2300      	movs	r3, #0
 8007a5a:	4681      	mov	r9, r0
 8007a5c:	468a      	mov	sl, r1
 8007a5e:	f7f8 ffa3 	bl	80009a8 <__aeabi_dcmpeq>
 8007a62:	2800      	cmp	r0, #0
 8007a64:	f47f ae07 	bne.w	8007676 <_strtod_l+0x57e>
 8007a68:	e73e      	b.n	80078e8 <_strtod_l+0x7f0>
 8007a6a:	9904      	ldr	r1, [sp, #16]
 8007a6c:	4640      	mov	r0, r8
 8007a6e:	f001 f8ca 	bl	8008c06 <__ratio>
 8007a72:	2200      	movs	r2, #0
 8007a74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007a78:	4606      	mov	r6, r0
 8007a7a:	460f      	mov	r7, r1
 8007a7c:	f7f8 ffa8 	bl	80009d0 <__aeabi_dcmple>
 8007a80:	2800      	cmp	r0, #0
 8007a82:	d075      	beq.n	8007b70 <_strtod_l+0xa78>
 8007a84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d047      	beq.n	8007b1a <_strtod_l+0xa22>
 8007a8a:	2600      	movs	r6, #0
 8007a8c:	4f68      	ldr	r7, [pc, #416]	; (8007c30 <_strtod_l+0xb38>)
 8007a8e:	4d68      	ldr	r5, [pc, #416]	; (8007c30 <_strtod_l+0xb38>)
 8007a90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a92:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a96:	0d1b      	lsrs	r3, r3, #20
 8007a98:	051b      	lsls	r3, r3, #20
 8007a9a:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a9c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007a9e:	4b65      	ldr	r3, [pc, #404]	; (8007c34 <_strtod_l+0xb3c>)
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	f040 80cf 	bne.w	8007c44 <_strtod_l+0xb4c>
 8007aa6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007aaa:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007aae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ab0:	4648      	mov	r0, r9
 8007ab2:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 8007ab6:	4651      	mov	r1, sl
 8007ab8:	f000 ffe0 	bl	8008a7c <__ulp>
 8007abc:	4602      	mov	r2, r0
 8007abe:	460b      	mov	r3, r1
 8007ac0:	4630      	mov	r0, r6
 8007ac2:	4639      	mov	r1, r7
 8007ac4:	f7f8 fd08 	bl	80004d8 <__aeabi_dmul>
 8007ac8:	464a      	mov	r2, r9
 8007aca:	4653      	mov	r3, sl
 8007acc:	f7f8 fb4e 	bl	800016c <__adddf3>
 8007ad0:	460b      	mov	r3, r1
 8007ad2:	4954      	ldr	r1, [pc, #336]	; (8007c24 <_strtod_l+0xb2c>)
 8007ad4:	4a58      	ldr	r2, [pc, #352]	; (8007c38 <_strtod_l+0xb40>)
 8007ad6:	4019      	ands	r1, r3
 8007ad8:	4291      	cmp	r1, r2
 8007ada:	4681      	mov	r9, r0
 8007adc:	d95e      	bls.n	8007b9c <_strtod_l+0xaa4>
 8007ade:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ae0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d103      	bne.n	8007af0 <_strtod_l+0x9f8>
 8007ae8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007aea:	3301      	adds	r3, #1
 8007aec:	f43f ad26 	beq.w	800753c <_strtod_l+0x444>
 8007af0:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8007af4:	f8df a130 	ldr.w	sl, [pc, #304]	; 8007c28 <_strtod_l+0xb30>
 8007af8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007afa:	4658      	mov	r0, fp
 8007afc:	f000 fd27 	bl	800854e <_Bfree>
 8007b00:	9906      	ldr	r1, [sp, #24]
 8007b02:	4658      	mov	r0, fp
 8007b04:	f000 fd23 	bl	800854e <_Bfree>
 8007b08:	9904      	ldr	r1, [sp, #16]
 8007b0a:	4658      	mov	r0, fp
 8007b0c:	f000 fd1f 	bl	800854e <_Bfree>
 8007b10:	4641      	mov	r1, r8
 8007b12:	4658      	mov	r0, fp
 8007b14:	f000 fd1b 	bl	800854e <_Bfree>
 8007b18:	e617      	b.n	800774a <_strtod_l+0x652>
 8007b1a:	f1b9 0f00 	cmp.w	r9, #0
 8007b1e:	d119      	bne.n	8007b54 <_strtod_l+0xa5c>
 8007b20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b22:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b26:	b9e3      	cbnz	r3, 8007b62 <_strtod_l+0xa6a>
 8007b28:	2200      	movs	r2, #0
 8007b2a:	4b41      	ldr	r3, [pc, #260]	; (8007c30 <_strtod_l+0xb38>)
 8007b2c:	4630      	mov	r0, r6
 8007b2e:	4639      	mov	r1, r7
 8007b30:	f7f8 ff44 	bl	80009bc <__aeabi_dcmplt>
 8007b34:	b9c8      	cbnz	r0, 8007b6a <_strtod_l+0xa72>
 8007b36:	2200      	movs	r2, #0
 8007b38:	4b40      	ldr	r3, [pc, #256]	; (8007c3c <_strtod_l+0xb44>)
 8007b3a:	4630      	mov	r0, r6
 8007b3c:	4639      	mov	r1, r7
 8007b3e:	f7f8 fccb 	bl	80004d8 <__aeabi_dmul>
 8007b42:	4604      	mov	r4, r0
 8007b44:	460d      	mov	r5, r1
 8007b46:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007b4a:	9418      	str	r4, [sp, #96]	; 0x60
 8007b4c:	9319      	str	r3, [sp, #100]	; 0x64
 8007b4e:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8007b52:	e79d      	b.n	8007a90 <_strtod_l+0x998>
 8007b54:	f1b9 0f01 	cmp.w	r9, #1
 8007b58:	d103      	bne.n	8007b62 <_strtod_l+0xa6a>
 8007b5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	f43f ad8a 	beq.w	8007676 <_strtod_l+0x57e>
 8007b62:	2600      	movs	r6, #0
 8007b64:	4f36      	ldr	r7, [pc, #216]	; (8007c40 <_strtod_l+0xb48>)
 8007b66:	2400      	movs	r4, #0
 8007b68:	e791      	b.n	8007a8e <_strtod_l+0x996>
 8007b6a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8007b6c:	4d33      	ldr	r5, [pc, #204]	; (8007c3c <_strtod_l+0xb44>)
 8007b6e:	e7ea      	b.n	8007b46 <_strtod_l+0xa4e>
 8007b70:	4b32      	ldr	r3, [pc, #200]	; (8007c3c <_strtod_l+0xb44>)
 8007b72:	2200      	movs	r2, #0
 8007b74:	4630      	mov	r0, r6
 8007b76:	4639      	mov	r1, r7
 8007b78:	f7f8 fcae 	bl	80004d8 <__aeabi_dmul>
 8007b7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b7e:	4604      	mov	r4, r0
 8007b80:	460d      	mov	r5, r1
 8007b82:	b933      	cbnz	r3, 8007b92 <_strtod_l+0xa9a>
 8007b84:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007b88:	9010      	str	r0, [sp, #64]	; 0x40
 8007b8a:	9311      	str	r3, [sp, #68]	; 0x44
 8007b8c:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007b90:	e77e      	b.n	8007a90 <_strtod_l+0x998>
 8007b92:	4602      	mov	r2, r0
 8007b94:	460b      	mov	r3, r1
 8007b96:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007b9a:	e7f7      	b.n	8007b8c <_strtod_l+0xa94>
 8007b9c:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8007ba0:	9b05      	ldr	r3, [sp, #20]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d1a8      	bne.n	8007af8 <_strtod_l+0xa00>
 8007ba6:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8007baa:	0d1b      	lsrs	r3, r3, #20
 8007bac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007bae:	051b      	lsls	r3, r3, #20
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	4656      	mov	r6, sl
 8007bb4:	d1a0      	bne.n	8007af8 <_strtod_l+0xa00>
 8007bb6:	4629      	mov	r1, r5
 8007bb8:	4620      	mov	r0, r4
 8007bba:	f7f8 ff3d 	bl	8000a38 <__aeabi_d2iz>
 8007bbe:	f7f8 fc21 	bl	8000404 <__aeabi_i2d>
 8007bc2:	460b      	mov	r3, r1
 8007bc4:	4602      	mov	r2, r0
 8007bc6:	4629      	mov	r1, r5
 8007bc8:	4620      	mov	r0, r4
 8007bca:	f7f8 facd 	bl	8000168 <__aeabi_dsub>
 8007bce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007bd0:	4604      	mov	r4, r0
 8007bd2:	460d      	mov	r5, r1
 8007bd4:	b933      	cbnz	r3, 8007be4 <_strtod_l+0xaec>
 8007bd6:	f1b9 0f00 	cmp.w	r9, #0
 8007bda:	d103      	bne.n	8007be4 <_strtod_l+0xaec>
 8007bdc:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8007be0:	2e00      	cmp	r6, #0
 8007be2:	d06a      	beq.n	8007cba <_strtod_l+0xbc2>
 8007be4:	a30a      	add	r3, pc, #40	; (adr r3, 8007c10 <_strtod_l+0xb18>)
 8007be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bea:	4620      	mov	r0, r4
 8007bec:	4629      	mov	r1, r5
 8007bee:	f7f8 fee5 	bl	80009bc <__aeabi_dcmplt>
 8007bf2:	2800      	cmp	r0, #0
 8007bf4:	f47f acad 	bne.w	8007552 <_strtod_l+0x45a>
 8007bf8:	a307      	add	r3, pc, #28	; (adr r3, 8007c18 <_strtod_l+0xb20>)
 8007bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bfe:	4620      	mov	r0, r4
 8007c00:	4629      	mov	r1, r5
 8007c02:	f7f8 fef9 	bl	80009f8 <__aeabi_dcmpgt>
 8007c06:	2800      	cmp	r0, #0
 8007c08:	f43f af76 	beq.w	8007af8 <_strtod_l+0xa00>
 8007c0c:	e4a1      	b.n	8007552 <_strtod_l+0x45a>
 8007c0e:	bf00      	nop
 8007c10:	94a03595 	.word	0x94a03595
 8007c14:	3fdfffff 	.word	0x3fdfffff
 8007c18:	35afe535 	.word	0x35afe535
 8007c1c:	3fe00000 	.word	0x3fe00000
 8007c20:	000fffff 	.word	0x000fffff
 8007c24:	7ff00000 	.word	0x7ff00000
 8007c28:	7fefffff 	.word	0x7fefffff
 8007c2c:	39500000 	.word	0x39500000
 8007c30:	3ff00000 	.word	0x3ff00000
 8007c34:	7fe00000 	.word	0x7fe00000
 8007c38:	7c9fffff 	.word	0x7c9fffff
 8007c3c:	3fe00000 	.word	0x3fe00000
 8007c40:	bff00000 	.word	0xbff00000
 8007c44:	9b05      	ldr	r3, [sp, #20]
 8007c46:	b313      	cbz	r3, 8007c8e <_strtod_l+0xb96>
 8007c48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c4a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007c4e:	d81e      	bhi.n	8007c8e <_strtod_l+0xb96>
 8007c50:	a325      	add	r3, pc, #148	; (adr r3, 8007ce8 <_strtod_l+0xbf0>)
 8007c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c56:	4620      	mov	r0, r4
 8007c58:	4629      	mov	r1, r5
 8007c5a:	f7f8 feb9 	bl	80009d0 <__aeabi_dcmple>
 8007c5e:	b190      	cbz	r0, 8007c86 <_strtod_l+0xb8e>
 8007c60:	4629      	mov	r1, r5
 8007c62:	4620      	mov	r0, r4
 8007c64:	f7f8 ff10 	bl	8000a88 <__aeabi_d2uiz>
 8007c68:	2800      	cmp	r0, #0
 8007c6a:	bf08      	it	eq
 8007c6c:	2001      	moveq	r0, #1
 8007c6e:	f7f8 fbb9 	bl	80003e4 <__aeabi_ui2d>
 8007c72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c74:	4604      	mov	r4, r0
 8007c76:	460d      	mov	r5, r1
 8007c78:	b9d3      	cbnz	r3, 8007cb0 <_strtod_l+0xbb8>
 8007c7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c7e:	9012      	str	r0, [sp, #72]	; 0x48
 8007c80:	9313      	str	r3, [sp, #76]	; 0x4c
 8007c82:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8007c86:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007c88:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8007c8c:	1a9f      	subs	r7, r3, r2
 8007c8e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007c92:	f000 fef3 	bl	8008a7c <__ulp>
 8007c96:	4602      	mov	r2, r0
 8007c98:	460b      	mov	r3, r1
 8007c9a:	4630      	mov	r0, r6
 8007c9c:	4639      	mov	r1, r7
 8007c9e:	f7f8 fc1b 	bl	80004d8 <__aeabi_dmul>
 8007ca2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007ca6:	f7f8 fa61 	bl	800016c <__adddf3>
 8007caa:	4681      	mov	r9, r0
 8007cac:	468a      	mov	sl, r1
 8007cae:	e777      	b.n	8007ba0 <_strtod_l+0xaa8>
 8007cb0:	4602      	mov	r2, r0
 8007cb2:	460b      	mov	r3, r1
 8007cb4:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8007cb8:	e7e3      	b.n	8007c82 <_strtod_l+0xb8a>
 8007cba:	a30d      	add	r3, pc, #52	; (adr r3, 8007cf0 <_strtod_l+0xbf8>)
 8007cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc0:	f7f8 fe7c 	bl	80009bc <__aeabi_dcmplt>
 8007cc4:	e79f      	b.n	8007c06 <_strtod_l+0xb0e>
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	930d      	str	r3, [sp, #52]	; 0x34
 8007cca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007ccc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007cce:	6013      	str	r3, [r2, #0]
 8007cd0:	f7ff ba55 	b.w	800717e <_strtod_l+0x86>
 8007cd4:	2b65      	cmp	r3, #101	; 0x65
 8007cd6:	f04f 0200 	mov.w	r2, #0
 8007cda:	f43f ab42 	beq.w	8007362 <_strtod_l+0x26a>
 8007cde:	2101      	movs	r1, #1
 8007ce0:	4614      	mov	r4, r2
 8007ce2:	9105      	str	r1, [sp, #20]
 8007ce4:	f7ff babf 	b.w	8007266 <_strtod_l+0x16e>
 8007ce8:	ffc00000 	.word	0xffc00000
 8007cec:	41dfffff 	.word	0x41dfffff
 8007cf0:	94a03595 	.word	0x94a03595
 8007cf4:	3fcfffff 	.word	0x3fcfffff

08007cf8 <_strtod_r>:
 8007cf8:	4b05      	ldr	r3, [pc, #20]	; (8007d10 <_strtod_r+0x18>)
 8007cfa:	b410      	push	{r4}
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4c05      	ldr	r4, [pc, #20]	; (8007d14 <_strtod_r+0x1c>)
 8007d00:	6a1b      	ldr	r3, [r3, #32]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	bf08      	it	eq
 8007d06:	4623      	moveq	r3, r4
 8007d08:	bc10      	pop	{r4}
 8007d0a:	f7ff b9f5 	b.w	80070f8 <_strtod_l>
 8007d0e:	bf00      	nop
 8007d10:	20000010 	.word	0x20000010
 8007d14:	20000074 	.word	0x20000074

08007d18 <_strtol_l.isra.0>:
 8007d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d1c:	4680      	mov	r8, r0
 8007d1e:	4689      	mov	r9, r1
 8007d20:	4692      	mov	sl, r2
 8007d22:	461e      	mov	r6, r3
 8007d24:	460f      	mov	r7, r1
 8007d26:	463d      	mov	r5, r7
 8007d28:	9808      	ldr	r0, [sp, #32]
 8007d2a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d2e:	f000 fba9 	bl	8008484 <__locale_ctype_ptr_l>
 8007d32:	4420      	add	r0, r4
 8007d34:	7843      	ldrb	r3, [r0, #1]
 8007d36:	f013 0308 	ands.w	r3, r3, #8
 8007d3a:	d132      	bne.n	8007da2 <_strtol_l.isra.0+0x8a>
 8007d3c:	2c2d      	cmp	r4, #45	; 0x2d
 8007d3e:	d132      	bne.n	8007da6 <_strtol_l.isra.0+0x8e>
 8007d40:	2201      	movs	r2, #1
 8007d42:	787c      	ldrb	r4, [r7, #1]
 8007d44:	1cbd      	adds	r5, r7, #2
 8007d46:	2e00      	cmp	r6, #0
 8007d48:	d05d      	beq.n	8007e06 <_strtol_l.isra.0+0xee>
 8007d4a:	2e10      	cmp	r6, #16
 8007d4c:	d109      	bne.n	8007d62 <_strtol_l.isra.0+0x4a>
 8007d4e:	2c30      	cmp	r4, #48	; 0x30
 8007d50:	d107      	bne.n	8007d62 <_strtol_l.isra.0+0x4a>
 8007d52:	782b      	ldrb	r3, [r5, #0]
 8007d54:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007d58:	2b58      	cmp	r3, #88	; 0x58
 8007d5a:	d14f      	bne.n	8007dfc <_strtol_l.isra.0+0xe4>
 8007d5c:	2610      	movs	r6, #16
 8007d5e:	786c      	ldrb	r4, [r5, #1]
 8007d60:	3502      	adds	r5, #2
 8007d62:	2a00      	cmp	r2, #0
 8007d64:	bf14      	ite	ne
 8007d66:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8007d6a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8007d6e:	2700      	movs	r7, #0
 8007d70:	fbb1 fcf6 	udiv	ip, r1, r6
 8007d74:	4638      	mov	r0, r7
 8007d76:	fb06 1e1c 	mls	lr, r6, ip, r1
 8007d7a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8007d7e:	2b09      	cmp	r3, #9
 8007d80:	d817      	bhi.n	8007db2 <_strtol_l.isra.0+0x9a>
 8007d82:	461c      	mov	r4, r3
 8007d84:	42a6      	cmp	r6, r4
 8007d86:	dd23      	ble.n	8007dd0 <_strtol_l.isra.0+0xb8>
 8007d88:	1c7b      	adds	r3, r7, #1
 8007d8a:	d007      	beq.n	8007d9c <_strtol_l.isra.0+0x84>
 8007d8c:	4584      	cmp	ip, r0
 8007d8e:	d31c      	bcc.n	8007dca <_strtol_l.isra.0+0xb2>
 8007d90:	d101      	bne.n	8007d96 <_strtol_l.isra.0+0x7e>
 8007d92:	45a6      	cmp	lr, r4
 8007d94:	db19      	blt.n	8007dca <_strtol_l.isra.0+0xb2>
 8007d96:	2701      	movs	r7, #1
 8007d98:	fb00 4006 	mla	r0, r0, r6, r4
 8007d9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007da0:	e7eb      	b.n	8007d7a <_strtol_l.isra.0+0x62>
 8007da2:	462f      	mov	r7, r5
 8007da4:	e7bf      	b.n	8007d26 <_strtol_l.isra.0+0xe>
 8007da6:	2c2b      	cmp	r4, #43	; 0x2b
 8007da8:	bf04      	itt	eq
 8007daa:	1cbd      	addeq	r5, r7, #2
 8007dac:	787c      	ldrbeq	r4, [r7, #1]
 8007dae:	461a      	mov	r2, r3
 8007db0:	e7c9      	b.n	8007d46 <_strtol_l.isra.0+0x2e>
 8007db2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8007db6:	2b19      	cmp	r3, #25
 8007db8:	d801      	bhi.n	8007dbe <_strtol_l.isra.0+0xa6>
 8007dba:	3c37      	subs	r4, #55	; 0x37
 8007dbc:	e7e2      	b.n	8007d84 <_strtol_l.isra.0+0x6c>
 8007dbe:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8007dc2:	2b19      	cmp	r3, #25
 8007dc4:	d804      	bhi.n	8007dd0 <_strtol_l.isra.0+0xb8>
 8007dc6:	3c57      	subs	r4, #87	; 0x57
 8007dc8:	e7dc      	b.n	8007d84 <_strtol_l.isra.0+0x6c>
 8007dca:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007dce:	e7e5      	b.n	8007d9c <_strtol_l.isra.0+0x84>
 8007dd0:	1c7b      	adds	r3, r7, #1
 8007dd2:	d108      	bne.n	8007de6 <_strtol_l.isra.0+0xce>
 8007dd4:	2322      	movs	r3, #34	; 0x22
 8007dd6:	4608      	mov	r0, r1
 8007dd8:	f8c8 3000 	str.w	r3, [r8]
 8007ddc:	f1ba 0f00 	cmp.w	sl, #0
 8007de0:	d107      	bne.n	8007df2 <_strtol_l.isra.0+0xda>
 8007de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007de6:	b102      	cbz	r2, 8007dea <_strtol_l.isra.0+0xd2>
 8007de8:	4240      	negs	r0, r0
 8007dea:	f1ba 0f00 	cmp.w	sl, #0
 8007dee:	d0f8      	beq.n	8007de2 <_strtol_l.isra.0+0xca>
 8007df0:	b10f      	cbz	r7, 8007df6 <_strtol_l.isra.0+0xde>
 8007df2:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8007df6:	f8ca 9000 	str.w	r9, [sl]
 8007dfa:	e7f2      	b.n	8007de2 <_strtol_l.isra.0+0xca>
 8007dfc:	2430      	movs	r4, #48	; 0x30
 8007dfe:	2e00      	cmp	r6, #0
 8007e00:	d1af      	bne.n	8007d62 <_strtol_l.isra.0+0x4a>
 8007e02:	2608      	movs	r6, #8
 8007e04:	e7ad      	b.n	8007d62 <_strtol_l.isra.0+0x4a>
 8007e06:	2c30      	cmp	r4, #48	; 0x30
 8007e08:	d0a3      	beq.n	8007d52 <_strtol_l.isra.0+0x3a>
 8007e0a:	260a      	movs	r6, #10
 8007e0c:	e7a9      	b.n	8007d62 <_strtol_l.isra.0+0x4a>
	...

08007e10 <_strtol_r>:
 8007e10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e12:	4c06      	ldr	r4, [pc, #24]	; (8007e2c <_strtol_r+0x1c>)
 8007e14:	4d06      	ldr	r5, [pc, #24]	; (8007e30 <_strtol_r+0x20>)
 8007e16:	6824      	ldr	r4, [r4, #0]
 8007e18:	6a24      	ldr	r4, [r4, #32]
 8007e1a:	2c00      	cmp	r4, #0
 8007e1c:	bf08      	it	eq
 8007e1e:	462c      	moveq	r4, r5
 8007e20:	9400      	str	r4, [sp, #0]
 8007e22:	f7ff ff79 	bl	8007d18 <_strtol_l.isra.0>
 8007e26:	b003      	add	sp, #12
 8007e28:	bd30      	pop	{r4, r5, pc}
 8007e2a:	bf00      	nop
 8007e2c:	20000010 	.word	0x20000010
 8007e30:	20000074 	.word	0x20000074

08007e34 <rshift>:
 8007e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e36:	6906      	ldr	r6, [r0, #16]
 8007e38:	114b      	asrs	r3, r1, #5
 8007e3a:	429e      	cmp	r6, r3
 8007e3c:	f100 0414 	add.w	r4, r0, #20
 8007e40:	dd31      	ble.n	8007ea6 <rshift+0x72>
 8007e42:	f011 011f 	ands.w	r1, r1, #31
 8007e46:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8007e4a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8007e4e:	d108      	bne.n	8007e62 <rshift+0x2e>
 8007e50:	4621      	mov	r1, r4
 8007e52:	42b2      	cmp	r2, r6
 8007e54:	460b      	mov	r3, r1
 8007e56:	d211      	bcs.n	8007e7c <rshift+0x48>
 8007e58:	f852 3b04 	ldr.w	r3, [r2], #4
 8007e5c:	f841 3b04 	str.w	r3, [r1], #4
 8007e60:	e7f7      	b.n	8007e52 <rshift+0x1e>
 8007e62:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8007e66:	4623      	mov	r3, r4
 8007e68:	f1c1 0c20 	rsb	ip, r1, #32
 8007e6c:	40cd      	lsrs	r5, r1
 8007e6e:	3204      	adds	r2, #4
 8007e70:	42b2      	cmp	r2, r6
 8007e72:	4617      	mov	r7, r2
 8007e74:	d30d      	bcc.n	8007e92 <rshift+0x5e>
 8007e76:	601d      	str	r5, [r3, #0]
 8007e78:	b105      	cbz	r5, 8007e7c <rshift+0x48>
 8007e7a:	3304      	adds	r3, #4
 8007e7c:	42a3      	cmp	r3, r4
 8007e7e:	eba3 0204 	sub.w	r2, r3, r4
 8007e82:	bf08      	it	eq
 8007e84:	2300      	moveq	r3, #0
 8007e86:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007e8a:	6102      	str	r2, [r0, #16]
 8007e8c:	bf08      	it	eq
 8007e8e:	6143      	streq	r3, [r0, #20]
 8007e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e92:	683f      	ldr	r7, [r7, #0]
 8007e94:	fa07 f70c 	lsl.w	r7, r7, ip
 8007e98:	433d      	orrs	r5, r7
 8007e9a:	f843 5b04 	str.w	r5, [r3], #4
 8007e9e:	f852 5b04 	ldr.w	r5, [r2], #4
 8007ea2:	40cd      	lsrs	r5, r1
 8007ea4:	e7e4      	b.n	8007e70 <rshift+0x3c>
 8007ea6:	4623      	mov	r3, r4
 8007ea8:	e7e8      	b.n	8007e7c <rshift+0x48>

08007eaa <__hexdig_fun>:
 8007eaa:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007eae:	2b09      	cmp	r3, #9
 8007eb0:	d802      	bhi.n	8007eb8 <__hexdig_fun+0xe>
 8007eb2:	3820      	subs	r0, #32
 8007eb4:	b2c0      	uxtb	r0, r0
 8007eb6:	4770      	bx	lr
 8007eb8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007ebc:	2b05      	cmp	r3, #5
 8007ebe:	d801      	bhi.n	8007ec4 <__hexdig_fun+0x1a>
 8007ec0:	3847      	subs	r0, #71	; 0x47
 8007ec2:	e7f7      	b.n	8007eb4 <__hexdig_fun+0xa>
 8007ec4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007ec8:	2b05      	cmp	r3, #5
 8007eca:	d801      	bhi.n	8007ed0 <__hexdig_fun+0x26>
 8007ecc:	3827      	subs	r0, #39	; 0x27
 8007ece:	e7f1      	b.n	8007eb4 <__hexdig_fun+0xa>
 8007ed0:	2000      	movs	r0, #0
 8007ed2:	4770      	bx	lr

08007ed4 <__gethex>:
 8007ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ed8:	b08b      	sub	sp, #44	; 0x2c
 8007eda:	9002      	str	r0, [sp, #8]
 8007edc:	9816      	ldr	r0, [sp, #88]	; 0x58
 8007ede:	468a      	mov	sl, r1
 8007ee0:	4690      	mov	r8, r2
 8007ee2:	9306      	str	r3, [sp, #24]
 8007ee4:	f000 fae0 	bl	80084a8 <__localeconv_l>
 8007ee8:	6803      	ldr	r3, [r0, #0]
 8007eea:	f04f 0b00 	mov.w	fp, #0
 8007eee:	4618      	mov	r0, r3
 8007ef0:	9303      	str	r3, [sp, #12]
 8007ef2:	f7f8 f92d 	bl	8000150 <strlen>
 8007ef6:	9b03      	ldr	r3, [sp, #12]
 8007ef8:	9001      	str	r0, [sp, #4]
 8007efa:	4403      	add	r3, r0
 8007efc:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007f00:	9307      	str	r3, [sp, #28]
 8007f02:	f8da 3000 	ldr.w	r3, [sl]
 8007f06:	3302      	adds	r3, #2
 8007f08:	461f      	mov	r7, r3
 8007f0a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007f0e:	2830      	cmp	r0, #48	; 0x30
 8007f10:	d06c      	beq.n	8007fec <__gethex+0x118>
 8007f12:	f7ff ffca 	bl	8007eaa <__hexdig_fun>
 8007f16:	4604      	mov	r4, r0
 8007f18:	2800      	cmp	r0, #0
 8007f1a:	d16a      	bne.n	8007ff2 <__gethex+0x11e>
 8007f1c:	9a01      	ldr	r2, [sp, #4]
 8007f1e:	9903      	ldr	r1, [sp, #12]
 8007f20:	4638      	mov	r0, r7
 8007f22:	f7ff f8b3 	bl	800708c <strncmp>
 8007f26:	2800      	cmp	r0, #0
 8007f28:	d166      	bne.n	8007ff8 <__gethex+0x124>
 8007f2a:	9b01      	ldr	r3, [sp, #4]
 8007f2c:	5cf8      	ldrb	r0, [r7, r3]
 8007f2e:	18fe      	adds	r6, r7, r3
 8007f30:	f7ff ffbb 	bl	8007eaa <__hexdig_fun>
 8007f34:	2800      	cmp	r0, #0
 8007f36:	d062      	beq.n	8007ffe <__gethex+0x12a>
 8007f38:	4633      	mov	r3, r6
 8007f3a:	7818      	ldrb	r0, [r3, #0]
 8007f3c:	461f      	mov	r7, r3
 8007f3e:	2830      	cmp	r0, #48	; 0x30
 8007f40:	f103 0301 	add.w	r3, r3, #1
 8007f44:	d0f9      	beq.n	8007f3a <__gethex+0x66>
 8007f46:	f7ff ffb0 	bl	8007eaa <__hexdig_fun>
 8007f4a:	fab0 f580 	clz	r5, r0
 8007f4e:	4634      	mov	r4, r6
 8007f50:	f04f 0b01 	mov.w	fp, #1
 8007f54:	096d      	lsrs	r5, r5, #5
 8007f56:	463a      	mov	r2, r7
 8007f58:	4616      	mov	r6, r2
 8007f5a:	7830      	ldrb	r0, [r6, #0]
 8007f5c:	3201      	adds	r2, #1
 8007f5e:	f7ff ffa4 	bl	8007eaa <__hexdig_fun>
 8007f62:	2800      	cmp	r0, #0
 8007f64:	d1f8      	bne.n	8007f58 <__gethex+0x84>
 8007f66:	9a01      	ldr	r2, [sp, #4]
 8007f68:	9903      	ldr	r1, [sp, #12]
 8007f6a:	4630      	mov	r0, r6
 8007f6c:	f7ff f88e 	bl	800708c <strncmp>
 8007f70:	b950      	cbnz	r0, 8007f88 <__gethex+0xb4>
 8007f72:	b954      	cbnz	r4, 8007f8a <__gethex+0xb6>
 8007f74:	9b01      	ldr	r3, [sp, #4]
 8007f76:	18f4      	adds	r4, r6, r3
 8007f78:	4622      	mov	r2, r4
 8007f7a:	4616      	mov	r6, r2
 8007f7c:	7830      	ldrb	r0, [r6, #0]
 8007f7e:	3201      	adds	r2, #1
 8007f80:	f7ff ff93 	bl	8007eaa <__hexdig_fun>
 8007f84:	2800      	cmp	r0, #0
 8007f86:	d1f8      	bne.n	8007f7a <__gethex+0xa6>
 8007f88:	b10c      	cbz	r4, 8007f8e <__gethex+0xba>
 8007f8a:	1ba4      	subs	r4, r4, r6
 8007f8c:	00a4      	lsls	r4, r4, #2
 8007f8e:	7833      	ldrb	r3, [r6, #0]
 8007f90:	2b50      	cmp	r3, #80	; 0x50
 8007f92:	d001      	beq.n	8007f98 <__gethex+0xc4>
 8007f94:	2b70      	cmp	r3, #112	; 0x70
 8007f96:	d140      	bne.n	800801a <__gethex+0x146>
 8007f98:	7873      	ldrb	r3, [r6, #1]
 8007f9a:	2b2b      	cmp	r3, #43	; 0x2b
 8007f9c:	d031      	beq.n	8008002 <__gethex+0x12e>
 8007f9e:	2b2d      	cmp	r3, #45	; 0x2d
 8007fa0:	d033      	beq.n	800800a <__gethex+0x136>
 8007fa2:	f04f 0900 	mov.w	r9, #0
 8007fa6:	1c71      	adds	r1, r6, #1
 8007fa8:	7808      	ldrb	r0, [r1, #0]
 8007faa:	f7ff ff7e 	bl	8007eaa <__hexdig_fun>
 8007fae:	1e43      	subs	r3, r0, #1
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	2b18      	cmp	r3, #24
 8007fb4:	d831      	bhi.n	800801a <__gethex+0x146>
 8007fb6:	f1a0 0210 	sub.w	r2, r0, #16
 8007fba:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007fbe:	f7ff ff74 	bl	8007eaa <__hexdig_fun>
 8007fc2:	1e43      	subs	r3, r0, #1
 8007fc4:	b2db      	uxtb	r3, r3
 8007fc6:	2b18      	cmp	r3, #24
 8007fc8:	d922      	bls.n	8008010 <__gethex+0x13c>
 8007fca:	f1b9 0f00 	cmp.w	r9, #0
 8007fce:	d000      	beq.n	8007fd2 <__gethex+0xfe>
 8007fd0:	4252      	negs	r2, r2
 8007fd2:	4414      	add	r4, r2
 8007fd4:	f8ca 1000 	str.w	r1, [sl]
 8007fd8:	b30d      	cbz	r5, 800801e <__gethex+0x14a>
 8007fda:	f1bb 0f00 	cmp.w	fp, #0
 8007fde:	bf0c      	ite	eq
 8007fe0:	2706      	moveq	r7, #6
 8007fe2:	2700      	movne	r7, #0
 8007fe4:	4638      	mov	r0, r7
 8007fe6:	b00b      	add	sp, #44	; 0x2c
 8007fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fec:	f10b 0b01 	add.w	fp, fp, #1
 8007ff0:	e78a      	b.n	8007f08 <__gethex+0x34>
 8007ff2:	2500      	movs	r5, #0
 8007ff4:	462c      	mov	r4, r5
 8007ff6:	e7ae      	b.n	8007f56 <__gethex+0x82>
 8007ff8:	463e      	mov	r6, r7
 8007ffa:	2501      	movs	r5, #1
 8007ffc:	e7c7      	b.n	8007f8e <__gethex+0xba>
 8007ffe:	4604      	mov	r4, r0
 8008000:	e7fb      	b.n	8007ffa <__gethex+0x126>
 8008002:	f04f 0900 	mov.w	r9, #0
 8008006:	1cb1      	adds	r1, r6, #2
 8008008:	e7ce      	b.n	8007fa8 <__gethex+0xd4>
 800800a:	f04f 0901 	mov.w	r9, #1
 800800e:	e7fa      	b.n	8008006 <__gethex+0x132>
 8008010:	230a      	movs	r3, #10
 8008012:	fb03 0202 	mla	r2, r3, r2, r0
 8008016:	3a10      	subs	r2, #16
 8008018:	e7cf      	b.n	8007fba <__gethex+0xe6>
 800801a:	4631      	mov	r1, r6
 800801c:	e7da      	b.n	8007fd4 <__gethex+0x100>
 800801e:	4629      	mov	r1, r5
 8008020:	1bf3      	subs	r3, r6, r7
 8008022:	3b01      	subs	r3, #1
 8008024:	2b07      	cmp	r3, #7
 8008026:	dc49      	bgt.n	80080bc <__gethex+0x1e8>
 8008028:	9802      	ldr	r0, [sp, #8]
 800802a:	f000 fa5c 	bl	80084e6 <_Balloc>
 800802e:	f04f 0b00 	mov.w	fp, #0
 8008032:	4605      	mov	r5, r0
 8008034:	46da      	mov	sl, fp
 8008036:	9b01      	ldr	r3, [sp, #4]
 8008038:	f100 0914 	add.w	r9, r0, #20
 800803c:	f1c3 0301 	rsb	r3, r3, #1
 8008040:	f8cd 9010 	str.w	r9, [sp, #16]
 8008044:	9308      	str	r3, [sp, #32]
 8008046:	42b7      	cmp	r7, r6
 8008048:	d33b      	bcc.n	80080c2 <__gethex+0x1ee>
 800804a:	9804      	ldr	r0, [sp, #16]
 800804c:	f840 ab04 	str.w	sl, [r0], #4
 8008050:	eba0 0009 	sub.w	r0, r0, r9
 8008054:	1080      	asrs	r0, r0, #2
 8008056:	6128      	str	r0, [r5, #16]
 8008058:	0147      	lsls	r7, r0, #5
 800805a:	4650      	mov	r0, sl
 800805c:	f000 fb07 	bl	800866e <__hi0bits>
 8008060:	f8d8 6000 	ldr.w	r6, [r8]
 8008064:	1a3f      	subs	r7, r7, r0
 8008066:	42b7      	cmp	r7, r6
 8008068:	dd64      	ble.n	8008134 <__gethex+0x260>
 800806a:	1bbf      	subs	r7, r7, r6
 800806c:	4639      	mov	r1, r7
 800806e:	4628      	mov	r0, r5
 8008070:	f000 fe11 	bl	8008c96 <__any_on>
 8008074:	4682      	mov	sl, r0
 8008076:	b178      	cbz	r0, 8008098 <__gethex+0x1c4>
 8008078:	f04f 0a01 	mov.w	sl, #1
 800807c:	1e7b      	subs	r3, r7, #1
 800807e:	1159      	asrs	r1, r3, #5
 8008080:	f003 021f 	and.w	r2, r3, #31
 8008084:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008088:	fa0a f202 	lsl.w	r2, sl, r2
 800808c:	420a      	tst	r2, r1
 800808e:	d003      	beq.n	8008098 <__gethex+0x1c4>
 8008090:	4553      	cmp	r3, sl
 8008092:	dc46      	bgt.n	8008122 <__gethex+0x24e>
 8008094:	f04f 0a02 	mov.w	sl, #2
 8008098:	4639      	mov	r1, r7
 800809a:	4628      	mov	r0, r5
 800809c:	f7ff feca 	bl	8007e34 <rshift>
 80080a0:	443c      	add	r4, r7
 80080a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80080a6:	42a3      	cmp	r3, r4
 80080a8:	da52      	bge.n	8008150 <__gethex+0x27c>
 80080aa:	4629      	mov	r1, r5
 80080ac:	9802      	ldr	r0, [sp, #8]
 80080ae:	f000 fa4e 	bl	800854e <_Bfree>
 80080b2:	2300      	movs	r3, #0
 80080b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80080b6:	27a3      	movs	r7, #163	; 0xa3
 80080b8:	6013      	str	r3, [r2, #0]
 80080ba:	e793      	b.n	8007fe4 <__gethex+0x110>
 80080bc:	3101      	adds	r1, #1
 80080be:	105b      	asrs	r3, r3, #1
 80080c0:	e7b0      	b.n	8008024 <__gethex+0x150>
 80080c2:	1e73      	subs	r3, r6, #1
 80080c4:	9305      	str	r3, [sp, #20]
 80080c6:	9a07      	ldr	r2, [sp, #28]
 80080c8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d018      	beq.n	8008102 <__gethex+0x22e>
 80080d0:	f1bb 0f20 	cmp.w	fp, #32
 80080d4:	d107      	bne.n	80080e6 <__gethex+0x212>
 80080d6:	9b04      	ldr	r3, [sp, #16]
 80080d8:	f8c3 a000 	str.w	sl, [r3]
 80080dc:	f04f 0a00 	mov.w	sl, #0
 80080e0:	46d3      	mov	fp, sl
 80080e2:	3304      	adds	r3, #4
 80080e4:	9304      	str	r3, [sp, #16]
 80080e6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80080ea:	f7ff fede 	bl	8007eaa <__hexdig_fun>
 80080ee:	f000 000f 	and.w	r0, r0, #15
 80080f2:	fa00 f00b 	lsl.w	r0, r0, fp
 80080f6:	ea4a 0a00 	orr.w	sl, sl, r0
 80080fa:	f10b 0b04 	add.w	fp, fp, #4
 80080fe:	9b05      	ldr	r3, [sp, #20]
 8008100:	e00d      	b.n	800811e <__gethex+0x24a>
 8008102:	9b05      	ldr	r3, [sp, #20]
 8008104:	9a08      	ldr	r2, [sp, #32]
 8008106:	4413      	add	r3, r2
 8008108:	42bb      	cmp	r3, r7
 800810a:	d3e1      	bcc.n	80080d0 <__gethex+0x1fc>
 800810c:	4618      	mov	r0, r3
 800810e:	9a01      	ldr	r2, [sp, #4]
 8008110:	9903      	ldr	r1, [sp, #12]
 8008112:	9309      	str	r3, [sp, #36]	; 0x24
 8008114:	f7fe ffba 	bl	800708c <strncmp>
 8008118:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800811a:	2800      	cmp	r0, #0
 800811c:	d1d8      	bne.n	80080d0 <__gethex+0x1fc>
 800811e:	461e      	mov	r6, r3
 8008120:	e791      	b.n	8008046 <__gethex+0x172>
 8008122:	1eb9      	subs	r1, r7, #2
 8008124:	4628      	mov	r0, r5
 8008126:	f000 fdb6 	bl	8008c96 <__any_on>
 800812a:	2800      	cmp	r0, #0
 800812c:	d0b2      	beq.n	8008094 <__gethex+0x1c0>
 800812e:	f04f 0a03 	mov.w	sl, #3
 8008132:	e7b1      	b.n	8008098 <__gethex+0x1c4>
 8008134:	da09      	bge.n	800814a <__gethex+0x276>
 8008136:	1bf7      	subs	r7, r6, r7
 8008138:	4629      	mov	r1, r5
 800813a:	463a      	mov	r2, r7
 800813c:	9802      	ldr	r0, [sp, #8]
 800813e:	f000 fbd1 	bl	80088e4 <__lshift>
 8008142:	4605      	mov	r5, r0
 8008144:	1be4      	subs	r4, r4, r7
 8008146:	f100 0914 	add.w	r9, r0, #20
 800814a:	f04f 0a00 	mov.w	sl, #0
 800814e:	e7a8      	b.n	80080a2 <__gethex+0x1ce>
 8008150:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008154:	42a0      	cmp	r0, r4
 8008156:	dd6b      	ble.n	8008230 <__gethex+0x35c>
 8008158:	1b04      	subs	r4, r0, r4
 800815a:	42a6      	cmp	r6, r4
 800815c:	dc2e      	bgt.n	80081bc <__gethex+0x2e8>
 800815e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008162:	2b02      	cmp	r3, #2
 8008164:	d022      	beq.n	80081ac <__gethex+0x2d8>
 8008166:	2b03      	cmp	r3, #3
 8008168:	d024      	beq.n	80081b4 <__gethex+0x2e0>
 800816a:	2b01      	cmp	r3, #1
 800816c:	d115      	bne.n	800819a <__gethex+0x2c6>
 800816e:	42a6      	cmp	r6, r4
 8008170:	d113      	bne.n	800819a <__gethex+0x2c6>
 8008172:	2e01      	cmp	r6, #1
 8008174:	dc0b      	bgt.n	800818e <__gethex+0x2ba>
 8008176:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800817a:	9a06      	ldr	r2, [sp, #24]
 800817c:	2762      	movs	r7, #98	; 0x62
 800817e:	6013      	str	r3, [r2, #0]
 8008180:	2301      	movs	r3, #1
 8008182:	612b      	str	r3, [r5, #16]
 8008184:	f8c9 3000 	str.w	r3, [r9]
 8008188:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800818a:	601d      	str	r5, [r3, #0]
 800818c:	e72a      	b.n	8007fe4 <__gethex+0x110>
 800818e:	1e71      	subs	r1, r6, #1
 8008190:	4628      	mov	r0, r5
 8008192:	f000 fd80 	bl	8008c96 <__any_on>
 8008196:	2800      	cmp	r0, #0
 8008198:	d1ed      	bne.n	8008176 <__gethex+0x2a2>
 800819a:	4629      	mov	r1, r5
 800819c:	9802      	ldr	r0, [sp, #8]
 800819e:	f000 f9d6 	bl	800854e <_Bfree>
 80081a2:	2300      	movs	r3, #0
 80081a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80081a6:	2750      	movs	r7, #80	; 0x50
 80081a8:	6013      	str	r3, [r2, #0]
 80081aa:	e71b      	b.n	8007fe4 <__gethex+0x110>
 80081ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d0e1      	beq.n	8008176 <__gethex+0x2a2>
 80081b2:	e7f2      	b.n	800819a <__gethex+0x2c6>
 80081b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d1dd      	bne.n	8008176 <__gethex+0x2a2>
 80081ba:	e7ee      	b.n	800819a <__gethex+0x2c6>
 80081bc:	1e67      	subs	r7, r4, #1
 80081be:	f1ba 0f00 	cmp.w	sl, #0
 80081c2:	d132      	bne.n	800822a <__gethex+0x356>
 80081c4:	b127      	cbz	r7, 80081d0 <__gethex+0x2fc>
 80081c6:	4639      	mov	r1, r7
 80081c8:	4628      	mov	r0, r5
 80081ca:	f000 fd64 	bl	8008c96 <__any_on>
 80081ce:	4682      	mov	sl, r0
 80081d0:	2301      	movs	r3, #1
 80081d2:	117a      	asrs	r2, r7, #5
 80081d4:	f007 071f 	and.w	r7, r7, #31
 80081d8:	fa03 f707 	lsl.w	r7, r3, r7
 80081dc:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80081e0:	4621      	mov	r1, r4
 80081e2:	421f      	tst	r7, r3
 80081e4:	f04f 0702 	mov.w	r7, #2
 80081e8:	4628      	mov	r0, r5
 80081ea:	bf18      	it	ne
 80081ec:	f04a 0a02 	orrne.w	sl, sl, #2
 80081f0:	1b36      	subs	r6, r6, r4
 80081f2:	f7ff fe1f 	bl	8007e34 <rshift>
 80081f6:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80081fa:	f1ba 0f00 	cmp.w	sl, #0
 80081fe:	d048      	beq.n	8008292 <__gethex+0x3be>
 8008200:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008204:	2b02      	cmp	r3, #2
 8008206:	d015      	beq.n	8008234 <__gethex+0x360>
 8008208:	2b03      	cmp	r3, #3
 800820a:	d017      	beq.n	800823c <__gethex+0x368>
 800820c:	2b01      	cmp	r3, #1
 800820e:	d109      	bne.n	8008224 <__gethex+0x350>
 8008210:	f01a 0f02 	tst.w	sl, #2
 8008214:	d006      	beq.n	8008224 <__gethex+0x350>
 8008216:	f8d9 3000 	ldr.w	r3, [r9]
 800821a:	ea4a 0a03 	orr.w	sl, sl, r3
 800821e:	f01a 0f01 	tst.w	sl, #1
 8008222:	d10e      	bne.n	8008242 <__gethex+0x36e>
 8008224:	f047 0710 	orr.w	r7, r7, #16
 8008228:	e033      	b.n	8008292 <__gethex+0x3be>
 800822a:	f04f 0a01 	mov.w	sl, #1
 800822e:	e7cf      	b.n	80081d0 <__gethex+0x2fc>
 8008230:	2701      	movs	r7, #1
 8008232:	e7e2      	b.n	80081fa <__gethex+0x326>
 8008234:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008236:	f1c3 0301 	rsb	r3, r3, #1
 800823a:	9315      	str	r3, [sp, #84]	; 0x54
 800823c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800823e:	2b00      	cmp	r3, #0
 8008240:	d0f0      	beq.n	8008224 <__gethex+0x350>
 8008242:	f04f 0c00 	mov.w	ip, #0
 8008246:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800824a:	f105 0314 	add.w	r3, r5, #20
 800824e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8008252:	eb03 010a 	add.w	r1, r3, sl
 8008256:	4618      	mov	r0, r3
 8008258:	f853 2b04 	ldr.w	r2, [r3], #4
 800825c:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8008260:	d01c      	beq.n	800829c <__gethex+0x3c8>
 8008262:	3201      	adds	r2, #1
 8008264:	6002      	str	r2, [r0, #0]
 8008266:	2f02      	cmp	r7, #2
 8008268:	f105 0314 	add.w	r3, r5, #20
 800826c:	d138      	bne.n	80082e0 <__gethex+0x40c>
 800826e:	f8d8 2000 	ldr.w	r2, [r8]
 8008272:	3a01      	subs	r2, #1
 8008274:	42b2      	cmp	r2, r6
 8008276:	d10a      	bne.n	800828e <__gethex+0x3ba>
 8008278:	2201      	movs	r2, #1
 800827a:	1171      	asrs	r1, r6, #5
 800827c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008280:	f006 061f 	and.w	r6, r6, #31
 8008284:	fa02 f606 	lsl.w	r6, r2, r6
 8008288:	421e      	tst	r6, r3
 800828a:	bf18      	it	ne
 800828c:	4617      	movne	r7, r2
 800828e:	f047 0720 	orr.w	r7, r7, #32
 8008292:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008294:	601d      	str	r5, [r3, #0]
 8008296:	9b06      	ldr	r3, [sp, #24]
 8008298:	601c      	str	r4, [r3, #0]
 800829a:	e6a3      	b.n	8007fe4 <__gethex+0x110>
 800829c:	4299      	cmp	r1, r3
 800829e:	f843 cc04 	str.w	ip, [r3, #-4]
 80082a2:	d8d8      	bhi.n	8008256 <__gethex+0x382>
 80082a4:	68ab      	ldr	r3, [r5, #8]
 80082a6:	4599      	cmp	r9, r3
 80082a8:	db12      	blt.n	80082d0 <__gethex+0x3fc>
 80082aa:	6869      	ldr	r1, [r5, #4]
 80082ac:	9802      	ldr	r0, [sp, #8]
 80082ae:	3101      	adds	r1, #1
 80082b0:	f000 f919 	bl	80084e6 <_Balloc>
 80082b4:	4683      	mov	fp, r0
 80082b6:	692a      	ldr	r2, [r5, #16]
 80082b8:	f105 010c 	add.w	r1, r5, #12
 80082bc:	3202      	adds	r2, #2
 80082be:	0092      	lsls	r2, r2, #2
 80082c0:	300c      	adds	r0, #12
 80082c2:	f000 f905 	bl	80084d0 <memcpy>
 80082c6:	4629      	mov	r1, r5
 80082c8:	9802      	ldr	r0, [sp, #8]
 80082ca:	f000 f940 	bl	800854e <_Bfree>
 80082ce:	465d      	mov	r5, fp
 80082d0:	692b      	ldr	r3, [r5, #16]
 80082d2:	1c5a      	adds	r2, r3, #1
 80082d4:	612a      	str	r2, [r5, #16]
 80082d6:	2201      	movs	r2, #1
 80082d8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80082dc:	615a      	str	r2, [r3, #20]
 80082de:	e7c2      	b.n	8008266 <__gethex+0x392>
 80082e0:	692a      	ldr	r2, [r5, #16]
 80082e2:	454a      	cmp	r2, r9
 80082e4:	dd0b      	ble.n	80082fe <__gethex+0x42a>
 80082e6:	2101      	movs	r1, #1
 80082e8:	4628      	mov	r0, r5
 80082ea:	f7ff fda3 	bl	8007e34 <rshift>
 80082ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80082f2:	3401      	adds	r4, #1
 80082f4:	42a3      	cmp	r3, r4
 80082f6:	f6ff aed8 	blt.w	80080aa <__gethex+0x1d6>
 80082fa:	2701      	movs	r7, #1
 80082fc:	e7c7      	b.n	800828e <__gethex+0x3ba>
 80082fe:	f016 061f 	ands.w	r6, r6, #31
 8008302:	d0fa      	beq.n	80082fa <__gethex+0x426>
 8008304:	449a      	add	sl, r3
 8008306:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800830a:	f000 f9b0 	bl	800866e <__hi0bits>
 800830e:	f1c6 0620 	rsb	r6, r6, #32
 8008312:	42b0      	cmp	r0, r6
 8008314:	dbe7      	blt.n	80082e6 <__gethex+0x412>
 8008316:	e7f0      	b.n	80082fa <__gethex+0x426>

08008318 <L_shift>:
 8008318:	f1c2 0208 	rsb	r2, r2, #8
 800831c:	0092      	lsls	r2, r2, #2
 800831e:	b570      	push	{r4, r5, r6, lr}
 8008320:	f1c2 0620 	rsb	r6, r2, #32
 8008324:	6843      	ldr	r3, [r0, #4]
 8008326:	6804      	ldr	r4, [r0, #0]
 8008328:	fa03 f506 	lsl.w	r5, r3, r6
 800832c:	432c      	orrs	r4, r5
 800832e:	40d3      	lsrs	r3, r2
 8008330:	6004      	str	r4, [r0, #0]
 8008332:	f840 3f04 	str.w	r3, [r0, #4]!
 8008336:	4288      	cmp	r0, r1
 8008338:	d3f4      	bcc.n	8008324 <L_shift+0xc>
 800833a:	bd70      	pop	{r4, r5, r6, pc}

0800833c <__match>:
 800833c:	b530      	push	{r4, r5, lr}
 800833e:	6803      	ldr	r3, [r0, #0]
 8008340:	3301      	adds	r3, #1
 8008342:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008346:	b914      	cbnz	r4, 800834e <__match+0x12>
 8008348:	6003      	str	r3, [r0, #0]
 800834a:	2001      	movs	r0, #1
 800834c:	bd30      	pop	{r4, r5, pc}
 800834e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008352:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008356:	2d19      	cmp	r5, #25
 8008358:	bf98      	it	ls
 800835a:	3220      	addls	r2, #32
 800835c:	42a2      	cmp	r2, r4
 800835e:	d0f0      	beq.n	8008342 <__match+0x6>
 8008360:	2000      	movs	r0, #0
 8008362:	e7f3      	b.n	800834c <__match+0x10>

08008364 <__hexnan>:
 8008364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008368:	2500      	movs	r5, #0
 800836a:	680b      	ldr	r3, [r1, #0]
 800836c:	4682      	mov	sl, r0
 800836e:	115f      	asrs	r7, r3, #5
 8008370:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8008374:	f013 031f 	ands.w	r3, r3, #31
 8008378:	bf18      	it	ne
 800837a:	3704      	addne	r7, #4
 800837c:	1f3e      	subs	r6, r7, #4
 800837e:	4690      	mov	r8, r2
 8008380:	46b1      	mov	r9, r6
 8008382:	4634      	mov	r4, r6
 8008384:	46ab      	mov	fp, r5
 8008386:	b087      	sub	sp, #28
 8008388:	6801      	ldr	r1, [r0, #0]
 800838a:	9301      	str	r3, [sp, #4]
 800838c:	f847 5c04 	str.w	r5, [r7, #-4]
 8008390:	9502      	str	r5, [sp, #8]
 8008392:	784a      	ldrb	r2, [r1, #1]
 8008394:	1c4b      	adds	r3, r1, #1
 8008396:	9303      	str	r3, [sp, #12]
 8008398:	b342      	cbz	r2, 80083ec <__hexnan+0x88>
 800839a:	4610      	mov	r0, r2
 800839c:	9105      	str	r1, [sp, #20]
 800839e:	9204      	str	r2, [sp, #16]
 80083a0:	f7ff fd83 	bl	8007eaa <__hexdig_fun>
 80083a4:	2800      	cmp	r0, #0
 80083a6:	d143      	bne.n	8008430 <__hexnan+0xcc>
 80083a8:	9a04      	ldr	r2, [sp, #16]
 80083aa:	9905      	ldr	r1, [sp, #20]
 80083ac:	2a20      	cmp	r2, #32
 80083ae:	d818      	bhi.n	80083e2 <__hexnan+0x7e>
 80083b0:	9b02      	ldr	r3, [sp, #8]
 80083b2:	459b      	cmp	fp, r3
 80083b4:	dd13      	ble.n	80083de <__hexnan+0x7a>
 80083b6:	454c      	cmp	r4, r9
 80083b8:	d206      	bcs.n	80083c8 <__hexnan+0x64>
 80083ba:	2d07      	cmp	r5, #7
 80083bc:	dc04      	bgt.n	80083c8 <__hexnan+0x64>
 80083be:	462a      	mov	r2, r5
 80083c0:	4649      	mov	r1, r9
 80083c2:	4620      	mov	r0, r4
 80083c4:	f7ff ffa8 	bl	8008318 <L_shift>
 80083c8:	4544      	cmp	r4, r8
 80083ca:	d944      	bls.n	8008456 <__hexnan+0xf2>
 80083cc:	2300      	movs	r3, #0
 80083ce:	f1a4 0904 	sub.w	r9, r4, #4
 80083d2:	f844 3c04 	str.w	r3, [r4, #-4]
 80083d6:	461d      	mov	r5, r3
 80083d8:	464c      	mov	r4, r9
 80083da:	f8cd b008 	str.w	fp, [sp, #8]
 80083de:	9903      	ldr	r1, [sp, #12]
 80083e0:	e7d7      	b.n	8008392 <__hexnan+0x2e>
 80083e2:	2a29      	cmp	r2, #41	; 0x29
 80083e4:	d14a      	bne.n	800847c <__hexnan+0x118>
 80083e6:	3102      	adds	r1, #2
 80083e8:	f8ca 1000 	str.w	r1, [sl]
 80083ec:	f1bb 0f00 	cmp.w	fp, #0
 80083f0:	d044      	beq.n	800847c <__hexnan+0x118>
 80083f2:	454c      	cmp	r4, r9
 80083f4:	d206      	bcs.n	8008404 <__hexnan+0xa0>
 80083f6:	2d07      	cmp	r5, #7
 80083f8:	dc04      	bgt.n	8008404 <__hexnan+0xa0>
 80083fa:	462a      	mov	r2, r5
 80083fc:	4649      	mov	r1, r9
 80083fe:	4620      	mov	r0, r4
 8008400:	f7ff ff8a 	bl	8008318 <L_shift>
 8008404:	4544      	cmp	r4, r8
 8008406:	d928      	bls.n	800845a <__hexnan+0xf6>
 8008408:	4643      	mov	r3, r8
 800840a:	f854 2b04 	ldr.w	r2, [r4], #4
 800840e:	42a6      	cmp	r6, r4
 8008410:	f843 2b04 	str.w	r2, [r3], #4
 8008414:	d2f9      	bcs.n	800840a <__hexnan+0xa6>
 8008416:	2200      	movs	r2, #0
 8008418:	f843 2b04 	str.w	r2, [r3], #4
 800841c:	429e      	cmp	r6, r3
 800841e:	d2fb      	bcs.n	8008418 <__hexnan+0xb4>
 8008420:	6833      	ldr	r3, [r6, #0]
 8008422:	b91b      	cbnz	r3, 800842c <__hexnan+0xc8>
 8008424:	4546      	cmp	r6, r8
 8008426:	d127      	bne.n	8008478 <__hexnan+0x114>
 8008428:	2301      	movs	r3, #1
 800842a:	6033      	str	r3, [r6, #0]
 800842c:	2005      	movs	r0, #5
 800842e:	e026      	b.n	800847e <__hexnan+0x11a>
 8008430:	3501      	adds	r5, #1
 8008432:	2d08      	cmp	r5, #8
 8008434:	f10b 0b01 	add.w	fp, fp, #1
 8008438:	dd06      	ble.n	8008448 <__hexnan+0xe4>
 800843a:	4544      	cmp	r4, r8
 800843c:	d9cf      	bls.n	80083de <__hexnan+0x7a>
 800843e:	2300      	movs	r3, #0
 8008440:	2501      	movs	r5, #1
 8008442:	f844 3c04 	str.w	r3, [r4, #-4]
 8008446:	3c04      	subs	r4, #4
 8008448:	6822      	ldr	r2, [r4, #0]
 800844a:	f000 000f 	and.w	r0, r0, #15
 800844e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008452:	6020      	str	r0, [r4, #0]
 8008454:	e7c3      	b.n	80083de <__hexnan+0x7a>
 8008456:	2508      	movs	r5, #8
 8008458:	e7c1      	b.n	80083de <__hexnan+0x7a>
 800845a:	9b01      	ldr	r3, [sp, #4]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d0df      	beq.n	8008420 <__hexnan+0xbc>
 8008460:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008464:	f1c3 0320 	rsb	r3, r3, #32
 8008468:	fa22 f303 	lsr.w	r3, r2, r3
 800846c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8008470:	401a      	ands	r2, r3
 8008472:	f847 2c04 	str.w	r2, [r7, #-4]
 8008476:	e7d3      	b.n	8008420 <__hexnan+0xbc>
 8008478:	3e04      	subs	r6, #4
 800847a:	e7d1      	b.n	8008420 <__hexnan+0xbc>
 800847c:	2004      	movs	r0, #4
 800847e:	b007      	add	sp, #28
 8008480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008484 <__locale_ctype_ptr_l>:
 8008484:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8008488:	4770      	bx	lr
	...

0800848c <__locale_ctype_ptr>:
 800848c:	4b04      	ldr	r3, [pc, #16]	; (80084a0 <__locale_ctype_ptr+0x14>)
 800848e:	4a05      	ldr	r2, [pc, #20]	; (80084a4 <__locale_ctype_ptr+0x18>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	6a1b      	ldr	r3, [r3, #32]
 8008494:	2b00      	cmp	r3, #0
 8008496:	bf08      	it	eq
 8008498:	4613      	moveq	r3, r2
 800849a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800849e:	4770      	bx	lr
 80084a0:	20000010 	.word	0x20000010
 80084a4:	20000074 	.word	0x20000074

080084a8 <__localeconv_l>:
 80084a8:	30f0      	adds	r0, #240	; 0xf0
 80084aa:	4770      	bx	lr

080084ac <__ascii_mbtowc>:
 80084ac:	b082      	sub	sp, #8
 80084ae:	b901      	cbnz	r1, 80084b2 <__ascii_mbtowc+0x6>
 80084b0:	a901      	add	r1, sp, #4
 80084b2:	b142      	cbz	r2, 80084c6 <__ascii_mbtowc+0x1a>
 80084b4:	b14b      	cbz	r3, 80084ca <__ascii_mbtowc+0x1e>
 80084b6:	7813      	ldrb	r3, [r2, #0]
 80084b8:	600b      	str	r3, [r1, #0]
 80084ba:	7812      	ldrb	r2, [r2, #0]
 80084bc:	1c10      	adds	r0, r2, #0
 80084be:	bf18      	it	ne
 80084c0:	2001      	movne	r0, #1
 80084c2:	b002      	add	sp, #8
 80084c4:	4770      	bx	lr
 80084c6:	4610      	mov	r0, r2
 80084c8:	e7fb      	b.n	80084c2 <__ascii_mbtowc+0x16>
 80084ca:	f06f 0001 	mvn.w	r0, #1
 80084ce:	e7f8      	b.n	80084c2 <__ascii_mbtowc+0x16>

080084d0 <memcpy>:
 80084d0:	b510      	push	{r4, lr}
 80084d2:	1e43      	subs	r3, r0, #1
 80084d4:	440a      	add	r2, r1
 80084d6:	4291      	cmp	r1, r2
 80084d8:	d100      	bne.n	80084dc <memcpy+0xc>
 80084da:	bd10      	pop	{r4, pc}
 80084dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084e4:	e7f7      	b.n	80084d6 <memcpy+0x6>

080084e6 <_Balloc>:
 80084e6:	b570      	push	{r4, r5, r6, lr}
 80084e8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80084ea:	4604      	mov	r4, r0
 80084ec:	460e      	mov	r6, r1
 80084ee:	b93d      	cbnz	r5, 8008500 <_Balloc+0x1a>
 80084f0:	2010      	movs	r0, #16
 80084f2:	f001 fb49 	bl	8009b88 <malloc>
 80084f6:	6260      	str	r0, [r4, #36]	; 0x24
 80084f8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80084fc:	6005      	str	r5, [r0, #0]
 80084fe:	60c5      	str	r5, [r0, #12]
 8008500:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008502:	68eb      	ldr	r3, [r5, #12]
 8008504:	b183      	cbz	r3, 8008528 <_Balloc+0x42>
 8008506:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008508:	68db      	ldr	r3, [r3, #12]
 800850a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800850e:	b9b8      	cbnz	r0, 8008540 <_Balloc+0x5a>
 8008510:	2101      	movs	r1, #1
 8008512:	fa01 f506 	lsl.w	r5, r1, r6
 8008516:	1d6a      	adds	r2, r5, #5
 8008518:	0092      	lsls	r2, r2, #2
 800851a:	4620      	mov	r0, r4
 800851c:	f000 fbdc 	bl	8008cd8 <_calloc_r>
 8008520:	b160      	cbz	r0, 800853c <_Balloc+0x56>
 8008522:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008526:	e00e      	b.n	8008546 <_Balloc+0x60>
 8008528:	2221      	movs	r2, #33	; 0x21
 800852a:	2104      	movs	r1, #4
 800852c:	4620      	mov	r0, r4
 800852e:	f000 fbd3 	bl	8008cd8 <_calloc_r>
 8008532:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008534:	60e8      	str	r0, [r5, #12]
 8008536:	68db      	ldr	r3, [r3, #12]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d1e4      	bne.n	8008506 <_Balloc+0x20>
 800853c:	2000      	movs	r0, #0
 800853e:	bd70      	pop	{r4, r5, r6, pc}
 8008540:	6802      	ldr	r2, [r0, #0]
 8008542:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008546:	2300      	movs	r3, #0
 8008548:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800854c:	e7f7      	b.n	800853e <_Balloc+0x58>

0800854e <_Bfree>:
 800854e:	b570      	push	{r4, r5, r6, lr}
 8008550:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008552:	4606      	mov	r6, r0
 8008554:	460d      	mov	r5, r1
 8008556:	b93c      	cbnz	r4, 8008568 <_Bfree+0x1a>
 8008558:	2010      	movs	r0, #16
 800855a:	f001 fb15 	bl	8009b88 <malloc>
 800855e:	6270      	str	r0, [r6, #36]	; 0x24
 8008560:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008564:	6004      	str	r4, [r0, #0]
 8008566:	60c4      	str	r4, [r0, #12]
 8008568:	b13d      	cbz	r5, 800857a <_Bfree+0x2c>
 800856a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800856c:	686a      	ldr	r2, [r5, #4]
 800856e:	68db      	ldr	r3, [r3, #12]
 8008570:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008574:	6029      	str	r1, [r5, #0]
 8008576:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800857a:	bd70      	pop	{r4, r5, r6, pc}

0800857c <__multadd>:
 800857c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008580:	461f      	mov	r7, r3
 8008582:	4606      	mov	r6, r0
 8008584:	460c      	mov	r4, r1
 8008586:	2300      	movs	r3, #0
 8008588:	690d      	ldr	r5, [r1, #16]
 800858a:	f101 0c14 	add.w	ip, r1, #20
 800858e:	f8dc 0000 	ldr.w	r0, [ip]
 8008592:	3301      	adds	r3, #1
 8008594:	b281      	uxth	r1, r0
 8008596:	fb02 7101 	mla	r1, r2, r1, r7
 800859a:	0c00      	lsrs	r0, r0, #16
 800859c:	0c0f      	lsrs	r7, r1, #16
 800859e:	fb02 7000 	mla	r0, r2, r0, r7
 80085a2:	b289      	uxth	r1, r1
 80085a4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80085a8:	429d      	cmp	r5, r3
 80085aa:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80085ae:	f84c 1b04 	str.w	r1, [ip], #4
 80085b2:	dcec      	bgt.n	800858e <__multadd+0x12>
 80085b4:	b1d7      	cbz	r7, 80085ec <__multadd+0x70>
 80085b6:	68a3      	ldr	r3, [r4, #8]
 80085b8:	42ab      	cmp	r3, r5
 80085ba:	dc12      	bgt.n	80085e2 <__multadd+0x66>
 80085bc:	6861      	ldr	r1, [r4, #4]
 80085be:	4630      	mov	r0, r6
 80085c0:	3101      	adds	r1, #1
 80085c2:	f7ff ff90 	bl	80084e6 <_Balloc>
 80085c6:	4680      	mov	r8, r0
 80085c8:	6922      	ldr	r2, [r4, #16]
 80085ca:	f104 010c 	add.w	r1, r4, #12
 80085ce:	3202      	adds	r2, #2
 80085d0:	0092      	lsls	r2, r2, #2
 80085d2:	300c      	adds	r0, #12
 80085d4:	f7ff ff7c 	bl	80084d0 <memcpy>
 80085d8:	4621      	mov	r1, r4
 80085da:	4630      	mov	r0, r6
 80085dc:	f7ff ffb7 	bl	800854e <_Bfree>
 80085e0:	4644      	mov	r4, r8
 80085e2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80085e6:	3501      	adds	r5, #1
 80085e8:	615f      	str	r7, [r3, #20]
 80085ea:	6125      	str	r5, [r4, #16]
 80085ec:	4620      	mov	r0, r4
 80085ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080085f2 <__s2b>:
 80085f2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085f6:	4615      	mov	r5, r2
 80085f8:	2209      	movs	r2, #9
 80085fa:	461f      	mov	r7, r3
 80085fc:	3308      	adds	r3, #8
 80085fe:	460c      	mov	r4, r1
 8008600:	fb93 f3f2 	sdiv	r3, r3, r2
 8008604:	4606      	mov	r6, r0
 8008606:	2201      	movs	r2, #1
 8008608:	2100      	movs	r1, #0
 800860a:	429a      	cmp	r2, r3
 800860c:	db20      	blt.n	8008650 <__s2b+0x5e>
 800860e:	4630      	mov	r0, r6
 8008610:	f7ff ff69 	bl	80084e6 <_Balloc>
 8008614:	9b08      	ldr	r3, [sp, #32]
 8008616:	2d09      	cmp	r5, #9
 8008618:	6143      	str	r3, [r0, #20]
 800861a:	f04f 0301 	mov.w	r3, #1
 800861e:	6103      	str	r3, [r0, #16]
 8008620:	dd19      	ble.n	8008656 <__s2b+0x64>
 8008622:	f104 0809 	add.w	r8, r4, #9
 8008626:	46c1      	mov	r9, r8
 8008628:	442c      	add	r4, r5
 800862a:	f819 3b01 	ldrb.w	r3, [r9], #1
 800862e:	4601      	mov	r1, r0
 8008630:	3b30      	subs	r3, #48	; 0x30
 8008632:	220a      	movs	r2, #10
 8008634:	4630      	mov	r0, r6
 8008636:	f7ff ffa1 	bl	800857c <__multadd>
 800863a:	45a1      	cmp	r9, r4
 800863c:	d1f5      	bne.n	800862a <__s2b+0x38>
 800863e:	eb08 0405 	add.w	r4, r8, r5
 8008642:	3c08      	subs	r4, #8
 8008644:	1b2d      	subs	r5, r5, r4
 8008646:	1963      	adds	r3, r4, r5
 8008648:	42bb      	cmp	r3, r7
 800864a:	db07      	blt.n	800865c <__s2b+0x6a>
 800864c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008650:	0052      	lsls	r2, r2, #1
 8008652:	3101      	adds	r1, #1
 8008654:	e7d9      	b.n	800860a <__s2b+0x18>
 8008656:	340a      	adds	r4, #10
 8008658:	2509      	movs	r5, #9
 800865a:	e7f3      	b.n	8008644 <__s2b+0x52>
 800865c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008660:	4601      	mov	r1, r0
 8008662:	3b30      	subs	r3, #48	; 0x30
 8008664:	220a      	movs	r2, #10
 8008666:	4630      	mov	r0, r6
 8008668:	f7ff ff88 	bl	800857c <__multadd>
 800866c:	e7eb      	b.n	8008646 <__s2b+0x54>

0800866e <__hi0bits>:
 800866e:	0c02      	lsrs	r2, r0, #16
 8008670:	0412      	lsls	r2, r2, #16
 8008672:	4603      	mov	r3, r0
 8008674:	b9b2      	cbnz	r2, 80086a4 <__hi0bits+0x36>
 8008676:	0403      	lsls	r3, r0, #16
 8008678:	2010      	movs	r0, #16
 800867a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800867e:	bf04      	itt	eq
 8008680:	021b      	lsleq	r3, r3, #8
 8008682:	3008      	addeq	r0, #8
 8008684:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008688:	bf04      	itt	eq
 800868a:	011b      	lsleq	r3, r3, #4
 800868c:	3004      	addeq	r0, #4
 800868e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008692:	bf04      	itt	eq
 8008694:	009b      	lsleq	r3, r3, #2
 8008696:	3002      	addeq	r0, #2
 8008698:	2b00      	cmp	r3, #0
 800869a:	db06      	blt.n	80086aa <__hi0bits+0x3c>
 800869c:	005b      	lsls	r3, r3, #1
 800869e:	d503      	bpl.n	80086a8 <__hi0bits+0x3a>
 80086a0:	3001      	adds	r0, #1
 80086a2:	4770      	bx	lr
 80086a4:	2000      	movs	r0, #0
 80086a6:	e7e8      	b.n	800867a <__hi0bits+0xc>
 80086a8:	2020      	movs	r0, #32
 80086aa:	4770      	bx	lr

080086ac <__lo0bits>:
 80086ac:	6803      	ldr	r3, [r0, #0]
 80086ae:	4601      	mov	r1, r0
 80086b0:	f013 0207 	ands.w	r2, r3, #7
 80086b4:	d00b      	beq.n	80086ce <__lo0bits+0x22>
 80086b6:	07da      	lsls	r2, r3, #31
 80086b8:	d423      	bmi.n	8008702 <__lo0bits+0x56>
 80086ba:	0798      	lsls	r0, r3, #30
 80086bc:	bf49      	itett	mi
 80086be:	085b      	lsrmi	r3, r3, #1
 80086c0:	089b      	lsrpl	r3, r3, #2
 80086c2:	2001      	movmi	r0, #1
 80086c4:	600b      	strmi	r3, [r1, #0]
 80086c6:	bf5c      	itt	pl
 80086c8:	600b      	strpl	r3, [r1, #0]
 80086ca:	2002      	movpl	r0, #2
 80086cc:	4770      	bx	lr
 80086ce:	b298      	uxth	r0, r3
 80086d0:	b9a8      	cbnz	r0, 80086fe <__lo0bits+0x52>
 80086d2:	2010      	movs	r0, #16
 80086d4:	0c1b      	lsrs	r3, r3, #16
 80086d6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80086da:	bf04      	itt	eq
 80086dc:	0a1b      	lsreq	r3, r3, #8
 80086de:	3008      	addeq	r0, #8
 80086e0:	071a      	lsls	r2, r3, #28
 80086e2:	bf04      	itt	eq
 80086e4:	091b      	lsreq	r3, r3, #4
 80086e6:	3004      	addeq	r0, #4
 80086e8:	079a      	lsls	r2, r3, #30
 80086ea:	bf04      	itt	eq
 80086ec:	089b      	lsreq	r3, r3, #2
 80086ee:	3002      	addeq	r0, #2
 80086f0:	07da      	lsls	r2, r3, #31
 80086f2:	d402      	bmi.n	80086fa <__lo0bits+0x4e>
 80086f4:	085b      	lsrs	r3, r3, #1
 80086f6:	d006      	beq.n	8008706 <__lo0bits+0x5a>
 80086f8:	3001      	adds	r0, #1
 80086fa:	600b      	str	r3, [r1, #0]
 80086fc:	4770      	bx	lr
 80086fe:	4610      	mov	r0, r2
 8008700:	e7e9      	b.n	80086d6 <__lo0bits+0x2a>
 8008702:	2000      	movs	r0, #0
 8008704:	4770      	bx	lr
 8008706:	2020      	movs	r0, #32
 8008708:	4770      	bx	lr

0800870a <__i2b>:
 800870a:	b510      	push	{r4, lr}
 800870c:	460c      	mov	r4, r1
 800870e:	2101      	movs	r1, #1
 8008710:	f7ff fee9 	bl	80084e6 <_Balloc>
 8008714:	2201      	movs	r2, #1
 8008716:	6144      	str	r4, [r0, #20]
 8008718:	6102      	str	r2, [r0, #16]
 800871a:	bd10      	pop	{r4, pc}

0800871c <__multiply>:
 800871c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008720:	4614      	mov	r4, r2
 8008722:	690a      	ldr	r2, [r1, #16]
 8008724:	6923      	ldr	r3, [r4, #16]
 8008726:	4688      	mov	r8, r1
 8008728:	429a      	cmp	r2, r3
 800872a:	bfbe      	ittt	lt
 800872c:	460b      	movlt	r3, r1
 800872e:	46a0      	movlt	r8, r4
 8008730:	461c      	movlt	r4, r3
 8008732:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008736:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800873a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800873e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008742:	eb07 0609 	add.w	r6, r7, r9
 8008746:	42b3      	cmp	r3, r6
 8008748:	bfb8      	it	lt
 800874a:	3101      	addlt	r1, #1
 800874c:	f7ff fecb 	bl	80084e6 <_Balloc>
 8008750:	f100 0514 	add.w	r5, r0, #20
 8008754:	462b      	mov	r3, r5
 8008756:	2200      	movs	r2, #0
 8008758:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800875c:	4573      	cmp	r3, lr
 800875e:	d316      	bcc.n	800878e <__multiply+0x72>
 8008760:	f104 0214 	add.w	r2, r4, #20
 8008764:	f108 0114 	add.w	r1, r8, #20
 8008768:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800876c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008770:	9300      	str	r3, [sp, #0]
 8008772:	9b00      	ldr	r3, [sp, #0]
 8008774:	9201      	str	r2, [sp, #4]
 8008776:	4293      	cmp	r3, r2
 8008778:	d80c      	bhi.n	8008794 <__multiply+0x78>
 800877a:	2e00      	cmp	r6, #0
 800877c:	dd03      	ble.n	8008786 <__multiply+0x6a>
 800877e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008782:	2b00      	cmp	r3, #0
 8008784:	d05d      	beq.n	8008842 <__multiply+0x126>
 8008786:	6106      	str	r6, [r0, #16]
 8008788:	b003      	add	sp, #12
 800878a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800878e:	f843 2b04 	str.w	r2, [r3], #4
 8008792:	e7e3      	b.n	800875c <__multiply+0x40>
 8008794:	f8b2 b000 	ldrh.w	fp, [r2]
 8008798:	f1bb 0f00 	cmp.w	fp, #0
 800879c:	d023      	beq.n	80087e6 <__multiply+0xca>
 800879e:	4689      	mov	r9, r1
 80087a0:	46ac      	mov	ip, r5
 80087a2:	f04f 0800 	mov.w	r8, #0
 80087a6:	f859 4b04 	ldr.w	r4, [r9], #4
 80087aa:	f8dc a000 	ldr.w	sl, [ip]
 80087ae:	b2a3      	uxth	r3, r4
 80087b0:	fa1f fa8a 	uxth.w	sl, sl
 80087b4:	fb0b a303 	mla	r3, fp, r3, sl
 80087b8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80087bc:	f8dc 4000 	ldr.w	r4, [ip]
 80087c0:	4443      	add	r3, r8
 80087c2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80087c6:	fb0b 840a 	mla	r4, fp, sl, r8
 80087ca:	46e2      	mov	sl, ip
 80087cc:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80087d6:	454f      	cmp	r7, r9
 80087d8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80087dc:	f84a 3b04 	str.w	r3, [sl], #4
 80087e0:	d82b      	bhi.n	800883a <__multiply+0x11e>
 80087e2:	f8cc 8004 	str.w	r8, [ip, #4]
 80087e6:	9b01      	ldr	r3, [sp, #4]
 80087e8:	3204      	adds	r2, #4
 80087ea:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80087ee:	f1ba 0f00 	cmp.w	sl, #0
 80087f2:	d020      	beq.n	8008836 <__multiply+0x11a>
 80087f4:	4689      	mov	r9, r1
 80087f6:	46a8      	mov	r8, r5
 80087f8:	f04f 0b00 	mov.w	fp, #0
 80087fc:	682b      	ldr	r3, [r5, #0]
 80087fe:	f8b9 c000 	ldrh.w	ip, [r9]
 8008802:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008806:	b29b      	uxth	r3, r3
 8008808:	fb0a 440c 	mla	r4, sl, ip, r4
 800880c:	46c4      	mov	ip, r8
 800880e:	445c      	add	r4, fp
 8008810:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008814:	f84c 3b04 	str.w	r3, [ip], #4
 8008818:	f859 3b04 	ldr.w	r3, [r9], #4
 800881c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008820:	0c1b      	lsrs	r3, r3, #16
 8008822:	fb0a b303 	mla	r3, sl, r3, fp
 8008826:	454f      	cmp	r7, r9
 8008828:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800882c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008830:	d805      	bhi.n	800883e <__multiply+0x122>
 8008832:	f8c8 3004 	str.w	r3, [r8, #4]
 8008836:	3504      	adds	r5, #4
 8008838:	e79b      	b.n	8008772 <__multiply+0x56>
 800883a:	46d4      	mov	ip, sl
 800883c:	e7b3      	b.n	80087a6 <__multiply+0x8a>
 800883e:	46e0      	mov	r8, ip
 8008840:	e7dd      	b.n	80087fe <__multiply+0xe2>
 8008842:	3e01      	subs	r6, #1
 8008844:	e799      	b.n	800877a <__multiply+0x5e>
	...

08008848 <__pow5mult>:
 8008848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800884c:	4615      	mov	r5, r2
 800884e:	f012 0203 	ands.w	r2, r2, #3
 8008852:	4606      	mov	r6, r0
 8008854:	460f      	mov	r7, r1
 8008856:	d007      	beq.n	8008868 <__pow5mult+0x20>
 8008858:	4c21      	ldr	r4, [pc, #132]	; (80088e0 <__pow5mult+0x98>)
 800885a:	3a01      	subs	r2, #1
 800885c:	2300      	movs	r3, #0
 800885e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008862:	f7ff fe8b 	bl	800857c <__multadd>
 8008866:	4607      	mov	r7, r0
 8008868:	10ad      	asrs	r5, r5, #2
 800886a:	d035      	beq.n	80088d8 <__pow5mult+0x90>
 800886c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800886e:	b93c      	cbnz	r4, 8008880 <__pow5mult+0x38>
 8008870:	2010      	movs	r0, #16
 8008872:	f001 f989 	bl	8009b88 <malloc>
 8008876:	6270      	str	r0, [r6, #36]	; 0x24
 8008878:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800887c:	6004      	str	r4, [r0, #0]
 800887e:	60c4      	str	r4, [r0, #12]
 8008880:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008884:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008888:	b94c      	cbnz	r4, 800889e <__pow5mult+0x56>
 800888a:	f240 2171 	movw	r1, #625	; 0x271
 800888e:	4630      	mov	r0, r6
 8008890:	f7ff ff3b 	bl	800870a <__i2b>
 8008894:	2300      	movs	r3, #0
 8008896:	4604      	mov	r4, r0
 8008898:	f8c8 0008 	str.w	r0, [r8, #8]
 800889c:	6003      	str	r3, [r0, #0]
 800889e:	f04f 0800 	mov.w	r8, #0
 80088a2:	07eb      	lsls	r3, r5, #31
 80088a4:	d50a      	bpl.n	80088bc <__pow5mult+0x74>
 80088a6:	4639      	mov	r1, r7
 80088a8:	4622      	mov	r2, r4
 80088aa:	4630      	mov	r0, r6
 80088ac:	f7ff ff36 	bl	800871c <__multiply>
 80088b0:	4681      	mov	r9, r0
 80088b2:	4639      	mov	r1, r7
 80088b4:	4630      	mov	r0, r6
 80088b6:	f7ff fe4a 	bl	800854e <_Bfree>
 80088ba:	464f      	mov	r7, r9
 80088bc:	106d      	asrs	r5, r5, #1
 80088be:	d00b      	beq.n	80088d8 <__pow5mult+0x90>
 80088c0:	6820      	ldr	r0, [r4, #0]
 80088c2:	b938      	cbnz	r0, 80088d4 <__pow5mult+0x8c>
 80088c4:	4622      	mov	r2, r4
 80088c6:	4621      	mov	r1, r4
 80088c8:	4630      	mov	r0, r6
 80088ca:	f7ff ff27 	bl	800871c <__multiply>
 80088ce:	6020      	str	r0, [r4, #0]
 80088d0:	f8c0 8000 	str.w	r8, [r0]
 80088d4:	4604      	mov	r4, r0
 80088d6:	e7e4      	b.n	80088a2 <__pow5mult+0x5a>
 80088d8:	4638      	mov	r0, r7
 80088da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088de:	bf00      	nop
 80088e0:	08009ff0 	.word	0x08009ff0

080088e4 <__lshift>:
 80088e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088e8:	460c      	mov	r4, r1
 80088ea:	4607      	mov	r7, r0
 80088ec:	4616      	mov	r6, r2
 80088ee:	6923      	ldr	r3, [r4, #16]
 80088f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80088f4:	eb0a 0903 	add.w	r9, sl, r3
 80088f8:	6849      	ldr	r1, [r1, #4]
 80088fa:	68a3      	ldr	r3, [r4, #8]
 80088fc:	f109 0501 	add.w	r5, r9, #1
 8008900:	42ab      	cmp	r3, r5
 8008902:	db32      	blt.n	800896a <__lshift+0x86>
 8008904:	4638      	mov	r0, r7
 8008906:	f7ff fdee 	bl	80084e6 <_Balloc>
 800890a:	2300      	movs	r3, #0
 800890c:	4680      	mov	r8, r0
 800890e:	461a      	mov	r2, r3
 8008910:	f100 0114 	add.w	r1, r0, #20
 8008914:	4553      	cmp	r3, sl
 8008916:	db2b      	blt.n	8008970 <__lshift+0x8c>
 8008918:	6920      	ldr	r0, [r4, #16]
 800891a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800891e:	f104 0314 	add.w	r3, r4, #20
 8008922:	f016 021f 	ands.w	r2, r6, #31
 8008926:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800892a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800892e:	d025      	beq.n	800897c <__lshift+0x98>
 8008930:	2000      	movs	r0, #0
 8008932:	f1c2 0e20 	rsb	lr, r2, #32
 8008936:	468a      	mov	sl, r1
 8008938:	681e      	ldr	r6, [r3, #0]
 800893a:	4096      	lsls	r6, r2
 800893c:	4330      	orrs	r0, r6
 800893e:	f84a 0b04 	str.w	r0, [sl], #4
 8008942:	f853 0b04 	ldr.w	r0, [r3], #4
 8008946:	459c      	cmp	ip, r3
 8008948:	fa20 f00e 	lsr.w	r0, r0, lr
 800894c:	d814      	bhi.n	8008978 <__lshift+0x94>
 800894e:	6048      	str	r0, [r1, #4]
 8008950:	b108      	cbz	r0, 8008956 <__lshift+0x72>
 8008952:	f109 0502 	add.w	r5, r9, #2
 8008956:	3d01      	subs	r5, #1
 8008958:	4638      	mov	r0, r7
 800895a:	f8c8 5010 	str.w	r5, [r8, #16]
 800895e:	4621      	mov	r1, r4
 8008960:	f7ff fdf5 	bl	800854e <_Bfree>
 8008964:	4640      	mov	r0, r8
 8008966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800896a:	3101      	adds	r1, #1
 800896c:	005b      	lsls	r3, r3, #1
 800896e:	e7c7      	b.n	8008900 <__lshift+0x1c>
 8008970:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008974:	3301      	adds	r3, #1
 8008976:	e7cd      	b.n	8008914 <__lshift+0x30>
 8008978:	4651      	mov	r1, sl
 800897a:	e7dc      	b.n	8008936 <__lshift+0x52>
 800897c:	3904      	subs	r1, #4
 800897e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008982:	459c      	cmp	ip, r3
 8008984:	f841 2f04 	str.w	r2, [r1, #4]!
 8008988:	d8f9      	bhi.n	800897e <__lshift+0x9a>
 800898a:	e7e4      	b.n	8008956 <__lshift+0x72>

0800898c <__mcmp>:
 800898c:	6903      	ldr	r3, [r0, #16]
 800898e:	690a      	ldr	r2, [r1, #16]
 8008990:	b530      	push	{r4, r5, lr}
 8008992:	1a9b      	subs	r3, r3, r2
 8008994:	d10c      	bne.n	80089b0 <__mcmp+0x24>
 8008996:	0092      	lsls	r2, r2, #2
 8008998:	3014      	adds	r0, #20
 800899a:	3114      	adds	r1, #20
 800899c:	1884      	adds	r4, r0, r2
 800899e:	4411      	add	r1, r2
 80089a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80089a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80089a8:	4295      	cmp	r5, r2
 80089aa:	d003      	beq.n	80089b4 <__mcmp+0x28>
 80089ac:	d305      	bcc.n	80089ba <__mcmp+0x2e>
 80089ae:	2301      	movs	r3, #1
 80089b0:	4618      	mov	r0, r3
 80089b2:	bd30      	pop	{r4, r5, pc}
 80089b4:	42a0      	cmp	r0, r4
 80089b6:	d3f3      	bcc.n	80089a0 <__mcmp+0x14>
 80089b8:	e7fa      	b.n	80089b0 <__mcmp+0x24>
 80089ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80089be:	e7f7      	b.n	80089b0 <__mcmp+0x24>

080089c0 <__mdiff>:
 80089c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089c4:	460d      	mov	r5, r1
 80089c6:	4607      	mov	r7, r0
 80089c8:	4611      	mov	r1, r2
 80089ca:	4628      	mov	r0, r5
 80089cc:	4614      	mov	r4, r2
 80089ce:	f7ff ffdd 	bl	800898c <__mcmp>
 80089d2:	1e06      	subs	r6, r0, #0
 80089d4:	d108      	bne.n	80089e8 <__mdiff+0x28>
 80089d6:	4631      	mov	r1, r6
 80089d8:	4638      	mov	r0, r7
 80089da:	f7ff fd84 	bl	80084e6 <_Balloc>
 80089de:	2301      	movs	r3, #1
 80089e0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80089e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089e8:	bfa4      	itt	ge
 80089ea:	4623      	movge	r3, r4
 80089ec:	462c      	movge	r4, r5
 80089ee:	4638      	mov	r0, r7
 80089f0:	6861      	ldr	r1, [r4, #4]
 80089f2:	bfa6      	itte	ge
 80089f4:	461d      	movge	r5, r3
 80089f6:	2600      	movge	r6, #0
 80089f8:	2601      	movlt	r6, #1
 80089fa:	f7ff fd74 	bl	80084e6 <_Balloc>
 80089fe:	f04f 0e00 	mov.w	lr, #0
 8008a02:	60c6      	str	r6, [r0, #12]
 8008a04:	692b      	ldr	r3, [r5, #16]
 8008a06:	6926      	ldr	r6, [r4, #16]
 8008a08:	f104 0214 	add.w	r2, r4, #20
 8008a0c:	f105 0914 	add.w	r9, r5, #20
 8008a10:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008a14:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008a18:	f100 0114 	add.w	r1, r0, #20
 8008a1c:	f852 ab04 	ldr.w	sl, [r2], #4
 8008a20:	f859 5b04 	ldr.w	r5, [r9], #4
 8008a24:	fa1f f38a 	uxth.w	r3, sl
 8008a28:	4473      	add	r3, lr
 8008a2a:	b2ac      	uxth	r4, r5
 8008a2c:	1b1b      	subs	r3, r3, r4
 8008a2e:	0c2c      	lsrs	r4, r5, #16
 8008a30:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8008a34:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8008a38:	b29b      	uxth	r3, r3
 8008a3a:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8008a3e:	45c8      	cmp	r8, r9
 8008a40:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008a44:	4694      	mov	ip, r2
 8008a46:	f841 4b04 	str.w	r4, [r1], #4
 8008a4a:	d8e7      	bhi.n	8008a1c <__mdiff+0x5c>
 8008a4c:	45bc      	cmp	ip, r7
 8008a4e:	d304      	bcc.n	8008a5a <__mdiff+0x9a>
 8008a50:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008a54:	b183      	cbz	r3, 8008a78 <__mdiff+0xb8>
 8008a56:	6106      	str	r6, [r0, #16]
 8008a58:	e7c4      	b.n	80089e4 <__mdiff+0x24>
 8008a5a:	f85c 4b04 	ldr.w	r4, [ip], #4
 8008a5e:	b2a2      	uxth	r2, r4
 8008a60:	4472      	add	r2, lr
 8008a62:	1413      	asrs	r3, r2, #16
 8008a64:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008a68:	b292      	uxth	r2, r2
 8008a6a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008a6e:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008a72:	f841 2b04 	str.w	r2, [r1], #4
 8008a76:	e7e9      	b.n	8008a4c <__mdiff+0x8c>
 8008a78:	3e01      	subs	r6, #1
 8008a7a:	e7e9      	b.n	8008a50 <__mdiff+0x90>

08008a7c <__ulp>:
 8008a7c:	4b10      	ldr	r3, [pc, #64]	; (8008ac0 <__ulp+0x44>)
 8008a7e:	400b      	ands	r3, r1
 8008a80:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	dd02      	ble.n	8008a8e <__ulp+0x12>
 8008a88:	2000      	movs	r0, #0
 8008a8a:	4619      	mov	r1, r3
 8008a8c:	4770      	bx	lr
 8008a8e:	425b      	negs	r3, r3
 8008a90:	151b      	asrs	r3, r3, #20
 8008a92:	2b13      	cmp	r3, #19
 8008a94:	f04f 0000 	mov.w	r0, #0
 8008a98:	f04f 0100 	mov.w	r1, #0
 8008a9c:	dc04      	bgt.n	8008aa8 <__ulp+0x2c>
 8008a9e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008aa2:	fa42 f103 	asr.w	r1, r2, r3
 8008aa6:	4770      	bx	lr
 8008aa8:	2201      	movs	r2, #1
 8008aaa:	3b14      	subs	r3, #20
 8008aac:	2b1e      	cmp	r3, #30
 8008aae:	bfce      	itee	gt
 8008ab0:	4613      	movgt	r3, r2
 8008ab2:	f1c3 031f 	rsble	r3, r3, #31
 8008ab6:	fa02 f303 	lslle.w	r3, r2, r3
 8008aba:	4618      	mov	r0, r3
 8008abc:	4770      	bx	lr
 8008abe:	bf00      	nop
 8008ac0:	7ff00000 	.word	0x7ff00000

08008ac4 <__b2d>:
 8008ac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ac8:	6907      	ldr	r7, [r0, #16]
 8008aca:	f100 0914 	add.w	r9, r0, #20
 8008ace:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8008ad2:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8008ad6:	f1a7 0804 	sub.w	r8, r7, #4
 8008ada:	4630      	mov	r0, r6
 8008adc:	f7ff fdc7 	bl	800866e <__hi0bits>
 8008ae0:	f1c0 0320 	rsb	r3, r0, #32
 8008ae4:	280a      	cmp	r0, #10
 8008ae6:	600b      	str	r3, [r1, #0]
 8008ae8:	491e      	ldr	r1, [pc, #120]	; (8008b64 <__b2d+0xa0>)
 8008aea:	dc17      	bgt.n	8008b1c <__b2d+0x58>
 8008aec:	45c1      	cmp	r9, r8
 8008aee:	bf28      	it	cs
 8008af0:	2200      	movcs	r2, #0
 8008af2:	f1c0 0c0b 	rsb	ip, r0, #11
 8008af6:	fa26 f30c 	lsr.w	r3, r6, ip
 8008afa:	bf38      	it	cc
 8008afc:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008b00:	ea43 0501 	orr.w	r5, r3, r1
 8008b04:	f100 0315 	add.w	r3, r0, #21
 8008b08:	fa06 f303 	lsl.w	r3, r6, r3
 8008b0c:	fa22 f20c 	lsr.w	r2, r2, ip
 8008b10:	ea43 0402 	orr.w	r4, r3, r2
 8008b14:	4620      	mov	r0, r4
 8008b16:	4629      	mov	r1, r5
 8008b18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b1c:	45c1      	cmp	r9, r8
 8008b1e:	bf3a      	itte	cc
 8008b20:	f1a7 0808 	subcc.w	r8, r7, #8
 8008b24:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008b28:	2200      	movcs	r2, #0
 8008b2a:	f1b0 030b 	subs.w	r3, r0, #11
 8008b2e:	d015      	beq.n	8008b5c <__b2d+0x98>
 8008b30:	409e      	lsls	r6, r3
 8008b32:	f1c3 0720 	rsb	r7, r3, #32
 8008b36:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 8008b3a:	fa22 f107 	lsr.w	r1, r2, r7
 8008b3e:	45c8      	cmp	r8, r9
 8008b40:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8008b44:	ea46 0501 	orr.w	r5, r6, r1
 8008b48:	bf94      	ite	ls
 8008b4a:	2100      	movls	r1, #0
 8008b4c:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8008b50:	fa02 f003 	lsl.w	r0, r2, r3
 8008b54:	40f9      	lsrs	r1, r7
 8008b56:	ea40 0401 	orr.w	r4, r0, r1
 8008b5a:	e7db      	b.n	8008b14 <__b2d+0x50>
 8008b5c:	ea46 0501 	orr.w	r5, r6, r1
 8008b60:	4614      	mov	r4, r2
 8008b62:	e7d7      	b.n	8008b14 <__b2d+0x50>
 8008b64:	3ff00000 	.word	0x3ff00000

08008b68 <__d2b>:
 8008b68:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008b6c:	461c      	mov	r4, r3
 8008b6e:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8008b72:	2101      	movs	r1, #1
 8008b74:	4690      	mov	r8, r2
 8008b76:	f7ff fcb6 	bl	80084e6 <_Balloc>
 8008b7a:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8008b7e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8008b82:	4607      	mov	r7, r0
 8008b84:	bb34      	cbnz	r4, 8008bd4 <__d2b+0x6c>
 8008b86:	9201      	str	r2, [sp, #4]
 8008b88:	f1b8 0200 	subs.w	r2, r8, #0
 8008b8c:	d027      	beq.n	8008bde <__d2b+0x76>
 8008b8e:	a802      	add	r0, sp, #8
 8008b90:	f840 2d08 	str.w	r2, [r0, #-8]!
 8008b94:	f7ff fd8a 	bl	80086ac <__lo0bits>
 8008b98:	9900      	ldr	r1, [sp, #0]
 8008b9a:	b1f0      	cbz	r0, 8008bda <__d2b+0x72>
 8008b9c:	9a01      	ldr	r2, [sp, #4]
 8008b9e:	f1c0 0320 	rsb	r3, r0, #32
 8008ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ba6:	430b      	orrs	r3, r1
 8008ba8:	40c2      	lsrs	r2, r0
 8008baa:	617b      	str	r3, [r7, #20]
 8008bac:	9201      	str	r2, [sp, #4]
 8008bae:	9b01      	ldr	r3, [sp, #4]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	bf14      	ite	ne
 8008bb4:	2102      	movne	r1, #2
 8008bb6:	2101      	moveq	r1, #1
 8008bb8:	61bb      	str	r3, [r7, #24]
 8008bba:	6139      	str	r1, [r7, #16]
 8008bbc:	b1c4      	cbz	r4, 8008bf0 <__d2b+0x88>
 8008bbe:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008bc2:	4404      	add	r4, r0
 8008bc4:	6034      	str	r4, [r6, #0]
 8008bc6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008bca:	6028      	str	r0, [r5, #0]
 8008bcc:	4638      	mov	r0, r7
 8008bce:	b002      	add	sp, #8
 8008bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bd4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008bd8:	e7d5      	b.n	8008b86 <__d2b+0x1e>
 8008bda:	6179      	str	r1, [r7, #20]
 8008bdc:	e7e7      	b.n	8008bae <__d2b+0x46>
 8008bde:	a801      	add	r0, sp, #4
 8008be0:	f7ff fd64 	bl	80086ac <__lo0bits>
 8008be4:	2101      	movs	r1, #1
 8008be6:	9b01      	ldr	r3, [sp, #4]
 8008be8:	6139      	str	r1, [r7, #16]
 8008bea:	617b      	str	r3, [r7, #20]
 8008bec:	3020      	adds	r0, #32
 8008bee:	e7e5      	b.n	8008bbc <__d2b+0x54>
 8008bf0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008bf4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008bf8:	6030      	str	r0, [r6, #0]
 8008bfa:	6918      	ldr	r0, [r3, #16]
 8008bfc:	f7ff fd37 	bl	800866e <__hi0bits>
 8008c00:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008c04:	e7e1      	b.n	8008bca <__d2b+0x62>

08008c06 <__ratio>:
 8008c06:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c0a:	4688      	mov	r8, r1
 8008c0c:	4669      	mov	r1, sp
 8008c0e:	4681      	mov	r9, r0
 8008c10:	f7ff ff58 	bl	8008ac4 <__b2d>
 8008c14:	468b      	mov	fp, r1
 8008c16:	4606      	mov	r6, r0
 8008c18:	460f      	mov	r7, r1
 8008c1a:	4640      	mov	r0, r8
 8008c1c:	a901      	add	r1, sp, #4
 8008c1e:	f7ff ff51 	bl	8008ac4 <__b2d>
 8008c22:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008c26:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008c2a:	460d      	mov	r5, r1
 8008c2c:	eba3 0c02 	sub.w	ip, r3, r2
 8008c30:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008c34:	1a9b      	subs	r3, r3, r2
 8008c36:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	bfd5      	itete	le
 8008c3e:	460a      	movle	r2, r1
 8008c40:	463a      	movgt	r2, r7
 8008c42:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008c46:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8008c4a:	bfd8      	it	le
 8008c4c:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 8008c50:	462b      	mov	r3, r5
 8008c52:	4602      	mov	r2, r0
 8008c54:	4659      	mov	r1, fp
 8008c56:	4630      	mov	r0, r6
 8008c58:	f7f7 fd68 	bl	800072c <__aeabi_ddiv>
 8008c5c:	b003      	add	sp, #12
 8008c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008c62 <__copybits>:
 8008c62:	3901      	subs	r1, #1
 8008c64:	b510      	push	{r4, lr}
 8008c66:	1149      	asrs	r1, r1, #5
 8008c68:	6914      	ldr	r4, [r2, #16]
 8008c6a:	3101      	adds	r1, #1
 8008c6c:	f102 0314 	add.w	r3, r2, #20
 8008c70:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008c74:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008c78:	42a3      	cmp	r3, r4
 8008c7a:	4602      	mov	r2, r0
 8008c7c:	d303      	bcc.n	8008c86 <__copybits+0x24>
 8008c7e:	2300      	movs	r3, #0
 8008c80:	428a      	cmp	r2, r1
 8008c82:	d305      	bcc.n	8008c90 <__copybits+0x2e>
 8008c84:	bd10      	pop	{r4, pc}
 8008c86:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c8a:	f840 2b04 	str.w	r2, [r0], #4
 8008c8e:	e7f3      	b.n	8008c78 <__copybits+0x16>
 8008c90:	f842 3b04 	str.w	r3, [r2], #4
 8008c94:	e7f4      	b.n	8008c80 <__copybits+0x1e>

08008c96 <__any_on>:
 8008c96:	f100 0214 	add.w	r2, r0, #20
 8008c9a:	6900      	ldr	r0, [r0, #16]
 8008c9c:	114b      	asrs	r3, r1, #5
 8008c9e:	4298      	cmp	r0, r3
 8008ca0:	b510      	push	{r4, lr}
 8008ca2:	db11      	blt.n	8008cc8 <__any_on+0x32>
 8008ca4:	dd0a      	ble.n	8008cbc <__any_on+0x26>
 8008ca6:	f011 011f 	ands.w	r1, r1, #31
 8008caa:	d007      	beq.n	8008cbc <__any_on+0x26>
 8008cac:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008cb0:	fa24 f001 	lsr.w	r0, r4, r1
 8008cb4:	fa00 f101 	lsl.w	r1, r0, r1
 8008cb8:	428c      	cmp	r4, r1
 8008cba:	d10b      	bne.n	8008cd4 <__any_on+0x3e>
 8008cbc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d803      	bhi.n	8008ccc <__any_on+0x36>
 8008cc4:	2000      	movs	r0, #0
 8008cc6:	bd10      	pop	{r4, pc}
 8008cc8:	4603      	mov	r3, r0
 8008cca:	e7f7      	b.n	8008cbc <__any_on+0x26>
 8008ccc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008cd0:	2900      	cmp	r1, #0
 8008cd2:	d0f5      	beq.n	8008cc0 <__any_on+0x2a>
 8008cd4:	2001      	movs	r0, #1
 8008cd6:	e7f6      	b.n	8008cc6 <__any_on+0x30>

08008cd8 <_calloc_r>:
 8008cd8:	b538      	push	{r3, r4, r5, lr}
 8008cda:	fb02 f401 	mul.w	r4, r2, r1
 8008cde:	4621      	mov	r1, r4
 8008ce0:	f000 f808 	bl	8008cf4 <_malloc_r>
 8008ce4:	4605      	mov	r5, r0
 8008ce6:	b118      	cbz	r0, 8008cf0 <_calloc_r+0x18>
 8008ce8:	4622      	mov	r2, r4
 8008cea:	2100      	movs	r1, #0
 8008cec:	f7fd ff96 	bl	8006c1c <memset>
 8008cf0:	4628      	mov	r0, r5
 8008cf2:	bd38      	pop	{r3, r4, r5, pc}

08008cf4 <_malloc_r>:
 8008cf4:	b570      	push	{r4, r5, r6, lr}
 8008cf6:	1ccd      	adds	r5, r1, #3
 8008cf8:	f025 0503 	bic.w	r5, r5, #3
 8008cfc:	3508      	adds	r5, #8
 8008cfe:	2d0c      	cmp	r5, #12
 8008d00:	bf38      	it	cc
 8008d02:	250c      	movcc	r5, #12
 8008d04:	2d00      	cmp	r5, #0
 8008d06:	4606      	mov	r6, r0
 8008d08:	db01      	blt.n	8008d0e <_malloc_r+0x1a>
 8008d0a:	42a9      	cmp	r1, r5
 8008d0c:	d903      	bls.n	8008d16 <_malloc_r+0x22>
 8008d0e:	230c      	movs	r3, #12
 8008d10:	6033      	str	r3, [r6, #0]
 8008d12:	2000      	movs	r0, #0
 8008d14:	bd70      	pop	{r4, r5, r6, pc}
 8008d16:	f000 ff66 	bl	8009be6 <__malloc_lock>
 8008d1a:	4a21      	ldr	r2, [pc, #132]	; (8008da0 <_malloc_r+0xac>)
 8008d1c:	6814      	ldr	r4, [r2, #0]
 8008d1e:	4621      	mov	r1, r4
 8008d20:	b991      	cbnz	r1, 8008d48 <_malloc_r+0x54>
 8008d22:	4c20      	ldr	r4, [pc, #128]	; (8008da4 <_malloc_r+0xb0>)
 8008d24:	6823      	ldr	r3, [r4, #0]
 8008d26:	b91b      	cbnz	r3, 8008d30 <_malloc_r+0x3c>
 8008d28:	4630      	mov	r0, r6
 8008d2a:	f000 fe19 	bl	8009960 <_sbrk_r>
 8008d2e:	6020      	str	r0, [r4, #0]
 8008d30:	4629      	mov	r1, r5
 8008d32:	4630      	mov	r0, r6
 8008d34:	f000 fe14 	bl	8009960 <_sbrk_r>
 8008d38:	1c43      	adds	r3, r0, #1
 8008d3a:	d124      	bne.n	8008d86 <_malloc_r+0x92>
 8008d3c:	230c      	movs	r3, #12
 8008d3e:	4630      	mov	r0, r6
 8008d40:	6033      	str	r3, [r6, #0]
 8008d42:	f000 ff51 	bl	8009be8 <__malloc_unlock>
 8008d46:	e7e4      	b.n	8008d12 <_malloc_r+0x1e>
 8008d48:	680b      	ldr	r3, [r1, #0]
 8008d4a:	1b5b      	subs	r3, r3, r5
 8008d4c:	d418      	bmi.n	8008d80 <_malloc_r+0x8c>
 8008d4e:	2b0b      	cmp	r3, #11
 8008d50:	d90f      	bls.n	8008d72 <_malloc_r+0x7e>
 8008d52:	600b      	str	r3, [r1, #0]
 8008d54:	18cc      	adds	r4, r1, r3
 8008d56:	50cd      	str	r5, [r1, r3]
 8008d58:	4630      	mov	r0, r6
 8008d5a:	f000 ff45 	bl	8009be8 <__malloc_unlock>
 8008d5e:	f104 000b 	add.w	r0, r4, #11
 8008d62:	1d23      	adds	r3, r4, #4
 8008d64:	f020 0007 	bic.w	r0, r0, #7
 8008d68:	1ac3      	subs	r3, r0, r3
 8008d6a:	d0d3      	beq.n	8008d14 <_malloc_r+0x20>
 8008d6c:	425a      	negs	r2, r3
 8008d6e:	50e2      	str	r2, [r4, r3]
 8008d70:	e7d0      	b.n	8008d14 <_malloc_r+0x20>
 8008d72:	684b      	ldr	r3, [r1, #4]
 8008d74:	428c      	cmp	r4, r1
 8008d76:	bf16      	itet	ne
 8008d78:	6063      	strne	r3, [r4, #4]
 8008d7a:	6013      	streq	r3, [r2, #0]
 8008d7c:	460c      	movne	r4, r1
 8008d7e:	e7eb      	b.n	8008d58 <_malloc_r+0x64>
 8008d80:	460c      	mov	r4, r1
 8008d82:	6849      	ldr	r1, [r1, #4]
 8008d84:	e7cc      	b.n	8008d20 <_malloc_r+0x2c>
 8008d86:	1cc4      	adds	r4, r0, #3
 8008d88:	f024 0403 	bic.w	r4, r4, #3
 8008d8c:	42a0      	cmp	r0, r4
 8008d8e:	d005      	beq.n	8008d9c <_malloc_r+0xa8>
 8008d90:	1a21      	subs	r1, r4, r0
 8008d92:	4630      	mov	r0, r6
 8008d94:	f000 fde4 	bl	8009960 <_sbrk_r>
 8008d98:	3001      	adds	r0, #1
 8008d9a:	d0cf      	beq.n	8008d3c <_malloc_r+0x48>
 8008d9c:	6025      	str	r5, [r4, #0]
 8008d9e:	e7db      	b.n	8008d58 <_malloc_r+0x64>
 8008da0:	20000250 	.word	0x20000250
 8008da4:	20000254 	.word	0x20000254

08008da8 <__ssputs_r>:
 8008da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dac:	688e      	ldr	r6, [r1, #8]
 8008dae:	4682      	mov	sl, r0
 8008db0:	429e      	cmp	r6, r3
 8008db2:	460c      	mov	r4, r1
 8008db4:	4690      	mov	r8, r2
 8008db6:	4699      	mov	r9, r3
 8008db8:	d837      	bhi.n	8008e2a <__ssputs_r+0x82>
 8008dba:	898a      	ldrh	r2, [r1, #12]
 8008dbc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008dc0:	d031      	beq.n	8008e26 <__ssputs_r+0x7e>
 8008dc2:	2302      	movs	r3, #2
 8008dc4:	6825      	ldr	r5, [r4, #0]
 8008dc6:	6909      	ldr	r1, [r1, #16]
 8008dc8:	1a6f      	subs	r7, r5, r1
 8008dca:	6965      	ldr	r5, [r4, #20]
 8008dcc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008dd0:	fb95 f5f3 	sdiv	r5, r5, r3
 8008dd4:	f109 0301 	add.w	r3, r9, #1
 8008dd8:	443b      	add	r3, r7
 8008dda:	429d      	cmp	r5, r3
 8008ddc:	bf38      	it	cc
 8008dde:	461d      	movcc	r5, r3
 8008de0:	0553      	lsls	r3, r2, #21
 8008de2:	d530      	bpl.n	8008e46 <__ssputs_r+0x9e>
 8008de4:	4629      	mov	r1, r5
 8008de6:	f7ff ff85 	bl	8008cf4 <_malloc_r>
 8008dea:	4606      	mov	r6, r0
 8008dec:	b950      	cbnz	r0, 8008e04 <__ssputs_r+0x5c>
 8008dee:	230c      	movs	r3, #12
 8008df0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008df4:	f8ca 3000 	str.w	r3, [sl]
 8008df8:	89a3      	ldrh	r3, [r4, #12]
 8008dfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008dfe:	81a3      	strh	r3, [r4, #12]
 8008e00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e04:	463a      	mov	r2, r7
 8008e06:	6921      	ldr	r1, [r4, #16]
 8008e08:	f7ff fb62 	bl	80084d0 <memcpy>
 8008e0c:	89a3      	ldrh	r3, [r4, #12]
 8008e0e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008e12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e16:	81a3      	strh	r3, [r4, #12]
 8008e18:	6126      	str	r6, [r4, #16]
 8008e1a:	443e      	add	r6, r7
 8008e1c:	6026      	str	r6, [r4, #0]
 8008e1e:	464e      	mov	r6, r9
 8008e20:	6165      	str	r5, [r4, #20]
 8008e22:	1bed      	subs	r5, r5, r7
 8008e24:	60a5      	str	r5, [r4, #8]
 8008e26:	454e      	cmp	r6, r9
 8008e28:	d900      	bls.n	8008e2c <__ssputs_r+0x84>
 8008e2a:	464e      	mov	r6, r9
 8008e2c:	4632      	mov	r2, r6
 8008e2e:	4641      	mov	r1, r8
 8008e30:	6820      	ldr	r0, [r4, #0]
 8008e32:	f000 febf 	bl	8009bb4 <memmove>
 8008e36:	68a3      	ldr	r3, [r4, #8]
 8008e38:	2000      	movs	r0, #0
 8008e3a:	1b9b      	subs	r3, r3, r6
 8008e3c:	60a3      	str	r3, [r4, #8]
 8008e3e:	6823      	ldr	r3, [r4, #0]
 8008e40:	441e      	add	r6, r3
 8008e42:	6026      	str	r6, [r4, #0]
 8008e44:	e7dc      	b.n	8008e00 <__ssputs_r+0x58>
 8008e46:	462a      	mov	r2, r5
 8008e48:	f000 ff1c 	bl	8009c84 <_realloc_r>
 8008e4c:	4606      	mov	r6, r0
 8008e4e:	2800      	cmp	r0, #0
 8008e50:	d1e2      	bne.n	8008e18 <__ssputs_r+0x70>
 8008e52:	6921      	ldr	r1, [r4, #16]
 8008e54:	4650      	mov	r0, sl
 8008e56:	f000 fec9 	bl	8009bec <_free_r>
 8008e5a:	e7c8      	b.n	8008dee <__ssputs_r+0x46>

08008e5c <_svfiprintf_r>:
 8008e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e60:	461d      	mov	r5, r3
 8008e62:	898b      	ldrh	r3, [r1, #12]
 8008e64:	b09d      	sub	sp, #116	; 0x74
 8008e66:	061f      	lsls	r7, r3, #24
 8008e68:	4680      	mov	r8, r0
 8008e6a:	460c      	mov	r4, r1
 8008e6c:	4616      	mov	r6, r2
 8008e6e:	d50f      	bpl.n	8008e90 <_svfiprintf_r+0x34>
 8008e70:	690b      	ldr	r3, [r1, #16]
 8008e72:	b96b      	cbnz	r3, 8008e90 <_svfiprintf_r+0x34>
 8008e74:	2140      	movs	r1, #64	; 0x40
 8008e76:	f7ff ff3d 	bl	8008cf4 <_malloc_r>
 8008e7a:	6020      	str	r0, [r4, #0]
 8008e7c:	6120      	str	r0, [r4, #16]
 8008e7e:	b928      	cbnz	r0, 8008e8c <_svfiprintf_r+0x30>
 8008e80:	230c      	movs	r3, #12
 8008e82:	f8c8 3000 	str.w	r3, [r8]
 8008e86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e8a:	e0c8      	b.n	800901e <_svfiprintf_r+0x1c2>
 8008e8c:	2340      	movs	r3, #64	; 0x40
 8008e8e:	6163      	str	r3, [r4, #20]
 8008e90:	2300      	movs	r3, #0
 8008e92:	9309      	str	r3, [sp, #36]	; 0x24
 8008e94:	2320      	movs	r3, #32
 8008e96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e9a:	2330      	movs	r3, #48	; 0x30
 8008e9c:	f04f 0b01 	mov.w	fp, #1
 8008ea0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ea4:	9503      	str	r5, [sp, #12]
 8008ea6:	4637      	mov	r7, r6
 8008ea8:	463d      	mov	r5, r7
 8008eaa:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008eae:	b10b      	cbz	r3, 8008eb4 <_svfiprintf_r+0x58>
 8008eb0:	2b25      	cmp	r3, #37	; 0x25
 8008eb2:	d13e      	bne.n	8008f32 <_svfiprintf_r+0xd6>
 8008eb4:	ebb7 0a06 	subs.w	sl, r7, r6
 8008eb8:	d00b      	beq.n	8008ed2 <_svfiprintf_r+0x76>
 8008eba:	4653      	mov	r3, sl
 8008ebc:	4632      	mov	r2, r6
 8008ebe:	4621      	mov	r1, r4
 8008ec0:	4640      	mov	r0, r8
 8008ec2:	f7ff ff71 	bl	8008da8 <__ssputs_r>
 8008ec6:	3001      	adds	r0, #1
 8008ec8:	f000 80a4 	beq.w	8009014 <_svfiprintf_r+0x1b8>
 8008ecc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ece:	4453      	add	r3, sl
 8008ed0:	9309      	str	r3, [sp, #36]	; 0x24
 8008ed2:	783b      	ldrb	r3, [r7, #0]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	f000 809d 	beq.w	8009014 <_svfiprintf_r+0x1b8>
 8008eda:	2300      	movs	r3, #0
 8008edc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ee0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ee4:	9304      	str	r3, [sp, #16]
 8008ee6:	9307      	str	r3, [sp, #28]
 8008ee8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008eec:	931a      	str	r3, [sp, #104]	; 0x68
 8008eee:	462f      	mov	r7, r5
 8008ef0:	2205      	movs	r2, #5
 8008ef2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008ef6:	4850      	ldr	r0, [pc, #320]	; (8009038 <_svfiprintf_r+0x1dc>)
 8008ef8:	f000 fe4e 	bl	8009b98 <memchr>
 8008efc:	9b04      	ldr	r3, [sp, #16]
 8008efe:	b9d0      	cbnz	r0, 8008f36 <_svfiprintf_r+0xda>
 8008f00:	06d9      	lsls	r1, r3, #27
 8008f02:	bf44      	itt	mi
 8008f04:	2220      	movmi	r2, #32
 8008f06:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008f0a:	071a      	lsls	r2, r3, #28
 8008f0c:	bf44      	itt	mi
 8008f0e:	222b      	movmi	r2, #43	; 0x2b
 8008f10:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008f14:	782a      	ldrb	r2, [r5, #0]
 8008f16:	2a2a      	cmp	r2, #42	; 0x2a
 8008f18:	d015      	beq.n	8008f46 <_svfiprintf_r+0xea>
 8008f1a:	462f      	mov	r7, r5
 8008f1c:	2000      	movs	r0, #0
 8008f1e:	250a      	movs	r5, #10
 8008f20:	9a07      	ldr	r2, [sp, #28]
 8008f22:	4639      	mov	r1, r7
 8008f24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f28:	3b30      	subs	r3, #48	; 0x30
 8008f2a:	2b09      	cmp	r3, #9
 8008f2c:	d94d      	bls.n	8008fca <_svfiprintf_r+0x16e>
 8008f2e:	b1b8      	cbz	r0, 8008f60 <_svfiprintf_r+0x104>
 8008f30:	e00f      	b.n	8008f52 <_svfiprintf_r+0xf6>
 8008f32:	462f      	mov	r7, r5
 8008f34:	e7b8      	b.n	8008ea8 <_svfiprintf_r+0x4c>
 8008f36:	4a40      	ldr	r2, [pc, #256]	; (8009038 <_svfiprintf_r+0x1dc>)
 8008f38:	463d      	mov	r5, r7
 8008f3a:	1a80      	subs	r0, r0, r2
 8008f3c:	fa0b f000 	lsl.w	r0, fp, r0
 8008f40:	4318      	orrs	r0, r3
 8008f42:	9004      	str	r0, [sp, #16]
 8008f44:	e7d3      	b.n	8008eee <_svfiprintf_r+0x92>
 8008f46:	9a03      	ldr	r2, [sp, #12]
 8008f48:	1d11      	adds	r1, r2, #4
 8008f4a:	6812      	ldr	r2, [r2, #0]
 8008f4c:	9103      	str	r1, [sp, #12]
 8008f4e:	2a00      	cmp	r2, #0
 8008f50:	db01      	blt.n	8008f56 <_svfiprintf_r+0xfa>
 8008f52:	9207      	str	r2, [sp, #28]
 8008f54:	e004      	b.n	8008f60 <_svfiprintf_r+0x104>
 8008f56:	4252      	negs	r2, r2
 8008f58:	f043 0302 	orr.w	r3, r3, #2
 8008f5c:	9207      	str	r2, [sp, #28]
 8008f5e:	9304      	str	r3, [sp, #16]
 8008f60:	783b      	ldrb	r3, [r7, #0]
 8008f62:	2b2e      	cmp	r3, #46	; 0x2e
 8008f64:	d10c      	bne.n	8008f80 <_svfiprintf_r+0x124>
 8008f66:	787b      	ldrb	r3, [r7, #1]
 8008f68:	2b2a      	cmp	r3, #42	; 0x2a
 8008f6a:	d133      	bne.n	8008fd4 <_svfiprintf_r+0x178>
 8008f6c:	9b03      	ldr	r3, [sp, #12]
 8008f6e:	3702      	adds	r7, #2
 8008f70:	1d1a      	adds	r2, r3, #4
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	9203      	str	r2, [sp, #12]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	bfb8      	it	lt
 8008f7a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008f7e:	9305      	str	r3, [sp, #20]
 8008f80:	4d2e      	ldr	r5, [pc, #184]	; (800903c <_svfiprintf_r+0x1e0>)
 8008f82:	2203      	movs	r2, #3
 8008f84:	7839      	ldrb	r1, [r7, #0]
 8008f86:	4628      	mov	r0, r5
 8008f88:	f000 fe06 	bl	8009b98 <memchr>
 8008f8c:	b138      	cbz	r0, 8008f9e <_svfiprintf_r+0x142>
 8008f8e:	2340      	movs	r3, #64	; 0x40
 8008f90:	1b40      	subs	r0, r0, r5
 8008f92:	fa03 f000 	lsl.w	r0, r3, r0
 8008f96:	9b04      	ldr	r3, [sp, #16]
 8008f98:	3701      	adds	r7, #1
 8008f9a:	4303      	orrs	r3, r0
 8008f9c:	9304      	str	r3, [sp, #16]
 8008f9e:	7839      	ldrb	r1, [r7, #0]
 8008fa0:	2206      	movs	r2, #6
 8008fa2:	4827      	ldr	r0, [pc, #156]	; (8009040 <_svfiprintf_r+0x1e4>)
 8008fa4:	1c7e      	adds	r6, r7, #1
 8008fa6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008faa:	f000 fdf5 	bl	8009b98 <memchr>
 8008fae:	2800      	cmp	r0, #0
 8008fb0:	d038      	beq.n	8009024 <_svfiprintf_r+0x1c8>
 8008fb2:	4b24      	ldr	r3, [pc, #144]	; (8009044 <_svfiprintf_r+0x1e8>)
 8008fb4:	bb13      	cbnz	r3, 8008ffc <_svfiprintf_r+0x1a0>
 8008fb6:	9b03      	ldr	r3, [sp, #12]
 8008fb8:	3307      	adds	r3, #7
 8008fba:	f023 0307 	bic.w	r3, r3, #7
 8008fbe:	3308      	adds	r3, #8
 8008fc0:	9303      	str	r3, [sp, #12]
 8008fc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fc4:	444b      	add	r3, r9
 8008fc6:	9309      	str	r3, [sp, #36]	; 0x24
 8008fc8:	e76d      	b.n	8008ea6 <_svfiprintf_r+0x4a>
 8008fca:	fb05 3202 	mla	r2, r5, r2, r3
 8008fce:	2001      	movs	r0, #1
 8008fd0:	460f      	mov	r7, r1
 8008fd2:	e7a6      	b.n	8008f22 <_svfiprintf_r+0xc6>
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	250a      	movs	r5, #10
 8008fd8:	4619      	mov	r1, r3
 8008fda:	3701      	adds	r7, #1
 8008fdc:	9305      	str	r3, [sp, #20]
 8008fde:	4638      	mov	r0, r7
 8008fe0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008fe4:	3a30      	subs	r2, #48	; 0x30
 8008fe6:	2a09      	cmp	r2, #9
 8008fe8:	d903      	bls.n	8008ff2 <_svfiprintf_r+0x196>
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d0c8      	beq.n	8008f80 <_svfiprintf_r+0x124>
 8008fee:	9105      	str	r1, [sp, #20]
 8008ff0:	e7c6      	b.n	8008f80 <_svfiprintf_r+0x124>
 8008ff2:	fb05 2101 	mla	r1, r5, r1, r2
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	4607      	mov	r7, r0
 8008ffa:	e7f0      	b.n	8008fde <_svfiprintf_r+0x182>
 8008ffc:	ab03      	add	r3, sp, #12
 8008ffe:	9300      	str	r3, [sp, #0]
 8009000:	4622      	mov	r2, r4
 8009002:	4b11      	ldr	r3, [pc, #68]	; (8009048 <_svfiprintf_r+0x1ec>)
 8009004:	a904      	add	r1, sp, #16
 8009006:	4640      	mov	r0, r8
 8009008:	f3af 8000 	nop.w
 800900c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009010:	4681      	mov	r9, r0
 8009012:	d1d6      	bne.n	8008fc2 <_svfiprintf_r+0x166>
 8009014:	89a3      	ldrh	r3, [r4, #12]
 8009016:	065b      	lsls	r3, r3, #25
 8009018:	f53f af35 	bmi.w	8008e86 <_svfiprintf_r+0x2a>
 800901c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800901e:	b01d      	add	sp, #116	; 0x74
 8009020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009024:	ab03      	add	r3, sp, #12
 8009026:	9300      	str	r3, [sp, #0]
 8009028:	4622      	mov	r2, r4
 800902a:	4b07      	ldr	r3, [pc, #28]	; (8009048 <_svfiprintf_r+0x1ec>)
 800902c:	a904      	add	r1, sp, #16
 800902e:	4640      	mov	r0, r8
 8009030:	f000 fa2c 	bl	800948c <_printf_i>
 8009034:	e7ea      	b.n	800900c <_svfiprintf_r+0x1b0>
 8009036:	bf00      	nop
 8009038:	08009ffc 	.word	0x08009ffc
 800903c:	0800a002 	.word	0x0800a002
 8009040:	0800a006 	.word	0x0800a006
 8009044:	00000000 	.word	0x00000000
 8009048:	08008da9 	.word	0x08008da9

0800904c <_sungetc_r>:
 800904c:	b538      	push	{r3, r4, r5, lr}
 800904e:	1c4b      	adds	r3, r1, #1
 8009050:	4614      	mov	r4, r2
 8009052:	d103      	bne.n	800905c <_sungetc_r+0x10>
 8009054:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009058:	4628      	mov	r0, r5
 800905a:	bd38      	pop	{r3, r4, r5, pc}
 800905c:	8993      	ldrh	r3, [r2, #12]
 800905e:	b2cd      	uxtb	r5, r1
 8009060:	f023 0320 	bic.w	r3, r3, #32
 8009064:	8193      	strh	r3, [r2, #12]
 8009066:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009068:	6852      	ldr	r2, [r2, #4]
 800906a:	b18b      	cbz	r3, 8009090 <_sungetc_r+0x44>
 800906c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800906e:	4293      	cmp	r3, r2
 8009070:	dd08      	ble.n	8009084 <_sungetc_r+0x38>
 8009072:	6823      	ldr	r3, [r4, #0]
 8009074:	1e5a      	subs	r2, r3, #1
 8009076:	6022      	str	r2, [r4, #0]
 8009078:	f803 5c01 	strb.w	r5, [r3, #-1]
 800907c:	6863      	ldr	r3, [r4, #4]
 800907e:	3301      	adds	r3, #1
 8009080:	6063      	str	r3, [r4, #4]
 8009082:	e7e9      	b.n	8009058 <_sungetc_r+0xc>
 8009084:	4621      	mov	r1, r4
 8009086:	f000 fd39 	bl	8009afc <__submore>
 800908a:	2800      	cmp	r0, #0
 800908c:	d0f1      	beq.n	8009072 <_sungetc_r+0x26>
 800908e:	e7e1      	b.n	8009054 <_sungetc_r+0x8>
 8009090:	6921      	ldr	r1, [r4, #16]
 8009092:	6823      	ldr	r3, [r4, #0]
 8009094:	b151      	cbz	r1, 80090ac <_sungetc_r+0x60>
 8009096:	4299      	cmp	r1, r3
 8009098:	d208      	bcs.n	80090ac <_sungetc_r+0x60>
 800909a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800909e:	42a9      	cmp	r1, r5
 80090a0:	d104      	bne.n	80090ac <_sungetc_r+0x60>
 80090a2:	3b01      	subs	r3, #1
 80090a4:	3201      	adds	r2, #1
 80090a6:	6023      	str	r3, [r4, #0]
 80090a8:	6062      	str	r2, [r4, #4]
 80090aa:	e7d5      	b.n	8009058 <_sungetc_r+0xc>
 80090ac:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80090b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80090b4:	6363      	str	r3, [r4, #52]	; 0x34
 80090b6:	2303      	movs	r3, #3
 80090b8:	63a3      	str	r3, [r4, #56]	; 0x38
 80090ba:	4623      	mov	r3, r4
 80090bc:	f803 5f46 	strb.w	r5, [r3, #70]!
 80090c0:	6023      	str	r3, [r4, #0]
 80090c2:	2301      	movs	r3, #1
 80090c4:	e7dc      	b.n	8009080 <_sungetc_r+0x34>

080090c6 <__ssrefill_r>:
 80090c6:	b510      	push	{r4, lr}
 80090c8:	460c      	mov	r4, r1
 80090ca:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80090cc:	b169      	cbz	r1, 80090ea <__ssrefill_r+0x24>
 80090ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80090d2:	4299      	cmp	r1, r3
 80090d4:	d001      	beq.n	80090da <__ssrefill_r+0x14>
 80090d6:	f000 fd89 	bl	8009bec <_free_r>
 80090da:	2000      	movs	r0, #0
 80090dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80090de:	6360      	str	r0, [r4, #52]	; 0x34
 80090e0:	6063      	str	r3, [r4, #4]
 80090e2:	b113      	cbz	r3, 80090ea <__ssrefill_r+0x24>
 80090e4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80090e6:	6023      	str	r3, [r4, #0]
 80090e8:	bd10      	pop	{r4, pc}
 80090ea:	6923      	ldr	r3, [r4, #16]
 80090ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090f0:	6023      	str	r3, [r4, #0]
 80090f2:	2300      	movs	r3, #0
 80090f4:	6063      	str	r3, [r4, #4]
 80090f6:	89a3      	ldrh	r3, [r4, #12]
 80090f8:	f043 0320 	orr.w	r3, r3, #32
 80090fc:	81a3      	strh	r3, [r4, #12]
 80090fe:	e7f3      	b.n	80090e8 <__ssrefill_r+0x22>

08009100 <__ssvfiscanf_r>:
 8009100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009104:	460c      	mov	r4, r1
 8009106:	2100      	movs	r1, #0
 8009108:	4606      	mov	r6, r0
 800910a:	4692      	mov	sl, r2
 800910c:	270a      	movs	r7, #10
 800910e:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8009112:	9144      	str	r1, [sp, #272]	; 0x110
 8009114:	9145      	str	r1, [sp, #276]	; 0x114
 8009116:	499e      	ldr	r1, [pc, #632]	; (8009390 <__ssvfiscanf_r+0x290>)
 8009118:	f10d 0804 	add.w	r8, sp, #4
 800911c:	91a0      	str	r1, [sp, #640]	; 0x280
 800911e:	499d      	ldr	r1, [pc, #628]	; (8009394 <__ssvfiscanf_r+0x294>)
 8009120:	f8df 9274 	ldr.w	r9, [pc, #628]	; 8009398 <__ssvfiscanf_r+0x298>
 8009124:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8009128:	91a1      	str	r1, [sp, #644]	; 0x284
 800912a:	9300      	str	r3, [sp, #0]
 800912c:	f89a 3000 	ldrb.w	r3, [sl]
 8009130:	2b00      	cmp	r3, #0
 8009132:	f000 812a 	beq.w	800938a <__ssvfiscanf_r+0x28a>
 8009136:	4655      	mov	r5, sl
 8009138:	f7ff f9a8 	bl	800848c <__locale_ctype_ptr>
 800913c:	f815 bb01 	ldrb.w	fp, [r5], #1
 8009140:	4458      	add	r0, fp
 8009142:	7843      	ldrb	r3, [r0, #1]
 8009144:	f013 0308 	ands.w	r3, r3, #8
 8009148:	d01c      	beq.n	8009184 <__ssvfiscanf_r+0x84>
 800914a:	6863      	ldr	r3, [r4, #4]
 800914c:	2b00      	cmp	r3, #0
 800914e:	dd12      	ble.n	8009176 <__ssvfiscanf_r+0x76>
 8009150:	f7ff f99c 	bl	800848c <__locale_ctype_ptr>
 8009154:	6823      	ldr	r3, [r4, #0]
 8009156:	781a      	ldrb	r2, [r3, #0]
 8009158:	4410      	add	r0, r2
 800915a:	7842      	ldrb	r2, [r0, #1]
 800915c:	0712      	lsls	r2, r2, #28
 800915e:	d401      	bmi.n	8009164 <__ssvfiscanf_r+0x64>
 8009160:	46aa      	mov	sl, r5
 8009162:	e7e3      	b.n	800912c <__ssvfiscanf_r+0x2c>
 8009164:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009166:	3301      	adds	r3, #1
 8009168:	3201      	adds	r2, #1
 800916a:	9245      	str	r2, [sp, #276]	; 0x114
 800916c:	6862      	ldr	r2, [r4, #4]
 800916e:	6023      	str	r3, [r4, #0]
 8009170:	3a01      	subs	r2, #1
 8009172:	6062      	str	r2, [r4, #4]
 8009174:	e7e9      	b.n	800914a <__ssvfiscanf_r+0x4a>
 8009176:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009178:	4621      	mov	r1, r4
 800917a:	4630      	mov	r0, r6
 800917c:	4798      	blx	r3
 800917e:	2800      	cmp	r0, #0
 8009180:	d0e6      	beq.n	8009150 <__ssvfiscanf_r+0x50>
 8009182:	e7ed      	b.n	8009160 <__ssvfiscanf_r+0x60>
 8009184:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8009188:	f040 8082 	bne.w	8009290 <__ssvfiscanf_r+0x190>
 800918c:	9343      	str	r3, [sp, #268]	; 0x10c
 800918e:	9341      	str	r3, [sp, #260]	; 0x104
 8009190:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8009194:	2b2a      	cmp	r3, #42	; 0x2a
 8009196:	d103      	bne.n	80091a0 <__ssvfiscanf_r+0xa0>
 8009198:	2310      	movs	r3, #16
 800919a:	f10a 0502 	add.w	r5, sl, #2
 800919e:	9341      	str	r3, [sp, #260]	; 0x104
 80091a0:	46aa      	mov	sl, r5
 80091a2:	f815 1b01 	ldrb.w	r1, [r5], #1
 80091a6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80091aa:	2a09      	cmp	r2, #9
 80091ac:	d922      	bls.n	80091f4 <__ssvfiscanf_r+0xf4>
 80091ae:	2203      	movs	r2, #3
 80091b0:	4879      	ldr	r0, [pc, #484]	; (8009398 <__ssvfiscanf_r+0x298>)
 80091b2:	f000 fcf1 	bl	8009b98 <memchr>
 80091b6:	b138      	cbz	r0, 80091c8 <__ssvfiscanf_r+0xc8>
 80091b8:	eba0 0309 	sub.w	r3, r0, r9
 80091bc:	2001      	movs	r0, #1
 80091be:	46aa      	mov	sl, r5
 80091c0:	4098      	lsls	r0, r3
 80091c2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80091c4:	4318      	orrs	r0, r3
 80091c6:	9041      	str	r0, [sp, #260]	; 0x104
 80091c8:	f89a 3000 	ldrb.w	r3, [sl]
 80091cc:	f10a 0501 	add.w	r5, sl, #1
 80091d0:	2b67      	cmp	r3, #103	; 0x67
 80091d2:	d82b      	bhi.n	800922c <__ssvfiscanf_r+0x12c>
 80091d4:	2b65      	cmp	r3, #101	; 0x65
 80091d6:	f080 809f 	bcs.w	8009318 <__ssvfiscanf_r+0x218>
 80091da:	2b47      	cmp	r3, #71	; 0x47
 80091dc:	d810      	bhi.n	8009200 <__ssvfiscanf_r+0x100>
 80091de:	2b45      	cmp	r3, #69	; 0x45
 80091e0:	f080 809a 	bcs.w	8009318 <__ssvfiscanf_r+0x218>
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d06c      	beq.n	80092c2 <__ssvfiscanf_r+0x1c2>
 80091e8:	2b25      	cmp	r3, #37	; 0x25
 80091ea:	d051      	beq.n	8009290 <__ssvfiscanf_r+0x190>
 80091ec:	2303      	movs	r3, #3
 80091ee:	9742      	str	r7, [sp, #264]	; 0x108
 80091f0:	9347      	str	r3, [sp, #284]	; 0x11c
 80091f2:	e027      	b.n	8009244 <__ssvfiscanf_r+0x144>
 80091f4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80091f6:	fb07 1303 	mla	r3, r7, r3, r1
 80091fa:	3b30      	subs	r3, #48	; 0x30
 80091fc:	9343      	str	r3, [sp, #268]	; 0x10c
 80091fe:	e7cf      	b.n	80091a0 <__ssvfiscanf_r+0xa0>
 8009200:	2b5b      	cmp	r3, #91	; 0x5b
 8009202:	d06a      	beq.n	80092da <__ssvfiscanf_r+0x1da>
 8009204:	d80c      	bhi.n	8009220 <__ssvfiscanf_r+0x120>
 8009206:	2b58      	cmp	r3, #88	; 0x58
 8009208:	d1f0      	bne.n	80091ec <__ssvfiscanf_r+0xec>
 800920a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800920c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009210:	9241      	str	r2, [sp, #260]	; 0x104
 8009212:	2210      	movs	r2, #16
 8009214:	9242      	str	r2, [sp, #264]	; 0x108
 8009216:	2b6e      	cmp	r3, #110	; 0x6e
 8009218:	bf8c      	ite	hi
 800921a:	2304      	movhi	r3, #4
 800921c:	2303      	movls	r3, #3
 800921e:	e010      	b.n	8009242 <__ssvfiscanf_r+0x142>
 8009220:	2b63      	cmp	r3, #99	; 0x63
 8009222:	d065      	beq.n	80092f0 <__ssvfiscanf_r+0x1f0>
 8009224:	2b64      	cmp	r3, #100	; 0x64
 8009226:	d1e1      	bne.n	80091ec <__ssvfiscanf_r+0xec>
 8009228:	9742      	str	r7, [sp, #264]	; 0x108
 800922a:	e7f4      	b.n	8009216 <__ssvfiscanf_r+0x116>
 800922c:	2b70      	cmp	r3, #112	; 0x70
 800922e:	d04b      	beq.n	80092c8 <__ssvfiscanf_r+0x1c8>
 8009230:	d826      	bhi.n	8009280 <__ssvfiscanf_r+0x180>
 8009232:	2b6e      	cmp	r3, #110	; 0x6e
 8009234:	d062      	beq.n	80092fc <__ssvfiscanf_r+0x1fc>
 8009236:	d84c      	bhi.n	80092d2 <__ssvfiscanf_r+0x1d2>
 8009238:	2b69      	cmp	r3, #105	; 0x69
 800923a:	d1d7      	bne.n	80091ec <__ssvfiscanf_r+0xec>
 800923c:	2300      	movs	r3, #0
 800923e:	9342      	str	r3, [sp, #264]	; 0x108
 8009240:	2303      	movs	r3, #3
 8009242:	9347      	str	r3, [sp, #284]	; 0x11c
 8009244:	6863      	ldr	r3, [r4, #4]
 8009246:	2b00      	cmp	r3, #0
 8009248:	dd68      	ble.n	800931c <__ssvfiscanf_r+0x21c>
 800924a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800924c:	0659      	lsls	r1, r3, #25
 800924e:	d407      	bmi.n	8009260 <__ssvfiscanf_r+0x160>
 8009250:	f7ff f91c 	bl	800848c <__locale_ctype_ptr>
 8009254:	6823      	ldr	r3, [r4, #0]
 8009256:	781a      	ldrb	r2, [r3, #0]
 8009258:	4410      	add	r0, r2
 800925a:	7842      	ldrb	r2, [r0, #1]
 800925c:	0712      	lsls	r2, r2, #28
 800925e:	d464      	bmi.n	800932a <__ssvfiscanf_r+0x22a>
 8009260:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8009262:	2b02      	cmp	r3, #2
 8009264:	dc73      	bgt.n	800934e <__ssvfiscanf_r+0x24e>
 8009266:	466b      	mov	r3, sp
 8009268:	4622      	mov	r2, r4
 800926a:	a941      	add	r1, sp, #260	; 0x104
 800926c:	4630      	mov	r0, r6
 800926e:	f000 fa1f 	bl	80096b0 <_scanf_chars>
 8009272:	2801      	cmp	r0, #1
 8009274:	f000 8089 	beq.w	800938a <__ssvfiscanf_r+0x28a>
 8009278:	2802      	cmp	r0, #2
 800927a:	f47f af71 	bne.w	8009160 <__ssvfiscanf_r+0x60>
 800927e:	e01d      	b.n	80092bc <__ssvfiscanf_r+0x1bc>
 8009280:	2b75      	cmp	r3, #117	; 0x75
 8009282:	d0d1      	beq.n	8009228 <__ssvfiscanf_r+0x128>
 8009284:	2b78      	cmp	r3, #120	; 0x78
 8009286:	d0c0      	beq.n	800920a <__ssvfiscanf_r+0x10a>
 8009288:	2b73      	cmp	r3, #115	; 0x73
 800928a:	d1af      	bne.n	80091ec <__ssvfiscanf_r+0xec>
 800928c:	2302      	movs	r3, #2
 800928e:	e7d8      	b.n	8009242 <__ssvfiscanf_r+0x142>
 8009290:	6863      	ldr	r3, [r4, #4]
 8009292:	2b00      	cmp	r3, #0
 8009294:	dd0c      	ble.n	80092b0 <__ssvfiscanf_r+0x1b0>
 8009296:	6823      	ldr	r3, [r4, #0]
 8009298:	781a      	ldrb	r2, [r3, #0]
 800929a:	455a      	cmp	r2, fp
 800929c:	d175      	bne.n	800938a <__ssvfiscanf_r+0x28a>
 800929e:	3301      	adds	r3, #1
 80092a0:	6862      	ldr	r2, [r4, #4]
 80092a2:	6023      	str	r3, [r4, #0]
 80092a4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80092a6:	3a01      	subs	r2, #1
 80092a8:	3301      	adds	r3, #1
 80092aa:	6062      	str	r2, [r4, #4]
 80092ac:	9345      	str	r3, [sp, #276]	; 0x114
 80092ae:	e757      	b.n	8009160 <__ssvfiscanf_r+0x60>
 80092b0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80092b2:	4621      	mov	r1, r4
 80092b4:	4630      	mov	r0, r6
 80092b6:	4798      	blx	r3
 80092b8:	2800      	cmp	r0, #0
 80092ba:	d0ec      	beq.n	8009296 <__ssvfiscanf_r+0x196>
 80092bc:	9844      	ldr	r0, [sp, #272]	; 0x110
 80092be:	2800      	cmp	r0, #0
 80092c0:	d159      	bne.n	8009376 <__ssvfiscanf_r+0x276>
 80092c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80092c6:	e05c      	b.n	8009382 <__ssvfiscanf_r+0x282>
 80092c8:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80092ca:	f042 0220 	orr.w	r2, r2, #32
 80092ce:	9241      	str	r2, [sp, #260]	; 0x104
 80092d0:	e79b      	b.n	800920a <__ssvfiscanf_r+0x10a>
 80092d2:	2308      	movs	r3, #8
 80092d4:	9342      	str	r3, [sp, #264]	; 0x108
 80092d6:	2304      	movs	r3, #4
 80092d8:	e7b3      	b.n	8009242 <__ssvfiscanf_r+0x142>
 80092da:	4629      	mov	r1, r5
 80092dc:	4640      	mov	r0, r8
 80092de:	f000 fb4f 	bl	8009980 <__sccl>
 80092e2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80092e4:	4605      	mov	r5, r0
 80092e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092ea:	9341      	str	r3, [sp, #260]	; 0x104
 80092ec:	2301      	movs	r3, #1
 80092ee:	e7a8      	b.n	8009242 <__ssvfiscanf_r+0x142>
 80092f0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80092f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092f6:	9341      	str	r3, [sp, #260]	; 0x104
 80092f8:	2300      	movs	r3, #0
 80092fa:	e7a2      	b.n	8009242 <__ssvfiscanf_r+0x142>
 80092fc:	9841      	ldr	r0, [sp, #260]	; 0x104
 80092fe:	06c3      	lsls	r3, r0, #27
 8009300:	f53f af2e 	bmi.w	8009160 <__ssvfiscanf_r+0x60>
 8009304:	9b00      	ldr	r3, [sp, #0]
 8009306:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009308:	1d19      	adds	r1, r3, #4
 800930a:	9100      	str	r1, [sp, #0]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	07c0      	lsls	r0, r0, #31
 8009310:	bf4c      	ite	mi
 8009312:	801a      	strhmi	r2, [r3, #0]
 8009314:	601a      	strpl	r2, [r3, #0]
 8009316:	e723      	b.n	8009160 <__ssvfiscanf_r+0x60>
 8009318:	2305      	movs	r3, #5
 800931a:	e792      	b.n	8009242 <__ssvfiscanf_r+0x142>
 800931c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800931e:	4621      	mov	r1, r4
 8009320:	4630      	mov	r0, r6
 8009322:	4798      	blx	r3
 8009324:	2800      	cmp	r0, #0
 8009326:	d090      	beq.n	800924a <__ssvfiscanf_r+0x14a>
 8009328:	e7c8      	b.n	80092bc <__ssvfiscanf_r+0x1bc>
 800932a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800932c:	3201      	adds	r2, #1
 800932e:	9245      	str	r2, [sp, #276]	; 0x114
 8009330:	6862      	ldr	r2, [r4, #4]
 8009332:	3a01      	subs	r2, #1
 8009334:	2a00      	cmp	r2, #0
 8009336:	6062      	str	r2, [r4, #4]
 8009338:	dd02      	ble.n	8009340 <__ssvfiscanf_r+0x240>
 800933a:	3301      	adds	r3, #1
 800933c:	6023      	str	r3, [r4, #0]
 800933e:	e787      	b.n	8009250 <__ssvfiscanf_r+0x150>
 8009340:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009342:	4621      	mov	r1, r4
 8009344:	4630      	mov	r0, r6
 8009346:	4798      	blx	r3
 8009348:	2800      	cmp	r0, #0
 800934a:	d081      	beq.n	8009250 <__ssvfiscanf_r+0x150>
 800934c:	e7b6      	b.n	80092bc <__ssvfiscanf_r+0x1bc>
 800934e:	2b04      	cmp	r3, #4
 8009350:	dc06      	bgt.n	8009360 <__ssvfiscanf_r+0x260>
 8009352:	466b      	mov	r3, sp
 8009354:	4622      	mov	r2, r4
 8009356:	a941      	add	r1, sp, #260	; 0x104
 8009358:	4630      	mov	r0, r6
 800935a:	f000 fa0b 	bl	8009774 <_scanf_i>
 800935e:	e788      	b.n	8009272 <__ssvfiscanf_r+0x172>
 8009360:	4b0e      	ldr	r3, [pc, #56]	; (800939c <__ssvfiscanf_r+0x29c>)
 8009362:	2b00      	cmp	r3, #0
 8009364:	f43f aefc 	beq.w	8009160 <__ssvfiscanf_r+0x60>
 8009368:	466b      	mov	r3, sp
 800936a:	4622      	mov	r2, r4
 800936c:	a941      	add	r1, sp, #260	; 0x104
 800936e:	4630      	mov	r0, r6
 8009370:	f7fd fc5c 	bl	8006c2c <_scanf_float>
 8009374:	e77d      	b.n	8009272 <__ssvfiscanf_r+0x172>
 8009376:	89a3      	ldrh	r3, [r4, #12]
 8009378:	f013 0f40 	tst.w	r3, #64	; 0x40
 800937c:	bf18      	it	ne
 800937e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8009382:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8009386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800938a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800938c:	e7f9      	b.n	8009382 <__ssvfiscanf_r+0x282>
 800938e:	bf00      	nop
 8009390:	0800904d 	.word	0x0800904d
 8009394:	080090c7 	.word	0x080090c7
 8009398:	0800a002 	.word	0x0800a002
 800939c:	08006c2d 	.word	0x08006c2d

080093a0 <_printf_common>:
 80093a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093a4:	4691      	mov	r9, r2
 80093a6:	461f      	mov	r7, r3
 80093a8:	688a      	ldr	r2, [r1, #8]
 80093aa:	690b      	ldr	r3, [r1, #16]
 80093ac:	4606      	mov	r6, r0
 80093ae:	4293      	cmp	r3, r2
 80093b0:	bfb8      	it	lt
 80093b2:	4613      	movlt	r3, r2
 80093b4:	f8c9 3000 	str.w	r3, [r9]
 80093b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80093bc:	460c      	mov	r4, r1
 80093be:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80093c2:	b112      	cbz	r2, 80093ca <_printf_common+0x2a>
 80093c4:	3301      	adds	r3, #1
 80093c6:	f8c9 3000 	str.w	r3, [r9]
 80093ca:	6823      	ldr	r3, [r4, #0]
 80093cc:	0699      	lsls	r1, r3, #26
 80093ce:	bf42      	ittt	mi
 80093d0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80093d4:	3302      	addmi	r3, #2
 80093d6:	f8c9 3000 	strmi.w	r3, [r9]
 80093da:	6825      	ldr	r5, [r4, #0]
 80093dc:	f015 0506 	ands.w	r5, r5, #6
 80093e0:	d107      	bne.n	80093f2 <_printf_common+0x52>
 80093e2:	f104 0a19 	add.w	sl, r4, #25
 80093e6:	68e3      	ldr	r3, [r4, #12]
 80093e8:	f8d9 2000 	ldr.w	r2, [r9]
 80093ec:	1a9b      	subs	r3, r3, r2
 80093ee:	42ab      	cmp	r3, r5
 80093f0:	dc29      	bgt.n	8009446 <_printf_common+0xa6>
 80093f2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80093f6:	6822      	ldr	r2, [r4, #0]
 80093f8:	3300      	adds	r3, #0
 80093fa:	bf18      	it	ne
 80093fc:	2301      	movne	r3, #1
 80093fe:	0692      	lsls	r2, r2, #26
 8009400:	d42e      	bmi.n	8009460 <_printf_common+0xc0>
 8009402:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009406:	4639      	mov	r1, r7
 8009408:	4630      	mov	r0, r6
 800940a:	47c0      	blx	r8
 800940c:	3001      	adds	r0, #1
 800940e:	d021      	beq.n	8009454 <_printf_common+0xb4>
 8009410:	6823      	ldr	r3, [r4, #0]
 8009412:	68e5      	ldr	r5, [r4, #12]
 8009414:	f003 0306 	and.w	r3, r3, #6
 8009418:	2b04      	cmp	r3, #4
 800941a:	bf18      	it	ne
 800941c:	2500      	movne	r5, #0
 800941e:	f8d9 2000 	ldr.w	r2, [r9]
 8009422:	f04f 0900 	mov.w	r9, #0
 8009426:	bf08      	it	eq
 8009428:	1aad      	subeq	r5, r5, r2
 800942a:	68a3      	ldr	r3, [r4, #8]
 800942c:	6922      	ldr	r2, [r4, #16]
 800942e:	bf08      	it	eq
 8009430:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009434:	4293      	cmp	r3, r2
 8009436:	bfc4      	itt	gt
 8009438:	1a9b      	subgt	r3, r3, r2
 800943a:	18ed      	addgt	r5, r5, r3
 800943c:	341a      	adds	r4, #26
 800943e:	454d      	cmp	r5, r9
 8009440:	d11a      	bne.n	8009478 <_printf_common+0xd8>
 8009442:	2000      	movs	r0, #0
 8009444:	e008      	b.n	8009458 <_printf_common+0xb8>
 8009446:	2301      	movs	r3, #1
 8009448:	4652      	mov	r2, sl
 800944a:	4639      	mov	r1, r7
 800944c:	4630      	mov	r0, r6
 800944e:	47c0      	blx	r8
 8009450:	3001      	adds	r0, #1
 8009452:	d103      	bne.n	800945c <_printf_common+0xbc>
 8009454:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800945c:	3501      	adds	r5, #1
 800945e:	e7c2      	b.n	80093e6 <_printf_common+0x46>
 8009460:	2030      	movs	r0, #48	; 0x30
 8009462:	18e1      	adds	r1, r4, r3
 8009464:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009468:	1c5a      	adds	r2, r3, #1
 800946a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800946e:	4422      	add	r2, r4
 8009470:	3302      	adds	r3, #2
 8009472:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009476:	e7c4      	b.n	8009402 <_printf_common+0x62>
 8009478:	2301      	movs	r3, #1
 800947a:	4622      	mov	r2, r4
 800947c:	4639      	mov	r1, r7
 800947e:	4630      	mov	r0, r6
 8009480:	47c0      	blx	r8
 8009482:	3001      	adds	r0, #1
 8009484:	d0e6      	beq.n	8009454 <_printf_common+0xb4>
 8009486:	f109 0901 	add.w	r9, r9, #1
 800948a:	e7d8      	b.n	800943e <_printf_common+0x9e>

0800948c <_printf_i>:
 800948c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009490:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009494:	460c      	mov	r4, r1
 8009496:	7e09      	ldrb	r1, [r1, #24]
 8009498:	b085      	sub	sp, #20
 800949a:	296e      	cmp	r1, #110	; 0x6e
 800949c:	4617      	mov	r7, r2
 800949e:	4606      	mov	r6, r0
 80094a0:	4698      	mov	r8, r3
 80094a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80094a4:	f000 80b3 	beq.w	800960e <_printf_i+0x182>
 80094a8:	d822      	bhi.n	80094f0 <_printf_i+0x64>
 80094aa:	2963      	cmp	r1, #99	; 0x63
 80094ac:	d036      	beq.n	800951c <_printf_i+0x90>
 80094ae:	d80a      	bhi.n	80094c6 <_printf_i+0x3a>
 80094b0:	2900      	cmp	r1, #0
 80094b2:	f000 80b9 	beq.w	8009628 <_printf_i+0x19c>
 80094b6:	2958      	cmp	r1, #88	; 0x58
 80094b8:	f000 8083 	beq.w	80095c2 <_printf_i+0x136>
 80094bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80094c0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80094c4:	e032      	b.n	800952c <_printf_i+0xa0>
 80094c6:	2964      	cmp	r1, #100	; 0x64
 80094c8:	d001      	beq.n	80094ce <_printf_i+0x42>
 80094ca:	2969      	cmp	r1, #105	; 0x69
 80094cc:	d1f6      	bne.n	80094bc <_printf_i+0x30>
 80094ce:	6820      	ldr	r0, [r4, #0]
 80094d0:	6813      	ldr	r3, [r2, #0]
 80094d2:	0605      	lsls	r5, r0, #24
 80094d4:	f103 0104 	add.w	r1, r3, #4
 80094d8:	d52a      	bpl.n	8009530 <_printf_i+0xa4>
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	6011      	str	r1, [r2, #0]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	da03      	bge.n	80094ea <_printf_i+0x5e>
 80094e2:	222d      	movs	r2, #45	; 0x2d
 80094e4:	425b      	negs	r3, r3
 80094e6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80094ea:	486f      	ldr	r0, [pc, #444]	; (80096a8 <_printf_i+0x21c>)
 80094ec:	220a      	movs	r2, #10
 80094ee:	e039      	b.n	8009564 <_printf_i+0xd8>
 80094f0:	2973      	cmp	r1, #115	; 0x73
 80094f2:	f000 809d 	beq.w	8009630 <_printf_i+0x1a4>
 80094f6:	d808      	bhi.n	800950a <_printf_i+0x7e>
 80094f8:	296f      	cmp	r1, #111	; 0x6f
 80094fa:	d020      	beq.n	800953e <_printf_i+0xb2>
 80094fc:	2970      	cmp	r1, #112	; 0x70
 80094fe:	d1dd      	bne.n	80094bc <_printf_i+0x30>
 8009500:	6823      	ldr	r3, [r4, #0]
 8009502:	f043 0320 	orr.w	r3, r3, #32
 8009506:	6023      	str	r3, [r4, #0]
 8009508:	e003      	b.n	8009512 <_printf_i+0x86>
 800950a:	2975      	cmp	r1, #117	; 0x75
 800950c:	d017      	beq.n	800953e <_printf_i+0xb2>
 800950e:	2978      	cmp	r1, #120	; 0x78
 8009510:	d1d4      	bne.n	80094bc <_printf_i+0x30>
 8009512:	2378      	movs	r3, #120	; 0x78
 8009514:	4865      	ldr	r0, [pc, #404]	; (80096ac <_printf_i+0x220>)
 8009516:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800951a:	e055      	b.n	80095c8 <_printf_i+0x13c>
 800951c:	6813      	ldr	r3, [r2, #0]
 800951e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009522:	1d19      	adds	r1, r3, #4
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	6011      	str	r1, [r2, #0]
 8009528:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800952c:	2301      	movs	r3, #1
 800952e:	e08c      	b.n	800964a <_printf_i+0x1be>
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009536:	6011      	str	r1, [r2, #0]
 8009538:	bf18      	it	ne
 800953a:	b21b      	sxthne	r3, r3
 800953c:	e7cf      	b.n	80094de <_printf_i+0x52>
 800953e:	6813      	ldr	r3, [r2, #0]
 8009540:	6825      	ldr	r5, [r4, #0]
 8009542:	1d18      	adds	r0, r3, #4
 8009544:	6010      	str	r0, [r2, #0]
 8009546:	0628      	lsls	r0, r5, #24
 8009548:	d501      	bpl.n	800954e <_printf_i+0xc2>
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	e002      	b.n	8009554 <_printf_i+0xc8>
 800954e:	0668      	lsls	r0, r5, #25
 8009550:	d5fb      	bpl.n	800954a <_printf_i+0xbe>
 8009552:	881b      	ldrh	r3, [r3, #0]
 8009554:	296f      	cmp	r1, #111	; 0x6f
 8009556:	bf14      	ite	ne
 8009558:	220a      	movne	r2, #10
 800955a:	2208      	moveq	r2, #8
 800955c:	4852      	ldr	r0, [pc, #328]	; (80096a8 <_printf_i+0x21c>)
 800955e:	2100      	movs	r1, #0
 8009560:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009564:	6865      	ldr	r5, [r4, #4]
 8009566:	2d00      	cmp	r5, #0
 8009568:	60a5      	str	r5, [r4, #8]
 800956a:	f2c0 8095 	blt.w	8009698 <_printf_i+0x20c>
 800956e:	6821      	ldr	r1, [r4, #0]
 8009570:	f021 0104 	bic.w	r1, r1, #4
 8009574:	6021      	str	r1, [r4, #0]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d13d      	bne.n	80095f6 <_printf_i+0x16a>
 800957a:	2d00      	cmp	r5, #0
 800957c:	f040 808e 	bne.w	800969c <_printf_i+0x210>
 8009580:	4665      	mov	r5, ip
 8009582:	2a08      	cmp	r2, #8
 8009584:	d10b      	bne.n	800959e <_printf_i+0x112>
 8009586:	6823      	ldr	r3, [r4, #0]
 8009588:	07db      	lsls	r3, r3, #31
 800958a:	d508      	bpl.n	800959e <_printf_i+0x112>
 800958c:	6923      	ldr	r3, [r4, #16]
 800958e:	6862      	ldr	r2, [r4, #4]
 8009590:	429a      	cmp	r2, r3
 8009592:	bfde      	ittt	le
 8009594:	2330      	movle	r3, #48	; 0x30
 8009596:	f805 3c01 	strble.w	r3, [r5, #-1]
 800959a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800959e:	ebac 0305 	sub.w	r3, ip, r5
 80095a2:	6123      	str	r3, [r4, #16]
 80095a4:	f8cd 8000 	str.w	r8, [sp]
 80095a8:	463b      	mov	r3, r7
 80095aa:	aa03      	add	r2, sp, #12
 80095ac:	4621      	mov	r1, r4
 80095ae:	4630      	mov	r0, r6
 80095b0:	f7ff fef6 	bl	80093a0 <_printf_common>
 80095b4:	3001      	adds	r0, #1
 80095b6:	d14d      	bne.n	8009654 <_printf_i+0x1c8>
 80095b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80095bc:	b005      	add	sp, #20
 80095be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80095c2:	4839      	ldr	r0, [pc, #228]	; (80096a8 <_printf_i+0x21c>)
 80095c4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80095c8:	6813      	ldr	r3, [r2, #0]
 80095ca:	6821      	ldr	r1, [r4, #0]
 80095cc:	1d1d      	adds	r5, r3, #4
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	6015      	str	r5, [r2, #0]
 80095d2:	060a      	lsls	r2, r1, #24
 80095d4:	d50b      	bpl.n	80095ee <_printf_i+0x162>
 80095d6:	07ca      	lsls	r2, r1, #31
 80095d8:	bf44      	itt	mi
 80095da:	f041 0120 	orrmi.w	r1, r1, #32
 80095de:	6021      	strmi	r1, [r4, #0]
 80095e0:	b91b      	cbnz	r3, 80095ea <_printf_i+0x15e>
 80095e2:	6822      	ldr	r2, [r4, #0]
 80095e4:	f022 0220 	bic.w	r2, r2, #32
 80095e8:	6022      	str	r2, [r4, #0]
 80095ea:	2210      	movs	r2, #16
 80095ec:	e7b7      	b.n	800955e <_printf_i+0xd2>
 80095ee:	064d      	lsls	r5, r1, #25
 80095f0:	bf48      	it	mi
 80095f2:	b29b      	uxthmi	r3, r3
 80095f4:	e7ef      	b.n	80095d6 <_printf_i+0x14a>
 80095f6:	4665      	mov	r5, ip
 80095f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80095fc:	fb02 3311 	mls	r3, r2, r1, r3
 8009600:	5cc3      	ldrb	r3, [r0, r3]
 8009602:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009606:	460b      	mov	r3, r1
 8009608:	2900      	cmp	r1, #0
 800960a:	d1f5      	bne.n	80095f8 <_printf_i+0x16c>
 800960c:	e7b9      	b.n	8009582 <_printf_i+0xf6>
 800960e:	6813      	ldr	r3, [r2, #0]
 8009610:	6825      	ldr	r5, [r4, #0]
 8009612:	1d18      	adds	r0, r3, #4
 8009614:	6961      	ldr	r1, [r4, #20]
 8009616:	6010      	str	r0, [r2, #0]
 8009618:	0628      	lsls	r0, r5, #24
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	d501      	bpl.n	8009622 <_printf_i+0x196>
 800961e:	6019      	str	r1, [r3, #0]
 8009620:	e002      	b.n	8009628 <_printf_i+0x19c>
 8009622:	066a      	lsls	r2, r5, #25
 8009624:	d5fb      	bpl.n	800961e <_printf_i+0x192>
 8009626:	8019      	strh	r1, [r3, #0]
 8009628:	2300      	movs	r3, #0
 800962a:	4665      	mov	r5, ip
 800962c:	6123      	str	r3, [r4, #16]
 800962e:	e7b9      	b.n	80095a4 <_printf_i+0x118>
 8009630:	6813      	ldr	r3, [r2, #0]
 8009632:	1d19      	adds	r1, r3, #4
 8009634:	6011      	str	r1, [r2, #0]
 8009636:	681d      	ldr	r5, [r3, #0]
 8009638:	6862      	ldr	r2, [r4, #4]
 800963a:	2100      	movs	r1, #0
 800963c:	4628      	mov	r0, r5
 800963e:	f000 faab 	bl	8009b98 <memchr>
 8009642:	b108      	cbz	r0, 8009648 <_printf_i+0x1bc>
 8009644:	1b40      	subs	r0, r0, r5
 8009646:	6060      	str	r0, [r4, #4]
 8009648:	6863      	ldr	r3, [r4, #4]
 800964a:	6123      	str	r3, [r4, #16]
 800964c:	2300      	movs	r3, #0
 800964e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009652:	e7a7      	b.n	80095a4 <_printf_i+0x118>
 8009654:	6923      	ldr	r3, [r4, #16]
 8009656:	462a      	mov	r2, r5
 8009658:	4639      	mov	r1, r7
 800965a:	4630      	mov	r0, r6
 800965c:	47c0      	blx	r8
 800965e:	3001      	adds	r0, #1
 8009660:	d0aa      	beq.n	80095b8 <_printf_i+0x12c>
 8009662:	6823      	ldr	r3, [r4, #0]
 8009664:	079b      	lsls	r3, r3, #30
 8009666:	d413      	bmi.n	8009690 <_printf_i+0x204>
 8009668:	68e0      	ldr	r0, [r4, #12]
 800966a:	9b03      	ldr	r3, [sp, #12]
 800966c:	4298      	cmp	r0, r3
 800966e:	bfb8      	it	lt
 8009670:	4618      	movlt	r0, r3
 8009672:	e7a3      	b.n	80095bc <_printf_i+0x130>
 8009674:	2301      	movs	r3, #1
 8009676:	464a      	mov	r2, r9
 8009678:	4639      	mov	r1, r7
 800967a:	4630      	mov	r0, r6
 800967c:	47c0      	blx	r8
 800967e:	3001      	adds	r0, #1
 8009680:	d09a      	beq.n	80095b8 <_printf_i+0x12c>
 8009682:	3501      	adds	r5, #1
 8009684:	68e3      	ldr	r3, [r4, #12]
 8009686:	9a03      	ldr	r2, [sp, #12]
 8009688:	1a9b      	subs	r3, r3, r2
 800968a:	42ab      	cmp	r3, r5
 800968c:	dcf2      	bgt.n	8009674 <_printf_i+0x1e8>
 800968e:	e7eb      	b.n	8009668 <_printf_i+0x1dc>
 8009690:	2500      	movs	r5, #0
 8009692:	f104 0919 	add.w	r9, r4, #25
 8009696:	e7f5      	b.n	8009684 <_printf_i+0x1f8>
 8009698:	2b00      	cmp	r3, #0
 800969a:	d1ac      	bne.n	80095f6 <_printf_i+0x16a>
 800969c:	7803      	ldrb	r3, [r0, #0]
 800969e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80096a2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80096a6:	e76c      	b.n	8009582 <_printf_i+0xf6>
 80096a8:	0800a00d 	.word	0x0800a00d
 80096ac:	0800a01e 	.word	0x0800a01e

080096b0 <_scanf_chars>:
 80096b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096b4:	4615      	mov	r5, r2
 80096b6:	688a      	ldr	r2, [r1, #8]
 80096b8:	4680      	mov	r8, r0
 80096ba:	460c      	mov	r4, r1
 80096bc:	b932      	cbnz	r2, 80096cc <_scanf_chars+0x1c>
 80096be:	698a      	ldr	r2, [r1, #24]
 80096c0:	2a00      	cmp	r2, #0
 80096c2:	bf14      	ite	ne
 80096c4:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 80096c8:	2201      	moveq	r2, #1
 80096ca:	608a      	str	r2, [r1, #8]
 80096cc:	2600      	movs	r6, #0
 80096ce:	6822      	ldr	r2, [r4, #0]
 80096d0:	06d1      	lsls	r1, r2, #27
 80096d2:	bf5f      	itttt	pl
 80096d4:	681a      	ldrpl	r2, [r3, #0]
 80096d6:	1d11      	addpl	r1, r2, #4
 80096d8:	6019      	strpl	r1, [r3, #0]
 80096da:	6817      	ldrpl	r7, [r2, #0]
 80096dc:	69a3      	ldr	r3, [r4, #24]
 80096de:	b1db      	cbz	r3, 8009718 <_scanf_chars+0x68>
 80096e0:	2b01      	cmp	r3, #1
 80096e2:	d107      	bne.n	80096f4 <_scanf_chars+0x44>
 80096e4:	682b      	ldr	r3, [r5, #0]
 80096e6:	6962      	ldr	r2, [r4, #20]
 80096e8:	781b      	ldrb	r3, [r3, #0]
 80096ea:	5cd3      	ldrb	r3, [r2, r3]
 80096ec:	b9a3      	cbnz	r3, 8009718 <_scanf_chars+0x68>
 80096ee:	2e00      	cmp	r6, #0
 80096f0:	d131      	bne.n	8009756 <_scanf_chars+0xa6>
 80096f2:	e006      	b.n	8009702 <_scanf_chars+0x52>
 80096f4:	2b02      	cmp	r3, #2
 80096f6:	d007      	beq.n	8009708 <_scanf_chars+0x58>
 80096f8:	2e00      	cmp	r6, #0
 80096fa:	d12c      	bne.n	8009756 <_scanf_chars+0xa6>
 80096fc:	69a3      	ldr	r3, [r4, #24]
 80096fe:	2b01      	cmp	r3, #1
 8009700:	d129      	bne.n	8009756 <_scanf_chars+0xa6>
 8009702:	2001      	movs	r0, #1
 8009704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009708:	f7fe fec0 	bl	800848c <__locale_ctype_ptr>
 800970c:	682b      	ldr	r3, [r5, #0]
 800970e:	781b      	ldrb	r3, [r3, #0]
 8009710:	4418      	add	r0, r3
 8009712:	7843      	ldrb	r3, [r0, #1]
 8009714:	071b      	lsls	r3, r3, #28
 8009716:	d4ef      	bmi.n	80096f8 <_scanf_chars+0x48>
 8009718:	6823      	ldr	r3, [r4, #0]
 800971a:	3601      	adds	r6, #1
 800971c:	06da      	lsls	r2, r3, #27
 800971e:	bf5e      	ittt	pl
 8009720:	682b      	ldrpl	r3, [r5, #0]
 8009722:	781b      	ldrbpl	r3, [r3, #0]
 8009724:	703b      	strbpl	r3, [r7, #0]
 8009726:	682a      	ldr	r2, [r5, #0]
 8009728:	686b      	ldr	r3, [r5, #4]
 800972a:	f102 0201 	add.w	r2, r2, #1
 800972e:	602a      	str	r2, [r5, #0]
 8009730:	68a2      	ldr	r2, [r4, #8]
 8009732:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8009736:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800973a:	606b      	str	r3, [r5, #4]
 800973c:	bf58      	it	pl
 800973e:	3701      	addpl	r7, #1
 8009740:	60a2      	str	r2, [r4, #8]
 8009742:	b142      	cbz	r2, 8009756 <_scanf_chars+0xa6>
 8009744:	2b00      	cmp	r3, #0
 8009746:	dcc9      	bgt.n	80096dc <_scanf_chars+0x2c>
 8009748:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800974c:	4629      	mov	r1, r5
 800974e:	4640      	mov	r0, r8
 8009750:	4798      	blx	r3
 8009752:	2800      	cmp	r0, #0
 8009754:	d0c2      	beq.n	80096dc <_scanf_chars+0x2c>
 8009756:	6823      	ldr	r3, [r4, #0]
 8009758:	f013 0310 	ands.w	r3, r3, #16
 800975c:	d105      	bne.n	800976a <_scanf_chars+0xba>
 800975e:	68e2      	ldr	r2, [r4, #12]
 8009760:	3201      	adds	r2, #1
 8009762:	60e2      	str	r2, [r4, #12]
 8009764:	69a2      	ldr	r2, [r4, #24]
 8009766:	b102      	cbz	r2, 800976a <_scanf_chars+0xba>
 8009768:	703b      	strb	r3, [r7, #0]
 800976a:	6923      	ldr	r3, [r4, #16]
 800976c:	2000      	movs	r0, #0
 800976e:	441e      	add	r6, r3
 8009770:	6126      	str	r6, [r4, #16]
 8009772:	e7c7      	b.n	8009704 <_scanf_chars+0x54>

08009774 <_scanf_i>:
 8009774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009778:	460c      	mov	r4, r1
 800977a:	469a      	mov	sl, r3
 800977c:	4b74      	ldr	r3, [pc, #464]	; (8009950 <_scanf_i+0x1dc>)
 800977e:	b087      	sub	sp, #28
 8009780:	4683      	mov	fp, r0
 8009782:	4616      	mov	r6, r2
 8009784:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009788:	ab03      	add	r3, sp, #12
 800978a:	68a7      	ldr	r7, [r4, #8]
 800978c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009790:	4b70      	ldr	r3, [pc, #448]	; (8009954 <_scanf_i+0x1e0>)
 8009792:	69a1      	ldr	r1, [r4, #24]
 8009794:	4a70      	ldr	r2, [pc, #448]	; (8009958 <_scanf_i+0x1e4>)
 8009796:	f104 091c 	add.w	r9, r4, #28
 800979a:	2903      	cmp	r1, #3
 800979c:	bf08      	it	eq
 800979e:	461a      	moveq	r2, r3
 80097a0:	1e7b      	subs	r3, r7, #1
 80097a2:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80097a6:	bf84      	itt	hi
 80097a8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80097ac:	60a3      	strhi	r3, [r4, #8]
 80097ae:	6823      	ldr	r3, [r4, #0]
 80097b0:	bf88      	it	hi
 80097b2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80097b6:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80097ba:	6023      	str	r3, [r4, #0]
 80097bc:	bf98      	it	ls
 80097be:	2700      	movls	r7, #0
 80097c0:	464b      	mov	r3, r9
 80097c2:	f04f 0800 	mov.w	r8, #0
 80097c6:	9200      	str	r2, [sp, #0]
 80097c8:	bf88      	it	hi
 80097ca:	197f      	addhi	r7, r7, r5
 80097cc:	6831      	ldr	r1, [r6, #0]
 80097ce:	9301      	str	r3, [sp, #4]
 80097d0:	ab03      	add	r3, sp, #12
 80097d2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80097d6:	2202      	movs	r2, #2
 80097d8:	7809      	ldrb	r1, [r1, #0]
 80097da:	f000 f9dd 	bl	8009b98 <memchr>
 80097de:	9b01      	ldr	r3, [sp, #4]
 80097e0:	b330      	cbz	r0, 8009830 <_scanf_i+0xbc>
 80097e2:	f1b8 0f01 	cmp.w	r8, #1
 80097e6:	d15a      	bne.n	800989e <_scanf_i+0x12a>
 80097e8:	6862      	ldr	r2, [r4, #4]
 80097ea:	b92a      	cbnz	r2, 80097f8 <_scanf_i+0x84>
 80097ec:	2108      	movs	r1, #8
 80097ee:	6822      	ldr	r2, [r4, #0]
 80097f0:	6061      	str	r1, [r4, #4]
 80097f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80097f6:	6022      	str	r2, [r4, #0]
 80097f8:	6822      	ldr	r2, [r4, #0]
 80097fa:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80097fe:	6022      	str	r2, [r4, #0]
 8009800:	68a2      	ldr	r2, [r4, #8]
 8009802:	1e51      	subs	r1, r2, #1
 8009804:	60a1      	str	r1, [r4, #8]
 8009806:	b19a      	cbz	r2, 8009830 <_scanf_i+0xbc>
 8009808:	6832      	ldr	r2, [r6, #0]
 800980a:	1c5d      	adds	r5, r3, #1
 800980c:	1c51      	adds	r1, r2, #1
 800980e:	6031      	str	r1, [r6, #0]
 8009810:	7812      	ldrb	r2, [r2, #0]
 8009812:	701a      	strb	r2, [r3, #0]
 8009814:	6873      	ldr	r3, [r6, #4]
 8009816:	3b01      	subs	r3, #1
 8009818:	2b00      	cmp	r3, #0
 800981a:	6073      	str	r3, [r6, #4]
 800981c:	dc07      	bgt.n	800982e <_scanf_i+0xba>
 800981e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009822:	4631      	mov	r1, r6
 8009824:	4658      	mov	r0, fp
 8009826:	4798      	blx	r3
 8009828:	2800      	cmp	r0, #0
 800982a:	f040 8087 	bne.w	800993c <_scanf_i+0x1c8>
 800982e:	462b      	mov	r3, r5
 8009830:	f108 0801 	add.w	r8, r8, #1
 8009834:	f1b8 0f03 	cmp.w	r8, #3
 8009838:	d1c8      	bne.n	80097cc <_scanf_i+0x58>
 800983a:	6862      	ldr	r2, [r4, #4]
 800983c:	b90a      	cbnz	r2, 8009842 <_scanf_i+0xce>
 800983e:	220a      	movs	r2, #10
 8009840:	6062      	str	r2, [r4, #4]
 8009842:	6862      	ldr	r2, [r4, #4]
 8009844:	4945      	ldr	r1, [pc, #276]	; (800995c <_scanf_i+0x1e8>)
 8009846:	6960      	ldr	r0, [r4, #20]
 8009848:	1a89      	subs	r1, r1, r2
 800984a:	9301      	str	r3, [sp, #4]
 800984c:	f000 f898 	bl	8009980 <__sccl>
 8009850:	9b01      	ldr	r3, [sp, #4]
 8009852:	f04f 0800 	mov.w	r8, #0
 8009856:	461d      	mov	r5, r3
 8009858:	68a3      	ldr	r3, [r4, #8]
 800985a:	6822      	ldr	r2, [r4, #0]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d03b      	beq.n	80098d8 <_scanf_i+0x164>
 8009860:	6831      	ldr	r1, [r6, #0]
 8009862:	6960      	ldr	r0, [r4, #20]
 8009864:	f891 c000 	ldrb.w	ip, [r1]
 8009868:	f810 000c 	ldrb.w	r0, [r0, ip]
 800986c:	2800      	cmp	r0, #0
 800986e:	d033      	beq.n	80098d8 <_scanf_i+0x164>
 8009870:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8009874:	d121      	bne.n	80098ba <_scanf_i+0x146>
 8009876:	0510      	lsls	r0, r2, #20
 8009878:	d51f      	bpl.n	80098ba <_scanf_i+0x146>
 800987a:	f108 0801 	add.w	r8, r8, #1
 800987e:	b117      	cbz	r7, 8009886 <_scanf_i+0x112>
 8009880:	3301      	adds	r3, #1
 8009882:	3f01      	subs	r7, #1
 8009884:	60a3      	str	r3, [r4, #8]
 8009886:	6873      	ldr	r3, [r6, #4]
 8009888:	3b01      	subs	r3, #1
 800988a:	2b00      	cmp	r3, #0
 800988c:	6073      	str	r3, [r6, #4]
 800988e:	dd1c      	ble.n	80098ca <_scanf_i+0x156>
 8009890:	6833      	ldr	r3, [r6, #0]
 8009892:	3301      	adds	r3, #1
 8009894:	6033      	str	r3, [r6, #0]
 8009896:	68a3      	ldr	r3, [r4, #8]
 8009898:	3b01      	subs	r3, #1
 800989a:	60a3      	str	r3, [r4, #8]
 800989c:	e7dc      	b.n	8009858 <_scanf_i+0xe4>
 800989e:	f1b8 0f02 	cmp.w	r8, #2
 80098a2:	d1ad      	bne.n	8009800 <_scanf_i+0x8c>
 80098a4:	6822      	ldr	r2, [r4, #0]
 80098a6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80098aa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80098ae:	d1bf      	bne.n	8009830 <_scanf_i+0xbc>
 80098b0:	2110      	movs	r1, #16
 80098b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80098b6:	6061      	str	r1, [r4, #4]
 80098b8:	e7a1      	b.n	80097fe <_scanf_i+0x8a>
 80098ba:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80098be:	6022      	str	r2, [r4, #0]
 80098c0:	780b      	ldrb	r3, [r1, #0]
 80098c2:	3501      	adds	r5, #1
 80098c4:	f805 3c01 	strb.w	r3, [r5, #-1]
 80098c8:	e7dd      	b.n	8009886 <_scanf_i+0x112>
 80098ca:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80098ce:	4631      	mov	r1, r6
 80098d0:	4658      	mov	r0, fp
 80098d2:	4798      	blx	r3
 80098d4:	2800      	cmp	r0, #0
 80098d6:	d0de      	beq.n	8009896 <_scanf_i+0x122>
 80098d8:	6823      	ldr	r3, [r4, #0]
 80098da:	05d9      	lsls	r1, r3, #23
 80098dc:	d50c      	bpl.n	80098f8 <_scanf_i+0x184>
 80098de:	454d      	cmp	r5, r9
 80098e0:	d908      	bls.n	80098f4 <_scanf_i+0x180>
 80098e2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80098e6:	1e6f      	subs	r7, r5, #1
 80098e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80098ec:	4632      	mov	r2, r6
 80098ee:	4658      	mov	r0, fp
 80098f0:	4798      	blx	r3
 80098f2:	463d      	mov	r5, r7
 80098f4:	454d      	cmp	r5, r9
 80098f6:	d029      	beq.n	800994c <_scanf_i+0x1d8>
 80098f8:	6822      	ldr	r2, [r4, #0]
 80098fa:	f012 0210 	ands.w	r2, r2, #16
 80098fe:	d113      	bne.n	8009928 <_scanf_i+0x1b4>
 8009900:	702a      	strb	r2, [r5, #0]
 8009902:	6863      	ldr	r3, [r4, #4]
 8009904:	4649      	mov	r1, r9
 8009906:	4658      	mov	r0, fp
 8009908:	9e00      	ldr	r6, [sp, #0]
 800990a:	47b0      	blx	r6
 800990c:	f8da 3000 	ldr.w	r3, [sl]
 8009910:	6821      	ldr	r1, [r4, #0]
 8009912:	1d1a      	adds	r2, r3, #4
 8009914:	f8ca 2000 	str.w	r2, [sl]
 8009918:	f011 0f20 	tst.w	r1, #32
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	d010      	beq.n	8009942 <_scanf_i+0x1ce>
 8009920:	6018      	str	r0, [r3, #0]
 8009922:	68e3      	ldr	r3, [r4, #12]
 8009924:	3301      	adds	r3, #1
 8009926:	60e3      	str	r3, [r4, #12]
 8009928:	2000      	movs	r0, #0
 800992a:	eba5 0509 	sub.w	r5, r5, r9
 800992e:	44a8      	add	r8, r5
 8009930:	6925      	ldr	r5, [r4, #16]
 8009932:	4445      	add	r5, r8
 8009934:	6125      	str	r5, [r4, #16]
 8009936:	b007      	add	sp, #28
 8009938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800993c:	f04f 0800 	mov.w	r8, #0
 8009940:	e7ca      	b.n	80098d8 <_scanf_i+0x164>
 8009942:	07ca      	lsls	r2, r1, #31
 8009944:	bf4c      	ite	mi
 8009946:	8018      	strhmi	r0, [r3, #0]
 8009948:	6018      	strpl	r0, [r3, #0]
 800994a:	e7ea      	b.n	8009922 <_scanf_i+0x1ae>
 800994c:	2001      	movs	r0, #1
 800994e:	e7f2      	b.n	8009936 <_scanf_i+0x1c2>
 8009950:	08009e5c 	.word	0x08009e5c
 8009954:	08007e11 	.word	0x08007e11
 8009958:	08009ad9 	.word	0x08009ad9
 800995c:	0800a03f 	.word	0x0800a03f

08009960 <_sbrk_r>:
 8009960:	b538      	push	{r3, r4, r5, lr}
 8009962:	2300      	movs	r3, #0
 8009964:	4c05      	ldr	r4, [pc, #20]	; (800997c <_sbrk_r+0x1c>)
 8009966:	4605      	mov	r5, r0
 8009968:	4608      	mov	r0, r1
 800996a:	6023      	str	r3, [r4, #0]
 800996c:	f7f9 f910 	bl	8002b90 <_sbrk>
 8009970:	1c43      	adds	r3, r0, #1
 8009972:	d102      	bne.n	800997a <_sbrk_r+0x1a>
 8009974:	6823      	ldr	r3, [r4, #0]
 8009976:	b103      	cbz	r3, 800997a <_sbrk_r+0x1a>
 8009978:	602b      	str	r3, [r5, #0]
 800997a:	bd38      	pop	{r3, r4, r5, pc}
 800997c:	20000478 	.word	0x20000478

08009980 <__sccl>:
 8009980:	b570      	push	{r4, r5, r6, lr}
 8009982:	780b      	ldrb	r3, [r1, #0]
 8009984:	1e44      	subs	r4, r0, #1
 8009986:	2b5e      	cmp	r3, #94	; 0x5e
 8009988:	bf13      	iteet	ne
 800998a:	1c4a      	addne	r2, r1, #1
 800998c:	1c8a      	addeq	r2, r1, #2
 800998e:	784b      	ldrbeq	r3, [r1, #1]
 8009990:	2100      	movne	r1, #0
 8009992:	bf08      	it	eq
 8009994:	2101      	moveq	r1, #1
 8009996:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800999a:	f804 1f01 	strb.w	r1, [r4, #1]!
 800999e:	42ac      	cmp	r4, r5
 80099a0:	d1fb      	bne.n	800999a <__sccl+0x1a>
 80099a2:	b913      	cbnz	r3, 80099aa <__sccl+0x2a>
 80099a4:	3a01      	subs	r2, #1
 80099a6:	4610      	mov	r0, r2
 80099a8:	bd70      	pop	{r4, r5, r6, pc}
 80099aa:	f081 0401 	eor.w	r4, r1, #1
 80099ae:	54c4      	strb	r4, [r0, r3]
 80099b0:	1c51      	adds	r1, r2, #1
 80099b2:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 80099b6:	1e4e      	subs	r6, r1, #1
 80099b8:	2d2d      	cmp	r5, #45	; 0x2d
 80099ba:	460a      	mov	r2, r1
 80099bc:	d006      	beq.n	80099cc <__sccl+0x4c>
 80099be:	2d5d      	cmp	r5, #93	; 0x5d
 80099c0:	d0f1      	beq.n	80099a6 <__sccl+0x26>
 80099c2:	b90d      	cbnz	r5, 80099c8 <__sccl+0x48>
 80099c4:	4632      	mov	r2, r6
 80099c6:	e7ee      	b.n	80099a6 <__sccl+0x26>
 80099c8:	462b      	mov	r3, r5
 80099ca:	e7f0      	b.n	80099ae <__sccl+0x2e>
 80099cc:	780e      	ldrb	r6, [r1, #0]
 80099ce:	2e5d      	cmp	r6, #93	; 0x5d
 80099d0:	d0fa      	beq.n	80099c8 <__sccl+0x48>
 80099d2:	42b3      	cmp	r3, r6
 80099d4:	dcf8      	bgt.n	80099c8 <__sccl+0x48>
 80099d6:	3301      	adds	r3, #1
 80099d8:	429e      	cmp	r6, r3
 80099da:	54c4      	strb	r4, [r0, r3]
 80099dc:	dcfb      	bgt.n	80099d6 <__sccl+0x56>
 80099de:	3102      	adds	r1, #2
 80099e0:	e7e7      	b.n	80099b2 <__sccl+0x32>

080099e2 <_strtoul_l.isra.0>:
 80099e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099e6:	4680      	mov	r8, r0
 80099e8:	4689      	mov	r9, r1
 80099ea:	4692      	mov	sl, r2
 80099ec:	461e      	mov	r6, r3
 80099ee:	460f      	mov	r7, r1
 80099f0:	463d      	mov	r5, r7
 80099f2:	9808      	ldr	r0, [sp, #32]
 80099f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80099f8:	f7fe fd44 	bl	8008484 <__locale_ctype_ptr_l>
 80099fc:	4420      	add	r0, r4
 80099fe:	7843      	ldrb	r3, [r0, #1]
 8009a00:	f013 0308 	ands.w	r3, r3, #8
 8009a04:	d130      	bne.n	8009a68 <_strtoul_l.isra.0+0x86>
 8009a06:	2c2d      	cmp	r4, #45	; 0x2d
 8009a08:	d130      	bne.n	8009a6c <_strtoul_l.isra.0+0x8a>
 8009a0a:	2101      	movs	r1, #1
 8009a0c:	787c      	ldrb	r4, [r7, #1]
 8009a0e:	1cbd      	adds	r5, r7, #2
 8009a10:	2e00      	cmp	r6, #0
 8009a12:	d05c      	beq.n	8009ace <_strtoul_l.isra.0+0xec>
 8009a14:	2e10      	cmp	r6, #16
 8009a16:	d109      	bne.n	8009a2c <_strtoul_l.isra.0+0x4a>
 8009a18:	2c30      	cmp	r4, #48	; 0x30
 8009a1a:	d107      	bne.n	8009a2c <_strtoul_l.isra.0+0x4a>
 8009a1c:	782b      	ldrb	r3, [r5, #0]
 8009a1e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009a22:	2b58      	cmp	r3, #88	; 0x58
 8009a24:	d14e      	bne.n	8009ac4 <_strtoul_l.isra.0+0xe2>
 8009a26:	2610      	movs	r6, #16
 8009a28:	786c      	ldrb	r4, [r5, #1]
 8009a2a:	3502      	adds	r5, #2
 8009a2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009a30:	fbb2 f2f6 	udiv	r2, r2, r6
 8009a34:	2300      	movs	r3, #0
 8009a36:	fb06 fc02 	mul.w	ip, r6, r2
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	ea6f 0c0c 	mvn.w	ip, ip
 8009a40:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8009a44:	2f09      	cmp	r7, #9
 8009a46:	d817      	bhi.n	8009a78 <_strtoul_l.isra.0+0x96>
 8009a48:	463c      	mov	r4, r7
 8009a4a:	42a6      	cmp	r6, r4
 8009a4c:	dd23      	ble.n	8009a96 <_strtoul_l.isra.0+0xb4>
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	db1e      	blt.n	8009a90 <_strtoul_l.isra.0+0xae>
 8009a52:	4282      	cmp	r2, r0
 8009a54:	d31c      	bcc.n	8009a90 <_strtoul_l.isra.0+0xae>
 8009a56:	d101      	bne.n	8009a5c <_strtoul_l.isra.0+0x7a>
 8009a58:	45a4      	cmp	ip, r4
 8009a5a:	db19      	blt.n	8009a90 <_strtoul_l.isra.0+0xae>
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	fb00 4006 	mla	r0, r0, r6, r4
 8009a62:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009a66:	e7eb      	b.n	8009a40 <_strtoul_l.isra.0+0x5e>
 8009a68:	462f      	mov	r7, r5
 8009a6a:	e7c1      	b.n	80099f0 <_strtoul_l.isra.0+0xe>
 8009a6c:	2c2b      	cmp	r4, #43	; 0x2b
 8009a6e:	bf04      	itt	eq
 8009a70:	1cbd      	addeq	r5, r7, #2
 8009a72:	787c      	ldrbeq	r4, [r7, #1]
 8009a74:	4619      	mov	r1, r3
 8009a76:	e7cb      	b.n	8009a10 <_strtoul_l.isra.0+0x2e>
 8009a78:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009a7c:	2f19      	cmp	r7, #25
 8009a7e:	d801      	bhi.n	8009a84 <_strtoul_l.isra.0+0xa2>
 8009a80:	3c37      	subs	r4, #55	; 0x37
 8009a82:	e7e2      	b.n	8009a4a <_strtoul_l.isra.0+0x68>
 8009a84:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8009a88:	2f19      	cmp	r7, #25
 8009a8a:	d804      	bhi.n	8009a96 <_strtoul_l.isra.0+0xb4>
 8009a8c:	3c57      	subs	r4, #87	; 0x57
 8009a8e:	e7dc      	b.n	8009a4a <_strtoul_l.isra.0+0x68>
 8009a90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009a94:	e7e5      	b.n	8009a62 <_strtoul_l.isra.0+0x80>
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	da09      	bge.n	8009aae <_strtoul_l.isra.0+0xcc>
 8009a9a:	2322      	movs	r3, #34	; 0x22
 8009a9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009aa0:	f8c8 3000 	str.w	r3, [r8]
 8009aa4:	f1ba 0f00 	cmp.w	sl, #0
 8009aa8:	d107      	bne.n	8009aba <_strtoul_l.isra.0+0xd8>
 8009aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009aae:	b101      	cbz	r1, 8009ab2 <_strtoul_l.isra.0+0xd0>
 8009ab0:	4240      	negs	r0, r0
 8009ab2:	f1ba 0f00 	cmp.w	sl, #0
 8009ab6:	d0f8      	beq.n	8009aaa <_strtoul_l.isra.0+0xc8>
 8009ab8:	b10b      	cbz	r3, 8009abe <_strtoul_l.isra.0+0xdc>
 8009aba:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8009abe:	f8ca 9000 	str.w	r9, [sl]
 8009ac2:	e7f2      	b.n	8009aaa <_strtoul_l.isra.0+0xc8>
 8009ac4:	2430      	movs	r4, #48	; 0x30
 8009ac6:	2e00      	cmp	r6, #0
 8009ac8:	d1b0      	bne.n	8009a2c <_strtoul_l.isra.0+0x4a>
 8009aca:	2608      	movs	r6, #8
 8009acc:	e7ae      	b.n	8009a2c <_strtoul_l.isra.0+0x4a>
 8009ace:	2c30      	cmp	r4, #48	; 0x30
 8009ad0:	d0a4      	beq.n	8009a1c <_strtoul_l.isra.0+0x3a>
 8009ad2:	260a      	movs	r6, #10
 8009ad4:	e7aa      	b.n	8009a2c <_strtoul_l.isra.0+0x4a>
	...

08009ad8 <_strtoul_r>:
 8009ad8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ada:	4c06      	ldr	r4, [pc, #24]	; (8009af4 <_strtoul_r+0x1c>)
 8009adc:	4d06      	ldr	r5, [pc, #24]	; (8009af8 <_strtoul_r+0x20>)
 8009ade:	6824      	ldr	r4, [r4, #0]
 8009ae0:	6a24      	ldr	r4, [r4, #32]
 8009ae2:	2c00      	cmp	r4, #0
 8009ae4:	bf08      	it	eq
 8009ae6:	462c      	moveq	r4, r5
 8009ae8:	9400      	str	r4, [sp, #0]
 8009aea:	f7ff ff7a 	bl	80099e2 <_strtoul_l.isra.0>
 8009aee:	b003      	add	sp, #12
 8009af0:	bd30      	pop	{r4, r5, pc}
 8009af2:	bf00      	nop
 8009af4:	20000010 	.word	0x20000010
 8009af8:	20000074 	.word	0x20000074

08009afc <__submore>:
 8009afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b00:	460c      	mov	r4, r1
 8009b02:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009b04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b08:	4299      	cmp	r1, r3
 8009b0a:	d11b      	bne.n	8009b44 <__submore+0x48>
 8009b0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009b10:	f7ff f8f0 	bl	8008cf4 <_malloc_r>
 8009b14:	b918      	cbnz	r0, 8009b1e <__submore+0x22>
 8009b16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b22:	63a3      	str	r3, [r4, #56]	; 0x38
 8009b24:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8009b28:	6360      	str	r0, [r4, #52]	; 0x34
 8009b2a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8009b2e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009b32:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8009b36:	7043      	strb	r3, [r0, #1]
 8009b38:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009b3c:	7003      	strb	r3, [r0, #0]
 8009b3e:	6020      	str	r0, [r4, #0]
 8009b40:	2000      	movs	r0, #0
 8009b42:	e7ea      	b.n	8009b1a <__submore+0x1e>
 8009b44:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8009b46:	0077      	lsls	r7, r6, #1
 8009b48:	463a      	mov	r2, r7
 8009b4a:	f000 f89b 	bl	8009c84 <_realloc_r>
 8009b4e:	4605      	mov	r5, r0
 8009b50:	2800      	cmp	r0, #0
 8009b52:	d0e0      	beq.n	8009b16 <__submore+0x1a>
 8009b54:	eb00 0806 	add.w	r8, r0, r6
 8009b58:	4601      	mov	r1, r0
 8009b5a:	4632      	mov	r2, r6
 8009b5c:	4640      	mov	r0, r8
 8009b5e:	f7fe fcb7 	bl	80084d0 <memcpy>
 8009b62:	f8c4 8000 	str.w	r8, [r4]
 8009b66:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8009b6a:	e7e9      	b.n	8009b40 <__submore+0x44>

08009b6c <__ascii_wctomb>:
 8009b6c:	b149      	cbz	r1, 8009b82 <__ascii_wctomb+0x16>
 8009b6e:	2aff      	cmp	r2, #255	; 0xff
 8009b70:	bf8b      	itete	hi
 8009b72:	238a      	movhi	r3, #138	; 0x8a
 8009b74:	700a      	strbls	r2, [r1, #0]
 8009b76:	6003      	strhi	r3, [r0, #0]
 8009b78:	2001      	movls	r0, #1
 8009b7a:	bf88      	it	hi
 8009b7c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009b80:	4770      	bx	lr
 8009b82:	4608      	mov	r0, r1
 8009b84:	4770      	bx	lr
	...

08009b88 <malloc>:
 8009b88:	4b02      	ldr	r3, [pc, #8]	; (8009b94 <malloc+0xc>)
 8009b8a:	4601      	mov	r1, r0
 8009b8c:	6818      	ldr	r0, [r3, #0]
 8009b8e:	f7ff b8b1 	b.w	8008cf4 <_malloc_r>
 8009b92:	bf00      	nop
 8009b94:	20000010 	.word	0x20000010

08009b98 <memchr>:
 8009b98:	b510      	push	{r4, lr}
 8009b9a:	b2c9      	uxtb	r1, r1
 8009b9c:	4402      	add	r2, r0
 8009b9e:	4290      	cmp	r0, r2
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	d101      	bne.n	8009ba8 <memchr+0x10>
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	e003      	b.n	8009bb0 <memchr+0x18>
 8009ba8:	781c      	ldrb	r4, [r3, #0]
 8009baa:	3001      	adds	r0, #1
 8009bac:	428c      	cmp	r4, r1
 8009bae:	d1f6      	bne.n	8009b9e <memchr+0x6>
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	bd10      	pop	{r4, pc}

08009bb4 <memmove>:
 8009bb4:	4288      	cmp	r0, r1
 8009bb6:	b510      	push	{r4, lr}
 8009bb8:	eb01 0302 	add.w	r3, r1, r2
 8009bbc:	d807      	bhi.n	8009bce <memmove+0x1a>
 8009bbe:	1e42      	subs	r2, r0, #1
 8009bc0:	4299      	cmp	r1, r3
 8009bc2:	d00a      	beq.n	8009bda <memmove+0x26>
 8009bc4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009bc8:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009bcc:	e7f8      	b.n	8009bc0 <memmove+0xc>
 8009bce:	4283      	cmp	r3, r0
 8009bd0:	d9f5      	bls.n	8009bbe <memmove+0xa>
 8009bd2:	1881      	adds	r1, r0, r2
 8009bd4:	1ad2      	subs	r2, r2, r3
 8009bd6:	42d3      	cmn	r3, r2
 8009bd8:	d100      	bne.n	8009bdc <memmove+0x28>
 8009bda:	bd10      	pop	{r4, pc}
 8009bdc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009be0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009be4:	e7f7      	b.n	8009bd6 <memmove+0x22>

08009be6 <__malloc_lock>:
 8009be6:	4770      	bx	lr

08009be8 <__malloc_unlock>:
 8009be8:	4770      	bx	lr
	...

08009bec <_free_r>:
 8009bec:	b538      	push	{r3, r4, r5, lr}
 8009bee:	4605      	mov	r5, r0
 8009bf0:	2900      	cmp	r1, #0
 8009bf2:	d043      	beq.n	8009c7c <_free_r+0x90>
 8009bf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bf8:	1f0c      	subs	r4, r1, #4
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	bfb8      	it	lt
 8009bfe:	18e4      	addlt	r4, r4, r3
 8009c00:	f7ff fff1 	bl	8009be6 <__malloc_lock>
 8009c04:	4a1e      	ldr	r2, [pc, #120]	; (8009c80 <_free_r+0x94>)
 8009c06:	6813      	ldr	r3, [r2, #0]
 8009c08:	4610      	mov	r0, r2
 8009c0a:	b933      	cbnz	r3, 8009c1a <_free_r+0x2e>
 8009c0c:	6063      	str	r3, [r4, #4]
 8009c0e:	6014      	str	r4, [r2, #0]
 8009c10:	4628      	mov	r0, r5
 8009c12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c16:	f7ff bfe7 	b.w	8009be8 <__malloc_unlock>
 8009c1a:	42a3      	cmp	r3, r4
 8009c1c:	d90b      	bls.n	8009c36 <_free_r+0x4a>
 8009c1e:	6821      	ldr	r1, [r4, #0]
 8009c20:	1862      	adds	r2, r4, r1
 8009c22:	4293      	cmp	r3, r2
 8009c24:	bf01      	itttt	eq
 8009c26:	681a      	ldreq	r2, [r3, #0]
 8009c28:	685b      	ldreq	r3, [r3, #4]
 8009c2a:	1852      	addeq	r2, r2, r1
 8009c2c:	6022      	streq	r2, [r4, #0]
 8009c2e:	6063      	str	r3, [r4, #4]
 8009c30:	6004      	str	r4, [r0, #0]
 8009c32:	e7ed      	b.n	8009c10 <_free_r+0x24>
 8009c34:	4613      	mov	r3, r2
 8009c36:	685a      	ldr	r2, [r3, #4]
 8009c38:	b10a      	cbz	r2, 8009c3e <_free_r+0x52>
 8009c3a:	42a2      	cmp	r2, r4
 8009c3c:	d9fa      	bls.n	8009c34 <_free_r+0x48>
 8009c3e:	6819      	ldr	r1, [r3, #0]
 8009c40:	1858      	adds	r0, r3, r1
 8009c42:	42a0      	cmp	r0, r4
 8009c44:	d10b      	bne.n	8009c5e <_free_r+0x72>
 8009c46:	6820      	ldr	r0, [r4, #0]
 8009c48:	4401      	add	r1, r0
 8009c4a:	1858      	adds	r0, r3, r1
 8009c4c:	4282      	cmp	r2, r0
 8009c4e:	6019      	str	r1, [r3, #0]
 8009c50:	d1de      	bne.n	8009c10 <_free_r+0x24>
 8009c52:	6810      	ldr	r0, [r2, #0]
 8009c54:	6852      	ldr	r2, [r2, #4]
 8009c56:	4401      	add	r1, r0
 8009c58:	6019      	str	r1, [r3, #0]
 8009c5a:	605a      	str	r2, [r3, #4]
 8009c5c:	e7d8      	b.n	8009c10 <_free_r+0x24>
 8009c5e:	d902      	bls.n	8009c66 <_free_r+0x7a>
 8009c60:	230c      	movs	r3, #12
 8009c62:	602b      	str	r3, [r5, #0]
 8009c64:	e7d4      	b.n	8009c10 <_free_r+0x24>
 8009c66:	6820      	ldr	r0, [r4, #0]
 8009c68:	1821      	adds	r1, r4, r0
 8009c6a:	428a      	cmp	r2, r1
 8009c6c:	bf01      	itttt	eq
 8009c6e:	6811      	ldreq	r1, [r2, #0]
 8009c70:	6852      	ldreq	r2, [r2, #4]
 8009c72:	1809      	addeq	r1, r1, r0
 8009c74:	6021      	streq	r1, [r4, #0]
 8009c76:	6062      	str	r2, [r4, #4]
 8009c78:	605c      	str	r4, [r3, #4]
 8009c7a:	e7c9      	b.n	8009c10 <_free_r+0x24>
 8009c7c:	bd38      	pop	{r3, r4, r5, pc}
 8009c7e:	bf00      	nop
 8009c80:	20000250 	.word	0x20000250

08009c84 <_realloc_r>:
 8009c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c86:	4607      	mov	r7, r0
 8009c88:	4614      	mov	r4, r2
 8009c8a:	460e      	mov	r6, r1
 8009c8c:	b921      	cbnz	r1, 8009c98 <_realloc_r+0x14>
 8009c8e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009c92:	4611      	mov	r1, r2
 8009c94:	f7ff b82e 	b.w	8008cf4 <_malloc_r>
 8009c98:	b922      	cbnz	r2, 8009ca4 <_realloc_r+0x20>
 8009c9a:	f7ff ffa7 	bl	8009bec <_free_r>
 8009c9e:	4625      	mov	r5, r4
 8009ca0:	4628      	mov	r0, r5
 8009ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ca4:	f000 f814 	bl	8009cd0 <_malloc_usable_size_r>
 8009ca8:	42a0      	cmp	r0, r4
 8009caa:	d20f      	bcs.n	8009ccc <_realloc_r+0x48>
 8009cac:	4621      	mov	r1, r4
 8009cae:	4638      	mov	r0, r7
 8009cb0:	f7ff f820 	bl	8008cf4 <_malloc_r>
 8009cb4:	4605      	mov	r5, r0
 8009cb6:	2800      	cmp	r0, #0
 8009cb8:	d0f2      	beq.n	8009ca0 <_realloc_r+0x1c>
 8009cba:	4631      	mov	r1, r6
 8009cbc:	4622      	mov	r2, r4
 8009cbe:	f7fe fc07 	bl	80084d0 <memcpy>
 8009cc2:	4631      	mov	r1, r6
 8009cc4:	4638      	mov	r0, r7
 8009cc6:	f7ff ff91 	bl	8009bec <_free_r>
 8009cca:	e7e9      	b.n	8009ca0 <_realloc_r+0x1c>
 8009ccc:	4635      	mov	r5, r6
 8009cce:	e7e7      	b.n	8009ca0 <_realloc_r+0x1c>

08009cd0 <_malloc_usable_size_r>:
 8009cd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cd4:	1f18      	subs	r0, r3, #4
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	bfbc      	itt	lt
 8009cda:	580b      	ldrlt	r3, [r1, r0]
 8009cdc:	18c0      	addlt	r0, r0, r3
 8009cde:	4770      	bx	lr

08009ce0 <round>:
 8009ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ce2:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8009ce6:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
 8009cea:	2c13      	cmp	r4, #19
 8009cec:	4606      	mov	r6, r0
 8009cee:	460d      	mov	r5, r1
 8009cf0:	460b      	mov	r3, r1
 8009cf2:	468c      	mov	ip, r1
 8009cf4:	4602      	mov	r2, r0
 8009cf6:	dc17      	bgt.n	8009d28 <round+0x48>
 8009cf8:	2c00      	cmp	r4, #0
 8009cfa:	da09      	bge.n	8009d10 <round+0x30>
 8009cfc:	3401      	adds	r4, #1
 8009cfe:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8009d02:	d103      	bne.n	8009d0c <round+0x2c>
 8009d04:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009d08:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	e028      	b.n	8009d62 <round+0x82>
 8009d10:	4915      	ldr	r1, [pc, #84]	; (8009d68 <round+0x88>)
 8009d12:	4121      	asrs	r1, r4
 8009d14:	420d      	tst	r5, r1
 8009d16:	d100      	bne.n	8009d1a <round+0x3a>
 8009d18:	b178      	cbz	r0, 8009d3a <round+0x5a>
 8009d1a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009d1e:	4123      	asrs	r3, r4
 8009d20:	4463      	add	r3, ip
 8009d22:	ea23 0301 	bic.w	r3, r3, r1
 8009d26:	e7f1      	b.n	8009d0c <round+0x2c>
 8009d28:	2c33      	cmp	r4, #51	; 0x33
 8009d2a:	dd09      	ble.n	8009d40 <round+0x60>
 8009d2c:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8009d30:	d103      	bne.n	8009d3a <round+0x5a>
 8009d32:	f7f6 fa1b 	bl	800016c <__adddf3>
 8009d36:	4606      	mov	r6, r0
 8009d38:	460d      	mov	r5, r1
 8009d3a:	4630      	mov	r0, r6
 8009d3c:	4629      	mov	r1, r5
 8009d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d44:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8009d48:	40f8      	lsrs	r0, r7
 8009d4a:	4206      	tst	r6, r0
 8009d4c:	d0f5      	beq.n	8009d3a <round+0x5a>
 8009d4e:	2101      	movs	r1, #1
 8009d50:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8009d54:	fa01 f404 	lsl.w	r4, r1, r4
 8009d58:	1932      	adds	r2, r6, r4
 8009d5a:	bf28      	it	cs
 8009d5c:	185b      	addcs	r3, r3, r1
 8009d5e:	ea22 0200 	bic.w	r2, r2, r0
 8009d62:	4619      	mov	r1, r3
 8009d64:	4610      	mov	r0, r2
 8009d66:	e7e6      	b.n	8009d36 <round+0x56>
 8009d68:	000fffff 	.word	0x000fffff

08009d6c <_init>:
 8009d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d6e:	bf00      	nop
 8009d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d72:	bc08      	pop	{r3}
 8009d74:	469e      	mov	lr, r3
 8009d76:	4770      	bx	lr

08009d78 <_fini>:
 8009d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d7a:	bf00      	nop
 8009d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d7e:	bc08      	pop	{r3}
 8009d80:	469e      	mov	lr, r3
 8009d82:	4770      	bx	lr
