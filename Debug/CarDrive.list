
CarDrive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3bc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  0800a4d0  0800a4d0  0001a4d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a8f4  0800a8f4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800a8f4  0800a8f4  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a8f4  0800a8f4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a8f4  0800a8f4  0001a8f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a8f8  0800a8f8  0001a8f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a8fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  200001e0  0800aadc  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004dc  0800aadc  000204dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013f32  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003051  00000000  00000000  0003413b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001218  00000000  00000000  00037190  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001098  00000000  00000000  000383a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a97c  00000000  00000000  00039440  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000119e1  00000000  00000000  00053dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009320e  00000000  00000000  0006579d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f89ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c38  00000000  00000000  000f8a28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a4b4 	.word	0x0800a4b4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800a4b4 	.word	0x0800a4b4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c24:	f1a2 0201 	sub.w	r2, r2, #1
 8000c28:	d1ed      	bne.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr

0800115c <__aeabi_f2uiz>:
 800115c:	0042      	lsls	r2, r0, #1
 800115e:	d20e      	bcs.n	800117e <__aeabi_f2uiz+0x22>
 8001160:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001164:	d30b      	bcc.n	800117e <__aeabi_f2uiz+0x22>
 8001166:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800116a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800116e:	d409      	bmi.n	8001184 <__aeabi_f2uiz+0x28>
 8001170:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001174:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001178:	fa23 f002 	lsr.w	r0, r3, r2
 800117c:	4770      	bx	lr
 800117e:	f04f 0000 	mov.w	r0, #0
 8001182:	4770      	bx	lr
 8001184:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001188:	d101      	bne.n	800118e <__aeabi_f2uiz+0x32>
 800118a:	0242      	lsls	r2, r0, #9
 800118c:	d102      	bne.n	8001194 <__aeabi_f2uiz+0x38>
 800118e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001192:	4770      	bx	lr
 8001194:	f04f 0000 	mov.w	r0, #0
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop

0800119c <BMP180_SetOversampling>:
const uint8_t BMP180_CMD_PRES[4] = { 0x34, 0x74, 0xb4, 0xf4 };
const uint8_t BMP180_DELAY_PRES[4] = { 5, 8, 14, 26 };


//设置超采样
void BMP180_SetOversampling(BMP180_OSS oss) {
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	71fb      	strb	r3, [r7, #7]
	_bmp180_oss = oss;
 80011a6:	4a04      	ldr	r2, [pc, #16]	; (80011b8 <BMP180_SetOversampling+0x1c>)
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	7013      	strb	r3, [r2, #0]
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bc80      	pop	{r7}
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	20000282 	.word	0x20000282

080011bc <BMP180_UpdateCalibrationData>:


//更新校正数据
void BMP180_UpdateCalibrationData(void) {
 80011bc:	b598      	push	{r3, r4, r7, lr}
 80011be:	af00      	add	r7, sp, #0
	_bmp180_eeprom.BMP180_AC1 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC1]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC1]);
 80011c0:	23aa      	movs	r3, #170	; 0xaa
 80011c2:	4618      	mov	r0, r3
 80011c4:	f000 f8da 	bl	800137c <BMP180_ReadReg>
 80011c8:	4603      	mov	r3, r0
 80011ca:	021b      	lsls	r3, r3, #8
 80011cc:	b21c      	sxth	r4, r3
 80011ce:	23ab      	movs	r3, #171	; 0xab
 80011d0:	4618      	mov	r0, r3
 80011d2:	f000 f8d3 	bl	800137c <BMP180_ReadReg>
 80011d6:	4603      	mov	r3, r0
 80011d8:	b21b      	sxth	r3, r3
 80011da:	4323      	orrs	r3, r4
 80011dc:	b21a      	sxth	r2, r3
 80011de:	4b58      	ldr	r3, [pc, #352]	; (8001340 <BMP180_UpdateCalibrationData+0x184>)
 80011e0:	801a      	strh	r2, [r3, #0]
	_bmp180_eeprom.BMP180_AC2 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC2]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC2]);
 80011e2:	23ac      	movs	r3, #172	; 0xac
 80011e4:	4618      	mov	r0, r3
 80011e6:	f000 f8c9 	bl	800137c <BMP180_ReadReg>
 80011ea:	4603      	mov	r3, r0
 80011ec:	021b      	lsls	r3, r3, #8
 80011ee:	b21c      	sxth	r4, r3
 80011f0:	23ad      	movs	r3, #173	; 0xad
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 f8c2 	bl	800137c <BMP180_ReadReg>
 80011f8:	4603      	mov	r3, r0
 80011fa:	b21b      	sxth	r3, r3
 80011fc:	4323      	orrs	r3, r4
 80011fe:	b21a      	sxth	r2, r3
 8001200:	4b4f      	ldr	r3, [pc, #316]	; (8001340 <BMP180_UpdateCalibrationData+0x184>)
 8001202:	805a      	strh	r2, [r3, #2]
	_bmp180_eeprom.BMP180_AC3 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC3]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC3]);
 8001204:	23ae      	movs	r3, #174	; 0xae
 8001206:	4618      	mov	r0, r3
 8001208:	f000 f8b8 	bl	800137c <BMP180_ReadReg>
 800120c:	4603      	mov	r3, r0
 800120e:	021b      	lsls	r3, r3, #8
 8001210:	b21c      	sxth	r4, r3
 8001212:	23af      	movs	r3, #175	; 0xaf
 8001214:	4618      	mov	r0, r3
 8001216:	f000 f8b1 	bl	800137c <BMP180_ReadReg>
 800121a:	4603      	mov	r3, r0
 800121c:	b21b      	sxth	r3, r3
 800121e:	4323      	orrs	r3, r4
 8001220:	b21a      	sxth	r2, r3
 8001222:	4b47      	ldr	r3, [pc, #284]	; (8001340 <BMP180_UpdateCalibrationData+0x184>)
 8001224:	809a      	strh	r2, [r3, #4]
	_bmp180_eeprom.BMP180_AC4 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC4]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC4]);
 8001226:	23b0      	movs	r3, #176	; 0xb0
 8001228:	4618      	mov	r0, r3
 800122a:	f000 f8a7 	bl	800137c <BMP180_ReadReg>
 800122e:	4603      	mov	r3, r0
 8001230:	021b      	lsls	r3, r3, #8
 8001232:	b21c      	sxth	r4, r3
 8001234:	23b1      	movs	r3, #177	; 0xb1
 8001236:	4618      	mov	r0, r3
 8001238:	f000 f8a0 	bl	800137c <BMP180_ReadReg>
 800123c:	4603      	mov	r3, r0
 800123e:	b21b      	sxth	r3, r3
 8001240:	4323      	orrs	r3, r4
 8001242:	b21b      	sxth	r3, r3
 8001244:	b29a      	uxth	r2, r3
 8001246:	4b3e      	ldr	r3, [pc, #248]	; (8001340 <BMP180_UpdateCalibrationData+0x184>)
 8001248:	80da      	strh	r2, [r3, #6]
	_bmp180_eeprom.BMP180_AC5 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC5]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC5]);
 800124a:	23b2      	movs	r3, #178	; 0xb2
 800124c:	4618      	mov	r0, r3
 800124e:	f000 f895 	bl	800137c <BMP180_ReadReg>
 8001252:	4603      	mov	r3, r0
 8001254:	021b      	lsls	r3, r3, #8
 8001256:	b21c      	sxth	r4, r3
 8001258:	23b3      	movs	r3, #179	; 0xb3
 800125a:	4618      	mov	r0, r3
 800125c:	f000 f88e 	bl	800137c <BMP180_ReadReg>
 8001260:	4603      	mov	r3, r0
 8001262:	b21b      	sxth	r3, r3
 8001264:	4323      	orrs	r3, r4
 8001266:	b21b      	sxth	r3, r3
 8001268:	b29a      	uxth	r2, r3
 800126a:	4b35      	ldr	r3, [pc, #212]	; (8001340 <BMP180_UpdateCalibrationData+0x184>)
 800126c:	811a      	strh	r2, [r3, #8]
	_bmp180_eeprom.BMP180_AC6 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC6]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC6]);
 800126e:	23b4      	movs	r3, #180	; 0xb4
 8001270:	4618      	mov	r0, r3
 8001272:	f000 f883 	bl	800137c <BMP180_ReadReg>
 8001276:	4603      	mov	r3, r0
 8001278:	021b      	lsls	r3, r3, #8
 800127a:	b21c      	sxth	r4, r3
 800127c:	23b5      	movs	r3, #181	; 0xb5
 800127e:	4618      	mov	r0, r3
 8001280:	f000 f87c 	bl	800137c <BMP180_ReadReg>
 8001284:	4603      	mov	r3, r0
 8001286:	b21b      	sxth	r3, r3
 8001288:	4323      	orrs	r3, r4
 800128a:	b21b      	sxth	r3, r3
 800128c:	b29a      	uxth	r2, r3
 800128e:	4b2c      	ldr	r3, [pc, #176]	; (8001340 <BMP180_UpdateCalibrationData+0x184>)
 8001290:	815a      	strh	r2, [r3, #10]
	_bmp180_eeprom.BMP180_B1 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_B1]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_B1]);
 8001292:	23b6      	movs	r3, #182	; 0xb6
 8001294:	4618      	mov	r0, r3
 8001296:	f000 f871 	bl	800137c <BMP180_ReadReg>
 800129a:	4603      	mov	r3, r0
 800129c:	021b      	lsls	r3, r3, #8
 800129e:	b21c      	sxth	r4, r3
 80012a0:	23b7      	movs	r3, #183	; 0xb7
 80012a2:	4618      	mov	r0, r3
 80012a4:	f000 f86a 	bl	800137c <BMP180_ReadReg>
 80012a8:	4603      	mov	r3, r0
 80012aa:	b21b      	sxth	r3, r3
 80012ac:	4323      	orrs	r3, r4
 80012ae:	b21a      	sxth	r2, r3
 80012b0:	4b23      	ldr	r3, [pc, #140]	; (8001340 <BMP180_UpdateCalibrationData+0x184>)
 80012b2:	819a      	strh	r2, [r3, #12]
	_bmp180_eeprom.BMP180_B2 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_B2]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_B2]);
 80012b4:	23b8      	movs	r3, #184	; 0xb8
 80012b6:	4618      	mov	r0, r3
 80012b8:	f000 f860 	bl	800137c <BMP180_ReadReg>
 80012bc:	4603      	mov	r3, r0
 80012be:	021b      	lsls	r3, r3, #8
 80012c0:	b21c      	sxth	r4, r3
 80012c2:	23b9      	movs	r3, #185	; 0xb9
 80012c4:	4618      	mov	r0, r3
 80012c6:	f000 f859 	bl	800137c <BMP180_ReadReg>
 80012ca:	4603      	mov	r3, r0
 80012cc:	b21b      	sxth	r3, r3
 80012ce:	4323      	orrs	r3, r4
 80012d0:	b21a      	sxth	r2, r3
 80012d2:	4b1b      	ldr	r3, [pc, #108]	; (8001340 <BMP180_UpdateCalibrationData+0x184>)
 80012d4:	81da      	strh	r2, [r3, #14]
	_bmp180_eeprom.BMP180_MB = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MB]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MB]);
 80012d6:	23ba      	movs	r3, #186	; 0xba
 80012d8:	4618      	mov	r0, r3
 80012da:	f000 f84f 	bl	800137c <BMP180_ReadReg>
 80012de:	4603      	mov	r3, r0
 80012e0:	021b      	lsls	r3, r3, #8
 80012e2:	b21c      	sxth	r4, r3
 80012e4:	23bb      	movs	r3, #187	; 0xbb
 80012e6:	4618      	mov	r0, r3
 80012e8:	f000 f848 	bl	800137c <BMP180_ReadReg>
 80012ec:	4603      	mov	r3, r0
 80012ee:	b21b      	sxth	r3, r3
 80012f0:	4323      	orrs	r3, r4
 80012f2:	b21a      	sxth	r2, r3
 80012f4:	4b12      	ldr	r3, [pc, #72]	; (8001340 <BMP180_UpdateCalibrationData+0x184>)
 80012f6:	821a      	strh	r2, [r3, #16]
	_bmp180_eeprom.BMP180_MC = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MC]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MC]);
 80012f8:	23bc      	movs	r3, #188	; 0xbc
 80012fa:	4618      	mov	r0, r3
 80012fc:	f000 f83e 	bl	800137c <BMP180_ReadReg>
 8001300:	4603      	mov	r3, r0
 8001302:	021b      	lsls	r3, r3, #8
 8001304:	b21c      	sxth	r4, r3
 8001306:	23bd      	movs	r3, #189	; 0xbd
 8001308:	4618      	mov	r0, r3
 800130a:	f000 f837 	bl	800137c <BMP180_ReadReg>
 800130e:	4603      	mov	r3, r0
 8001310:	b21b      	sxth	r3, r3
 8001312:	4323      	orrs	r3, r4
 8001314:	b21a      	sxth	r2, r3
 8001316:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <BMP180_UpdateCalibrationData+0x184>)
 8001318:	825a      	strh	r2, [r3, #18]
	_bmp180_eeprom.BMP180_MD = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MD]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MD]);
 800131a:	23be      	movs	r3, #190	; 0xbe
 800131c:	4618      	mov	r0, r3
 800131e:	f000 f82d 	bl	800137c <BMP180_ReadReg>
 8001322:	4603      	mov	r3, r0
 8001324:	021b      	lsls	r3, r3, #8
 8001326:	b21c      	sxth	r4, r3
 8001328:	23bf      	movs	r3, #191	; 0xbf
 800132a:	4618      	mov	r0, r3
 800132c:	f000 f826 	bl	800137c <BMP180_ReadReg>
 8001330:	4603      	mov	r3, r0
 8001332:	b21b      	sxth	r3, r3
 8001334:	4323      	orrs	r3, r4
 8001336:	b21a      	sxth	r2, r3
 8001338:	4b01      	ldr	r3, [pc, #4]	; (8001340 <BMP180_UpdateCalibrationData+0x184>)
 800133a:	829a      	strh	r2, [r3, #20]
}
 800133c:	bf00      	nop
 800133e:	bd98      	pop	{r3, r4, r7, pc}
 8001340:	2000026c 	.word	0x2000026c

08001344 <BMP180_WriteReg>:


//写入寄存器
void BMP180_WriteReg(uint8_t reg, uint8_t cmd) {
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af02      	add	r7, sp, #8
 800134a:	4603      	mov	r3, r0
 800134c:	460a      	mov	r2, r1
 800134e:	71fb      	strb	r3, [r7, #7]
 8001350:	4613      	mov	r3, r2
 8001352:	71bb      	strb	r3, [r7, #6]
	uint8_t arr[2] = { reg, cmd };
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	733b      	strb	r3, [r7, #12]
 8001358:	79bb      	ldrb	r3, [r7, #6]
 800135a:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, BMP180_I2C_ADDR << 1, arr, 2, BMP180_I2C_TIMEOUT);
 800135c:	f107 020c 	add.w	r2, r7, #12
 8001360:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001364:	9300      	str	r3, [sp, #0]
 8001366:	2302      	movs	r3, #2
 8001368:	21ee      	movs	r1, #238	; 0xee
 800136a:	4803      	ldr	r0, [pc, #12]	; (8001378 <BMP180_WriteReg+0x34>)
 800136c:	f002 fffe 	bl	800436c <HAL_I2C_Master_Transmit>
}
 8001370:	bf00      	nop
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	2000038c 	.word	0x2000038c

0800137c <BMP180_ReadReg>:

//读取寄存器
uint8_t BMP180_ReadReg(uint8_t reg) {
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af02      	add	r7, sp, #8
 8001382:	4603      	mov	r3, r0
 8001384:	71fb      	strb	r3, [r7, #7]
	//使用HAL_I2C_Mem_Write等于先使用HAL_I2C_Master_Transmit传输第一个寄存器地址，
	//再用HAL_I2C_Master_Transmit传输写入第一个寄存器的数据。可以传输多个数据
	//以下先把要接受的寄存器地址传给从机
	//&reg 本来就要求传一个指向一个地址值的指针
	HAL_I2C_Master_Transmit(&hi2c1, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 8001386:	1dfa      	adds	r2, r7, #7
 8001388:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800138c:	9300      	str	r3, [sp, #0]
 800138e:	2301      	movs	r3, #1
 8001390:	21ee      	movs	r1, #238	; 0xee
 8001392:	4809      	ldr	r0, [pc, #36]	; (80013b8 <BMP180_ReadReg+0x3c>)
 8001394:	f002 ffea 	bl	800436c <HAL_I2C_Master_Transmit>
	uint8_t result;
	HAL_I2C_Master_Receive(&hi2c1, BMP180_I2C_ADDR << 1, &result, 1, BMP180_I2C_TIMEOUT);
 8001398:	f107 020f 	add.w	r2, r7, #15
 800139c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	2301      	movs	r3, #1
 80013a4:	21ee      	movs	r1, #238	; 0xee
 80013a6:	4804      	ldr	r0, [pc, #16]	; (80013b8 <BMP180_ReadReg+0x3c>)
 80013a8:	f003 f8de 	bl	8004568 <HAL_I2C_Master_Receive>



	//HAL_I2C_Mem_Read(I2C1, BMP180_I2C_ADDR << 1, &reg, 1,result, 1, BMP180_I2C_TIMEOUT);
	return result;
 80013ac:	7bfb      	ldrb	r3, [r7, #15]


}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	2000038c 	.word	0x2000038c

080013bc <BMP180_GetRawTemperature>:

/**
 * @brief Measures and calculates temperature.
 * @return Temperature in 0.1 (1/10) degrees Celsius.
 */
int32_t BMP180_GetRawTemperature(void) {
 80013bc:	b590      	push	{r4, r7, lr}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
	//write 0x2E to reg 0xF4
	//设置温度4.5ms超采样
	BMP180_WriteReg(BMP180_CONTROL_REG, BMP180_CMD_TEMP);
 80013c2:	232e      	movs	r3, #46	; 0x2e
 80013c4:	4619      	mov	r1, r3
 80013c6:	20f4      	movs	r0, #244	; 0xf4
 80013c8:	f7ff ffbc 	bl	8001344 <BMP180_WriteReg>
	//等待4.5ms 以上
	HAL_Delay(BMP180_DELAY_TEMP);
 80013cc:	2305      	movs	r3, #5
 80013ce:	4618      	mov	r0, r3
 80013d0:	f001 fe80 	bl	80030d4 <HAL_Delay>

	int32_t ut = (BMP180_ReadReg(BMP180_MSB_REG) << 8) | BMP180_ReadReg(BMP180_LSB_REG);
 80013d4:	20f6      	movs	r0, #246	; 0xf6
 80013d6:	f7ff ffd1 	bl	800137c <BMP180_ReadReg>
 80013da:	4603      	mov	r3, r0
 80013dc:	021c      	lsls	r4, r3, #8
 80013de:	20f7      	movs	r0, #247	; 0xf7
 80013e0:	f7ff ffcc 	bl	800137c <BMP180_ReadReg>
 80013e4:	4603      	mov	r3, r0
 80013e6:	4323      	orrs	r3, r4
 80013e8:	60fb      	str	r3, [r7, #12]
	int32_t x1 = (ut - _bmp180_eeprom.BMP180_AC6) * _bmp180_eeprom.BMP180_AC5 / (1 << 15);
 80013ea:	4b15      	ldr	r3, [pc, #84]	; (8001440 <BMP180_GetRawTemperature+0x84>)
 80013ec:	895b      	ldrh	r3, [r3, #10]
 80013ee:	461a      	mov	r2, r3
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	1a9b      	subs	r3, r3, r2
 80013f4:	4a12      	ldr	r2, [pc, #72]	; (8001440 <BMP180_GetRawTemperature+0x84>)
 80013f6:	8912      	ldrh	r2, [r2, #8]
 80013f8:	fb02 f303 	mul.w	r3, r2, r3
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	da02      	bge.n	8001406 <BMP180_GetRawTemperature+0x4a>
 8001400:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8001404:	337f      	adds	r3, #127	; 0x7f
 8001406:	13db      	asrs	r3, r3, #15
 8001408:	60bb      	str	r3, [r7, #8]
	int32_t x2 = (_bmp180_eeprom.BMP180_MC * (1 << 11)) / (x1 + _bmp180_eeprom.BMP180_MD);
 800140a:	4b0d      	ldr	r3, [pc, #52]	; (8001440 <BMP180_GetRawTemperature+0x84>)
 800140c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001410:	02da      	lsls	r2, r3, #11
 8001412:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <BMP180_GetRawTemperature+0x84>)
 8001414:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001418:	4619      	mov	r1, r3
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	440b      	add	r3, r1
 800141e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001422:	607b      	str	r3, [r7, #4]
	int32_t b5 = x1 + x2;
 8001424:	68ba      	ldr	r2, [r7, #8]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4413      	add	r3, r2
 800142a:	603b      	str	r3, [r7, #0]
	return (b5 + 8) / (1 << 4);
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	3308      	adds	r3, #8
 8001430:	2b00      	cmp	r3, #0
 8001432:	da00      	bge.n	8001436 <BMP180_GetRawTemperature+0x7a>
 8001434:	330f      	adds	r3, #15
 8001436:	111b      	asrs	r3, r3, #4
}
 8001438:	4618      	mov	r0, r3
 800143a:	3714      	adds	r7, #20
 800143c:	46bd      	mov	sp, r7
 800143e:	bd90      	pop	{r4, r7, pc}
 8001440:	2000026c 	.word	0x2000026c

08001444 <BMP180_GetPressure>:

/**
 * @brief Measures and calculates pressure.
 * @return Pressure in Pascal(Pa).
 */
int32_t BMP180_GetPressure(void) {
 8001444:	b580      	push	{r7, lr}
 8001446:	b08c      	sub	sp, #48	; 0x30
 8001448:	af00      	add	r7, sp, #0
	//往控制寄存器0xf4里写0x2e，设置温度超采样
	BMP180_WriteReg(BMP180_CONTROL_REG, BMP180_CMD_TEMP);
 800144a:	232e      	movs	r3, #46	; 0x2e
 800144c:	4619      	mov	r1, r3
 800144e:	20f4      	movs	r0, #244	; 0xf4
 8001450:	f7ff ff78 	bl	8001344 <BMP180_WriteReg>
	//等待转换时间
	HAL_Delay(BMP180_DELAY_TEMP);
 8001454:	2305      	movs	r3, #5
 8001456:	4618      	mov	r0, r3
 8001458:	f001 fe3c 	bl	80030d4 <HAL_Delay>
	int32_t ut = BMP180_GetUT();
 800145c:	f000 f904 	bl	8001668 <BMP180_GetUT>
 8001460:	62b8      	str	r0, [r7, #40]	; 0x28
	BMP180_WriteReg(BMP180_CONTROL_REG, BMP180_CMD_PRES[_bmp180_oss]);
 8001462:	4b7c      	ldr	r3, [pc, #496]	; (8001654 <BMP180_GetPressure+0x210>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	461a      	mov	r2, r3
 8001468:	4b7b      	ldr	r3, [pc, #492]	; (8001658 <BMP180_GetPressure+0x214>)
 800146a:	5c9b      	ldrb	r3, [r3, r2]
 800146c:	4619      	mov	r1, r3
 800146e:	20f4      	movs	r0, #244	; 0xf4
 8001470:	f7ff ff68 	bl	8001344 <BMP180_WriteReg>
	HAL_Delay(BMP180_DELAY_PRES[_bmp180_oss]);
 8001474:	4b77      	ldr	r3, [pc, #476]	; (8001654 <BMP180_GetPressure+0x210>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	461a      	mov	r2, r3
 800147a:	4b78      	ldr	r3, [pc, #480]	; (800165c <BMP180_GetPressure+0x218>)
 800147c:	5c9b      	ldrb	r3, [r3, r2]
 800147e:	4618      	mov	r0, r3
 8001480:	f001 fe28 	bl	80030d4 <HAL_Delay>
	int32_t up = BMP180_GetUP();
 8001484:	f000 f8fe 	bl	8001684 <BMP180_GetUP>
 8001488:	6278      	str	r0, [r7, #36]	; 0x24
	int32_t x1 = (ut - _bmp180_eeprom.BMP180_AC6) * _bmp180_eeprom.BMP180_AC5 / (1 << 15);
 800148a:	4b75      	ldr	r3, [pc, #468]	; (8001660 <BMP180_GetPressure+0x21c>)
 800148c:	895b      	ldrh	r3, [r3, #10]
 800148e:	461a      	mov	r2, r3
 8001490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001492:	1a9b      	subs	r3, r3, r2
 8001494:	4a72      	ldr	r2, [pc, #456]	; (8001660 <BMP180_GetPressure+0x21c>)
 8001496:	8912      	ldrh	r2, [r2, #8]
 8001498:	fb02 f303 	mul.w	r3, r2, r3
 800149c:	2b00      	cmp	r3, #0
 800149e:	da02      	bge.n	80014a6 <BMP180_GetPressure+0x62>
 80014a0:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80014a4:	337f      	adds	r3, #127	; 0x7f
 80014a6:	13db      	asrs	r3, r3, #15
 80014a8:	623b      	str	r3, [r7, #32]
	int32_t x2 = (_bmp180_eeprom.BMP180_MC * (1 << 11)) / (x1 + _bmp180_eeprom.BMP180_MD);
 80014aa:	4b6d      	ldr	r3, [pc, #436]	; (8001660 <BMP180_GetPressure+0x21c>)
 80014ac:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80014b0:	02da      	lsls	r2, r3, #11
 80014b2:	4b6b      	ldr	r3, [pc, #428]	; (8001660 <BMP180_GetPressure+0x21c>)
 80014b4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80014b8:	4619      	mov	r1, r3
 80014ba:	6a3b      	ldr	r3, [r7, #32]
 80014bc:	440b      	add	r3, r1
 80014be:	fb92 f3f3 	sdiv	r3, r2, r3
 80014c2:	61fb      	str	r3, [r7, #28]
	int32_t b5 = x1 + x2;
 80014c4:	6a3a      	ldr	r2, [r7, #32]
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	4413      	add	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
	int32_t b6 = b5 - 4000;
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 80014d2:	617b      	str	r3, [r7, #20]
	x1 = (_bmp180_eeprom.BMP180_B2 * (b6 * b6 / (1 << 12))) / (1 << 11);
 80014d4:	4b62      	ldr	r3, [pc, #392]	; (8001660 <BMP180_GetPressure+0x21c>)
 80014d6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80014da:	4619      	mov	r1, r3
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	697a      	ldr	r2, [r7, #20]
 80014e0:	fb02 f303 	mul.w	r3, r2, r3
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	da01      	bge.n	80014ec <BMP180_GetPressure+0xa8>
 80014e8:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80014ec:	131b      	asrs	r3, r3, #12
 80014ee:	fb03 f301 	mul.w	r3, r3, r1
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	da01      	bge.n	80014fa <BMP180_GetPressure+0xb6>
 80014f6:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80014fa:	12db      	asrs	r3, r3, #11
 80014fc:	623b      	str	r3, [r7, #32]
	x2 = _bmp180_eeprom.BMP180_AC2 * b6 / (1 << 11);
 80014fe:	4b58      	ldr	r3, [pc, #352]	; (8001660 <BMP180_GetPressure+0x21c>)
 8001500:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001504:	461a      	mov	r2, r3
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	fb03 f302 	mul.w	r3, r3, r2
 800150c:	2b00      	cmp	r3, #0
 800150e:	da01      	bge.n	8001514 <BMP180_GetPressure+0xd0>
 8001510:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001514:	12db      	asrs	r3, r3, #11
 8001516:	61fb      	str	r3, [r7, #28]
	int32_t x3 = x1 + x2;
 8001518:	6a3a      	ldr	r2, [r7, #32]
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	4413      	add	r3, r2
 800151e:	613b      	str	r3, [r7, #16]
	int32_t b3 = (((_bmp180_eeprom.BMP180_AC1 * 4 + x3) << _bmp180_oss) + 2) / 4;
 8001520:	4b4f      	ldr	r3, [pc, #316]	; (8001660 <BMP180_GetPressure+0x21c>)
 8001522:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001526:	009a      	lsls	r2, r3, #2
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	4413      	add	r3, r2
 800152c:	4a49      	ldr	r2, [pc, #292]	; (8001654 <BMP180_GetPressure+0x210>)
 800152e:	7812      	ldrb	r2, [r2, #0]
 8001530:	4093      	lsls	r3, r2
 8001532:	3302      	adds	r3, #2
 8001534:	2b00      	cmp	r3, #0
 8001536:	da00      	bge.n	800153a <BMP180_GetPressure+0xf6>
 8001538:	3303      	adds	r3, #3
 800153a:	109b      	asrs	r3, r3, #2
 800153c:	60fb      	str	r3, [r7, #12]
	x1 = _bmp180_eeprom.BMP180_AC3 * b6 / (1 << 13);
 800153e:	4b48      	ldr	r3, [pc, #288]	; (8001660 <BMP180_GetPressure+0x21c>)
 8001540:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001544:	461a      	mov	r2, r3
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	fb03 f302 	mul.w	r3, r3, r2
 800154c:	2b00      	cmp	r3, #0
 800154e:	da02      	bge.n	8001556 <BMP180_GetPressure+0x112>
 8001550:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 8001554:	331f      	adds	r3, #31
 8001556:	135b      	asrs	r3, r3, #13
 8001558:	623b      	str	r3, [r7, #32]
	x2 = (_bmp180_eeprom.BMP180_B1 * (b6 * b6 / (1 << 12))) / (1 << 16);
 800155a:	4b41      	ldr	r3, [pc, #260]	; (8001660 <BMP180_GetPressure+0x21c>)
 800155c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001560:	4619      	mov	r1, r3
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	697a      	ldr	r2, [r7, #20]
 8001566:	fb02 f303 	mul.w	r3, r2, r3
 800156a:	2b00      	cmp	r3, #0
 800156c:	da01      	bge.n	8001572 <BMP180_GetPressure+0x12e>
 800156e:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001572:	131b      	asrs	r3, r3, #12
 8001574:	fb03 f301 	mul.w	r3, r3, r1
 8001578:	2b00      	cmp	r3, #0
 800157a:	da02      	bge.n	8001582 <BMP180_GetPressure+0x13e>
 800157c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001580:	33ff      	adds	r3, #255	; 0xff
 8001582:	141b      	asrs	r3, r3, #16
 8001584:	61fb      	str	r3, [r7, #28]
	x3 = ((x1 + x2) + 2) / 4;
 8001586:	6a3a      	ldr	r2, [r7, #32]
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	4413      	add	r3, r2
 800158c:	3302      	adds	r3, #2
 800158e:	2b00      	cmp	r3, #0
 8001590:	da00      	bge.n	8001594 <BMP180_GetPressure+0x150>
 8001592:	3303      	adds	r3, #3
 8001594:	109b      	asrs	r3, r3, #2
 8001596:	613b      	str	r3, [r7, #16]
	uint32_t b4 = _bmp180_eeprom.BMP180_AC4 * (uint32_t) (x3 + 32768) / (1 << 15);
 8001598:	4b31      	ldr	r3, [pc, #196]	; (8001660 <BMP180_GetPressure+0x21c>)
 800159a:	88db      	ldrh	r3, [r3, #6]
 800159c:	461a      	mov	r2, r3
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80015a4:	fb03 f302 	mul.w	r3, r3, r2
 80015a8:	0bdb      	lsrs	r3, r3, #15
 80015aa:	60bb      	str	r3, [r7, #8]
	uint32_t b7 = ((uint32_t) up - b3) * (50000 >> _bmp180_oss);
 80015ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	4a28      	ldr	r2, [pc, #160]	; (8001654 <BMP180_GetPressure+0x210>)
 80015b4:	7812      	ldrb	r2, [r2, #0]
 80015b6:	4611      	mov	r1, r2
 80015b8:	f24c 3250 	movw	r2, #50000	; 0xc350
 80015bc:	410a      	asrs	r2, r1
 80015be:	fb02 f303 	mul.w	r3, r2, r3
 80015c2:	607b      	str	r3, [r7, #4]
	int32_t p;
	if (b7 < 0x80000000)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	db06      	blt.n	80015d8 <BMP180_GetPressure+0x194>
		p = (b7 * 2) / b4;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	005a      	lsls	r2, r3, #1
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80015d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015d6:	e005      	b.n	80015e4 <BMP180_GetPressure+0x1a0>
	else
		p = (b7 / b4) * 2;
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	x1 = (p / (1 << 8)) * (p / (1 << 8));
 80015e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	da00      	bge.n	80015ec <BMP180_GetPressure+0x1a8>
 80015ea:	33ff      	adds	r3, #255	; 0xff
 80015ec:	121b      	asrs	r3, r3, #8
 80015ee:	461a      	mov	r2, r3
 80015f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	da00      	bge.n	80015f8 <BMP180_GetPressure+0x1b4>
 80015f6:	33ff      	adds	r3, #255	; 0xff
 80015f8:	121b      	asrs	r3, r3, #8
 80015fa:	fb03 f302 	mul.w	r3, r3, r2
 80015fe:	623b      	str	r3, [r7, #32]
	x1 = (x1 * 3038) / (1 << 16);
 8001600:	6a3b      	ldr	r3, [r7, #32]
 8001602:	f640 32de 	movw	r2, #3038	; 0xbde
 8001606:	fb02 f303 	mul.w	r3, r2, r3
 800160a:	2b00      	cmp	r3, #0
 800160c:	da02      	bge.n	8001614 <BMP180_GetPressure+0x1d0>
 800160e:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001612:	33ff      	adds	r3, #255	; 0xff
 8001614:	141b      	asrs	r3, r3, #16
 8001616:	623b      	str	r3, [r7, #32]
	x2 = (-7357 * p) / (1 << 16);
 8001618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800161a:	4a12      	ldr	r2, [pc, #72]	; (8001664 <BMP180_GetPressure+0x220>)
 800161c:	fb02 f303 	mul.w	r3, r2, r3
 8001620:	2b00      	cmp	r3, #0
 8001622:	da02      	bge.n	800162a <BMP180_GetPressure+0x1e6>
 8001624:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001628:	33ff      	adds	r3, #255	; 0xff
 800162a:	141b      	asrs	r3, r3, #16
 800162c:	61fb      	str	r3, [r7, #28]
	p = p + (x1 + x2 + 3791) / (1 << 4);
 800162e:	6a3a      	ldr	r2, [r7, #32]
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	4413      	add	r3, r2
 8001634:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8001638:	2b00      	cmp	r3, #0
 800163a:	da00      	bge.n	800163e <BMP180_GetPressure+0x1fa>
 800163c:	330f      	adds	r3, #15
 800163e:	111b      	asrs	r3, r3, #4
 8001640:	461a      	mov	r2, r3
 8001642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001644:	4413      	add	r3, r2
 8001646:	62fb      	str	r3, [r7, #44]	; 0x2c
	return p;
 8001648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800164a:	4618      	mov	r0, r3
 800164c:	3730      	adds	r7, #48	; 0x30
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20000282 	.word	0x20000282
 8001658:	0800a5b0 	.word	0x0800a5b0
 800165c:	0800a5b4 	.word	0x0800a5b4
 8001660:	2000026c 	.word	0x2000026c
 8001664:	ffffe343 	.word	0xffffe343

08001668 <BMP180_GetUT>:

//温度原始数据
int32_t BMP180_GetUT(void){
 8001668:	b598      	push	{r3, r4, r7, lr}
 800166a:	af00      	add	r7, sp, #0
	return (BMP180_ReadReg(BMP180_MSB_REG) << 8) | BMP180_ReadReg(BMP180_LSB_REG);
 800166c:	20f6      	movs	r0, #246	; 0xf6
 800166e:	f7ff fe85 	bl	800137c <BMP180_ReadReg>
 8001672:	4603      	mov	r3, r0
 8001674:	021c      	lsls	r4, r3, #8
 8001676:	20f7      	movs	r0, #247	; 0xf7
 8001678:	f7ff fe80 	bl	800137c <BMP180_ReadReg>
 800167c:	4603      	mov	r3, r0
 800167e:	4323      	orrs	r3, r4
}
 8001680:	4618      	mov	r0, r3
 8001682:	bd98      	pop	{r3, r4, r7, pc}

08001684 <BMP180_GetUP>:
//压力原始数据
int32_t BMP180_GetUP(void){
 8001684:	b598      	push	{r3, r4, r7, lr}
 8001686:	af00      	add	r7, sp, #0
	return ((BMP180_ReadReg(BMP180_MSB_REG) << 16) | (BMP180_ReadReg(BMP180_LSB_REG) << 8) | BMP180_ReadReg(BMP180_XLSB_REG)) >> (8 - _bmp180_oss);
 8001688:	20f6      	movs	r0, #246	; 0xf6
 800168a:	f7ff fe77 	bl	800137c <BMP180_ReadReg>
 800168e:	4603      	mov	r3, r0
 8001690:	041c      	lsls	r4, r3, #16
 8001692:	20f7      	movs	r0, #247	; 0xf7
 8001694:	f7ff fe72 	bl	800137c <BMP180_ReadReg>
 8001698:	4603      	mov	r3, r0
 800169a:	021b      	lsls	r3, r3, #8
 800169c:	431c      	orrs	r4, r3
 800169e:	20f8      	movs	r0, #248	; 0xf8
 80016a0:	f7ff fe6c 	bl	800137c <BMP180_ReadReg>
 80016a4:	4603      	mov	r3, r0
 80016a6:	ea44 0203 	orr.w	r2, r4, r3
 80016aa:	4b04      	ldr	r3, [pc, #16]	; (80016bc <BMP180_GetUP+0x38>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	f1c3 0308 	rsb	r3, r3, #8
 80016b2:	fa42 f303 	asr.w	r3, r2, r3
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	bd98      	pop	{r3, r4, r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20000282 	.word	0x20000282

080016c0 <goToOutput>:
#define lineDown() 	HAL_GPIO_WritePin(DHT_Port, DHT_Pin, GPIO_PIN_RESET)
#define lineUp()		HAL_GPIO_WritePin(DHT_Port, DHT_Pin, GPIO_PIN_SET)
#define getLine()		(HAL_GPIO_ReadPin(DHT_Port, DHT_Pin) == GPIO_PIN_SET)
#define Delay(d)		HAL_Delay(d)

static void goToOutput(void) {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c6:	463b      	mov	r3, r7
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]

  //По умолчанию на линии высокий уровень
  HAL_GPIO_WritePin(DHT_Port, DHT_Pin, GPIO_PIN_SET);
 80016d2:	2201      	movs	r2, #1
 80016d4:	2110      	movs	r1, #16
 80016d6:	480a      	ldr	r0, [pc, #40]	; (8001700 <goToOutput+0x40>)
 80016d8:	f002 fcf7 	bl	80040ca <HAL_GPIO_WritePin>

  //Настройка порта на выход 
  GPIO_InitStruct.Pin = DHT_Pin;
 80016dc:	2310      	movs	r3, #16
 80016de:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; 	//Открытый сток
 80016e0:	2311      	movs	r3, #17
 80016e2:	607b      	str	r3, [r7, #4]
	#if DHT_PullUp == 1
  GPIO_InitStruct.Pull = GPIO_PULLUP;						//Подтяжка к питанию
	#else 
  GPIO_InitStruct.Pull = GPIO_NOPULL;						//Без подтяжки
 80016e4:	2300      	movs	r3, #0
 80016e6:	60bb      	str	r3, [r7, #8]
	#endif
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; //Высокая скорость работы порта
 80016e8:	2303      	movs	r3, #3
 80016ea:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DHT_Port, &GPIO_InitStruct);
 80016ec:	463b      	mov	r3, r7
 80016ee:	4619      	mov	r1, r3
 80016f0:	4803      	ldr	r0, [pc, #12]	; (8001700 <goToOutput+0x40>)
 80016f2:	f002 fb79 	bl	8003de8 <HAL_GPIO_Init>
}
 80016f6:	bf00      	nop
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40010800 	.word	0x40010800

08001704 <goToInput>:

static void goToInput(void) {
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170a:	463b      	mov	r3, r7
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]

  //Настройка порта на вход 
  GPIO_InitStruct.Pin = DHT_Pin;
 8001716:	2310      	movs	r3, #16
 8001718:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800171a:	2300      	movs	r3, #0
 800171c:	607b      	str	r3, [r7, #4]
	#if DHT_PullUp == 1
  GPIO_InitStruct.Pull = GPIO_PULLUP;						//Подтяжка к питанию
	#else 
  GPIO_InitStruct.Pull = GPIO_NOPULL;						//Без подтяжки
 800171e:	2300      	movs	r3, #0
 8001720:	60bb      	str	r3, [r7, #8]
	#endif
  HAL_GPIO_Init(DHT_Port, &GPIO_InitStruct);
 8001722:	463b      	mov	r3, r7
 8001724:	4619      	mov	r1, r3
 8001726:	4803      	ldr	r0, [pc, #12]	; (8001734 <goToInput+0x30>)
 8001728:	f002 fb5e 	bl	8003de8 <HAL_GPIO_Init>
}
 800172c:	bf00      	nop
 800172e:	3710      	adds	r7, #16
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40010800 	.word	0x40010800

08001738 <DHT_getData>:

DHT_data DHT_getData(DHT_type t) {
 8001738:	b580      	push	{r7, lr}
 800173a:	b08a      	sub	sp, #40	; 0x28
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	460b      	mov	r3, r1
 8001742:	70fb      	strb	r3, [r7, #3]
	DHT_data data = {0.0f, 0.0f};
 8001744:	f04f 0300 	mov.w	r3, #0
 8001748:	617b      	str	r3, [r7, #20]
 800174a:	f04f 0300 	mov.w	r3, #0
 800174e:	61bb      	str	r3, [r7, #24]
	
	/* Запрос данных у датчика */
	//Перевод пина "на выход"
	goToOutput();
 8001750:	f7ff ffb6 	bl	80016c0 <goToOutput>
	//Опускание линии данных на 15 мс
	lineDown();
 8001754:	2200      	movs	r2, #0
 8001756:	2110      	movs	r1, #16
 8001758:	4892      	ldr	r0, [pc, #584]	; (80019a4 <DHT_getData+0x26c>)
 800175a:	f002 fcb6 	bl	80040ca <HAL_GPIO_WritePin>
	Delay(15);
 800175e:	200f      	movs	r0, #15
 8001760:	f001 fcb8 	bl	80030d4 <HAL_Delay>
	//Подъём линии, перевод порта "на вход"
	lineUp();
 8001764:	2201      	movs	r2, #1
 8001766:	2110      	movs	r1, #16
 8001768:	488e      	ldr	r0, [pc, #568]	; (80019a4 <DHT_getData+0x26c>)
 800176a:	f002 fcae 	bl	80040ca <HAL_GPIO_WritePin>
	goToInput();
 800176e:	f7ff ffc9 	bl	8001704 <goToInput>
	
	/* Ожидание ответа от датчика */
	uint16_t timeout = 0;
 8001772:	2300      	movs	r3, #0
 8001774:	84fb      	strh	r3, [r7, #38]	; 0x26
	//Ожидание спада
	while(getLine()) {
 8001776:	e010      	b.n	800179a <DHT_getData+0x62>
		timeout++;
 8001778:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800177a:	3301      	adds	r3, #1
 800177c:	84fb      	strh	r3, [r7, #38]	; 0x26
		if (timeout > DHT_timeout) return data;
 800177e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001780:	f242 7210 	movw	r2, #10000	; 0x2710
 8001784:	4293      	cmp	r3, r2
 8001786:	d908      	bls.n	800179a <DHT_getData+0x62>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	461a      	mov	r2, r3
 800178c:	f107 0314 	add.w	r3, r7, #20
 8001790:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001794:	e882 0003 	stmia.w	r2, {r0, r1}
 8001798:	e0ff      	b.n	800199a <DHT_getData+0x262>
	while(getLine()) {
 800179a:	2110      	movs	r1, #16
 800179c:	4881      	ldr	r0, [pc, #516]	; (80019a4 <DHT_getData+0x26c>)
 800179e:	f002 fc7d 	bl	800409c <HAL_GPIO_ReadPin>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d0e7      	beq.n	8001778 <DHT_getData+0x40>
	}
	timeout = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	84fb      	strh	r3, [r7, #38]	; 0x26
	//Ожидание подъёма
	while(!getLine()) {
 80017ac:	e010      	b.n	80017d0 <DHT_getData+0x98>
		timeout++;
 80017ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017b0:	3301      	adds	r3, #1
 80017b2:	84fb      	strh	r3, [r7, #38]	; 0x26
		if (timeout > DHT_timeout) return data;
 80017b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017b6:	f242 7210 	movw	r2, #10000	; 0x2710
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d908      	bls.n	80017d0 <DHT_getData+0x98>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	461a      	mov	r2, r3
 80017c2:	f107 0314 	add.w	r3, r7, #20
 80017c6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80017ca:	e882 0003 	stmia.w	r2, {r0, r1}
 80017ce:	e0e4      	b.n	800199a <DHT_getData+0x262>
	while(!getLine()) {
 80017d0:	2110      	movs	r1, #16
 80017d2:	4874      	ldr	r0, [pc, #464]	; (80019a4 <DHT_getData+0x26c>)
 80017d4:	f002 fc62 	bl	800409c <HAL_GPIO_ReadPin>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d1e7      	bne.n	80017ae <DHT_getData+0x76>
	}
	timeout = 0;
 80017de:	2300      	movs	r3, #0
 80017e0:	84fb      	strh	r3, [r7, #38]	; 0x26
	//Ожидание спада
	while(getLine()) {
 80017e2:	e010      	b.n	8001806 <DHT_getData+0xce>
		timeout++;
 80017e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017e6:	3301      	adds	r3, #1
 80017e8:	84fb      	strh	r3, [r7, #38]	; 0x26
		if (timeout > DHT_timeout) return data;
 80017ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017ec:	f242 7210 	movw	r2, #10000	; 0x2710
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d908      	bls.n	8001806 <DHT_getData+0xce>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	461a      	mov	r2, r3
 80017f8:	f107 0314 	add.w	r3, r7, #20
 80017fc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001800:	e882 0003 	stmia.w	r2, {r0, r1}
 8001804:	e0c9      	b.n	800199a <DHT_getData+0x262>
	while(getLine()) {
 8001806:	2110      	movs	r1, #16
 8001808:	4866      	ldr	r0, [pc, #408]	; (80019a4 <DHT_getData+0x26c>)
 800180a:	f002 fc47 	bl	800409c <HAL_GPIO_ReadPin>
 800180e:	4603      	mov	r3, r0
 8001810:	2b01      	cmp	r3, #1
 8001812:	d0e7      	beq.n	80017e4 <DHT_getData+0xac>
	}
	
	/* Чтение ответа от датчика */
	uint8_t rawData[5] = {0,0,0,0,0};
 8001814:	f107 030c 	add.w	r3, r7, #12
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	711a      	strb	r2, [r3, #4]
	for(uint8_t a = 0; a < 5; a++) {
 800181e:	2300      	movs	r3, #0
 8001820:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001824:	e05a      	b.n	80018dc <DHT_getData+0x1a4>
		for(uint8_t b = 7; b != 255; b--) {
 8001826:	2307      	movs	r3, #7
 8001828:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800182c:	e04d      	b.n	80018ca <DHT_getData+0x192>
			uint32_t hT = 0, lT = 0;
 800182e:	2300      	movs	r3, #0
 8001830:	623b      	str	r3, [r7, #32]
 8001832:	2300      	movs	r3, #0
 8001834:	61fb      	str	r3, [r7, #28]
			//Пока линия в низком уровне, инкремент переменной lT
			while(!getLine()) lT++;
 8001836:	e002      	b.n	800183e <DHT_getData+0x106>
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	3301      	adds	r3, #1
 800183c:	61fb      	str	r3, [r7, #28]
 800183e:	2110      	movs	r1, #16
 8001840:	4858      	ldr	r0, [pc, #352]	; (80019a4 <DHT_getData+0x26c>)
 8001842:	f002 fc2b 	bl	800409c <HAL_GPIO_ReadPin>
 8001846:	4603      	mov	r3, r0
 8001848:	2b01      	cmp	r3, #1
 800184a:	d1f5      	bne.n	8001838 <DHT_getData+0x100>
			//Пока линия в высоком уровне, инкремент переменной hT
			timeout = 0;
 800184c:	2300      	movs	r3, #0
 800184e:	84fb      	strh	r3, [r7, #38]	; 0x26
			while(getLine()) {
 8001850:	e013      	b.n	800187a <DHT_getData+0x142>
				hT++; timeout++;
 8001852:	6a3b      	ldr	r3, [r7, #32]
 8001854:	3301      	adds	r3, #1
 8001856:	623b      	str	r3, [r7, #32]
 8001858:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800185a:	3301      	adds	r3, #1
 800185c:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (timeout > DHT_timeout) return data;
 800185e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001860:	f242 7210 	movw	r2, #10000	; 0x2710
 8001864:	4293      	cmp	r3, r2
 8001866:	d908      	bls.n	800187a <DHT_getData+0x142>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	461a      	mov	r2, r3
 800186c:	f107 0314 	add.w	r3, r7, #20
 8001870:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001874:	e882 0003 	stmia.w	r2, {r0, r1}
 8001878:	e08f      	b.n	800199a <DHT_getData+0x262>
			while(getLine()) {
 800187a:	2110      	movs	r1, #16
 800187c:	4849      	ldr	r0, [pc, #292]	; (80019a4 <DHT_getData+0x26c>)
 800187e:	f002 fc0d 	bl	800409c <HAL_GPIO_ReadPin>
 8001882:	4603      	mov	r3, r0
 8001884:	2b01      	cmp	r3, #1
 8001886:	d0e4      	beq.n	8001852 <DHT_getData+0x11a>
			}
			//Если hT больше lT, то пришла единица
			if(hT > lT) rawData[a] |= (1<<b);
 8001888:	6a3a      	ldr	r2, [r7, #32]
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	429a      	cmp	r2, r3
 800188e:	d917      	bls.n	80018c0 <DHT_getData+0x188>
 8001890:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001894:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001898:	4413      	add	r3, r2
 800189a:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800189e:	b25a      	sxtb	r2, r3
 80018a0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80018a4:	2101      	movs	r1, #1
 80018a6:	fa01 f303 	lsl.w	r3, r1, r3
 80018aa:	b25b      	sxtb	r3, r3
 80018ac:	4313      	orrs	r3, r2
 80018ae:	b25a      	sxtb	r2, r3
 80018b0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80018b4:	b2d2      	uxtb	r2, r2
 80018b6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80018ba:	440b      	add	r3, r1
 80018bc:	f803 2c1c 	strb.w	r2, [r3, #-28]
		for(uint8_t b = 7; b != 255; b--) {
 80018c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80018c4:	3b01      	subs	r3, #1
 80018c6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80018ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80018ce:	2bff      	cmp	r3, #255	; 0xff
 80018d0:	d1ad      	bne.n	800182e <DHT_getData+0xf6>
	for(uint8_t a = 0; a < 5; a++) {
 80018d2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80018d6:	3301      	adds	r3, #1
 80018d8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80018dc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80018e0:	2b04      	cmp	r3, #4
 80018e2:	d9a0      	bls.n	8001826 <DHT_getData+0xee>
		}
	}
	/* Проверка целостности данных */
	if((uint8_t)(rawData[0] + rawData[1] + rawData[2] + rawData[3]) == rawData[4]) {
 80018e4:	7b3a      	ldrb	r2, [r7, #12]
 80018e6:	7b7b      	ldrb	r3, [r7, #13]
 80018e8:	4413      	add	r3, r2
 80018ea:	b2da      	uxtb	r2, r3
 80018ec:	7bbb      	ldrb	r3, [r7, #14]
 80018ee:	4413      	add	r3, r2
 80018f0:	b2da      	uxtb	r2, r3
 80018f2:	7bfb      	ldrb	r3, [r7, #15]
 80018f4:	4413      	add	r3, r2
 80018f6:	b2da      	uxtb	r2, r3
 80018f8:	7c3b      	ldrb	r3, [r7, #16]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d145      	bne.n	800198a <DHT_getData+0x252>
		//Если контрольная сумма совпадает, то конвертация и возврат полученных значений
		if (t == DHT22) {
 80018fe:	78fb      	ldrb	r3, [r7, #3]
 8001900:	2b01      	cmp	r3, #1
 8001902:	d133      	bne.n	800196c <DHT_getData+0x234>
			data.hum = (float)(((uint16_t)rawData[0]<<8) | rawData[1])*0.1f;
 8001904:	7b3b      	ldrb	r3, [r7, #12]
 8001906:	021b      	lsls	r3, r3, #8
 8001908:	7b7a      	ldrb	r2, [r7, #13]
 800190a:	4313      	orrs	r3, r2
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff f9e5 	bl	8000cdc <__aeabi_i2f>
 8001912:	4603      	mov	r3, r0
 8001914:	4924      	ldr	r1, [pc, #144]	; (80019a8 <DHT_getData+0x270>)
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff fa34 	bl	8000d84 <__aeabi_fmul>
 800191c:	4603      	mov	r3, r0
 800191e:	617b      	str	r3, [r7, #20]
			//Проверка на отрицательность температуры
			if(!(rawData[2] & (1<<7))) {
 8001920:	7bbb      	ldrb	r3, [r7, #14]
 8001922:	b25b      	sxtb	r3, r3
 8001924:	2b00      	cmp	r3, #0
 8001926:	db0e      	blt.n	8001946 <DHT_getData+0x20e>
				data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*0.1f;
 8001928:	7bbb      	ldrb	r3, [r7, #14]
 800192a:	021b      	lsls	r3, r3, #8
 800192c:	7bfa      	ldrb	r2, [r7, #15]
 800192e:	4313      	orrs	r3, r2
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff f9d3 	bl	8000cdc <__aeabi_i2f>
 8001936:	4603      	mov	r3, r0
 8001938:	491b      	ldr	r1, [pc, #108]	; (80019a8 <DHT_getData+0x270>)
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff fa22 	bl	8000d84 <__aeabi_fmul>
 8001940:	4603      	mov	r3, r0
 8001942:	61bb      	str	r3, [r7, #24]
 8001944:	e012      	b.n	800196c <DHT_getData+0x234>
			}	else {
				rawData[2] &= ~(1<<7);
 8001946:	7bbb      	ldrb	r3, [r7, #14]
 8001948:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800194c:	b2db      	uxtb	r3, r3
 800194e:	73bb      	strb	r3, [r7, #14]
				data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*-0.1f;
 8001950:	7bbb      	ldrb	r3, [r7, #14]
 8001952:	021b      	lsls	r3, r3, #8
 8001954:	7bfa      	ldrb	r2, [r7, #15]
 8001956:	4313      	orrs	r3, r2
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff f9bf 	bl	8000cdc <__aeabi_i2f>
 800195e:	4603      	mov	r3, r0
 8001960:	4912      	ldr	r1, [pc, #72]	; (80019ac <DHT_getData+0x274>)
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff fa0e 	bl	8000d84 <__aeabi_fmul>
 8001968:	4603      	mov	r3, r0
 800196a:	61bb      	str	r3, [r7, #24]
			}
		}
		if (t == DHT11) {
 800196c:	78fb      	ldrb	r3, [r7, #3]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d10b      	bne.n	800198a <DHT_getData+0x252>
			data.hum = (float)rawData[0];
 8001972:	7b3b      	ldrb	r3, [r7, #12]
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff f9ad 	bl	8000cd4 <__aeabi_ui2f>
 800197a:	4603      	mov	r3, r0
 800197c:	617b      	str	r3, [r7, #20]
			data.temp = (float)rawData[2];;
 800197e:	7bbb      	ldrb	r3, [r7, #14]
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff f9a7 	bl	8000cd4 <__aeabi_ui2f>
 8001986:	4603      	mov	r3, r0
 8001988:	61bb      	str	r3, [r7, #24]
		}
	}
	
	return data;	
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	461a      	mov	r2, r3
 800198e:	f107 0314 	add.w	r3, r7, #20
 8001992:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001996:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	3728      	adds	r7, #40	; 0x28
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40010800 	.word	0x40010800
 80019a8:	3dcccccd 	.word	0x3dcccccd
 80019ac:	bdcccccd 	.word	0xbdcccccd

080019b0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80019b6:	1d3b      	adds	r3, r7, #4
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 80019c0:	4b18      	ldr	r3, [pc, #96]	; (8001a24 <MX_ADC1_Init+0x74>)
 80019c2:	4a19      	ldr	r2, [pc, #100]	; (8001a28 <MX_ADC1_Init+0x78>)
 80019c4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80019c6:	4b17      	ldr	r3, [pc, #92]	; (8001a24 <MX_ADC1_Init+0x74>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80019cc:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <MX_ADC1_Init+0x74>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019d2:	4b14      	ldr	r3, [pc, #80]	; (8001a24 <MX_ADC1_Init+0x74>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019d8:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <MX_ADC1_Init+0x74>)
 80019da:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80019de:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019e0:	4b10      	ldr	r3, [pc, #64]	; (8001a24 <MX_ADC1_Init+0x74>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80019e6:	4b0f      	ldr	r3, [pc, #60]	; (8001a24 <MX_ADC1_Init+0x74>)
 80019e8:	2201      	movs	r2, #1
 80019ea:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019ec:	480d      	ldr	r0, [pc, #52]	; (8001a24 <MX_ADC1_Init+0x74>)
 80019ee:	f001 fb93 	bl	8003118 <HAL_ADC_Init>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80019f8:	f000 fe9e 	bl	8002738 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80019fc:	2301      	movs	r3, #1
 80019fe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a00:	2301      	movs	r3, #1
 8001a02:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001a04:	2300      	movs	r3, #0
 8001a06:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a08:	1d3b      	adds	r3, r7, #4
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4805      	ldr	r0, [pc, #20]	; (8001a24 <MX_ADC1_Init+0x74>)
 8001a0e:	f001 fe3b 	bl	8003688 <HAL_ADC_ConfigChannel>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001a18:	f000 fe8e 	bl	8002738 <Error_Handler>
  }

}
 8001a1c:	bf00      	nop
 8001a1e:	3710      	adds	r7, #16
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	20000284 	.word	0x20000284
 8001a28:	40012400 	.word	0x40012400

08001a2c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b088      	sub	sp, #32
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a34:	f107 0310 	add.w	r3, r7, #16
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
 8001a40:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a14      	ldr	r2, [pc, #80]	; (8001a98 <HAL_ADC_MspInit+0x6c>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d121      	bne.n	8001a90 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a4c:	4b13      	ldr	r3, [pc, #76]	; (8001a9c <HAL_ADC_MspInit+0x70>)
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	4a12      	ldr	r2, [pc, #72]	; (8001a9c <HAL_ADC_MspInit+0x70>)
 8001a52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a56:	6193      	str	r3, [r2, #24]
 8001a58:	4b10      	ldr	r3, [pc, #64]	; (8001a9c <HAL_ADC_MspInit+0x70>)
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a64:	4b0d      	ldr	r3, [pc, #52]	; (8001a9c <HAL_ADC_MspInit+0x70>)
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	4a0c      	ldr	r2, [pc, #48]	; (8001a9c <HAL_ADC_MspInit+0x70>)
 8001a6a:	f043 0304 	orr.w	r3, r3, #4
 8001a6e:	6193      	str	r3, [r2, #24]
 8001a70:	4b0a      	ldr	r3, [pc, #40]	; (8001a9c <HAL_ADC_MspInit+0x70>)
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	f003 0304 	and.w	r3, r3, #4
 8001a78:	60bb      	str	r3, [r7, #8]
 8001a7a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a80:	2303      	movs	r3, #3
 8001a82:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a84:	f107 0310 	add.w	r3, r7, #16
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4805      	ldr	r0, [pc, #20]	; (8001aa0 <HAL_ADC_MspInit+0x74>)
 8001a8c:	f002 f9ac 	bl	8003de8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001a90:	bf00      	nop
 8001a92:	3720      	adds	r7, #32
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40012400 	.word	0x40012400
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	40010800 	.word	0x40010800

08001aa4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b088      	sub	sp, #32
 8001aa8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aaa:	f107 0310 	add.w	r3, r7, #16
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	605a      	str	r2, [r3, #4]
 8001ab4:	609a      	str	r2, [r3, #8]
 8001ab6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ab8:	4b4b      	ldr	r3, [pc, #300]	; (8001be8 <MX_GPIO_Init+0x144>)
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	4a4a      	ldr	r2, [pc, #296]	; (8001be8 <MX_GPIO_Init+0x144>)
 8001abe:	f043 0310 	orr.w	r3, r3, #16
 8001ac2:	6193      	str	r3, [r2, #24]
 8001ac4:	4b48      	ldr	r3, [pc, #288]	; (8001be8 <MX_GPIO_Init+0x144>)
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	f003 0310 	and.w	r3, r3, #16
 8001acc:	60fb      	str	r3, [r7, #12]
 8001ace:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ad0:	4b45      	ldr	r3, [pc, #276]	; (8001be8 <MX_GPIO_Init+0x144>)
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	4a44      	ldr	r2, [pc, #272]	; (8001be8 <MX_GPIO_Init+0x144>)
 8001ad6:	f043 0320 	orr.w	r3, r3, #32
 8001ada:	6193      	str	r3, [r2, #24]
 8001adc:	4b42      	ldr	r3, [pc, #264]	; (8001be8 <MX_GPIO_Init+0x144>)
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	f003 0320 	and.w	r3, r3, #32
 8001ae4:	60bb      	str	r3, [r7, #8]
 8001ae6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae8:	4b3f      	ldr	r3, [pc, #252]	; (8001be8 <MX_GPIO_Init+0x144>)
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	4a3e      	ldr	r2, [pc, #248]	; (8001be8 <MX_GPIO_Init+0x144>)
 8001aee:	f043 0304 	orr.w	r3, r3, #4
 8001af2:	6193      	str	r3, [r2, #24]
 8001af4:	4b3c      	ldr	r3, [pc, #240]	; (8001be8 <MX_GPIO_Init+0x144>)
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	f003 0304 	and.w	r3, r3, #4
 8001afc:	607b      	str	r3, [r7, #4]
 8001afe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b00:	4b39      	ldr	r3, [pc, #228]	; (8001be8 <MX_GPIO_Init+0x144>)
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	4a38      	ldr	r2, [pc, #224]	; (8001be8 <MX_GPIO_Init+0x144>)
 8001b06:	f043 0308 	orr.w	r3, r3, #8
 8001b0a:	6193      	str	r3, [r2, #24]
 8001b0c:	4b36      	ldr	r3, [pc, #216]	; (8001be8 <MX_GPIO_Init+0x144>)
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	f003 0308 	and.w	r3, r3, #8
 8001b14:	603b      	str	r3, [r7, #0]
 8001b16:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b1e:	4833      	ldr	r0, [pc, #204]	; (8001bec <MX_GPIO_Init+0x148>)
 8001b20:	f002 fad3 	bl	80040ca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Trig_Pin|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001b24:	2200      	movs	r2, #0
 8001b26:	f44f 6172 	mov.w	r1, #3872	; 0xf20
 8001b2a:	4831      	ldr	r0, [pc, #196]	; (8001bf0 <MX_GPIO_Init+0x14c>)
 8001b2c:	f002 facd 	bl	80040ca <HAL_GPIO_WritePin>
                          |GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001b30:	2200      	movs	r2, #0
 8001b32:	2103      	movs	r1, #3
 8001b34:	482f      	ldr	r0, [pc, #188]	; (8001bf4 <MX_GPIO_Init+0x150>)
 8001b36:	f002 fac8 	bl	80040ca <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001b3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b40:	2301      	movs	r3, #1
 8001b42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b44:	2300      	movs	r3, #0
 8001b46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b4c:	f107 0310 	add.w	r3, r7, #16
 8001b50:	4619      	mov	r1, r3
 8001b52:	4826      	ldr	r0, [pc, #152]	; (8001bec <MX_GPIO_Init+0x148>)
 8001b54:	f002 f948 	bl	8003de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA12 */
  GPIO_InitStruct.Pin = DHT11_Pin|GPIO_PIN_12;
 8001b58:	f241 0310 	movw	r3, #4112	; 0x1010
 8001b5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b62:	2301      	movs	r3, #1
 8001b64:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b66:	f107 0310 	add.w	r3, r7, #16
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4820      	ldr	r0, [pc, #128]	; (8001bf0 <MX_GPIO_Init+0x14c>)
 8001b6e:	f002 f93b 	bl	8003de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA8 PA9 PA10
                           PA11 */
  GPIO_InitStruct.Pin = Trig_Pin|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001b72:	f44f 6372 	mov.w	r3, #3872	; 0xf20
 8001b76:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b80:	2302      	movs	r3, #2
 8001b82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b84:	f107 0310 	add.w	r3, r7, #16
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4819      	ldr	r0, [pc, #100]	; (8001bf0 <MX_GPIO_Init+0x14c>)
 8001b8c:	f002 f92c 	bl	8003de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Echo_Pin;
 8001b90:	2340      	movs	r3, #64	; 0x40
 8001b92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b94:	2300      	movs	r3, #0
 8001b96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 8001b9c:	f107 0310 	add.w	r3, r7, #16
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4813      	ldr	r0, [pc, #76]	; (8001bf0 <MX_GPIO_Init+0x14c>)
 8001ba4:	f002 f920 	bl	8003de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bac:	2301      	movs	r3, #1
 8001bae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb8:	f107 0310 	add.w	r3, r7, #16
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	480d      	ldr	r0, [pc, #52]	; (8001bf4 <MX_GPIO_Init+0x150>)
 8001bc0:	f002 f912 	bl	8003de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001bc4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001bc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001bce:	2302      	movs	r3, #2
 8001bd0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bd2:	f107 0310 	add.w	r3, r7, #16
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4806      	ldr	r0, [pc, #24]	; (8001bf4 <MX_GPIO_Init+0x150>)
 8001bda:	f002 f905 	bl	8003de8 <HAL_GPIO_Init>

}
 8001bde:	bf00      	nop
 8001be0:	3720      	adds	r7, #32
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40021000 	.word	0x40021000
 8001bec:	40011000 	.word	0x40011000
 8001bf0:	40010800 	.word	0x40010800
 8001bf4:	40010c00 	.word	0x40010c00

08001bf8 <GPS_Init>:
	CDC_Transmit_FS((unsigned char *) buf, (uint16_t) strlen(buf));
}
#endif

void GPS_Init()
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	4903      	ldr	r1, [pc, #12]	; (8001c0c <GPS_Init+0x14>)
 8001c00:	4803      	ldr	r0, [pc, #12]	; (8001c10 <GPS_Init+0x18>)
 8001c02:	f005 f82e 	bl	8006c62 <HAL_UART_Receive_IT>
}
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	200001fc 	.word	0x200001fc
 8001c10:	20000494 	.word	0x20000494

08001c14 <GPS_UART_CallBack>:


void GPS_UART_CallBack(){
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
	if (rx_data != '\n' && rx_index < sizeof(rx_buffer)) {
 8001c18:	4b16      	ldr	r3, [pc, #88]	; (8001c74 <GPS_UART_CallBack+0x60>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	2b0a      	cmp	r3, #10
 8001c1e:	d010      	beq.n	8001c42 <GPS_UART_CallBack+0x2e>
 8001c20:	4b15      	ldr	r3, [pc, #84]	; (8001c78 <GPS_UART_CallBack+0x64>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	b25b      	sxtb	r3, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	db0b      	blt.n	8001c42 <GPS_UART_CallBack+0x2e>
		rx_buffer[rx_index++] = rx_data;
 8001c2a:	4b13      	ldr	r3, [pc, #76]	; (8001c78 <GPS_UART_CallBack+0x64>)
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	1c5a      	adds	r2, r3, #1
 8001c30:	b2d1      	uxtb	r1, r2
 8001c32:	4a11      	ldr	r2, [pc, #68]	; (8001c78 <GPS_UART_CallBack+0x64>)
 8001c34:	7011      	strb	r1, [r2, #0]
 8001c36:	461a      	mov	r2, r3
 8001c38:	4b0e      	ldr	r3, [pc, #56]	; (8001c74 <GPS_UART_CallBack+0x60>)
 8001c3a:	7819      	ldrb	r1, [r3, #0]
 8001c3c:	4b0f      	ldr	r3, [pc, #60]	; (8001c7c <GPS_UART_CallBack+0x68>)
 8001c3e:	5499      	strb	r1, [r3, r2]
 8001c40:	e010      	b.n	8001c64 <GPS_UART_CallBack+0x50>

		#if (GPS_DEBUG == 1)
		GPS_print((char*)rx_buffer);
		#endif

		if(GPS_validate((char*) rx_buffer))
 8001c42:	480e      	ldr	r0, [pc, #56]	; (8001c7c <GPS_UART_CallBack+0x68>)
 8001c44:	f000 f81e 	bl	8001c84 <GPS_validate>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d002      	beq.n	8001c54 <GPS_UART_CallBack+0x40>
			GPS_parse((char*) rx_buffer);
 8001c4e:	480b      	ldr	r0, [pc, #44]	; (8001c7c <GPS_UART_CallBack+0x68>)
 8001c50:	f000 f87a 	bl	8001d48 <GPS_parse>
		rx_index = 0;
 8001c54:	4b08      	ldr	r3, [pc, #32]	; (8001c78 <GPS_UART_CallBack+0x64>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	701a      	strb	r2, [r3, #0]
		memset(rx_buffer, 0, sizeof(rx_buffer));
 8001c5a:	2280      	movs	r2, #128	; 0x80
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	4807      	ldr	r0, [pc, #28]	; (8001c7c <GPS_UART_CallBack+0x68>)
 8001c60:	f005 fb80 	bl	8007364 <memset>
	}
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 8001c64:	2201      	movs	r2, #1
 8001c66:	4903      	ldr	r1, [pc, #12]	; (8001c74 <GPS_UART_CallBack+0x60>)
 8001c68:	4805      	ldr	r0, [pc, #20]	; (8001c80 <GPS_UART_CallBack+0x6c>)
 8001c6a:	f004 fffa 	bl	8006c62 <HAL_UART_Receive_IT>
}
 8001c6e:	bf00      	nop
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	200001fc 	.word	0x200001fc
 8001c78:	200001fd 	.word	0x200001fd
 8001c7c:	2000030c 	.word	0x2000030c
 8001c80:	20000494 	.word	0x20000494

08001c84 <GPS_validate>:


int GPS_validate(char *nmeastr){
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 8001c90:	2300      	movs	r3, #0
 8001c92:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	4413      	add	r3, r2
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b24      	cmp	r3, #36	; 0x24
 8001c9e:	d103      	bne.n	8001ca8 <GPS_validate+0x24>
        i++;
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8001ca6:	e00c      	b.n	8001cc2 <GPS_validate+0x3e>
        return 0;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	e047      	b.n	8001d3c <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	4053      	eors	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]
        i++;
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d008      	beq.n	8001ce0 <GPS_validate+0x5c>
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	2b2a      	cmp	r3, #42	; 0x2a
 8001cd8:	d002      	beq.n	8001ce0 <GPS_validate+0x5c>
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	2b4a      	cmp	r3, #74	; 0x4a
 8001cde:	dde5      	ble.n	8001cac <GPS_validate+0x28>
    }

    if(i >= 75){
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	2b4a      	cmp	r3, #74	; 0x4a
 8001ce4:	dd01      	ble.n	8001cea <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	e028      	b.n	8001d3c <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	4413      	add	r3, r2
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	2b2a      	cmp	r3, #42	; 0x2a
 8001cf4:	d119      	bne.n	8001d2a <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	3302      	adds	r3, #2
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	4413      	add	r3, r2
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 8001d12:	f107 0308 	add.w	r3, r7, #8
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	490a      	ldr	r1, [pc, #40]	; (8001d44 <GPS_validate+0xc0>)
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f005 fd0e 	bl	800773c <siprintf>
    return((checkcalcstr[0] == check[0])
 8001d20:	7a3a      	ldrb	r2, [r7, #8]
 8001d22:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d108      	bne.n	8001d3a <GPS_validate+0xb6>
 8001d28:	e001      	b.n	8001d2e <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	e006      	b.n	8001d3c <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8001d2e:	7a7a      	ldrb	r2, [r7, #9]
 8001d30:	7b7b      	ldrb	r3, [r7, #13]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d101      	bne.n	8001d3a <GPS_validate+0xb6>
 8001d36:	2301      	movs	r3, #1
 8001d38:	e000      	b.n	8001d3c <GPS_validate+0xb8>
 8001d3a:	2300      	movs	r3, #0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3718      	adds	r7, #24
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	0800a4d0 	.word	0x0800a4d0

08001d48 <GPS_parse>:

void GPS_parse(char *GPSstrParse){
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b08a      	sub	sp, #40	; 0x28
 8001d4c:	af08      	add	r7, sp, #32
 8001d4e:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GPGGA", 6)){
 8001d50:	2206      	movs	r2, #6
 8001d52:	4946      	ldr	r1, [pc, #280]	; (8001e6c <GPS_parse+0x124>)
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f005 fd3d 	bl	80077d4 <strncmp>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d12f      	bne.n	8001dc0 <GPS_parse+0x78>
    	if (sscanf(GPSstrParse, "$GPGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 8001d60:	4b43      	ldr	r3, [pc, #268]	; (8001e70 <GPS_parse+0x128>)
 8001d62:	9307      	str	r3, [sp, #28]
 8001d64:	4b43      	ldr	r3, [pc, #268]	; (8001e74 <GPS_parse+0x12c>)
 8001d66:	9306      	str	r3, [sp, #24]
 8001d68:	4b43      	ldr	r3, [pc, #268]	; (8001e78 <GPS_parse+0x130>)
 8001d6a:	9305      	str	r3, [sp, #20]
 8001d6c:	4b43      	ldr	r3, [pc, #268]	; (8001e7c <GPS_parse+0x134>)
 8001d6e:	9304      	str	r3, [sp, #16]
 8001d70:	4b43      	ldr	r3, [pc, #268]	; (8001e80 <GPS_parse+0x138>)
 8001d72:	9303      	str	r3, [sp, #12]
 8001d74:	4b43      	ldr	r3, [pc, #268]	; (8001e84 <GPS_parse+0x13c>)
 8001d76:	9302      	str	r3, [sp, #8]
 8001d78:	4b43      	ldr	r3, [pc, #268]	; (8001e88 <GPS_parse+0x140>)
 8001d7a:	9301      	str	r3, [sp, #4]
 8001d7c:	4b43      	ldr	r3, [pc, #268]	; (8001e8c <GPS_parse+0x144>)
 8001d7e:	9300      	str	r3, [sp, #0]
 8001d80:	4b43      	ldr	r3, [pc, #268]	; (8001e90 <GPS_parse+0x148>)
 8001d82:	4a44      	ldr	r2, [pc, #272]	; (8001e94 <GPS_parse+0x14c>)
 8001d84:	4944      	ldr	r1, [pc, #272]	; (8001e98 <GPS_parse+0x150>)
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f005 fcf8 	bl	800777c <siscanf>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	dd68      	ble.n	8001e64 <GPS_parse+0x11c>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8001d92:	4b42      	ldr	r3, [pc, #264]	; (8001e9c <GPS_parse+0x154>)
 8001d94:	691a      	ldr	r2, [r3, #16]
 8001d96:	4b41      	ldr	r3, [pc, #260]	; (8001e9c <GPS_parse+0x154>)
 8001d98:	7e1b      	ldrb	r3, [r3, #24]
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4610      	mov	r0, r2
 8001d9e:	f000 f8a1 	bl	8001ee4 <GPS_nmea_to_dec>
 8001da2:	4602      	mov	r2, r0
 8001da4:	4b3d      	ldr	r3, [pc, #244]	; (8001e9c <GPS_parse+0x154>)
 8001da6:	605a      	str	r2, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8001da8:	4b3c      	ldr	r3, [pc, #240]	; (8001e9c <GPS_parse+0x154>)
 8001daa:	68da      	ldr	r2, [r3, #12]
 8001dac:	4b3b      	ldr	r3, [pc, #236]	; (8001e9c <GPS_parse+0x154>)
 8001dae:	7e5b      	ldrb	r3, [r3, #25]
 8001db0:	4619      	mov	r1, r3
 8001db2:	4610      	mov	r0, r2
 8001db4:	f000 f896 	bl	8001ee4 <GPS_nmea_to_dec>
 8001db8:	4602      	mov	r2, r0
 8001dba:	4b38      	ldr	r3, [pc, #224]	; (8001e9c <GPS_parse+0x154>)
 8001dbc:	601a      	str	r2, [r3, #0]
    		return;
 8001dbe:	e051      	b.n	8001e64 <GPS_parse+0x11c>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GPRMC", 6)){
 8001dc0:	2206      	movs	r2, #6
 8001dc2:	4937      	ldr	r1, [pc, #220]	; (8001ea0 <GPS_parse+0x158>)
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f005 fd05 	bl	80077d4 <strncmp>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d114      	bne.n	8001dfa <GPS_parse+0xb2>
    	if(sscanf(GPSstrParse, "$GPRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1)
 8001dd0:	4b34      	ldr	r3, [pc, #208]	; (8001ea4 <GPS_parse+0x15c>)
 8001dd2:	9305      	str	r3, [sp, #20]
 8001dd4:	4b34      	ldr	r3, [pc, #208]	; (8001ea8 <GPS_parse+0x160>)
 8001dd6:	9304      	str	r3, [sp, #16]
 8001dd8:	4b34      	ldr	r3, [pc, #208]	; (8001eac <GPS_parse+0x164>)
 8001dda:	9303      	str	r3, [sp, #12]
 8001ddc:	4b29      	ldr	r3, [pc, #164]	; (8001e84 <GPS_parse+0x13c>)
 8001dde:	9302      	str	r3, [sp, #8]
 8001de0:	4b29      	ldr	r3, [pc, #164]	; (8001e88 <GPS_parse+0x140>)
 8001de2:	9301      	str	r3, [sp, #4]
 8001de4:	4b29      	ldr	r3, [pc, #164]	; (8001e8c <GPS_parse+0x144>)
 8001de6:	9300      	str	r3, [sp, #0]
 8001de8:	4b29      	ldr	r3, [pc, #164]	; (8001e90 <GPS_parse+0x148>)
 8001dea:	4a2a      	ldr	r2, [pc, #168]	; (8001e94 <GPS_parse+0x14c>)
 8001dec:	4930      	ldr	r1, [pc, #192]	; (8001eb0 <GPS_parse+0x168>)
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f005 fcc4 	bl	800777c <siscanf>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	e034      	b.n	8001e64 <GPS_parse+0x11c>
    		return;

    }
    else if (!strncmp(GPSstrParse, "$GPGLL", 6)){
 8001dfa:	2206      	movs	r2, #6
 8001dfc:	492d      	ldr	r1, [pc, #180]	; (8001eb4 <GPS_parse+0x16c>)
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f005 fce8 	bl	80077d4 <strncmp>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d110      	bne.n	8001e2c <GPS_parse+0xe4>
        if(sscanf(GPSstrParse, "$GPGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1)
 8001e0a:	4b2b      	ldr	r3, [pc, #172]	; (8001eb8 <GPS_parse+0x170>)
 8001e0c:	9303      	str	r3, [sp, #12]
 8001e0e:	4b21      	ldr	r3, [pc, #132]	; (8001e94 <GPS_parse+0x14c>)
 8001e10:	9302      	str	r3, [sp, #8]
 8001e12:	4b1c      	ldr	r3, [pc, #112]	; (8001e84 <GPS_parse+0x13c>)
 8001e14:	9301      	str	r3, [sp, #4]
 8001e16:	4b1c      	ldr	r3, [pc, #112]	; (8001e88 <GPS_parse+0x140>)
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	4b1c      	ldr	r3, [pc, #112]	; (8001e8c <GPS_parse+0x144>)
 8001e1c:	4a1c      	ldr	r2, [pc, #112]	; (8001e90 <GPS_parse+0x148>)
 8001e1e:	4927      	ldr	r1, [pc, #156]	; (8001ebc <GPS_parse+0x174>)
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f005 fcab 	bl	800777c <siscanf>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	e01b      	b.n	8001e64 <GPS_parse+0x11c>
            return;
    }
    else if (!strncmp(GPSstrParse, "$GPVTG", 6)){
 8001e2c:	2206      	movs	r2, #6
 8001e2e:	4924      	ldr	r1, [pc, #144]	; (8001ec0 <GPS_parse+0x178>)
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f005 fccf 	bl	80077d4 <strncmp>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d113      	bne.n	8001e64 <GPS_parse+0x11c>
        if(sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 8001e3c:	4b21      	ldr	r3, [pc, #132]	; (8001ec4 <GPS_parse+0x17c>)
 8001e3e:	9305      	str	r3, [sp, #20]
 8001e40:	4b21      	ldr	r3, [pc, #132]	; (8001ec8 <GPS_parse+0x180>)
 8001e42:	9304      	str	r3, [sp, #16]
 8001e44:	4b21      	ldr	r3, [pc, #132]	; (8001ecc <GPS_parse+0x184>)
 8001e46:	9303      	str	r3, [sp, #12]
 8001e48:	4b18      	ldr	r3, [pc, #96]	; (8001eac <GPS_parse+0x164>)
 8001e4a:	9302      	str	r3, [sp, #8]
 8001e4c:	4b20      	ldr	r3, [pc, #128]	; (8001ed0 <GPS_parse+0x188>)
 8001e4e:	9301      	str	r3, [sp, #4]
 8001e50:	4b20      	ldr	r3, [pc, #128]	; (8001ed4 <GPS_parse+0x18c>)
 8001e52:	9300      	str	r3, [sp, #0]
 8001e54:	4b20      	ldr	r3, [pc, #128]	; (8001ed8 <GPS_parse+0x190>)
 8001e56:	4a21      	ldr	r2, [pc, #132]	; (8001edc <GPS_parse+0x194>)
 8001e58:	4921      	ldr	r1, [pc, #132]	; (8001ee0 <GPS_parse+0x198>)
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f005 fc8e 	bl	800777c <siscanf>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
            return;
    }
}
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	0800a4d8 	.word	0x0800a4d8
 8001e70:	200002e0 	.word	0x200002e0
 8001e74:	200002dc 	.word	0x200002dc
 8001e78:	200002d8 	.word	0x200002d8
 8001e7c:	200002d4 	.word	0x200002d4
 8001e80:	200002d0 	.word	0x200002d0
 8001e84:	200002cd 	.word	0x200002cd
 8001e88:	200002c0 	.word	0x200002c0
 8001e8c:	200002cc 	.word	0x200002cc
 8001e90:	200002c4 	.word	0x200002c4
 8001e94:	200002c8 	.word	0x200002c8
 8001e98:	0800a4e0 	.word	0x0800a4e0
 8001e9c:	200002b4 	.word	0x200002b4
 8001ea0:	0800a508 	.word	0x0800a508
 8001ea4:	200002ec 	.word	0x200002ec
 8001ea8:	200002e8 	.word	0x200002e8
 8001eac:	200002e4 	.word	0x200002e4
 8001eb0:	0800a510 	.word	0x0800a510
 8001eb4:	0800a530 	.word	0x0800a530
 8001eb8:	200002f0 	.word	0x200002f0
 8001ebc:	0800a538 	.word	0x0800a538
 8001ec0:	0800a554 	.word	0x0800a554
 8001ec4:	20000308 	.word	0x20000308
 8001ec8:	20000304 	.word	0x20000304
 8001ecc:	20000301 	.word	0x20000301
 8001ed0:	20000300 	.word	0x20000300
 8001ed4:	200002fc 	.word	0x200002fc
 8001ed8:	200002f8 	.word	0x200002f8
 8001edc:	200002f4 	.word	0x200002f4
 8001ee0:	0800a55c 	.word	0x0800a55c

08001ee4 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b086      	sub	sp, #24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	460b      	mov	r3, r1
 8001eee:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 8001ef0:	491b      	ldr	r1, [pc, #108]	; (8001f60 <GPS_nmea_to_dec+0x7c>)
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f7fe fffa 	bl	8000eec <__aeabi_fdiv>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff f908 	bl	8001110 <__aeabi_f2iz>
 8001f00:	4603      	mov	r3, r0
 8001f02:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	2264      	movs	r2, #100	; 0x64
 8001f08:	fb02 f303 	mul.w	r3, r2, r3
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7fe fee5 	bl	8000cdc <__aeabi_i2f>
 8001f12:	4603      	mov	r3, r0
 8001f14:	4619      	mov	r1, r3
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f7fe fe2a 	bl	8000b70 <__aeabi_fsub>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	60fb      	str	r3, [r7, #12]
    float dec_deg = minutes / 60;
 8001f20:	4910      	ldr	r1, [pc, #64]	; (8001f64 <GPS_nmea_to_dec+0x80>)
 8001f22:	68f8      	ldr	r0, [r7, #12]
 8001f24:	f7fe ffe2 	bl	8000eec <__aeabi_fdiv>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	60bb      	str	r3, [r7, #8]
    float decimal = degree + dec_deg;
 8001f2c:	6938      	ldr	r0, [r7, #16]
 8001f2e:	f7fe fed5 	bl	8000cdc <__aeabi_i2f>
 8001f32:	4603      	mov	r3, r0
 8001f34:	4619      	mov	r1, r3
 8001f36:	68b8      	ldr	r0, [r7, #8]
 8001f38:	f7fe fe1c 	bl	8000b74 <__addsf3>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	617b      	str	r3, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 8001f40:	78fb      	ldrb	r3, [r7, #3]
 8001f42:	2b53      	cmp	r3, #83	; 0x53
 8001f44:	d002      	beq.n	8001f4c <GPS_nmea_to_dec+0x68>
 8001f46:	78fb      	ldrb	r3, [r7, #3]
 8001f48:	2b57      	cmp	r3, #87	; 0x57
 8001f4a:	d103      	bne.n	8001f54 <GPS_nmea_to_dec+0x70>
        decimal *= -1;
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001f52:	617b      	str	r3, [r7, #20]
    }
    return decimal;
 8001f54:	697b      	ldr	r3, [r7, #20]
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3718      	adds	r7, #24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	42c80000 	.word	0x42c80000
 8001f64:	42700000 	.word	0x42700000

08001f68 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001f6c:	4b12      	ldr	r3, [pc, #72]	; (8001fb8 <MX_I2C1_Init+0x50>)
 8001f6e:	4a13      	ldr	r2, [pc, #76]	; (8001fbc <MX_I2C1_Init+0x54>)
 8001f70:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001f72:	4b11      	ldr	r3, [pc, #68]	; (8001fb8 <MX_I2C1_Init+0x50>)
 8001f74:	4a12      	ldr	r2, [pc, #72]	; (8001fc0 <MX_I2C1_Init+0x58>)
 8001f76:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f78:	4b0f      	ldr	r3, [pc, #60]	; (8001fb8 <MX_I2C1_Init+0x50>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f7e:	4b0e      	ldr	r3, [pc, #56]	; (8001fb8 <MX_I2C1_Init+0x50>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f84:	4b0c      	ldr	r3, [pc, #48]	; (8001fb8 <MX_I2C1_Init+0x50>)
 8001f86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f8a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f8c:	4b0a      	ldr	r3, [pc, #40]	; (8001fb8 <MX_I2C1_Init+0x50>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f92:	4b09      	ldr	r3, [pc, #36]	; (8001fb8 <MX_I2C1_Init+0x50>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f98:	4b07      	ldr	r3, [pc, #28]	; (8001fb8 <MX_I2C1_Init+0x50>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f9e:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <MX_I2C1_Init+0x50>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001fa4:	4804      	ldr	r0, [pc, #16]	; (8001fb8 <MX_I2C1_Init+0x50>)
 8001fa6:	f002 f8a9 	bl	80040fc <HAL_I2C_Init>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001fb0:	f000 fbc2 	bl	8002738 <Error_Handler>
  }

}
 8001fb4:	bf00      	nop
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	2000038c 	.word	0x2000038c
 8001fbc:	40005400 	.word	0x40005400
 8001fc0:	000186a0 	.word	0x000186a0

08001fc4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b088      	sub	sp, #32
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fcc:	f107 0310 	add.w	r3, r7, #16
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	605a      	str	r2, [r3, #4]
 8001fd6:	609a      	str	r2, [r3, #8]
 8001fd8:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a15      	ldr	r2, [pc, #84]	; (8002034 <HAL_I2C_MspInit+0x70>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d123      	bne.n	800202c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fe4:	4b14      	ldr	r3, [pc, #80]	; (8002038 <HAL_I2C_MspInit+0x74>)
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	4a13      	ldr	r2, [pc, #76]	; (8002038 <HAL_I2C_MspInit+0x74>)
 8001fea:	f043 0308 	orr.w	r3, r3, #8
 8001fee:	6193      	str	r3, [r2, #24]
 8001ff0:	4b11      	ldr	r3, [pc, #68]	; (8002038 <HAL_I2C_MspInit+0x74>)
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	f003 0308 	and.w	r3, r3, #8
 8001ff8:	60fb      	str	r3, [r7, #12]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ffc:	23c0      	movs	r3, #192	; 0xc0
 8001ffe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002000:	2312      	movs	r3, #18
 8002002:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002004:	2303      	movs	r3, #3
 8002006:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002008:	f107 0310 	add.w	r3, r7, #16
 800200c:	4619      	mov	r1, r3
 800200e:	480b      	ldr	r0, [pc, #44]	; (800203c <HAL_I2C_MspInit+0x78>)
 8002010:	f001 feea 	bl	8003de8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002014:	4b08      	ldr	r3, [pc, #32]	; (8002038 <HAL_I2C_MspInit+0x74>)
 8002016:	69db      	ldr	r3, [r3, #28]
 8002018:	4a07      	ldr	r2, [pc, #28]	; (8002038 <HAL_I2C_MspInit+0x74>)
 800201a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800201e:	61d3      	str	r3, [r2, #28]
 8002020:	4b05      	ldr	r3, [pc, #20]	; (8002038 <HAL_I2C_MspInit+0x74>)
 8002022:	69db      	ldr	r3, [r3, #28]
 8002024:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002028:	60bb      	str	r3, [r7, #8]
 800202a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800202c:	bf00      	nop
 800202e:	3720      	adds	r7, #32
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40005400 	.word	0x40005400
 8002038:	40021000 	.word	0x40021000
 800203c:	40010c00 	.word	0x40010c00

08002040 <airQuality>:





float airQuality(){
 8002040:	b590      	push	{r4, r7, lr}
 8002042:	b09d      	sub	sp, #116	; 0x74
 8002044:	af00      	add	r7, sp, #0
float Value[22];////取22个值做滤波用
	  float AD_Value;
	  HAL_ADCEx_Calibration_Start(&hadc1);
 8002046:	4858      	ldr	r0, [pc, #352]	; (80021a8 <airQuality+0x168>)
 8002048:	f001 fcae 	bl	80039a8 <HAL_ADCEx_Calibration_Start>
     for(char n=0;n<22;n++)
 800204c:	2300      	movs	r3, #0
 800204e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8002052:	e031      	b.n	80020b8 <airQuality+0x78>

     {
         HAL_ADC_Start(&hadc1);
 8002054:	4854      	ldr	r0, [pc, #336]	; (80021a8 <airQuality+0x168>)
 8002056:	f001 f937 	bl	80032c8 <HAL_ADC_Start>
         HAL_ADC_PollForConversion(&hadc1, 10);    //等待转换完成，第二个参数表示超时时间，单位ms
 800205a:	210a      	movs	r1, #10
 800205c:	4852      	ldr	r0, [pc, #328]	; (80021a8 <airQuality+0x168>)
 800205e:	f001 fa0d 	bl	800347c <HAL_ADC_PollForConversion>
         if(HAL_IS_BIT_SET(HAL_ADC_GetState(&hadc1), HAL_ADC_STATE_REG_EOC))
 8002062:	4851      	ldr	r0, [pc, #324]	; (80021a8 <airQuality+0x168>)
 8002064:	f001 fc08 	bl	8003878 <HAL_ADC_GetState>
 8002068:	4603      	mov	r3, r0
 800206a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800206e:	2b00      	cmp	r3, #0
 8002070:	d01d      	beq.n	80020ae <airQuality+0x6e>
         {
             Value[n]=HAL_ADC_GetValue(&hadc1);
 8002072:	484d      	ldr	r0, [pc, #308]	; (80021a8 <airQuality+0x168>)
 8002074:	f001 fafc 	bl	8003670 <HAL_ADC_GetValue>
 8002078:	4603      	mov	r3, r0
 800207a:	f897 406b 	ldrb.w	r4, [r7, #107]	; 0x6b
 800207e:	4618      	mov	r0, r3
 8002080:	f7fe fe28 	bl	8000cd4 <__aeabi_ui2f>
 8002084:	4602      	mov	r2, r0
 8002086:	00a3      	lsls	r3, r4, #2
 8002088:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800208c:	440b      	add	r3, r1
 800208e:	f843 2c70 	str.w	r2, [r3, #-112]
             AD_Value += Value[n];
 8002092:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800209c:	4413      	add	r3, r2
 800209e:	f853 3c70 	ldr.w	r3, [r3, #-112]
 80020a2:	4619      	mov	r1, r3
 80020a4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80020a6:	f7fe fd65 	bl	8000b74 <__addsf3>
 80020aa:	4603      	mov	r3, r0
 80020ac:	66fb      	str	r3, [r7, #108]	; 0x6c
     for(char n=0;n<22;n++)
 80020ae:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80020b2:	3301      	adds	r3, #1
 80020b4:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 80020b8:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80020bc:	2b15      	cmp	r3, #21
 80020be:	d9c9      	bls.n	8002054 <airQuality+0x14>
         }
     }
     HAL_ADC_Stop(&hadc1);
 80020c0:	4839      	ldr	r0, [pc, #228]	; (80021a8 <airQuality+0x168>)
 80020c2:	f001 f9af 	bl	8003424 <HAL_ADC_Stop>

     float max = Value[0];
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	667b      	str	r3, [r7, #100]	; 0x64
     float min = Value[0];
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	663b      	str	r3, [r7, #96]	; 0x60
     for(char n=0;n<22;n++)//取最大值、最小值
 80020ce:	2300      	movs	r3, #0
 80020d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80020d4:	e038      	b.n	8002148 <airQuality+0x108>
     {
         max = (Value[n]<max)?max:Value[n];
 80020d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80020e0:	4413      	add	r3, r2
 80020e2:	f853 3c70 	ldr.w	r3, [r3, #-112]
 80020e6:	4619      	mov	r1, r3
 80020e8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80020ea:	f7ff f807 	bl	80010fc <__aeabi_fcmpgt>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <airQuality+0xb8>
 80020f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80020f6:	e007      	b.n	8002108 <airQuality+0xc8>
 80020f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8002102:	4413      	add	r3, r2
 8002104:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8002108:	667b      	str	r3, [r7, #100]	; 0x64
         min = (min<Value[n])?min:Value[n];
 800210a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8002114:	4413      	add	r3, r2
 8002116:	f853 3c70 	ldr.w	r3, [r3, #-112]
 800211a:	4619      	mov	r1, r3
 800211c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800211e:	f7fe ffcf 	bl	80010c0 <__aeabi_fcmplt>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <airQuality+0xec>
 8002128:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800212a:	e007      	b.n	800213c <airQuality+0xfc>
 800212c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8002136:	4413      	add	r3, r2
 8002138:	f853 3c70 	ldr.w	r3, [r3, #-112]
 800213c:	663b      	str	r3, [r7, #96]	; 0x60
     for(char n=0;n<22;n++)//取最大值、最小值
 800213e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002142:	3301      	adds	r3, #1
 8002144:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002148:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800214c:	2b15      	cmp	r3, #21
 800214e:	d9c2      	bls.n	80020d6 <airQuality+0x96>
     }

     float result = (float)((AD_Value - max - min) / 20) * (3.311 / 4096);
 8002150:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002152:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002154:	f7fe fd0c 	bl	8000b70 <__aeabi_fsub>
 8002158:	4603      	mov	r3, r0
 800215a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800215c:	4618      	mov	r0, r3
 800215e:	f7fe fd07 	bl	8000b70 <__aeabi_fsub>
 8002162:	4603      	mov	r3, r0
 8002164:	4911      	ldr	r1, [pc, #68]	; (80021ac <airQuality+0x16c>)
 8002166:	4618      	mov	r0, r3
 8002168:	f7fe fec0 	bl	8000eec <__aeabi_fdiv>
 800216c:	4603      	mov	r3, r0
 800216e:	4618      	mov	r0, r3
 8002170:	f7fe f95a 	bl	8000428 <__aeabi_f2d>
 8002174:	a30a      	add	r3, pc, #40	; (adr r3, 80021a0 <airQuality+0x160>)
 8002176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800217a:	f7fe f9ad 	bl	80004d8 <__aeabi_dmul>
 800217e:	4603      	mov	r3, r0
 8002180:	460c      	mov	r4, r1
 8002182:	4618      	mov	r0, r3
 8002184:	4621      	mov	r1, r4
 8002186:	f7fe fc9f 	bl	8000ac8 <__aeabi_d2f>
 800218a:	4603      	mov	r3, r0
 800218c:	65bb      	str	r3, [r7, #88]	; 0x58

     return result * 1000;
 800218e:	4908      	ldr	r1, [pc, #32]	; (80021b0 <airQuality+0x170>)
 8002190:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002192:	f7fe fdf7 	bl	8000d84 <__aeabi_fmul>
 8002196:	4603      	mov	r3, r0
}
 8002198:	4618      	mov	r0, r3
 800219a:	3774      	adds	r7, #116	; 0x74
 800219c:	46bd      	mov	sp, r7
 800219e:	bd90      	pop	{r4, r7, pc}
 80021a0:	916872b0 	.word	0x916872b0
 80021a4:	3f4a7ced 	.word	0x3f4a7ced
 80021a8:	20000284 	.word	0x20000284
 80021ac:	41a00000 	.word	0x41a00000
 80021b0:	447a0000 	.word	0x447a0000

080021b4 <getDistance>:


float getDistance() {
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
				HAL_TIM_Base_Start_IT(&htim2);
 80021ba:	482b      	ldr	r0, [pc, #172]	; (8002268 <getDistance+0xb4>)
 80021bc:	f004 fa12 	bl	80065e4 <HAL_TIM_Base_Start_IT>
		  	    htim2.Instance->CNT = 0;
 80021c0:	4b29      	ldr	r3, [pc, #164]	; (8002268 <getDistance+0xb4>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2200      	movs	r2, #0
 80021c6:	625a      	str	r2, [r3, #36]	; 0x24
		  	    float t1,t2,distance;
		  	    HAL_GPIO_WritePin(Trig_GPIO_Port,Trig_Pin,GPIO_PIN_RESET);
 80021c8:	2200      	movs	r2, #0
 80021ca:	2120      	movs	r1, #32
 80021cc:	4827      	ldr	r0, [pc, #156]	; (800226c <getDistance+0xb8>)
 80021ce:	f001 ff7c 	bl	80040ca <HAL_GPIO_WritePin>
		  	    HAL_GPIO_WritePin(Trig_GPIO_Port,Trig_Pin,GPIO_PIN_SET);
 80021d2:	2201      	movs	r2, #1
 80021d4:	2120      	movs	r1, #32
 80021d6:	4825      	ldr	r0, [pc, #148]	; (800226c <getDistance+0xb8>)
 80021d8:	f001 ff77 	bl	80040ca <HAL_GPIO_WritePin>
		  	    HAL_Delay(1);
 80021dc:	2001      	movs	r0, #1
 80021de:	f000 ff79 	bl	80030d4 <HAL_Delay>
		  	    HAL_GPIO_WritePin(Trig_GPIO_Port,Trig_Pin,GPIO_PIN_RESET);
 80021e2:	2200      	movs	r2, #0
 80021e4:	2120      	movs	r1, #32
 80021e6:	4821      	ldr	r0, [pc, #132]	; (800226c <getDistance+0xb8>)
 80021e8:	f001 ff6f 	bl	80040ca <HAL_GPIO_WritePin>
		  	   while(HAL_GPIO_ReadPin(Echo_GPIO_Port,Echo_Pin) == GPIO_PIN_RESET)
 80021ec:	e007      	b.n	80021fe <getDistance+0x4a>
		  	   t1=htim2.Instance->CNT;
 80021ee:	4b1e      	ldr	r3, [pc, #120]	; (8002268 <getDistance+0xb4>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7fe fd6d 	bl	8000cd4 <__aeabi_ui2f>
 80021fa:	4603      	mov	r3, r0
 80021fc:	60fb      	str	r3, [r7, #12]
		  	   while(HAL_GPIO_ReadPin(Echo_GPIO_Port,Echo_Pin) == GPIO_PIN_RESET)
 80021fe:	2140      	movs	r1, #64	; 0x40
 8002200:	481a      	ldr	r0, [pc, #104]	; (800226c <getDistance+0xb8>)
 8002202:	f001 ff4b 	bl	800409c <HAL_GPIO_ReadPin>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d0f0      	beq.n	80021ee <getDistance+0x3a>
		  	   while(HAL_GPIO_ReadPin(Echo_GPIO_Port,Echo_Pin) == GPIO_PIN_SET)
 800220c:	e007      	b.n	800221e <getDistance+0x6a>
		  	   t2=htim2.Instance->CNT;
 800220e:	4b16      	ldr	r3, [pc, #88]	; (8002268 <getDistance+0xb4>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002214:	4618      	mov	r0, r3
 8002216:	f7fe fd5d 	bl	8000cd4 <__aeabi_ui2f>
 800221a:	4603      	mov	r3, r0
 800221c:	60bb      	str	r3, [r7, #8]
		  	   while(HAL_GPIO_ReadPin(Echo_GPIO_Port,Echo_Pin) == GPIO_PIN_SET)
 800221e:	2140      	movs	r1, #64	; 0x40
 8002220:	4812      	ldr	r0, [pc, #72]	; (800226c <getDistance+0xb8>)
 8002222:	f001 ff3b 	bl	800409c <HAL_GPIO_ReadPin>
 8002226:	4603      	mov	r3, r0
 8002228:	2b01      	cmp	r3, #1
 800222a:	d0f0      	beq.n	800220e <getDistance+0x5a>
		  	   htim2.Instance->CNT = 0;
 800222c:	4b0e      	ldr	r3, [pc, #56]	; (8002268 <getDistance+0xb4>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2200      	movs	r2, #0
 8002232:	625a      	str	r2, [r3, #36]	; 0x24
		  	   distance=(t2-t1)*17/(float)1000;
 8002234:	68f9      	ldr	r1, [r7, #12]
 8002236:	68b8      	ldr	r0, [r7, #8]
 8002238:	f7fe fc9a 	bl	8000b70 <__aeabi_fsub>
 800223c:	4603      	mov	r3, r0
 800223e:	490c      	ldr	r1, [pc, #48]	; (8002270 <getDistance+0xbc>)
 8002240:	4618      	mov	r0, r3
 8002242:	f7fe fd9f 	bl	8000d84 <__aeabi_fmul>
 8002246:	4603      	mov	r3, r0
 8002248:	490a      	ldr	r1, [pc, #40]	; (8002274 <getDistance+0xc0>)
 800224a:	4618      	mov	r0, r3
 800224c:	f7fe fe4e 	bl	8000eec <__aeabi_fdiv>
 8002250:	4603      	mov	r3, r0
 8002252:	607b      	str	r3, [r7, #4]
		  	   HAL_GPIO_WritePin(Trig_GPIO_Port,Trig_Pin,GPIO_PIN_RESET);
 8002254:	2200      	movs	r2, #0
 8002256:	2120      	movs	r1, #32
 8002258:	4804      	ldr	r0, [pc, #16]	; (800226c <getDistance+0xb8>)
 800225a:	f001 ff36 	bl	80040ca <HAL_GPIO_WritePin>
		  	   return distance;
 800225e:	687b      	ldr	r3, [r7, #4]
}
 8002260:	4618      	mov	r0, r3
 8002262:	3710      	adds	r7, #16
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	2000040c 	.word	0x2000040c
 800226c:	40010800 	.word	0x40010800
 8002270:	41880000 	.word	0x41880000
 8002274:	447a0000 	.word	0x447a0000

08002278 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002278:	b590      	push	{r4, r7, lr}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800227e:	f000 fec7 	bl	8003010 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002282:	f000 f8fd 	bl	8002480 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002286:	f7ff fc0d 	bl	8001aa4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800228a:	f000 fdb1 	bl	8002df0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800228e:	f000 fdd9 	bl	8002e44 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8002292:	f7ff fe69 	bl	8001f68 <MX_I2C1_Init>
  MX_ADC1_Init();
 8002296:	f7ff fb8b 	bl	80019b0 <MX_ADC1_Init>
  MX_TIM2_Init();
 800229a:	f000 fd41 	bl	8002d20 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */


  HAL_UART_Receive_IT(&huart3, uart3_rxbuf, 1);
 800229e:	2201      	movs	r2, #1
 80022a0:	4962      	ldr	r1, [pc, #392]	; (800242c <main+0x1b4>)
 80022a2:	4863      	ldr	r0, [pc, #396]	; (8002430 <main+0x1b8>)
 80022a4:	f004 fcdd 	bl	8006c62 <HAL_UART_Receive_IT>
  BMP180_SetOversampling(BMP180_ULTRA);
 80022a8:	2003      	movs	r0, #3
 80022aa:	f7fe ff77 	bl	800119c <BMP180_SetOversampling>
  BMP180_UpdateCalibrationData();
 80022ae:	f7fe ff85 	bl	80011bc <BMP180_UpdateCalibrationData>
  MLX90614_Init(&hi2c1);
 80022b2:	4860      	ldr	r0, [pc, #384]	; (8002434 <main+0x1bc>)
 80022b4:	f000 fc78 	bl	8002ba8 <MLX90614_Init>
  MLX90614_SetEmissivity(0.985);
 80022b8:	485f      	ldr	r0, [pc, #380]	; (8002438 <main+0x1c0>)
 80022ba:	f000 fbf1 	bl	8002aa0 <MLX90614_SetEmissivity>
  GPS_Init();
 80022be:	f7ff fc9b 	bl	8001bf8 <GPS_Init>

HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13, GPIO_PIN_SET);
 80022c2:	2201      	movs	r2, #1
 80022c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022c8:	485c      	ldr	r0, [pc, #368]	; (800243c <main+0x1c4>)
 80022ca:	f001 fefe 	bl	80040ca <HAL_GPIO_WritePin>

    /* USER CODE BEGIN 3 */



	  HAL_Delay(500);
 80022ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80022d2:	f000 feff 	bl	80030d4 <HAL_Delay>
	  distance = getDistance();
 80022d6:	f7ff ff6d 	bl	80021b4 <getDistance>
 80022da:	4602      	mov	r2, r0
 80022dc:	4b58      	ldr	r3, [pc, #352]	; (8002440 <main+0x1c8>)
 80022de:	601a      	str	r2, [r3, #0]
	  temperature = BMP180_GetRawTemperature();
 80022e0:	f7ff f86c 	bl	80013bc <BMP180_GetRawTemperature>
 80022e4:	4603      	mov	r3, r0
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7fe fcf8 	bl	8000cdc <__aeabi_i2f>
 80022ec:	4602      	mov	r2, r0
 80022ee:	4b55      	ldr	r3, [pc, #340]	; (8002444 <main+0x1cc>)
 80022f0:	601a      	str	r2, [r3, #0]
	  pressure = BMP180_GetPressure();
 80022f2:	f7ff f8a7 	bl	8001444 <BMP180_GetPressure>
 80022f6:	4603      	mov	r3, r0
 80022f8:	461a      	mov	r2, r3
 80022fa:	4b53      	ldr	r3, [pc, #332]	; (8002448 <main+0x1d0>)
 80022fc:	601a      	str	r2, [r3, #0]
	  MLX90614_ReadAmbientTemperature(&AmbientTemperature);
 80022fe:	4853      	ldr	r0, [pc, #332]	; (800244c <main+0x1d4>)
 8002300:	f000 fb72 	bl	80029e8 <MLX90614_ReadAmbientTemperature>
	  sound = HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_12);
 8002304:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002308:	4851      	ldr	r0, [pc, #324]	; (8002450 <main+0x1d8>)
 800230a:	f001 fec7 	bl	800409c <HAL_GPIO_ReadPin>
 800230e:	4603      	mov	r3, r0
 8002310:	4618      	mov	r0, r3
 8002312:	f7fe fcdf 	bl	8000cd4 <__aeabi_ui2f>
 8002316:	4602      	mov	r2, r0
 8002318:	4b4e      	ldr	r3, [pc, #312]	; (8002454 <main+0x1dc>)
 800231a:	601a      	str	r2, [r3, #0]
	  MLX90614_ReadObjectTemperature(&ObjectTemperature);
 800231c:	484e      	ldr	r0, [pc, #312]	; (8002458 <main+0x1e0>)
 800231e:	f000 fb7e 	bl	8002a1e <MLX90614_ReadObjectTemperature>
	  MLX90614_GetEmissivity(&Emissivity);
 8002322:	484e      	ldr	r0, [pc, #312]	; (800245c <main+0x1e4>)
 8002324:	f000 fb96 	bl	8002a54 <MLX90614_GetEmissivity>
	  AirQuality = airQuality();
 8002328:	f7ff fe8a 	bl	8002040 <airQuality>
 800232c:	4602      	mov	r2, r0
 800232e:	4b4c      	ldr	r3, [pc, #304]	; (8002460 <main+0x1e8>)
 8002330:	601a      	str	r2, [r3, #0]
	  DHT11data = DHT_getData (DHT11);
 8002332:	4c4c      	ldr	r4, [pc, #304]	; (8002464 <main+0x1ec>)
 8002334:	463b      	mov	r3, r7
 8002336:	2100      	movs	r1, #0
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff f9fd 	bl	8001738 <DHT_getData>
 800233e:	4622      	mov	r2, r4
 8002340:	463b      	mov	r3, r7
 8002342:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002346:	e882 0003 	stmia.w	r2, {r0, r1}
	  if (DHT11data.hum != 0) humidity = DHT11data.hum;
 800234a:	4b46      	ldr	r3, [pc, #280]	; (8002464 <main+0x1ec>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f04f 0100 	mov.w	r1, #0
 8002352:	4618      	mov	r0, r3
 8002354:	f7fe feaa 	bl	80010ac <__aeabi_fcmpeq>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d103      	bne.n	8002366 <main+0xee>
 800235e:	4b41      	ldr	r3, [pc, #260]	; (8002464 <main+0x1ec>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a41      	ldr	r2, [pc, #260]	; (8002468 <main+0x1f0>)
 8002364:	6013      	str	r3, [r2, #0]



//确定包头
	  package1[0] = 0;
 8002366:	4b41      	ldr	r3, [pc, #260]	; (800246c <main+0x1f4>)
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]
	  package2[0] = 1;
 800236c:	4b40      	ldr	r3, [pc, #256]	; (8002470 <main+0x1f8>)
 800236e:	2201      	movs	r2, #1
 8002370:	601a      	str	r2, [r3, #0]
	  package3[0] = 2;
 8002372:	4b40      	ldr	r3, [pc, #256]	; (8002474 <main+0x1fc>)
 8002374:	2202      	movs	r2, #2
 8002376:	601a      	str	r2, [r3, #0]
	  package4[0] = 3;
 8002378:	4b3f      	ldr	r3, [pc, #252]	; (8002478 <main+0x200>)
 800237a:	2203      	movs	r2, #3
 800237c:	601a      	str	r2, [r3, #0]
//包1
	  package1[1] = pressure;
 800237e:	4b32      	ldr	r3, [pc, #200]	; (8002448 <main+0x1d0>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a3a      	ldr	r2, [pc, #232]	; (800246c <main+0x1f4>)
 8002384:	6053      	str	r3, [r2, #4]
	  package1[2] = temperature;
 8002386:	4b2f      	ldr	r3, [pc, #188]	; (8002444 <main+0x1cc>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f7fe fee6 	bl	800115c <__aeabi_f2uiz>
 8002390:	4602      	mov	r2, r0
 8002392:	4b36      	ldr	r3, [pc, #216]	; (800246c <main+0x1f4>)
 8002394:	609a      	str	r2, [r3, #8]
	  memcpy(&package1[3],&AmbientTemperature,4);
 8002396:	4b2d      	ldr	r3, [pc, #180]	; (800244c <main+0x1d4>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a34      	ldr	r2, [pc, #208]	; (800246c <main+0x1f4>)
 800239c:	60d3      	str	r3, [r2, #12]
	  memcpy(&package1[4],&ObjectTemperature,4);
 800239e:	4b2e      	ldr	r3, [pc, #184]	; (8002458 <main+0x1e0>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a32      	ldr	r2, [pc, #200]	; (800246c <main+0x1f4>)
 80023a4:	6113      	str	r3, [r2, #16]

//包2
	  memcpy(&package2[1],&AirQuality,4);
 80023a6:	4b2e      	ldr	r3, [pc, #184]	; (8002460 <main+0x1e8>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a31      	ldr	r2, [pc, #196]	; (8002470 <main+0x1f8>)
 80023ac:	6053      	str	r3, [r2, #4]
	  memcpy(&package2[2],&sound,4);
 80023ae:	4b29      	ldr	r3, [pc, #164]	; (8002454 <main+0x1dc>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a2f      	ldr	r2, [pc, #188]	; (8002470 <main+0x1f8>)
 80023b4:	6093      	str	r3, [r2, #8]

	  //直接把GPS经度（float类型） memcpy到数据包内
	  memcpy(&package2[3],&GPS.dec_longitude,4);
 80023b6:	4b31      	ldr	r3, [pc, #196]	; (800247c <main+0x204>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a2d      	ldr	r2, [pc, #180]	; (8002470 <main+0x1f8>)
 80023bc:	60d3      	str	r3, [r2, #12]
	  memcpy(&package2[4],&GPS.dec_latitude,4);
 80023be:	4b2f      	ldr	r3, [pc, #188]	; (800247c <main+0x204>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	4a2b      	ldr	r2, [pc, #172]	; (8002470 <main+0x1f8>)
 80023c4:	6113      	str	r3, [r2, #16]
//包3
	  memcpy(&package3[1],&GPS.msl_altitude,4);
 80023c6:	4b2d      	ldr	r3, [pc, #180]	; (800247c <main+0x204>)
 80023c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ca:	4a2a      	ldr	r2, [pc, #168]	; (8002474 <main+0x1fc>)
 80023cc:	6053      	str	r3, [r2, #4]
	  memcpy(&package3[2],&GPS.speed_km,4);
 80023ce:	4b2b      	ldr	r3, [pc, #172]	; (800247c <main+0x204>)
 80023d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023d2:	4a28      	ldr	r2, [pc, #160]	; (8002474 <main+0x1fc>)
 80023d4:	6093      	str	r3, [r2, #8]
	  package3[3] = GPS.satelites;
 80023d6:	4b29      	ldr	r3, [pc, #164]	; (800247c <main+0x204>)
 80023d8:	6a1b      	ldr	r3, [r3, #32]
 80023da:	461a      	mov	r2, r3
 80023dc:	4b25      	ldr	r3, [pc, #148]	; (8002474 <main+0x1fc>)
 80023de:	60da      	str	r2, [r3, #12]
	  memcpy(&package3[4],&humidity,4);
 80023e0:	4b21      	ldr	r3, [pc, #132]	; (8002468 <main+0x1f0>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a23      	ldr	r2, [pc, #140]	; (8002474 <main+0x1fc>)
 80023e6:	6113      	str	r3, [r2, #16]

//包4
	  memcpy(&package4[1],&distance,4);
 80023e8:	4b15      	ldr	r3, [pc, #84]	; (8002440 <main+0x1c8>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a22      	ldr	r2, [pc, #136]	; (8002478 <main+0x200>)
 80023ee:	6053      	str	r3, [r2, #4]


	  HAL_UART_Transmit(&huart3,package1,20,0xFFFF);
 80023f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023f4:	2214      	movs	r2, #20
 80023f6:	491d      	ldr	r1, [pc, #116]	; (800246c <main+0x1f4>)
 80023f8:	480d      	ldr	r0, [pc, #52]	; (8002430 <main+0x1b8>)
 80023fa:	f004 fba0 	bl	8006b3e <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart3,package2,20,0xFFFF);
 80023fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002402:	2214      	movs	r2, #20
 8002404:	491a      	ldr	r1, [pc, #104]	; (8002470 <main+0x1f8>)
 8002406:	480a      	ldr	r0, [pc, #40]	; (8002430 <main+0x1b8>)
 8002408:	f004 fb99 	bl	8006b3e <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart3,package3,20,0xFFFF);
 800240c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002410:	2214      	movs	r2, #20
 8002412:	4918      	ldr	r1, [pc, #96]	; (8002474 <main+0x1fc>)
 8002414:	4806      	ldr	r0, [pc, #24]	; (8002430 <main+0x1b8>)
 8002416:	f004 fb92 	bl	8006b3e <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart3,package4,20,0xFFFF);
 800241a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800241e:	2214      	movs	r2, #20
 8002420:	4915      	ldr	r1, [pc, #84]	; (8002478 <main+0x200>)
 8002422:	4803      	ldr	r0, [pc, #12]	; (8002430 <main+0x1b8>)
 8002424:	f004 fb8b 	bl	8006b3e <HAL_UART_Transmit>
  {
 8002428:	e751      	b.n	80022ce <main+0x56>
 800242a:	bf00      	nop
 800242c:	200003fc 	.word	0x200003fc
 8002430:	20000454 	.word	0x20000454
 8002434:	2000038c 	.word	0x2000038c
 8002438:	3f7c28f6 	.word	0x3f7c28f6
 800243c:	40011000 	.word	0x40011000
 8002440:	200003e8 	.word	0x200003e8
 8002444:	20000204 	.word	0x20000204
 8002448:	2000020c 	.word	0x2000020c
 800244c:	200003f8 	.word	0x200003f8
 8002450:	40010800 	.word	0x40010800
 8002454:	20000200 	.word	0x20000200
 8002458:	200003e0 	.word	0x200003e0
 800245c:	200003ec 	.word	0x200003ec
 8002460:	20000208 	.word	0x20000208
 8002464:	20000400 	.word	0x20000400
 8002468:	200003f4 	.word	0x200003f4
 800246c:	20000210 	.word	0x20000210
 8002470:	20000224 	.word	0x20000224
 8002474:	20000238 	.word	0x20000238
 8002478:	2000024c 	.word	0x2000024c
 800247c:	200002b4 	.word	0x200002b4

08002480 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b094      	sub	sp, #80	; 0x50
 8002484:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002486:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800248a:	2228      	movs	r2, #40	; 0x28
 800248c:	2100      	movs	r1, #0
 800248e:	4618      	mov	r0, r3
 8002490:	f004 ff68 	bl	8007364 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002494:	f107 0314 	add.w	r3, r7, #20
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	605a      	str	r2, [r3, #4]
 800249e:	609a      	str	r2, [r3, #8]
 80024a0:	60da      	str	r2, [r3, #12]
 80024a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024a4:	1d3b      	adds	r3, r7, #4
 80024a6:	2200      	movs	r2, #0
 80024a8:	601a      	str	r2, [r3, #0]
 80024aa:	605a      	str	r2, [r3, #4]
 80024ac:	609a      	str	r2, [r3, #8]
 80024ae:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80024b0:	2301      	movs	r3, #1
 80024b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80024b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80024ba:	2300      	movs	r3, #0
 80024bc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024be:	2301      	movs	r3, #1
 80024c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024c2:	2302      	movs	r3, #2
 80024c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80024c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80024cc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80024d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024d6:	4618      	mov	r0, r3
 80024d8:	f003 faa6 	bl	8005a28 <HAL_RCC_OscConfig>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80024e2:	f000 f929 	bl	8002738 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024e6:	230f      	movs	r3, #15
 80024e8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024ea:	2302      	movs	r3, #2
 80024ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024ee:	2300      	movs	r3, #0
 80024f0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80024f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024f6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024f8:	2300      	movs	r3, #0
 80024fa:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80024fc:	f107 0314 	add.w	r3, r7, #20
 8002500:	2102      	movs	r1, #2
 8002502:	4618      	mov	r0, r3
 8002504:	f003 fd10 	bl	8005f28 <HAL_RCC_ClockConfig>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800250e:	f000 f913 	bl	8002738 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002512:	2302      	movs	r3, #2
 8002514:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002516:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800251a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800251c:	1d3b      	adds	r3, r7, #4
 800251e:	4618      	mov	r0, r3
 8002520:	f003 fe9e 	bl	8006260 <HAL_RCCEx_PeriphCLKConfig>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800252a:	f000 f905 	bl	8002738 <Error_Handler>
  }
}
 800252e:	bf00      	nop
 8002530:	3750      	adds	r7, #80	; 0x50
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
	...

08002538 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
//串口3连接了蓝牙
	 if(huart->Instance == USART2)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a75      	ldr	r2, [pc, #468]	; (800271c <HAL_UART_RxCpltCallback+0x1e4>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d101      	bne.n	800254e <HAL_UART_RxCpltCallback+0x16>
	      {


		 	GPS_UART_CallBack();
 800254a:	f7ff fb63 	bl	8001c14 <GPS_UART_CallBack>

			    // 重新注册一次，要不然下次收不到了（上个函数内部已经注册）
	      }
	 if(huart->Instance == USART3)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a73      	ldr	r2, [pc, #460]	; (8002720 <HAL_UART_RxCpltCallback+0x1e8>)
 8002554:	4293      	cmp	r3, r2
 8002556:	f040 80dc 	bne.w	8002712 <HAL_UART_RxCpltCallback+0x1da>
	      {
			//收到前驱信息
					if (uart3_rxbuf[0] == 0x03) {
 800255a:	4b72      	ldr	r3, [pc, #456]	; (8002724 <HAL_UART_RxCpltCallback+0x1ec>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	2b03      	cmp	r3, #3
 8002560:	d102      	bne.n	8002568 <HAL_UART_RxCpltCallback+0x30>
						WheelDrive = 0x03;
 8002562:	4b71      	ldr	r3, [pc, #452]	; (8002728 <HAL_UART_RxCpltCallback+0x1f0>)
 8002564:	2203      	movs	r2, #3
 8002566:	701a      	strb	r2, [r3, #0]
					}
			//收到四驱信息
					if (uart3_rxbuf[0] == 0x04) {
 8002568:	4b6e      	ldr	r3, [pc, #440]	; (8002724 <HAL_UART_RxCpltCallback+0x1ec>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	2b04      	cmp	r3, #4
 800256e:	d102      	bne.n	8002576 <HAL_UART_RxCpltCallback+0x3e>
						WheelDrive = 0x04;
 8002570:	4b6d      	ldr	r3, [pc, #436]	; (8002728 <HAL_UART_RxCpltCallback+0x1f0>)
 8002572:	2204      	movs	r2, #4
 8002574:	701a      	strb	r2, [r3, #0]
					}
			//收到后驱信息
					if (uart3_rxbuf[0] == 0x05) {
 8002576:	4b6b      	ldr	r3, [pc, #428]	; (8002724 <HAL_UART_RxCpltCallback+0x1ec>)
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	2b05      	cmp	r3, #5
 800257c:	d102      	bne.n	8002584 <HAL_UART_RxCpltCallback+0x4c>
						WheelDrive = 0x05;
 800257e:	4b6a      	ldr	r3, [pc, #424]	; (8002728 <HAL_UART_RxCpltCallback+0x1f0>)
 8002580:	2205      	movs	r2, #5
 8002582:	701a      	strb	r2, [r3, #0]




			//收到前进信息
			if (uart3_rxbuf[0] == 0xAA) {
 8002584:	4b67      	ldr	r3, [pc, #412]	; (8002724 <HAL_UART_RxCpltCallback+0x1ec>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	2baa      	cmp	r3, #170	; 0xaa
 800258a:	d139      	bne.n	8002600 <HAL_UART_RxCpltCallback+0xc8>

				if(WheelDrive == 0x03)
 800258c:	4b66      	ldr	r3, [pc, #408]	; (8002728 <HAL_UART_RxCpltCallback+0x1f0>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	2b03      	cmp	r3, #3
 8002592:	d10c      	bne.n	80025ae <HAL_UART_RxCpltCallback+0x76>
				{
				  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8, GPIO_PIN_RESET);
 8002594:	2200      	movs	r2, #0
 8002596:	f44f 7180 	mov.w	r1, #256	; 0x100
 800259a:	4864      	ldr	r0, [pc, #400]	; (800272c <HAL_UART_RxCpltCallback+0x1f4>)
 800259c:	f001 fd95 	bl	80040ca <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9, GPIO_PIN_SET);
 80025a0:	2201      	movs	r2, #1
 80025a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025a6:	4861      	ldr	r0, [pc, #388]	; (800272c <HAL_UART_RxCpltCallback+0x1f4>)
 80025a8:	f001 fd8f 	bl	80040ca <HAL_GPIO_WritePin>
 80025ac:	e028      	b.n	8002600 <HAL_UART_RxCpltCallback+0xc8>
				}
				else if (WheelDrive == 0x05)
 80025ae:	4b5e      	ldr	r3, [pc, #376]	; (8002728 <HAL_UART_RxCpltCallback+0x1f0>)
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	2b05      	cmp	r3, #5
 80025b4:	d10c      	bne.n	80025d0 <HAL_UART_RxCpltCallback+0x98>
				{
				  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10, GPIO_PIN_SET);
 80025b6:	2201      	movs	r2, #1
 80025b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80025bc:	485b      	ldr	r0, [pc, #364]	; (800272c <HAL_UART_RxCpltCallback+0x1f4>)
 80025be:	f001 fd84 	bl	80040ca <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11, GPIO_PIN_RESET);
 80025c2:	2200      	movs	r2, #0
 80025c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025c8:	4858      	ldr	r0, [pc, #352]	; (800272c <HAL_UART_RxCpltCallback+0x1f4>)
 80025ca:	f001 fd7e 	bl	80040ca <HAL_GPIO_WritePin>
 80025ce:	e017      	b.n	8002600 <HAL_UART_RxCpltCallback+0xc8>
				}
				else {
				  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8, GPIO_PIN_RESET);
 80025d0:	2200      	movs	r2, #0
 80025d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025d6:	4855      	ldr	r0, [pc, #340]	; (800272c <HAL_UART_RxCpltCallback+0x1f4>)
 80025d8:	f001 fd77 	bl	80040ca <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9, GPIO_PIN_SET);
 80025dc:	2201      	movs	r2, #1
 80025de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025e2:	4852      	ldr	r0, [pc, #328]	; (800272c <HAL_UART_RxCpltCallback+0x1f4>)
 80025e4:	f001 fd71 	bl	80040ca <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10, GPIO_PIN_SET);
 80025e8:	2201      	movs	r2, #1
 80025ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80025ee:	484f      	ldr	r0, [pc, #316]	; (800272c <HAL_UART_RxCpltCallback+0x1f4>)
 80025f0:	f001 fd6b 	bl	80040ca <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11, GPIO_PIN_RESET);
 80025f4:	2200      	movs	r2, #0
 80025f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025fa:	484c      	ldr	r0, [pc, #304]	; (800272c <HAL_UART_RxCpltCallback+0x1f4>)
 80025fc:	f001 fd65 	bl	80040ca <HAL_GPIO_WritePin>
				}
			}
			//收到后退信息
			if (uart3_rxbuf[0] == 0xBB) {
 8002600:	4b48      	ldr	r3, [pc, #288]	; (8002724 <HAL_UART_RxCpltCallback+0x1ec>)
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	2bbb      	cmp	r3, #187	; 0xbb
 8002606:	d139      	bne.n	800267c <HAL_UART_RxCpltCallback+0x144>

				if(WheelDrive == 0x03)
 8002608:	4b47      	ldr	r3, [pc, #284]	; (8002728 <HAL_UART_RxCpltCallback+0x1f0>)
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	2b03      	cmp	r3, #3
 800260e:	d10c      	bne.n	800262a <HAL_UART_RxCpltCallback+0xf2>
				{
				  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8, GPIO_PIN_SET);
 8002610:	2201      	movs	r2, #1
 8002612:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002616:	4845      	ldr	r0, [pc, #276]	; (800272c <HAL_UART_RxCpltCallback+0x1f4>)
 8002618:	f001 fd57 	bl	80040ca <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9, GPIO_PIN_RESET);
 800261c:	2200      	movs	r2, #0
 800261e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002622:	4842      	ldr	r0, [pc, #264]	; (800272c <HAL_UART_RxCpltCallback+0x1f4>)
 8002624:	f001 fd51 	bl	80040ca <HAL_GPIO_WritePin>
 8002628:	e028      	b.n	800267c <HAL_UART_RxCpltCallback+0x144>
				}
				else if (WheelDrive == 0x05)
 800262a:	4b3f      	ldr	r3, [pc, #252]	; (8002728 <HAL_UART_RxCpltCallback+0x1f0>)
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	2b05      	cmp	r3, #5
 8002630:	d10c      	bne.n	800264c <HAL_UART_RxCpltCallback+0x114>
				{
				  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10, GPIO_PIN_RESET);
 8002632:	2200      	movs	r2, #0
 8002634:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002638:	483c      	ldr	r0, [pc, #240]	; (800272c <HAL_UART_RxCpltCallback+0x1f4>)
 800263a:	f001 fd46 	bl	80040ca <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11, GPIO_PIN_SET);
 800263e:	2201      	movs	r2, #1
 8002640:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002644:	4839      	ldr	r0, [pc, #228]	; (800272c <HAL_UART_RxCpltCallback+0x1f4>)
 8002646:	f001 fd40 	bl	80040ca <HAL_GPIO_WritePin>
 800264a:	e017      	b.n	800267c <HAL_UART_RxCpltCallback+0x144>
				}
				else {
				  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8, GPIO_PIN_SET);
 800264c:	2201      	movs	r2, #1
 800264e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002652:	4836      	ldr	r0, [pc, #216]	; (800272c <HAL_UART_RxCpltCallback+0x1f4>)
 8002654:	f001 fd39 	bl	80040ca <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9, GPIO_PIN_RESET);
 8002658:	2200      	movs	r2, #0
 800265a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800265e:	4833      	ldr	r0, [pc, #204]	; (800272c <HAL_UART_RxCpltCallback+0x1f4>)
 8002660:	f001 fd33 	bl	80040ca <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10, GPIO_PIN_RESET);
 8002664:	2200      	movs	r2, #0
 8002666:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800266a:	4830      	ldr	r0, [pc, #192]	; (800272c <HAL_UART_RxCpltCallback+0x1f4>)
 800266c:	f001 fd2d 	bl	80040ca <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11, GPIO_PIN_SET);
 8002670:	2201      	movs	r2, #1
 8002672:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002676:	482d      	ldr	r0, [pc, #180]	; (800272c <HAL_UART_RxCpltCallback+0x1f4>)
 8002678:	f001 fd27 	bl	80040ca <HAL_GPIO_WritePin>
				}

			}

			//收到左转信息
					if (uart3_rxbuf[0] == 0xCC) {
 800267c:	4b29      	ldr	r3, [pc, #164]	; (8002724 <HAL_UART_RxCpltCallback+0x1ec>)
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	2bcc      	cmp	r3, #204	; 0xcc
 8002682:	d109      	bne.n	8002698 <HAL_UART_RxCpltCallback+0x160>

						  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0, GPIO_PIN_RESET);
 8002684:	2200      	movs	r2, #0
 8002686:	2101      	movs	r1, #1
 8002688:	4829      	ldr	r0, [pc, #164]	; (8002730 <HAL_UART_RxCpltCallback+0x1f8>)
 800268a:	f001 fd1e 	bl	80040ca <HAL_GPIO_WritePin>
						  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1, GPIO_PIN_SET);
 800268e:	2201      	movs	r2, #1
 8002690:	2102      	movs	r1, #2
 8002692:	4827      	ldr	r0, [pc, #156]	; (8002730 <HAL_UART_RxCpltCallback+0x1f8>)
 8002694:	f001 fd19 	bl	80040ca <HAL_GPIO_WritePin>
					}



			//收到右转信息
					if (uart3_rxbuf[0] == 0xDD) {
 8002698:	4b22      	ldr	r3, [pc, #136]	; (8002724 <HAL_UART_RxCpltCallback+0x1ec>)
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	2bdd      	cmp	r3, #221	; 0xdd
 800269e:	d109      	bne.n	80026b4 <HAL_UART_RxCpltCallback+0x17c>

						  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0, GPIO_PIN_SET);
 80026a0:	2201      	movs	r2, #1
 80026a2:	2101      	movs	r1, #1
 80026a4:	4822      	ldr	r0, [pc, #136]	; (8002730 <HAL_UART_RxCpltCallback+0x1f8>)
 80026a6:	f001 fd10 	bl	80040ca <HAL_GPIO_WritePin>
						  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1, GPIO_PIN_RESET);
 80026aa:	2200      	movs	r2, #0
 80026ac:	2102      	movs	r1, #2
 80026ae:	4820      	ldr	r0, [pc, #128]	; (8002730 <HAL_UART_RxCpltCallback+0x1f8>)
 80026b0:	f001 fd0b 	bl	80040ca <HAL_GPIO_WritePin>

					}
			//收到右转信息
			if (uart3_rxbuf[0] == 0x02) {
 80026b4:	4b1b      	ldr	r3, [pc, #108]	; (8002724 <HAL_UART_RxCpltCallback+0x1ec>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d109      	bne.n	80026d0 <HAL_UART_RxCpltCallback+0x198>

				  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0, GPIO_PIN_RESET);
 80026bc:	2200      	movs	r2, #0
 80026be:	2101      	movs	r1, #1
 80026c0:	481b      	ldr	r0, [pc, #108]	; (8002730 <HAL_UART_RxCpltCallback+0x1f8>)
 80026c2:	f001 fd02 	bl	80040ca <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1, GPIO_PIN_RESET);
 80026c6:	2200      	movs	r2, #0
 80026c8:	2102      	movs	r1, #2
 80026ca:	4819      	ldr	r0, [pc, #100]	; (8002730 <HAL_UART_RxCpltCallback+0x1f8>)
 80026cc:	f001 fcfd 	bl	80040ca <HAL_GPIO_WritePin>




			//停止信息（待机 00 ）
			if (uart3_rxbuf[0] == 0x01) {
 80026d0:	4b14      	ldr	r3, [pc, #80]	; (8002724 <HAL_UART_RxCpltCallback+0x1ec>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d117      	bne.n	8002708 <HAL_UART_RxCpltCallback+0x1d0>

				  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8, GPIO_PIN_RESET);
 80026d8:	2200      	movs	r2, #0
 80026da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026de:	4813      	ldr	r0, [pc, #76]	; (800272c <HAL_UART_RxCpltCallback+0x1f4>)
 80026e0:	f001 fcf3 	bl	80040ca <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9, GPIO_PIN_RESET);
 80026e4:	2200      	movs	r2, #0
 80026e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026ea:	4810      	ldr	r0, [pc, #64]	; (800272c <HAL_UART_RxCpltCallback+0x1f4>)
 80026ec:	f001 fced 	bl	80040ca <HAL_GPIO_WritePin>
				  	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10, GPIO_PIN_RESET);
 80026f0:	2200      	movs	r2, #0
 80026f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80026f6:	480d      	ldr	r0, [pc, #52]	; (800272c <HAL_UART_RxCpltCallback+0x1f4>)
 80026f8:	f001 fce7 	bl	80040ca <HAL_GPIO_WritePin>
				  	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11, GPIO_PIN_RESET);
 80026fc:	2200      	movs	r2, #0
 80026fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002702:	480a      	ldr	r0, [pc, #40]	; (800272c <HAL_UART_RxCpltCallback+0x1f4>)
 8002704:	f001 fce1 	bl	80040ca <HAL_GPIO_WritePin>

			}

			HAL_UART_Receive_IT(&huart3, uart3_rxbuf, 1);       // 重新注册一次，要不然下次收不到了
 8002708:	2201      	movs	r2, #1
 800270a:	4906      	ldr	r1, [pc, #24]	; (8002724 <HAL_UART_RxCpltCallback+0x1ec>)
 800270c:	4809      	ldr	r0, [pc, #36]	; (8002734 <HAL_UART_RxCpltCallback+0x1fc>)
 800270e:	f004 faa8 	bl	8006c62 <HAL_UART_Receive_IT>
	      }



}
 8002712:	bf00      	nop
 8002714:	3708      	adds	r7, #8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	40004400 	.word	0x40004400
 8002720:	40004800 	.word	0x40004800
 8002724:	200003fc 	.word	0x200003fc
 8002728:	20000000 	.word	0x20000000
 800272c:	40010800 	.word	0x40010800
 8002730:	40010c00 	.word	0x40010c00
 8002734:	20000454 	.word	0x20000454

08002738 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800273c:	bf00      	nop
 800273e:	46bd      	mov	sp, r7
 8002740:	bc80      	pop	{r7}
 8002742:	4770      	bx	lr

08002744 <MLX90614_Read16>:

uint8_t ObjectTemperature;
uint8_t AmbientTemperature;

MLX90614_STATUS MLX90614_Read16(uint8_t Register, uint16_t *Result)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b088      	sub	sp, #32
 8002748:	af04      	add	r7, sp, #16
 800274a:	4603      	mov	r3, r0
 800274c:	6039      	str	r1, [r7, #0]
 800274e:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp[2];

	if(HAL_OK != HAL_I2C_Mem_Read(mlx90614_i2c, MLX90614_DEFAULT_ADDRESS, Register, 1, tmp, 2, 10))
 8002750:	4b11      	ldr	r3, [pc, #68]	; (8002798 <MLX90614_Read16+0x54>)
 8002752:	6818      	ldr	r0, [r3, #0]
 8002754:	79fb      	ldrb	r3, [r7, #7]
 8002756:	b29a      	uxth	r2, r3
 8002758:	230a      	movs	r3, #10
 800275a:	9302      	str	r3, [sp, #8]
 800275c:	2302      	movs	r3, #2
 800275e:	9301      	str	r3, [sp, #4]
 8002760:	f107 030c 	add.w	r3, r7, #12
 8002764:	9300      	str	r3, [sp, #0]
 8002766:	2301      	movs	r3, #1
 8002768:	21b4      	movs	r1, #180	; 0xb4
 800276a:	f002 fa51 	bl	8004c10 <HAL_I2C_Mem_Read>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <MLX90614_Read16+0x34>
	{
		return MLX90614_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e00a      	b.n	800278e <MLX90614_Read16+0x4a>
	}

	*Result = (uint16_t)tmp[1]<<8 | tmp[0];
 8002778:	7b7b      	ldrb	r3, [r7, #13]
 800277a:	021b      	lsls	r3, r3, #8
 800277c:	b21a      	sxth	r2, r3
 800277e:	7b3b      	ldrb	r3, [r7, #12]
 8002780:	b21b      	sxth	r3, r3
 8002782:	4313      	orrs	r3, r2
 8002784:	b21b      	sxth	r3, r3
 8002786:	b29a      	uxth	r2, r3
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	801a      	strh	r2, [r3, #0]

	return MLX90614_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3710      	adds	r7, #16
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	20000408 	.word	0x20000408

0800279c <MLX90614_Read16Eeprom>:

MLX90614_STATUS MLX90614_Read16Eeprom(uint8_t Address, uint16_t *Result)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b088      	sub	sp, #32
 80027a0:	af04      	add	r7, sp, #16
 80027a2:	4603      	mov	r3, r0
 80027a4:	6039      	str	r1, [r7, #0]
 80027a6:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp[2];

	Address &= 0x1F;
 80027a8:	79fb      	ldrb	r3, [r7, #7]
 80027aa:	f003 031f 	and.w	r3, r3, #31
 80027ae:	71fb      	strb	r3, [r7, #7]
	Address |= 0x20;
 80027b0:	79fb      	ldrb	r3, [r7, #7]
 80027b2:	f043 0320 	orr.w	r3, r3, #32
 80027b6:	71fb      	strb	r3, [r7, #7]

	if(HAL_OK != HAL_I2C_Mem_Read(mlx90614_i2c, MLX90614_DEFAULT_ADDRESS, Address, 1, tmp, 2, 10))
 80027b8:	4b11      	ldr	r3, [pc, #68]	; (8002800 <MLX90614_Read16Eeprom+0x64>)
 80027ba:	6818      	ldr	r0, [r3, #0]
 80027bc:	79fb      	ldrb	r3, [r7, #7]
 80027be:	b29a      	uxth	r2, r3
 80027c0:	230a      	movs	r3, #10
 80027c2:	9302      	str	r3, [sp, #8]
 80027c4:	2302      	movs	r3, #2
 80027c6:	9301      	str	r3, [sp, #4]
 80027c8:	f107 030c 	add.w	r3, r7, #12
 80027cc:	9300      	str	r3, [sp, #0]
 80027ce:	2301      	movs	r3, #1
 80027d0:	21b4      	movs	r1, #180	; 0xb4
 80027d2:	f002 fa1d 	bl	8004c10 <HAL_I2C_Mem_Read>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <MLX90614_Read16Eeprom+0x44>
	{
		return MLX90614_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e00a      	b.n	80027f6 <MLX90614_Read16Eeprom+0x5a>
	}

	*Result = (uint16_t)tmp[1]<<8 | tmp[0];
 80027e0:	7b7b      	ldrb	r3, [r7, #13]
 80027e2:	021b      	lsls	r3, r3, #8
 80027e4:	b21a      	sxth	r2, r3
 80027e6:	7b3b      	ldrb	r3, [r7, #12]
 80027e8:	b21b      	sxth	r3, r3
 80027ea:	4313      	orrs	r3, r2
 80027ec:	b21b      	sxth	r3, r3
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	801a      	strh	r2, [r3, #0]

	return MLX90614_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	20000408 	.word	0x20000408

08002804 <crc8>:


uint8_t crc8(uint8_t InCrc, uint8_t InData)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	4603      	mov	r3, r0
 800280c:	460a      	mov	r2, r1
 800280e:	71fb      	strb	r3, [r7, #7]
 8002810:	4613      	mov	r3, r2
 8002812:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	uint8_t Data;
	Data = InCrc ^= InData;
 8002814:	79fa      	ldrb	r2, [r7, #7]
 8002816:	79bb      	ldrb	r3, [r7, #6]
 8002818:	4053      	eors	r3, r2
 800281a:	71fb      	strb	r3, [r7, #7]
 800281c:	79fb      	ldrb	r3, [r7, #7]
 800281e:	73bb      	strb	r3, [r7, #14]
	for ( i = 0; i < 8; i++ )
 8002820:	2300      	movs	r3, #0
 8002822:	73fb      	strb	r3, [r7, #15]
 8002824:	e011      	b.n	800284a <crc8+0x46>
	{
		if (( Data & 0x80 ) != 0 )
 8002826:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800282a:	2b00      	cmp	r3, #0
 800282c:	da07      	bge.n	800283e <crc8+0x3a>
		{
			Data <<= 1;
 800282e:	7bbb      	ldrb	r3, [r7, #14]
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	73bb      	strb	r3, [r7, #14]
			Data ^= 0x07;
 8002834:	7bbb      	ldrb	r3, [r7, #14]
 8002836:	f083 0307 	eor.w	r3, r3, #7
 800283a:	73bb      	strb	r3, [r7, #14]
 800283c:	e002      	b.n	8002844 <crc8+0x40>
		}
		else
		{
			Data <<= 1;
 800283e:	7bbb      	ldrb	r3, [r7, #14]
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	73bb      	strb	r3, [r7, #14]
	for ( i = 0; i < 8; i++ )
 8002844:	7bfb      	ldrb	r3, [r7, #15]
 8002846:	3301      	adds	r3, #1
 8002848:	73fb      	strb	r3, [r7, #15]
 800284a:	7bfb      	ldrb	r3, [r7, #15]
 800284c:	2b07      	cmp	r3, #7
 800284e:	d9ea      	bls.n	8002826 <crc8+0x22>
		}
	}
	return Data;
 8002850:	7bbb      	ldrb	r3, [r7, #14]
}
 8002852:	4618      	mov	r0, r3
 8002854:	3714      	adds	r7, #20
 8002856:	46bd      	mov	sp, r7
 8002858:	bc80      	pop	{r7}
 800285a:	4770      	bx	lr

0800285c <MLX90614_Write16Crc>:

MLX90614_STATUS MLX90614_Write16Crc(uint8_t Address, uint16_t Value)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b088      	sub	sp, #32
 8002860:	af04      	add	r7, sp, #16
 8002862:	4603      	mov	r3, r0
 8002864:	460a      	mov	r2, r1
 8002866:	71fb      	strb	r3, [r7, #7]
 8002868:	4613      	mov	r3, r2
 800286a:	80bb      	strh	r3, [r7, #4]
	uint8_t Crc;
	uint8_t tmp[3];

	Address &= 0x1F;
 800286c:	79fb      	ldrb	r3, [r7, #7]
 800286e:	f003 031f 	and.w	r3, r3, #31
 8002872:	71fb      	strb	r3, [r7, #7]
	Address |= 0x20;
 8002874:	79fb      	ldrb	r3, [r7, #7]
 8002876:	f043 0320 	orr.w	r3, r3, #32
 800287a:	71fb      	strb	r3, [r7, #7]

	Crc = crc8(0, MLX90614_DEFAULT_ADDRESS);
 800287c:	21b4      	movs	r1, #180	; 0xb4
 800287e:	2000      	movs	r0, #0
 8002880:	f7ff ffc0 	bl	8002804 <crc8>
 8002884:	4603      	mov	r3, r0
 8002886:	73fb      	strb	r3, [r7, #15]
	Crc = crc8(Crc, Address);
 8002888:	79fa      	ldrb	r2, [r7, #7]
 800288a:	7bfb      	ldrb	r3, [r7, #15]
 800288c:	4611      	mov	r1, r2
 800288e:	4618      	mov	r0, r3
 8002890:	f7ff ffb8 	bl	8002804 <crc8>
 8002894:	4603      	mov	r3, r0
 8002896:	73fb      	strb	r3, [r7, #15]
	Crc = crc8(Crc, Value & 0xFF);
 8002898:	88bb      	ldrh	r3, [r7, #4]
 800289a:	b2da      	uxtb	r2, r3
 800289c:	7bfb      	ldrb	r3, [r7, #15]
 800289e:	4611      	mov	r1, r2
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7ff ffaf 	bl	8002804 <crc8>
 80028a6:	4603      	mov	r3, r0
 80028a8:	73fb      	strb	r3, [r7, #15]
	Crc = crc8(Crc, Value>>8);
 80028aa:	88bb      	ldrh	r3, [r7, #4]
 80028ac:	0a1b      	lsrs	r3, r3, #8
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	b2da      	uxtb	r2, r3
 80028b2:	7bfb      	ldrb	r3, [r7, #15]
 80028b4:	4611      	mov	r1, r2
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7ff ffa4 	bl	8002804 <crc8>
 80028bc:	4603      	mov	r3, r0
 80028be:	73fb      	strb	r3, [r7, #15]

	tmp[0] = Value & 0xFF;
 80028c0:	88bb      	ldrh	r3, [r7, #4]
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	733b      	strb	r3, [r7, #12]
	tmp[1] = Value>>8;
 80028c6:	88bb      	ldrh	r3, [r7, #4]
 80028c8:	0a1b      	lsrs	r3, r3, #8
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	737b      	strb	r3, [r7, #13]
	tmp[2] = Crc;
 80028d0:	7bfb      	ldrb	r3, [r7, #15]
 80028d2:	73bb      	strb	r3, [r7, #14]

	if(HAL_OK != HAL_I2C_Mem_Write(mlx90614_i2c, MLX90614_DEFAULT_ADDRESS, Address, 1, tmp, 3, 10))
 80028d4:	4b0c      	ldr	r3, [pc, #48]	; (8002908 <MLX90614_Write16Crc+0xac>)
 80028d6:	6818      	ldr	r0, [r3, #0]
 80028d8:	79fb      	ldrb	r3, [r7, #7]
 80028da:	b29a      	uxth	r2, r3
 80028dc:	230a      	movs	r3, #10
 80028de:	9302      	str	r3, [sp, #8]
 80028e0:	2303      	movs	r3, #3
 80028e2:	9301      	str	r3, [sp, #4]
 80028e4:	f107 030c 	add.w	r3, r7, #12
 80028e8:	9300      	str	r3, [sp, #0]
 80028ea:	2301      	movs	r3, #1
 80028ec:	21b4      	movs	r1, #180	; 0xb4
 80028ee:	f002 f895 	bl	8004a1c <HAL_I2C_Mem_Write>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <MLX90614_Write16Crc+0xa0>
	{
		return MLX90614_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e000      	b.n	80028fe <MLX90614_Write16Crc+0xa2>
	}

	return MLX90614_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3710      	adds	r7, #16
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	20000408 	.word	0x20000408

0800290c <MLX90614_Write16Eeprom>:

MLX90614_STATUS MLX90614_Write16Eeprom(uint8_t Address, uint16_t Value)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	4603      	mov	r3, r0
 8002914:	460a      	mov	r2, r1
 8002916:	71fb      	strb	r3, [r7, #7]
 8002918:	4613      	mov	r3, r2
 800291a:	80bb      	strh	r3, [r7, #4]

	uint16_t Verify;

	if(MLX90614_OK != MLX90614_Write16Crc(Address, 0))
 800291c:	79fb      	ldrb	r3, [r7, #7]
 800291e:	2100      	movs	r1, #0
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff ff9b 	bl	800285c <MLX90614_Write16Crc>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <MLX90614_Write16Eeprom+0x24>
	{
		return MLX90614_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e01e      	b.n	800296e <MLX90614_Write16Eeprom+0x62>
	}

	HAL_Delay(10); // Erasing time ~5ms;
 8002930:	200a      	movs	r0, #10
 8002932:	f000 fbcf 	bl	80030d4 <HAL_Delay>

	if(MLX90614_OK != MLX90614_Write16Crc(Address, Value))
 8002936:	88ba      	ldrh	r2, [r7, #4]
 8002938:	79fb      	ldrb	r3, [r7, #7]
 800293a:	4611      	mov	r1, r2
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff ff8d 	bl	800285c <MLX90614_Write16Crc>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <MLX90614_Write16Eeprom+0x40>
	{
		return MLX90614_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e010      	b.n	800296e <MLX90614_Write16Eeprom+0x62>
	}

	HAL_Delay(10); // Writing time ~5ms;
 800294c:	200a      	movs	r0, #10
 800294e:	f000 fbc1 	bl	80030d4 <HAL_Delay>

	MLX90614_Read16Eeprom(Address, &Verify);
 8002952:	f107 020e 	add.w	r2, r7, #14
 8002956:	79fb      	ldrb	r3, [r7, #7]
 8002958:	4611      	mov	r1, r2
 800295a:	4618      	mov	r0, r3
 800295c:	f7ff ff1e 	bl	800279c <MLX90614_Read16Eeprom>
	if(Verify != Value)
 8002960:	89fb      	ldrh	r3, [r7, #14]
 8002962:	88ba      	ldrh	r2, [r7, #4]
 8002964:	429a      	cmp	r2, r3
 8002966:	d001      	beq.n	800296c <MLX90614_Write16Eeprom+0x60>
	{
		return MLX90614_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e000      	b.n	800296e <MLX90614_Write16Eeprom+0x62>
	}

	return MLX90614_OK;
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3710      	adds	r7, #16
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
	...

08002978 <MLX90614_KelvinToCelsius>:

float MLX90614_KelvinToCelsius(uint16_t Temperature)
{
 8002978:	b590      	push	{r4, r7, lr}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	4603      	mov	r3, r0
 8002980:	80fb      	strh	r3, [r7, #6]
	float Result;

	Result = (float)Temperature * 0.02;
 8002982:	88fb      	ldrh	r3, [r7, #6]
 8002984:	4618      	mov	r0, r3
 8002986:	f7fe f9a5 	bl	8000cd4 <__aeabi_ui2f>
 800298a:	4603      	mov	r3, r0
 800298c:	4618      	mov	r0, r3
 800298e:	f7fd fd4b 	bl	8000428 <__aeabi_f2d>
 8002992:	a311      	add	r3, pc, #68	; (adr r3, 80029d8 <MLX90614_KelvinToCelsius+0x60>)
 8002994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002998:	f7fd fd9e 	bl	80004d8 <__aeabi_dmul>
 800299c:	4603      	mov	r3, r0
 800299e:	460c      	mov	r4, r1
 80029a0:	4618      	mov	r0, r3
 80029a2:	4621      	mov	r1, r4
 80029a4:	f7fe f890 	bl	8000ac8 <__aeabi_d2f>
 80029a8:	4603      	mov	r3, r0
 80029aa:	60fb      	str	r3, [r7, #12]
	Result = Result - 273.15;
 80029ac:	68f8      	ldr	r0, [r7, #12]
 80029ae:	f7fd fd3b 	bl	8000428 <__aeabi_f2d>
 80029b2:	a30b      	add	r3, pc, #44	; (adr r3, 80029e0 <MLX90614_KelvinToCelsius+0x68>)
 80029b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b8:	f7fd fbd6 	bl	8000168 <__aeabi_dsub>
 80029bc:	4603      	mov	r3, r0
 80029be:	460c      	mov	r4, r1
 80029c0:	4618      	mov	r0, r3
 80029c2:	4621      	mov	r1, r4
 80029c4:	f7fe f880 	bl	8000ac8 <__aeabi_d2f>
 80029c8:	4603      	mov	r3, r0
 80029ca:	60fb      	str	r3, [r7, #12]

	return Result;
 80029cc:	68fb      	ldr	r3, [r7, #12]
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3714      	adds	r7, #20
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd90      	pop	{r4, r7, pc}
 80029d6:	bf00      	nop
 80029d8:	47ae147b 	.word	0x47ae147b
 80029dc:	3f947ae1 	.word	0x3f947ae1
 80029e0:	66666666 	.word	0x66666666
 80029e4:	40711266 	.word	0x40711266

080029e8 <MLX90614_ReadAmbientTemperature>:

MLX90614_STATUS MLX90614_ReadAmbientTemperature(float *Temperature)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
	uint16_t tmp;

	if(MLX90614_OK != MLX90614_Read16(MLX90614_TA, &tmp))
 80029f0:	f107 030e 	add.w	r3, r7, #14
 80029f4:	4619      	mov	r1, r3
 80029f6:	2006      	movs	r0, #6
 80029f8:	f7ff fea4 	bl	8002744 <MLX90614_Read16>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <MLX90614_ReadAmbientTemperature+0x1e>
	{
		return MLX90614_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e007      	b.n	8002a16 <MLX90614_ReadAmbientTemperature+0x2e>
	}

	*Temperature = MLX90614_KelvinToCelsius(tmp);
 8002a06:	89fb      	ldrh	r3, [r7, #14]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff ffb5 	bl	8002978 <MLX90614_KelvinToCelsius>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	601a      	str	r2, [r3, #0]

	return MLX90614_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3710      	adds	r7, #16
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <MLX90614_ReadObjectTemperature>:

MLX90614_STATUS MLX90614_ReadObjectTemperature(float *Temperature)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b084      	sub	sp, #16
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
	uint16_t tmp;

	if(MLX90614_OK != MLX90614_Read16(MLX90614_TOBJ1, &tmp))
 8002a26:	f107 030e 	add.w	r3, r7, #14
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	2007      	movs	r0, #7
 8002a2e:	f7ff fe89 	bl	8002744 <MLX90614_Read16>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <MLX90614_ReadObjectTemperature+0x1e>
	{
		return MLX90614_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e007      	b.n	8002a4c <MLX90614_ReadObjectTemperature+0x2e>
	}

	*Temperature = MLX90614_KelvinToCelsius(tmp);
 8002a3c:	89fb      	ldrh	r3, [r7, #14]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7ff ff9a 	bl	8002978 <MLX90614_KelvinToCelsius>
 8002a44:	4602      	mov	r2, r0
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	601a      	str	r2, [r3, #0]

	return MLX90614_OK;
 8002a4a:	2300      	movs	r3, #0
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3710      	adds	r7, #16
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <MLX90614_GetEmissivity>:
	return MLX90614_OK;
}


MLX90614_STATUS MLX90614_GetEmissivity(float *Emissivity)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
	uint16_t tmp;

	if(MLX90614_OK != MLX90614_Read16Eeprom(MLX90614_EMISS, &tmp))
 8002a5c:	f107 030e 	add.w	r3, r7, #14
 8002a60:	4619      	mov	r1, r3
 8002a62:	2004      	movs	r0, #4
 8002a64:	f7ff fe9a 	bl	800279c <MLX90614_Read16Eeprom>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <MLX90614_GetEmissivity+0x1e>
	{
		return MLX90614_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e00d      	b.n	8002a8e <MLX90614_GetEmissivity+0x3a>
	}

	*Emissivity = (float)tmp/65535.0;
 8002a72:	89fb      	ldrh	r3, [r7, #14]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7fe f92d 	bl	8000cd4 <__aeabi_ui2f>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	4906      	ldr	r1, [pc, #24]	; (8002a98 <MLX90614_GetEmissivity+0x44>)
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7fe fa34 	bl	8000eec <__aeabi_fdiv>
 8002a84:	4603      	mov	r3, r0
 8002a86:	461a      	mov	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	601a      	str	r2, [r3, #0]

	return MLX90614_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3710      	adds	r7, #16
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	477fff00 	.word	0x477fff00
 8002a9c:	00000000 	.word	0x00000000

08002aa0 <MLX90614_SetEmissivity>:


MLX90614_STATUS MLX90614_SetEmissivity(float Emissivity)
{
 8002aa0:	b590      	push	{r4, r7, lr}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
	if (Emissivity < 0.1 || Emissivity > 1)
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f7fd fcbd 	bl	8000428 <__aeabi_f2d>
 8002aae:	a33a      	add	r3, pc, #232	; (adr r3, 8002b98 <MLX90614_SetEmissivity+0xf8>)
 8002ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab4:	f7fd ff82 	bl	80009bc <__aeabi_dcmplt>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d107      	bne.n	8002ace <MLX90614_SetEmissivity+0x2e>
 8002abe:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f7fe fb1a 	bl	80010fc <__aeabi_fcmpgt>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <MLX90614_SetEmissivity+0x32>
		return MLX90614_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e05b      	b.n	8002b8a <MLX90614_SetEmissivity+0xea>
	uint16_t current_emissivity;
	uint16_t current_calibration;
	uint16_t new_emissivity;
	uint16_t new_calibration;

	MLX90614_Read16Eeprom(MLX90614_EMISS, &current_emissivity);
 8002ad2:	f107 030a 	add.w	r3, r7, #10
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	2004      	movs	r0, #4
 8002ada:	f7ff fe5f 	bl	800279c <MLX90614_Read16Eeprom>
	MLX90614_Read16Eeprom(MLX90614_EMISS_CALIBRATION, &current_calibration);
 8002ade:	f107 0308 	add.w	r3, r7, #8
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	200f      	movs	r0, #15
 8002ae6:	f7ff fe59 	bl	800279c <MLX90614_Read16Eeprom>

	new_emissivity = (uint16_t)round(65535.0 * Emissivity);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f7fd fc9c 	bl	8000428 <__aeabi_f2d>
 8002af0:	a32b      	add	r3, pc, #172	; (adr r3, 8002ba0 <MLX90614_SetEmissivity+0x100>)
 8002af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002af6:	f7fd fcef 	bl	80004d8 <__aeabi_dmul>
 8002afa:	4603      	mov	r3, r0
 8002afc:	460c      	mov	r4, r1
 8002afe:	4618      	mov	r0, r3
 8002b00:	4621      	mov	r1, r4
 8002b02:	f007 fc91 	bl	800a428 <round>
 8002b06:	4603      	mov	r3, r0
 8002b08:	460c      	mov	r4, r1
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	4621      	mov	r1, r4
 8002b0e:	f7fd ffbb 	bl	8000a88 <__aeabi_d2uiz>
 8002b12:	4603      	mov	r3, r0
 8002b14:	81fb      	strh	r3, [r7, #14]

	if(new_emissivity == current_emissivity)
 8002b16:	897b      	ldrh	r3, [r7, #10]
 8002b18:	89fa      	ldrh	r2, [r7, #14]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d101      	bne.n	8002b22 <MLX90614_SetEmissivity+0x82>
	{
		return MLX90614_OK;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	e033      	b.n	8002b8a <MLX90614_SetEmissivity+0xea>
	}

	new_calibration = (uint16_t)(((float)current_emissivity / new_emissivity) * current_calibration);
 8002b22:	897b      	ldrh	r3, [r7, #10]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7fe f8d5 	bl	8000cd4 <__aeabi_ui2f>
 8002b2a:	4604      	mov	r4, r0
 8002b2c:	89fb      	ldrh	r3, [r7, #14]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7fe f8d4 	bl	8000cdc <__aeabi_i2f>
 8002b34:	4603      	mov	r3, r0
 8002b36:	4619      	mov	r1, r3
 8002b38:	4620      	mov	r0, r4
 8002b3a:	f7fe f9d7 	bl	8000eec <__aeabi_fdiv>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	461c      	mov	r4, r3
 8002b42:	893b      	ldrh	r3, [r7, #8]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7fe f8c9 	bl	8000cdc <__aeabi_i2f>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	4620      	mov	r0, r4
 8002b50:	f7fe f918 	bl	8000d84 <__aeabi_fmul>
 8002b54:	4603      	mov	r3, r0
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7fe fb00 	bl	800115c <__aeabi_f2uiz>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	81bb      	strh	r3, [r7, #12]

	if(MLX90614_OK != MLX90614_Write16Eeprom(MLX90614_EMISS, new_emissivity))
 8002b60:	89fb      	ldrh	r3, [r7, #14]
 8002b62:	4619      	mov	r1, r3
 8002b64:	2004      	movs	r0, #4
 8002b66:	f7ff fed1 	bl	800290c <MLX90614_Write16Eeprom>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d001      	beq.n	8002b74 <MLX90614_SetEmissivity+0xd4>
	{
		return MLX90614_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e00a      	b.n	8002b8a <MLX90614_SetEmissivity+0xea>
	}

	if(MLX90614_OK != MLX90614_Write16Eeprom(MLX90614_EMISS_CALIBRATION, new_calibration))
 8002b74:	89bb      	ldrh	r3, [r7, #12]
 8002b76:	4619      	mov	r1, r3
 8002b78:	200f      	movs	r0, #15
 8002b7a:	f7ff fec7 	bl	800290c <MLX90614_Write16Eeprom>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <MLX90614_SetEmissivity+0xe8>
	{
		return MLX90614_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e000      	b.n	8002b8a <MLX90614_SetEmissivity+0xea>
	}

	return MLX90614_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3714      	adds	r7, #20
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd90      	pop	{r4, r7, pc}
 8002b92:	bf00      	nop
 8002b94:	f3af 8000 	nop.w
 8002b98:	9999999a 	.word	0x9999999a
 8002b9c:	3fb99999 	.word	0x3fb99999
 8002ba0:	00000000 	.word	0x00000000
 8002ba4:	40efffe0 	.word	0x40efffe0

08002ba8 <MLX90614_Init>:
}



MLX90614_STATUS MLX90614_Init(I2C_HandleTypeDef *hi2c)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
	mlx90614_i2c = hi2c;
 8002bb0:	4a04      	ldr	r2, [pc, #16]	; (8002bc4 <MLX90614_Init+0x1c>)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6013      	str	r3, [r2, #0]

	return MLX90614_OK;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bc80      	pop	{r7}
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	20000408 	.word	0x20000408

08002bc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002bce:	4b15      	ldr	r3, [pc, #84]	; (8002c24 <HAL_MspInit+0x5c>)
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	4a14      	ldr	r2, [pc, #80]	; (8002c24 <HAL_MspInit+0x5c>)
 8002bd4:	f043 0301 	orr.w	r3, r3, #1
 8002bd8:	6193      	str	r3, [r2, #24]
 8002bda:	4b12      	ldr	r3, [pc, #72]	; (8002c24 <HAL_MspInit+0x5c>)
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	60bb      	str	r3, [r7, #8]
 8002be4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002be6:	4b0f      	ldr	r3, [pc, #60]	; (8002c24 <HAL_MspInit+0x5c>)
 8002be8:	69db      	ldr	r3, [r3, #28]
 8002bea:	4a0e      	ldr	r2, [pc, #56]	; (8002c24 <HAL_MspInit+0x5c>)
 8002bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bf0:	61d3      	str	r3, [r2, #28]
 8002bf2:	4b0c      	ldr	r3, [pc, #48]	; (8002c24 <HAL_MspInit+0x5c>)
 8002bf4:	69db      	ldr	r3, [r3, #28]
 8002bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bfa:	607b      	str	r3, [r7, #4]
 8002bfc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002bfe:	4b0a      	ldr	r3, [pc, #40]	; (8002c28 <HAL_MspInit+0x60>)
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	60fb      	str	r3, [r7, #12]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002c0a:	60fb      	str	r3, [r7, #12]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c12:	60fb      	str	r3, [r7, #12]
 8002c14:	4a04      	ldr	r2, [pc, #16]	; (8002c28 <HAL_MspInit+0x60>)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c1a:	bf00      	nop
 8002c1c:	3714      	adds	r7, #20
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bc80      	pop	{r7}
 8002c22:	4770      	bx	lr
 8002c24:	40021000 	.word	0x40021000
 8002c28:	40010000 	.word	0x40010000

08002c2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002c30:	bf00      	nop
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bc80      	pop	{r7}
 8002c36:	4770      	bx	lr

08002c38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c3c:	e7fe      	b.n	8002c3c <HardFault_Handler+0x4>

08002c3e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c42:	e7fe      	b.n	8002c42 <MemManage_Handler+0x4>

08002c44 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c48:	e7fe      	b.n	8002c48 <BusFault_Handler+0x4>

08002c4a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c4e:	e7fe      	b.n	8002c4e <UsageFault_Handler+0x4>

08002c50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c54:	bf00      	nop
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bc80      	pop	{r7}
 8002c5a:	4770      	bx	lr

08002c5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c60:	bf00      	nop
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bc80      	pop	{r7}
 8002c66:	4770      	bx	lr

08002c68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c6c:	bf00      	nop
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bc80      	pop	{r7}
 8002c72:	4770      	bx	lr

08002c74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c78:	f000 fa10 	bl	800309c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c7c:	bf00      	nop
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002c84:	4802      	ldr	r0, [pc, #8]	; (8002c90 <USART2_IRQHandler+0x10>)
 8002c86:	f004 f841 	bl	8006d0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002c8a:	bf00      	nop
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	20000494 	.word	0x20000494

08002c94 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002c98:	4802      	ldr	r0, [pc, #8]	; (8002ca4 <USART3_IRQHandler+0x10>)
 8002c9a:	f004 f837 	bl	8006d0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002c9e:	bf00      	nop
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	20000454 	.word	0x20000454

08002ca8 <_sbrk>:
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	4a14      	ldr	r2, [pc, #80]	; (8002d04 <_sbrk+0x5c>)
 8002cb2:	4b15      	ldr	r3, [pc, #84]	; (8002d08 <_sbrk+0x60>)
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	617b      	str	r3, [r7, #20]
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	613b      	str	r3, [r7, #16]
 8002cbc:	4b13      	ldr	r3, [pc, #76]	; (8002d0c <_sbrk+0x64>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d102      	bne.n	8002cca <_sbrk+0x22>
 8002cc4:	4b11      	ldr	r3, [pc, #68]	; (8002d0c <_sbrk+0x64>)
 8002cc6:	4a12      	ldr	r2, [pc, #72]	; (8002d10 <_sbrk+0x68>)
 8002cc8:	601a      	str	r2, [r3, #0]
 8002cca:	4b10      	ldr	r3, [pc, #64]	; (8002d0c <_sbrk+0x64>)
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d207      	bcs.n	8002ce8 <_sbrk+0x40>
 8002cd8:	f004 fb1a 	bl	8007310 <__errno>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	230c      	movs	r3, #12
 8002ce0:	6013      	str	r3, [r2, #0]
 8002ce2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ce6:	e009      	b.n	8002cfc <_sbrk+0x54>
 8002ce8:	4b08      	ldr	r3, [pc, #32]	; (8002d0c <_sbrk+0x64>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	60fb      	str	r3, [r7, #12]
 8002cee:	4b07      	ldr	r3, [pc, #28]	; (8002d0c <_sbrk+0x64>)
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	4a05      	ldr	r2, [pc, #20]	; (8002d0c <_sbrk+0x64>)
 8002cf8:	6013      	str	r3, [r2, #0]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3718      	adds	r7, #24
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	20005000 	.word	0x20005000
 8002d08:	00000400 	.word	0x00000400
 8002d0c:	20000260 	.word	0x20000260
 8002d10:	200004e0 	.word	0x200004e0

08002d14 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d18:	bf00      	nop
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bc80      	pop	{r7}
 8002d1e:	4770      	bx	lr

08002d20 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d26:	f107 0308 	add.w	r3, r7, #8
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	601a      	str	r2, [r3, #0]
 8002d2e:	605a      	str	r2, [r3, #4]
 8002d30:	609a      	str	r2, [r3, #8]
 8002d32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d34:	463b      	mov	r3, r7
 8002d36:	2200      	movs	r2, #0
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8002d3c:	4b1d      	ldr	r3, [pc, #116]	; (8002db4 <MX_TIM2_Init+0x94>)
 8002d3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d42:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8002d44:	4b1b      	ldr	r3, [pc, #108]	; (8002db4 <MX_TIM2_Init+0x94>)
 8002d46:	2247      	movs	r2, #71	; 0x47
 8002d48:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d4a:	4b1a      	ldr	r3, [pc, #104]	; (8002db4 <MX_TIM2_Init+0x94>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50000;
 8002d50:	4b18      	ldr	r3, [pc, #96]	; (8002db4 <MX_TIM2_Init+0x94>)
 8002d52:	f24c 3250 	movw	r2, #50000	; 0xc350
 8002d56:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d58:	4b16      	ldr	r3, [pc, #88]	; (8002db4 <MX_TIM2_Init+0x94>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d5e:	4b15      	ldr	r3, [pc, #84]	; (8002db4 <MX_TIM2_Init+0x94>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002d64:	4813      	ldr	r0, [pc, #76]	; (8002db4 <MX_TIM2_Init+0x94>)
 8002d66:	f003 fbed 	bl	8006544 <HAL_TIM_Base_Init>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002d70:	f7ff fce2 	bl	8002738 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d78:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002d7a:	f107 0308 	add.w	r3, r7, #8
 8002d7e:	4619      	mov	r1, r3
 8002d80:	480c      	ldr	r0, [pc, #48]	; (8002db4 <MX_TIM2_Init+0x94>)
 8002d82:	f003 fc81 	bl	8006688 <HAL_TIM_ConfigClockSource>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d001      	beq.n	8002d90 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002d8c:	f7ff fcd4 	bl	8002738 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d90:	2300      	movs	r3, #0
 8002d92:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d94:	2300      	movs	r3, #0
 8002d96:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d98:	463b      	mov	r3, r7
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	4805      	ldr	r0, [pc, #20]	; (8002db4 <MX_TIM2_Init+0x94>)
 8002d9e:	f003 fe23 	bl	80069e8 <HAL_TIMEx_MasterConfigSynchronization>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002da8:	f7ff fcc6 	bl	8002738 <Error_Handler>
  }

}
 8002dac:	bf00      	nop
 8002dae:	3718      	adds	r7, #24
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	2000040c 	.word	0x2000040c

08002db8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dc8:	d10b      	bne.n	8002de2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002dca:	4b08      	ldr	r3, [pc, #32]	; (8002dec <HAL_TIM_Base_MspInit+0x34>)
 8002dcc:	69db      	ldr	r3, [r3, #28]
 8002dce:	4a07      	ldr	r2, [pc, #28]	; (8002dec <HAL_TIM_Base_MspInit+0x34>)
 8002dd0:	f043 0301 	orr.w	r3, r3, #1
 8002dd4:	61d3      	str	r3, [r2, #28]
 8002dd6:	4b05      	ldr	r3, [pc, #20]	; (8002dec <HAL_TIM_Base_MspInit+0x34>)
 8002dd8:	69db      	ldr	r3, [r3, #28]
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	60fb      	str	r3, [r7, #12]
 8002de0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002de2:	bf00      	nop
 8002de4:	3714      	adds	r7, #20
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bc80      	pop	{r7}
 8002dea:	4770      	bx	lr
 8002dec:	40021000 	.word	0x40021000

08002df0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002df4:	4b11      	ldr	r3, [pc, #68]	; (8002e3c <MX_USART2_UART_Init+0x4c>)
 8002df6:	4a12      	ldr	r2, [pc, #72]	; (8002e40 <MX_USART2_UART_Init+0x50>)
 8002df8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002dfa:	4b10      	ldr	r3, [pc, #64]	; (8002e3c <MX_USART2_UART_Init+0x4c>)
 8002dfc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002e00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e02:	4b0e      	ldr	r3, [pc, #56]	; (8002e3c <MX_USART2_UART_Init+0x4c>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e08:	4b0c      	ldr	r3, [pc, #48]	; (8002e3c <MX_USART2_UART_Init+0x4c>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002e0e:	4b0b      	ldr	r3, [pc, #44]	; (8002e3c <MX_USART2_UART_Init+0x4c>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e14:	4b09      	ldr	r3, [pc, #36]	; (8002e3c <MX_USART2_UART_Init+0x4c>)
 8002e16:	220c      	movs	r2, #12
 8002e18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e1a:	4b08      	ldr	r3, [pc, #32]	; (8002e3c <MX_USART2_UART_Init+0x4c>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e20:	4b06      	ldr	r3, [pc, #24]	; (8002e3c <MX_USART2_UART_Init+0x4c>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002e26:	4805      	ldr	r0, [pc, #20]	; (8002e3c <MX_USART2_UART_Init+0x4c>)
 8002e28:	f003 fe3c 	bl	8006aa4 <HAL_UART_Init>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002e32:	f7ff fc81 	bl	8002738 <Error_Handler>
  }

}
 8002e36:	bf00      	nop
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	20000494 	.word	0x20000494
 8002e40:	40004400 	.word	0x40004400

08002e44 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8002e48:	4b11      	ldr	r3, [pc, #68]	; (8002e90 <MX_USART3_UART_Init+0x4c>)
 8002e4a:	4a12      	ldr	r2, [pc, #72]	; (8002e94 <MX_USART3_UART_Init+0x50>)
 8002e4c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002e4e:	4b10      	ldr	r3, [pc, #64]	; (8002e90 <MX_USART3_UART_Init+0x4c>)
 8002e50:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002e54:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002e56:	4b0e      	ldr	r3, [pc, #56]	; (8002e90 <MX_USART3_UART_Init+0x4c>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002e5c:	4b0c      	ldr	r3, [pc, #48]	; (8002e90 <MX_USART3_UART_Init+0x4c>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002e62:	4b0b      	ldr	r3, [pc, #44]	; (8002e90 <MX_USART3_UART_Init+0x4c>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002e68:	4b09      	ldr	r3, [pc, #36]	; (8002e90 <MX_USART3_UART_Init+0x4c>)
 8002e6a:	220c      	movs	r2, #12
 8002e6c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e6e:	4b08      	ldr	r3, [pc, #32]	; (8002e90 <MX_USART3_UART_Init+0x4c>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e74:	4b06      	ldr	r3, [pc, #24]	; (8002e90 <MX_USART3_UART_Init+0x4c>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002e7a:	4805      	ldr	r0, [pc, #20]	; (8002e90 <MX_USART3_UART_Init+0x4c>)
 8002e7c:	f003 fe12 	bl	8006aa4 <HAL_UART_Init>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002e86:	f7ff fc57 	bl	8002738 <Error_Handler>
  }

}
 8002e8a:	bf00      	nop
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	20000454 	.word	0x20000454
 8002e94:	40004800 	.word	0x40004800

08002e98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b08a      	sub	sp, #40	; 0x28
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ea0:	f107 0318 	add.w	r3, r7, #24
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	601a      	str	r2, [r3, #0]
 8002ea8:	605a      	str	r2, [r3, #4]
 8002eaa:	609a      	str	r2, [r3, #8]
 8002eac:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a3f      	ldr	r2, [pc, #252]	; (8002fb0 <HAL_UART_MspInit+0x118>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d138      	bne.n	8002f2a <HAL_UART_MspInit+0x92>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002eb8:	4b3e      	ldr	r3, [pc, #248]	; (8002fb4 <HAL_UART_MspInit+0x11c>)
 8002eba:	69db      	ldr	r3, [r3, #28]
 8002ebc:	4a3d      	ldr	r2, [pc, #244]	; (8002fb4 <HAL_UART_MspInit+0x11c>)
 8002ebe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ec2:	61d3      	str	r3, [r2, #28]
 8002ec4:	4b3b      	ldr	r3, [pc, #236]	; (8002fb4 <HAL_UART_MspInit+0x11c>)
 8002ec6:	69db      	ldr	r3, [r3, #28]
 8002ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ecc:	617b      	str	r3, [r7, #20]
 8002ece:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ed0:	4b38      	ldr	r3, [pc, #224]	; (8002fb4 <HAL_UART_MspInit+0x11c>)
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	4a37      	ldr	r2, [pc, #220]	; (8002fb4 <HAL_UART_MspInit+0x11c>)
 8002ed6:	f043 0304 	orr.w	r3, r3, #4
 8002eda:	6193      	str	r3, [r2, #24]
 8002edc:	4b35      	ldr	r3, [pc, #212]	; (8002fb4 <HAL_UART_MspInit+0x11c>)
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	f003 0304 	and.w	r3, r3, #4
 8002ee4:	613b      	str	r3, [r7, #16]
 8002ee6:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002ee8:	2304      	movs	r3, #4
 8002eea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eec:	2302      	movs	r3, #2
 8002eee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ef4:	f107 0318 	add.w	r3, r7, #24
 8002ef8:	4619      	mov	r1, r3
 8002efa:	482f      	ldr	r0, [pc, #188]	; (8002fb8 <HAL_UART_MspInit+0x120>)
 8002efc:	f000 ff74 	bl	8003de8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002f00:	2308      	movs	r3, #8
 8002f02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f04:	2300      	movs	r3, #0
 8002f06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f0c:	f107 0318 	add.w	r3, r7, #24
 8002f10:	4619      	mov	r1, r3
 8002f12:	4829      	ldr	r0, [pc, #164]	; (8002fb8 <HAL_UART_MspInit+0x120>)
 8002f14:	f000 ff68 	bl	8003de8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002f18:	2200      	movs	r2, #0
 8002f1a:	2100      	movs	r1, #0
 8002f1c:	2026      	movs	r0, #38	; 0x26
 8002f1e:	f000 feb6 	bl	8003c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002f22:	2026      	movs	r0, #38	; 0x26
 8002f24:	f000 fecf 	bl	8003cc6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002f28:	e03e      	b.n	8002fa8 <HAL_UART_MspInit+0x110>
  else if(uartHandle->Instance==USART3)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a23      	ldr	r2, [pc, #140]	; (8002fbc <HAL_UART_MspInit+0x124>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d139      	bne.n	8002fa8 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f34:	4b1f      	ldr	r3, [pc, #124]	; (8002fb4 <HAL_UART_MspInit+0x11c>)
 8002f36:	69db      	ldr	r3, [r3, #28]
 8002f38:	4a1e      	ldr	r2, [pc, #120]	; (8002fb4 <HAL_UART_MspInit+0x11c>)
 8002f3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f3e:	61d3      	str	r3, [r2, #28]
 8002f40:	4b1c      	ldr	r3, [pc, #112]	; (8002fb4 <HAL_UART_MspInit+0x11c>)
 8002f42:	69db      	ldr	r3, [r3, #28]
 8002f44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f48:	60fb      	str	r3, [r7, #12]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f4c:	4b19      	ldr	r3, [pc, #100]	; (8002fb4 <HAL_UART_MspInit+0x11c>)
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	4a18      	ldr	r2, [pc, #96]	; (8002fb4 <HAL_UART_MspInit+0x11c>)
 8002f52:	f043 0308 	orr.w	r3, r3, #8
 8002f56:	6193      	str	r3, [r2, #24]
 8002f58:	4b16      	ldr	r3, [pc, #88]	; (8002fb4 <HAL_UART_MspInit+0x11c>)
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	f003 0308 	and.w	r3, r3, #8
 8002f60:	60bb      	str	r3, [r7, #8]
 8002f62:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002f64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f72:	f107 0318 	add.w	r3, r7, #24
 8002f76:	4619      	mov	r1, r3
 8002f78:	4811      	ldr	r0, [pc, #68]	; (8002fc0 <HAL_UART_MspInit+0x128>)
 8002f7a:	f000 ff35 	bl	8003de8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002f7e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f84:	2300      	movs	r3, #0
 8002f86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f8c:	f107 0318 	add.w	r3, r7, #24
 8002f90:	4619      	mov	r1, r3
 8002f92:	480b      	ldr	r0, [pc, #44]	; (8002fc0 <HAL_UART_MspInit+0x128>)
 8002f94:	f000 ff28 	bl	8003de8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002f98:	2200      	movs	r2, #0
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	2027      	movs	r0, #39	; 0x27
 8002f9e:	f000 fe76 	bl	8003c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002fa2:	2027      	movs	r0, #39	; 0x27
 8002fa4:	f000 fe8f 	bl	8003cc6 <HAL_NVIC_EnableIRQ>
}
 8002fa8:	bf00      	nop
 8002faa:	3728      	adds	r7, #40	; 0x28
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	40004400 	.word	0x40004400
 8002fb4:	40021000 	.word	0x40021000
 8002fb8:	40010800 	.word	0x40010800
 8002fbc:	40004800 	.word	0x40004800
 8002fc0:	40010c00 	.word	0x40010c00

08002fc4 <Reset_Handler>:
 8002fc4:	2100      	movs	r1, #0
 8002fc6:	e003      	b.n	8002fd0 <LoopCopyDataInit>

08002fc8 <CopyDataInit>:
 8002fc8:	4b0b      	ldr	r3, [pc, #44]	; (8002ff8 <LoopFillZerobss+0x14>)
 8002fca:	585b      	ldr	r3, [r3, r1]
 8002fcc:	5043      	str	r3, [r0, r1]
 8002fce:	3104      	adds	r1, #4

08002fd0 <LoopCopyDataInit>:
 8002fd0:	480a      	ldr	r0, [pc, #40]	; (8002ffc <LoopFillZerobss+0x18>)
 8002fd2:	4b0b      	ldr	r3, [pc, #44]	; (8003000 <LoopFillZerobss+0x1c>)
 8002fd4:	1842      	adds	r2, r0, r1
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d3f6      	bcc.n	8002fc8 <CopyDataInit>
 8002fda:	4a0a      	ldr	r2, [pc, #40]	; (8003004 <LoopFillZerobss+0x20>)
 8002fdc:	e002      	b.n	8002fe4 <LoopFillZerobss>

08002fde <FillZerobss>:
 8002fde:	2300      	movs	r3, #0
 8002fe0:	f842 3b04 	str.w	r3, [r2], #4

08002fe4 <LoopFillZerobss>:
 8002fe4:	4b08      	ldr	r3, [pc, #32]	; (8003008 <LoopFillZerobss+0x24>)
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d3f9      	bcc.n	8002fde <FillZerobss>
 8002fea:	f7ff fe93 	bl	8002d14 <SystemInit>
 8002fee:	f004 f995 	bl	800731c <__libc_init_array>
 8002ff2:	f7ff f941 	bl	8002278 <main>
 8002ff6:	4770      	bx	lr
 8002ff8:	0800a8fc 	.word	0x0800a8fc
 8002ffc:	20000000 	.word	0x20000000
 8003000:	200001e0 	.word	0x200001e0
 8003004:	200001e0 	.word	0x200001e0
 8003008:	200004dc 	.word	0x200004dc

0800300c <ADC1_2_IRQHandler>:
 800300c:	e7fe      	b.n	800300c <ADC1_2_IRQHandler>
	...

08003010 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003014:	4b08      	ldr	r3, [pc, #32]	; (8003038 <HAL_Init+0x28>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a07      	ldr	r2, [pc, #28]	; (8003038 <HAL_Init+0x28>)
 800301a:	f043 0310 	orr.w	r3, r3, #16
 800301e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003020:	2003      	movs	r0, #3
 8003022:	f000 fe29 	bl	8003c78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003026:	2000      	movs	r0, #0
 8003028:	f000 f808 	bl	800303c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800302c:	f7ff fdcc 	bl	8002bc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	40022000 	.word	0x40022000

0800303c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003044:	4b12      	ldr	r3, [pc, #72]	; (8003090 <HAL_InitTick+0x54>)
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	4b12      	ldr	r3, [pc, #72]	; (8003094 <HAL_InitTick+0x58>)
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	4619      	mov	r1, r3
 800304e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003052:	fbb3 f3f1 	udiv	r3, r3, r1
 8003056:	fbb2 f3f3 	udiv	r3, r2, r3
 800305a:	4618      	mov	r0, r3
 800305c:	f000 fe41 	bl	8003ce2 <HAL_SYSTICK_Config>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e00e      	b.n	8003088 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2b0f      	cmp	r3, #15
 800306e:	d80a      	bhi.n	8003086 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003070:	2200      	movs	r2, #0
 8003072:	6879      	ldr	r1, [r7, #4]
 8003074:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003078:	f000 fe09 	bl	8003c8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800307c:	4a06      	ldr	r2, [pc, #24]	; (8003098 <HAL_InitTick+0x5c>)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003082:	2300      	movs	r3, #0
 8003084:	e000      	b.n	8003088 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
}
 8003088:	4618      	mov	r0, r3
 800308a:	3708      	adds	r7, #8
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	20000004 	.word	0x20000004
 8003094:	2000000c 	.word	0x2000000c
 8003098:	20000008 	.word	0x20000008

0800309c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030a0:	4b05      	ldr	r3, [pc, #20]	; (80030b8 <HAL_IncTick+0x1c>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	461a      	mov	r2, r3
 80030a6:	4b05      	ldr	r3, [pc, #20]	; (80030bc <HAL_IncTick+0x20>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4413      	add	r3, r2
 80030ac:	4a03      	ldr	r2, [pc, #12]	; (80030bc <HAL_IncTick+0x20>)
 80030ae:	6013      	str	r3, [r2, #0]
}
 80030b0:	bf00      	nop
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bc80      	pop	{r7}
 80030b6:	4770      	bx	lr
 80030b8:	2000000c 	.word	0x2000000c
 80030bc:	200004d4 	.word	0x200004d4

080030c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
  return uwTick;
 80030c4:	4b02      	ldr	r3, [pc, #8]	; (80030d0 <HAL_GetTick+0x10>)
 80030c6:	681b      	ldr	r3, [r3, #0]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bc80      	pop	{r7}
 80030ce:	4770      	bx	lr
 80030d0:	200004d4 	.word	0x200004d4

080030d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030dc:	f7ff fff0 	bl	80030c0 <HAL_GetTick>
 80030e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030ec:	d005      	beq.n	80030fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030ee:	4b09      	ldr	r3, [pc, #36]	; (8003114 <HAL_Delay+0x40>)
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	461a      	mov	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	4413      	add	r3, r2
 80030f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80030fa:	bf00      	nop
 80030fc:	f7ff ffe0 	bl	80030c0 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	429a      	cmp	r2, r3
 800310a:	d8f7      	bhi.n	80030fc <HAL_Delay+0x28>
  {
  }
}
 800310c:	bf00      	nop
 800310e:	3710      	adds	r7, #16
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	2000000c 	.word	0x2000000c

08003118 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b086      	sub	sp, #24
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003120:	2300      	movs	r3, #0
 8003122:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003124:	2300      	movs	r3, #0
 8003126:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003128:	2300      	movs	r3, #0
 800312a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800312c:	2300      	movs	r3, #0
 800312e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d101      	bne.n	800313a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e0be      	b.n	80032b8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003144:	2b00      	cmp	r3, #0
 8003146:	d109      	bne.n	800315c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f7fe fc68 	bl	8001a2c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f000 fbe9 	bl	8003934 <ADC_ConversionStop_Disable>
 8003162:	4603      	mov	r3, r0
 8003164:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316a:	f003 0310 	and.w	r3, r3, #16
 800316e:	2b00      	cmp	r3, #0
 8003170:	f040 8099 	bne.w	80032a6 <HAL_ADC_Init+0x18e>
 8003174:	7dfb      	ldrb	r3, [r7, #23]
 8003176:	2b00      	cmp	r3, #0
 8003178:	f040 8095 	bne.w	80032a6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003180:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003184:	f023 0302 	bic.w	r3, r3, #2
 8003188:	f043 0202 	orr.w	r2, r3, #2
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003198:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	7b1b      	ldrb	r3, [r3, #12]
 800319e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80031a0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80031a2:	68ba      	ldr	r2, [r7, #8]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031b0:	d003      	beq.n	80031ba <HAL_ADC_Init+0xa2>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d102      	bne.n	80031c0 <HAL_ADC_Init+0xa8>
 80031ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031be:	e000      	b.n	80031c2 <HAL_ADC_Init+0xaa>
 80031c0:	2300      	movs	r3, #0
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	7d1b      	ldrb	r3, [r3, #20]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d119      	bne.n	8003204 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	7b1b      	ldrb	r3, [r3, #12]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d109      	bne.n	80031ec <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	3b01      	subs	r3, #1
 80031de:	035a      	lsls	r2, r3, #13
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80031e8:	613b      	str	r3, [r7, #16]
 80031ea:	e00b      	b.n	8003204 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f0:	f043 0220 	orr.w	r2, r3, #32
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031fc:	f043 0201 	orr.w	r2, r3, #1
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	430a      	orrs	r2, r1
 8003216:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	689a      	ldr	r2, [r3, #8]
 800321e:	4b28      	ldr	r3, [pc, #160]	; (80032c0 <HAL_ADC_Init+0x1a8>)
 8003220:	4013      	ands	r3, r2
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	6812      	ldr	r2, [r2, #0]
 8003226:	68b9      	ldr	r1, [r7, #8]
 8003228:	430b      	orrs	r3, r1
 800322a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003234:	d003      	beq.n	800323e <HAL_ADC_Init+0x126>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d104      	bne.n	8003248 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	3b01      	subs	r3, #1
 8003244:	051b      	lsls	r3, r3, #20
 8003246:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	430a      	orrs	r2, r1
 800325a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	689a      	ldr	r2, [r3, #8]
 8003262:	4b18      	ldr	r3, [pc, #96]	; (80032c4 <HAL_ADC_Init+0x1ac>)
 8003264:	4013      	ands	r3, r2
 8003266:	68ba      	ldr	r2, [r7, #8]
 8003268:	429a      	cmp	r2, r3
 800326a:	d10b      	bne.n	8003284 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003276:	f023 0303 	bic.w	r3, r3, #3
 800327a:	f043 0201 	orr.w	r2, r3, #1
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003282:	e018      	b.n	80032b6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003288:	f023 0312 	bic.w	r3, r3, #18
 800328c:	f043 0210 	orr.w	r2, r3, #16
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003298:	f043 0201 	orr.w	r2, r3, #1
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80032a4:	e007      	b.n	80032b6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032aa:	f043 0210 	orr.w	r2, r3, #16
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80032b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3718      	adds	r7, #24
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	ffe1f7fd 	.word	0xffe1f7fd
 80032c4:	ff1f0efe 	.word	0xff1f0efe

080032c8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032d0:	2300      	movs	r3, #0
 80032d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d101      	bne.n	80032e2 <HAL_ADC_Start+0x1a>
 80032de:	2302      	movs	r3, #2
 80032e0:	e098      	b.n	8003414 <HAL_ADC_Start+0x14c>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 fad0 	bl	8003890 <ADC_Enable>
 80032f0:	4603      	mov	r3, r0
 80032f2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80032f4:	7bfb      	ldrb	r3, [r7, #15]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	f040 8087 	bne.w	800340a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003300:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003304:	f023 0301 	bic.w	r3, r3, #1
 8003308:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a41      	ldr	r2, [pc, #260]	; (800341c <HAL_ADC_Start+0x154>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d105      	bne.n	8003326 <HAL_ADC_Start+0x5e>
 800331a:	4b41      	ldr	r3, [pc, #260]	; (8003420 <HAL_ADC_Start+0x158>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d115      	bne.n	8003352 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800332a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800333c:	2b00      	cmp	r3, #0
 800333e:	d026      	beq.n	800338e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003344:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003348:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003350:	e01d      	b.n	800338e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003356:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a2f      	ldr	r2, [pc, #188]	; (8003420 <HAL_ADC_Start+0x158>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d004      	beq.n	8003372 <HAL_ADC_Start+0xaa>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a2b      	ldr	r2, [pc, #172]	; (800341c <HAL_ADC_Start+0x154>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d10d      	bne.n	800338e <HAL_ADC_Start+0xc6>
 8003372:	4b2b      	ldr	r3, [pc, #172]	; (8003420 <HAL_ADC_Start+0x158>)
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800337a:	2b00      	cmp	r3, #0
 800337c:	d007      	beq.n	800338e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003382:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003386:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003392:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d006      	beq.n	80033a8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339e:	f023 0206 	bic.w	r2, r3, #6
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80033a6:	e002      	b.n	80033ae <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f06f 0202 	mvn.w	r2, #2
 80033be:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80033ca:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80033ce:	d113      	bne.n	80033f8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80033d4:	4a11      	ldr	r2, [pc, #68]	; (800341c <HAL_ADC_Start+0x154>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d105      	bne.n	80033e6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80033da:	4b11      	ldr	r3, [pc, #68]	; (8003420 <HAL_ADC_Start+0x158>)
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d108      	bne.n	80033f8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689a      	ldr	r2, [r3, #8]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80033f4:	609a      	str	r2, [r3, #8]
 80033f6:	e00c      	b.n	8003412 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	689a      	ldr	r2, [r3, #8]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003406:	609a      	str	r2, [r3, #8]
 8003408:	e003      	b.n	8003412 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8003412:	7bfb      	ldrb	r3, [r7, #15]
}
 8003414:	4618      	mov	r0, r3
 8003416:	3710      	adds	r7, #16
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	40012800 	.word	0x40012800
 8003420:	40012400 	.word	0x40012400

08003424 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800342c:	2300      	movs	r3, #0
 800342e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003436:	2b01      	cmp	r3, #1
 8003438:	d101      	bne.n	800343e <HAL_ADC_Stop+0x1a>
 800343a:	2302      	movs	r3, #2
 800343c:	e01a      	b.n	8003474 <HAL_ADC_Stop+0x50>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2201      	movs	r2, #1
 8003442:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 fa74 	bl	8003934 <ADC_ConversionStop_Disable>
 800344c:	4603      	mov	r3, r0
 800344e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003450:	7bfb      	ldrb	r3, [r7, #15]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d109      	bne.n	800346a <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800345e:	f023 0301 	bic.w	r3, r3, #1
 8003462:	f043 0201 	orr.w	r2, r3, #1
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003472:	7bfb      	ldrb	r3, [r7, #15]
}
 8003474:	4618      	mov	r0, r3
 8003476:	3710      	adds	r7, #16
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800347c:	b590      	push	{r4, r7, lr}
 800347e:	b087      	sub	sp, #28
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003486:	2300      	movs	r3, #0
 8003488:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800348a:	2300      	movs	r3, #0
 800348c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800348e:	2300      	movs	r3, #0
 8003490:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8003492:	f7ff fe15 	bl	80030c0 <HAL_GetTick>
 8003496:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00b      	beq.n	80034be <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034aa:	f043 0220 	orr.w	r2, r3, #32
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e0c8      	b.n	8003650 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d12a      	bne.n	8003522 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d123      	bne.n	8003522 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80034da:	e01a      	b.n	8003512 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034e2:	d016      	beq.n	8003512 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d007      	beq.n	80034fa <HAL_ADC_PollForConversion+0x7e>
 80034ea:	f7ff fde9 	bl	80030c0 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	683a      	ldr	r2, [r7, #0]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d20b      	bcs.n	8003512 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fe:	f043 0204 	orr.w	r2, r3, #4
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e09e      	b.n	8003650 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0302 	and.w	r3, r3, #2
 800351c:	2b00      	cmp	r3, #0
 800351e:	d0dd      	beq.n	80034dc <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003520:	e06c      	b.n	80035fc <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003522:	4b4d      	ldr	r3, [pc, #308]	; (8003658 <HAL_ADC_PollForConversion+0x1dc>)
 8003524:	681c      	ldr	r4, [r3, #0]
 8003526:	2002      	movs	r0, #2
 8003528:	f002 ff50 	bl	80063cc <HAL_RCCEx_GetPeriphCLKFreq>
 800352c:	4603      	mov	r3, r0
 800352e:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	6919      	ldr	r1, [r3, #16]
 8003538:	4b48      	ldr	r3, [pc, #288]	; (800365c <HAL_ADC_PollForConversion+0x1e0>)
 800353a:	400b      	ands	r3, r1
 800353c:	2b00      	cmp	r3, #0
 800353e:	d118      	bne.n	8003572 <HAL_ADC_PollForConversion+0xf6>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68d9      	ldr	r1, [r3, #12]
 8003546:	4b46      	ldr	r3, [pc, #280]	; (8003660 <HAL_ADC_PollForConversion+0x1e4>)
 8003548:	400b      	ands	r3, r1
 800354a:	2b00      	cmp	r3, #0
 800354c:	d111      	bne.n	8003572 <HAL_ADC_PollForConversion+0xf6>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	6919      	ldr	r1, [r3, #16]
 8003554:	4b43      	ldr	r3, [pc, #268]	; (8003664 <HAL_ADC_PollForConversion+0x1e8>)
 8003556:	400b      	ands	r3, r1
 8003558:	2b00      	cmp	r3, #0
 800355a:	d108      	bne.n	800356e <HAL_ADC_PollForConversion+0xf2>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68d9      	ldr	r1, [r3, #12]
 8003562:	4b41      	ldr	r3, [pc, #260]	; (8003668 <HAL_ADC_PollForConversion+0x1ec>)
 8003564:	400b      	ands	r3, r1
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <HAL_ADC_PollForConversion+0xf2>
 800356a:	2314      	movs	r3, #20
 800356c:	e020      	b.n	80035b0 <HAL_ADC_PollForConversion+0x134>
 800356e:	2329      	movs	r3, #41	; 0x29
 8003570:	e01e      	b.n	80035b0 <HAL_ADC_PollForConversion+0x134>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	6919      	ldr	r1, [r3, #16]
 8003578:	4b3a      	ldr	r3, [pc, #232]	; (8003664 <HAL_ADC_PollForConversion+0x1e8>)
 800357a:	400b      	ands	r3, r1
 800357c:	2b00      	cmp	r3, #0
 800357e:	d106      	bne.n	800358e <HAL_ADC_PollForConversion+0x112>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68d9      	ldr	r1, [r3, #12]
 8003586:	4b38      	ldr	r3, [pc, #224]	; (8003668 <HAL_ADC_PollForConversion+0x1ec>)
 8003588:	400b      	ands	r3, r1
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00d      	beq.n	80035aa <HAL_ADC_PollForConversion+0x12e>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	6919      	ldr	r1, [r3, #16]
 8003594:	4b35      	ldr	r3, [pc, #212]	; (800366c <HAL_ADC_PollForConversion+0x1f0>)
 8003596:	400b      	ands	r3, r1
 8003598:	2b00      	cmp	r3, #0
 800359a:	d108      	bne.n	80035ae <HAL_ADC_PollForConversion+0x132>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68d9      	ldr	r1, [r3, #12]
 80035a2:	4b32      	ldr	r3, [pc, #200]	; (800366c <HAL_ADC_PollForConversion+0x1f0>)
 80035a4:	400b      	ands	r3, r1
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d101      	bne.n	80035ae <HAL_ADC_PollForConversion+0x132>
 80035aa:	2354      	movs	r3, #84	; 0x54
 80035ac:	e000      	b.n	80035b0 <HAL_ADC_PollForConversion+0x134>
 80035ae:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80035b0:	fb02 f303 	mul.w	r3, r2, r3
 80035b4:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80035b6:	e01d      	b.n	80035f4 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035be:	d016      	beq.n	80035ee <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d007      	beq.n	80035d6 <HAL_ADC_PollForConversion+0x15a>
 80035c6:	f7ff fd7b 	bl	80030c0 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	683a      	ldr	r2, [r7, #0]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d20b      	bcs.n	80035ee <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035da:	f043 0204 	orr.w	r2, r3, #4
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e030      	b.n	8003650 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	3301      	adds	r3, #1
 80035f2:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	693a      	ldr	r2, [r7, #16]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d8dd      	bhi.n	80035b8 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f06f 0212 	mvn.w	r2, #18
 8003604:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800361c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003620:	d115      	bne.n	800364e <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003626:	2b00      	cmp	r3, #0
 8003628:	d111      	bne.n	800364e <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800362e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d105      	bne.n	800364e <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003646:	f043 0201 	orr.w	r2, r3, #1
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	371c      	adds	r7, #28
 8003654:	46bd      	mov	sp, r7
 8003656:	bd90      	pop	{r4, r7, pc}
 8003658:	20000004 	.word	0x20000004
 800365c:	24924924 	.word	0x24924924
 8003660:	00924924 	.word	0x00924924
 8003664:	12492492 	.word	0x12492492
 8003668:	00492492 	.word	0x00492492
 800366c:	00249249 	.word	0x00249249

08003670 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800367e:	4618      	mov	r0, r3
 8003680:	370c      	adds	r7, #12
 8003682:	46bd      	mov	sp, r7
 8003684:	bc80      	pop	{r7}
 8003686:	4770      	bx	lr

08003688 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003688:	b480      	push	{r7}
 800368a:	b085      	sub	sp, #20
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003692:	2300      	movs	r3, #0
 8003694:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003696:	2300      	movs	r3, #0
 8003698:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d101      	bne.n	80036a8 <HAL_ADC_ConfigChannel+0x20>
 80036a4:	2302      	movs	r3, #2
 80036a6:	e0dc      	b.n	8003862 <HAL_ADC_ConfigChannel+0x1da>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	2b06      	cmp	r3, #6
 80036b6:	d81c      	bhi.n	80036f2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	685a      	ldr	r2, [r3, #4]
 80036c2:	4613      	mov	r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	4413      	add	r3, r2
 80036c8:	3b05      	subs	r3, #5
 80036ca:	221f      	movs	r2, #31
 80036cc:	fa02 f303 	lsl.w	r3, r2, r3
 80036d0:	43db      	mvns	r3, r3
 80036d2:	4019      	ands	r1, r3
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	6818      	ldr	r0, [r3, #0]
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685a      	ldr	r2, [r3, #4]
 80036dc:	4613      	mov	r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	4413      	add	r3, r2
 80036e2:	3b05      	subs	r3, #5
 80036e4:	fa00 f203 	lsl.w	r2, r0, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	430a      	orrs	r2, r1
 80036ee:	635a      	str	r2, [r3, #52]	; 0x34
 80036f0:	e03c      	b.n	800376c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	2b0c      	cmp	r3, #12
 80036f8:	d81c      	bhi.n	8003734 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685a      	ldr	r2, [r3, #4]
 8003704:	4613      	mov	r3, r2
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	4413      	add	r3, r2
 800370a:	3b23      	subs	r3, #35	; 0x23
 800370c:	221f      	movs	r2, #31
 800370e:	fa02 f303 	lsl.w	r3, r2, r3
 8003712:	43db      	mvns	r3, r3
 8003714:	4019      	ands	r1, r3
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	6818      	ldr	r0, [r3, #0]
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	685a      	ldr	r2, [r3, #4]
 800371e:	4613      	mov	r3, r2
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	4413      	add	r3, r2
 8003724:	3b23      	subs	r3, #35	; 0x23
 8003726:	fa00 f203 	lsl.w	r2, r0, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	430a      	orrs	r2, r1
 8003730:	631a      	str	r2, [r3, #48]	; 0x30
 8003732:	e01b      	b.n	800376c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	685a      	ldr	r2, [r3, #4]
 800373e:	4613      	mov	r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	4413      	add	r3, r2
 8003744:	3b41      	subs	r3, #65	; 0x41
 8003746:	221f      	movs	r2, #31
 8003748:	fa02 f303 	lsl.w	r3, r2, r3
 800374c:	43db      	mvns	r3, r3
 800374e:	4019      	ands	r1, r3
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	6818      	ldr	r0, [r3, #0]
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	685a      	ldr	r2, [r3, #4]
 8003758:	4613      	mov	r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	4413      	add	r3, r2
 800375e:	3b41      	subs	r3, #65	; 0x41
 8003760:	fa00 f203 	lsl.w	r2, r0, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	430a      	orrs	r2, r1
 800376a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2b09      	cmp	r3, #9
 8003772:	d91c      	bls.n	80037ae <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68d9      	ldr	r1, [r3, #12]
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	4613      	mov	r3, r2
 8003780:	005b      	lsls	r3, r3, #1
 8003782:	4413      	add	r3, r2
 8003784:	3b1e      	subs	r3, #30
 8003786:	2207      	movs	r2, #7
 8003788:	fa02 f303 	lsl.w	r3, r2, r3
 800378c:	43db      	mvns	r3, r3
 800378e:	4019      	ands	r1, r3
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	6898      	ldr	r0, [r3, #8]
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	4613      	mov	r3, r2
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	4413      	add	r3, r2
 800379e:	3b1e      	subs	r3, #30
 80037a0:	fa00 f203 	lsl.w	r2, r0, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	430a      	orrs	r2, r1
 80037aa:	60da      	str	r2, [r3, #12]
 80037ac:	e019      	b.n	80037e2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6919      	ldr	r1, [r3, #16]
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	4613      	mov	r3, r2
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	4413      	add	r3, r2
 80037be:	2207      	movs	r2, #7
 80037c0:	fa02 f303 	lsl.w	r3, r2, r3
 80037c4:	43db      	mvns	r3, r3
 80037c6:	4019      	ands	r1, r3
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	6898      	ldr	r0, [r3, #8]
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	4613      	mov	r3, r2
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	4413      	add	r3, r2
 80037d6:	fa00 f203 	lsl.w	r2, r0, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	430a      	orrs	r2, r1
 80037e0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2b10      	cmp	r3, #16
 80037e8:	d003      	beq.n	80037f2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80037ee:	2b11      	cmp	r3, #17
 80037f0:	d132      	bne.n	8003858 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a1d      	ldr	r2, [pc, #116]	; (800386c <HAL_ADC_ConfigChannel+0x1e4>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d125      	bne.n	8003848 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d126      	bne.n	8003858 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003818:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2b10      	cmp	r3, #16
 8003820:	d11a      	bne.n	8003858 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003822:	4b13      	ldr	r3, [pc, #76]	; (8003870 <HAL_ADC_ConfigChannel+0x1e8>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a13      	ldr	r2, [pc, #76]	; (8003874 <HAL_ADC_ConfigChannel+0x1ec>)
 8003828:	fba2 2303 	umull	r2, r3, r2, r3
 800382c:	0c9a      	lsrs	r2, r3, #18
 800382e:	4613      	mov	r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	4413      	add	r3, r2
 8003834:	005b      	lsls	r3, r3, #1
 8003836:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003838:	e002      	b.n	8003840 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	3b01      	subs	r3, #1
 800383e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1f9      	bne.n	800383a <HAL_ADC_ConfigChannel+0x1b2>
 8003846:	e007      	b.n	8003858 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800384c:	f043 0220 	orr.w	r2, r3, #32
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003860:	7bfb      	ldrb	r3, [r7, #15]
}
 8003862:	4618      	mov	r0, r3
 8003864:	3714      	adds	r7, #20
 8003866:	46bd      	mov	sp, r7
 8003868:	bc80      	pop	{r7}
 800386a:	4770      	bx	lr
 800386c:	40012400 	.word	0x40012400
 8003870:	20000004 	.word	0x20000004
 8003874:	431bde83 	.word	0x431bde83

08003878 <HAL_ADC_GetState>:
  * @brief  return the ADC state
  * @param  hadc: ADC handle
  * @retval HAL state
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  /* Return ADC state */
  return hadc->State;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8003884:	4618      	mov	r0, r3
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	bc80      	pop	{r7}
 800388c:	4770      	bx	lr
	...

08003890 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003898:	2300      	movs	r3, #0
 800389a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800389c:	2300      	movs	r3, #0
 800389e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d039      	beq.n	8003922 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	689a      	ldr	r2, [r3, #8]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f042 0201 	orr.w	r2, r2, #1
 80038bc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80038be:	4b1b      	ldr	r3, [pc, #108]	; (800392c <ADC_Enable+0x9c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a1b      	ldr	r2, [pc, #108]	; (8003930 <ADC_Enable+0xa0>)
 80038c4:	fba2 2303 	umull	r2, r3, r2, r3
 80038c8:	0c9b      	lsrs	r3, r3, #18
 80038ca:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80038cc:	e002      	b.n	80038d4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	3b01      	subs	r3, #1
 80038d2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1f9      	bne.n	80038ce <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80038da:	f7ff fbf1 	bl	80030c0 <HAL_GetTick>
 80038de:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80038e0:	e018      	b.n	8003914 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80038e2:	f7ff fbed 	bl	80030c0 <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d911      	bls.n	8003914 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f4:	f043 0210 	orr.w	r2, r3, #16
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003900:	f043 0201 	orr.w	r2, r3, #1
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e007      	b.n	8003924 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b01      	cmp	r3, #1
 8003920:	d1df      	bne.n	80038e2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003922:	2300      	movs	r3, #0
}
 8003924:	4618      	mov	r0, r3
 8003926:	3710      	adds	r7, #16
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	20000004 	.word	0x20000004
 8003930:	431bde83 	.word	0x431bde83

08003934 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800393c:	2300      	movs	r3, #0
 800393e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b01      	cmp	r3, #1
 800394c:	d127      	bne.n	800399e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	689a      	ldr	r2, [r3, #8]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f022 0201 	bic.w	r2, r2, #1
 800395c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800395e:	f7ff fbaf 	bl	80030c0 <HAL_GetTick>
 8003962:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003964:	e014      	b.n	8003990 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003966:	f7ff fbab 	bl	80030c0 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	2b02      	cmp	r3, #2
 8003972:	d90d      	bls.n	8003990 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003978:	f043 0210 	orr.w	r2, r3, #16
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003984:	f043 0201 	orr.w	r2, r3, #1
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e007      	b.n	80039a0 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	2b01      	cmp	r3, #1
 800399c:	d0e3      	beq.n	8003966 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3710      	adds	r7, #16
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80039a8:	b590      	push	{r4, r7, lr}
 80039aa:	b087      	sub	sp, #28
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039b0:	2300      	movs	r3, #0
 80039b2:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80039b4:	2300      	movs	r3, #0
 80039b6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d101      	bne.n	80039c6 <HAL_ADCEx_Calibration_Start+0x1e>
 80039c2:	2302      	movs	r3, #2
 80039c4:	e086      	b.n	8003ad4 <HAL_ADCEx_Calibration_Start+0x12c>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2201      	movs	r2, #1
 80039ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f7ff ffb0 	bl	8003934 <ADC_ConversionStop_Disable>
 80039d4:	4603      	mov	r3, r0
 80039d6:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80039d8:	7dfb      	ldrb	r3, [r7, #23]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d175      	bne.n	8003aca <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80039e6:	f023 0302 	bic.w	r3, r3, #2
 80039ea:	f043 0202 	orr.w	r2, r3, #2
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80039f2:	4b3a      	ldr	r3, [pc, #232]	; (8003adc <HAL_ADCEx_Calibration_Start+0x134>)
 80039f4:	681c      	ldr	r4, [r3, #0]
 80039f6:	2002      	movs	r0, #2
 80039f8:	f002 fce8 	bl	80063cc <HAL_RCCEx_GetPeriphCLKFreq>
 80039fc:	4603      	mov	r3, r0
 80039fe:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8003a02:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8003a04:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8003a06:	e002      	b.n	8003a0e <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d1f9      	bne.n	8003a08 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f7ff ff3b 	bl	8003890 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	689a      	ldr	r2, [r3, #8]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f042 0208 	orr.w	r2, r2, #8
 8003a28:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003a2a:	f7ff fb49 	bl	80030c0 <HAL_GetTick>
 8003a2e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003a30:	e014      	b.n	8003a5c <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003a32:	f7ff fb45 	bl	80030c0 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b0a      	cmp	r3, #10
 8003a3e:	d90d      	bls.n	8003a5c <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a44:	f023 0312 	bic.w	r3, r3, #18
 8003a48:	f043 0210 	orr.w	r2, r3, #16
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e03b      	b.n	8003ad4 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f003 0308 	and.w	r3, r3, #8
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1e3      	bne.n	8003a32 <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	689a      	ldr	r2, [r3, #8]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f042 0204 	orr.w	r2, r2, #4
 8003a78:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003a7a:	f7ff fb21 	bl	80030c0 <HAL_GetTick>
 8003a7e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003a80:	e014      	b.n	8003aac <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003a82:	f7ff fb1d 	bl	80030c0 <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	2b0a      	cmp	r3, #10
 8003a8e:	d90d      	bls.n	8003aac <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a94:	f023 0312 	bic.w	r3, r3, #18
 8003a98:	f043 0210 	orr.w	r2, r3, #16
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e013      	b.n	8003ad4 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	f003 0304 	and.w	r3, r3, #4
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1e3      	bne.n	8003a82 <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003abe:	f023 0303 	bic.w	r3, r3, #3
 8003ac2:	f043 0201 	orr.w	r2, r3, #1
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003ad2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	371c      	adds	r7, #28
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd90      	pop	{r4, r7, pc}
 8003adc:	20000004 	.word	0x20000004

08003ae0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f003 0307 	and.w	r3, r3, #7
 8003aee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003af0:	4b0c      	ldr	r3, [pc, #48]	; (8003b24 <__NVIC_SetPriorityGrouping+0x44>)
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003af6:	68ba      	ldr	r2, [r7, #8]
 8003af8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003afc:	4013      	ands	r3, r2
 8003afe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b12:	4a04      	ldr	r2, [pc, #16]	; (8003b24 <__NVIC_SetPriorityGrouping+0x44>)
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	60d3      	str	r3, [r2, #12]
}
 8003b18:	bf00      	nop
 8003b1a:	3714      	adds	r7, #20
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bc80      	pop	{r7}
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	e000ed00 	.word	0xe000ed00

08003b28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b2c:	4b04      	ldr	r3, [pc, #16]	; (8003b40 <__NVIC_GetPriorityGrouping+0x18>)
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	0a1b      	lsrs	r3, r3, #8
 8003b32:	f003 0307 	and.w	r3, r3, #7
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bc80      	pop	{r7}
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	e000ed00 	.word	0xe000ed00

08003b44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	db0b      	blt.n	8003b6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b56:	79fb      	ldrb	r3, [r7, #7]
 8003b58:	f003 021f 	and.w	r2, r3, #31
 8003b5c:	4906      	ldr	r1, [pc, #24]	; (8003b78 <__NVIC_EnableIRQ+0x34>)
 8003b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b62:	095b      	lsrs	r3, r3, #5
 8003b64:	2001      	movs	r0, #1
 8003b66:	fa00 f202 	lsl.w	r2, r0, r2
 8003b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b6e:	bf00      	nop
 8003b70:	370c      	adds	r7, #12
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bc80      	pop	{r7}
 8003b76:	4770      	bx	lr
 8003b78:	e000e100 	.word	0xe000e100

08003b7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	4603      	mov	r3, r0
 8003b84:	6039      	str	r1, [r7, #0]
 8003b86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	db0a      	blt.n	8003ba6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	b2da      	uxtb	r2, r3
 8003b94:	490c      	ldr	r1, [pc, #48]	; (8003bc8 <__NVIC_SetPriority+0x4c>)
 8003b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b9a:	0112      	lsls	r2, r2, #4
 8003b9c:	b2d2      	uxtb	r2, r2
 8003b9e:	440b      	add	r3, r1
 8003ba0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ba4:	e00a      	b.n	8003bbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	b2da      	uxtb	r2, r3
 8003baa:	4908      	ldr	r1, [pc, #32]	; (8003bcc <__NVIC_SetPriority+0x50>)
 8003bac:	79fb      	ldrb	r3, [r7, #7]
 8003bae:	f003 030f 	and.w	r3, r3, #15
 8003bb2:	3b04      	subs	r3, #4
 8003bb4:	0112      	lsls	r2, r2, #4
 8003bb6:	b2d2      	uxtb	r2, r2
 8003bb8:	440b      	add	r3, r1
 8003bba:	761a      	strb	r2, [r3, #24]
}
 8003bbc:	bf00      	nop
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bc80      	pop	{r7}
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	e000e100 	.word	0xe000e100
 8003bcc:	e000ed00 	.word	0xe000ed00

08003bd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b089      	sub	sp, #36	; 0x24
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f003 0307 	and.w	r3, r3, #7
 8003be2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	f1c3 0307 	rsb	r3, r3, #7
 8003bea:	2b04      	cmp	r3, #4
 8003bec:	bf28      	it	cs
 8003bee:	2304      	movcs	r3, #4
 8003bf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	3304      	adds	r3, #4
 8003bf6:	2b06      	cmp	r3, #6
 8003bf8:	d902      	bls.n	8003c00 <NVIC_EncodePriority+0x30>
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	3b03      	subs	r3, #3
 8003bfe:	e000      	b.n	8003c02 <NVIC_EncodePriority+0x32>
 8003c00:	2300      	movs	r3, #0
 8003c02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0e:	43da      	mvns	r2, r3
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	401a      	ands	r2, r3
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c22:	43d9      	mvns	r1, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c28:	4313      	orrs	r3, r2
         );
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3724      	adds	r7, #36	; 0x24
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bc80      	pop	{r7}
 8003c32:	4770      	bx	lr

08003c34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c44:	d301      	bcc.n	8003c4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c46:	2301      	movs	r3, #1
 8003c48:	e00f      	b.n	8003c6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c4a:	4a0a      	ldr	r2, [pc, #40]	; (8003c74 <SysTick_Config+0x40>)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c52:	210f      	movs	r1, #15
 8003c54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c58:	f7ff ff90 	bl	8003b7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c5c:	4b05      	ldr	r3, [pc, #20]	; (8003c74 <SysTick_Config+0x40>)
 8003c5e:	2200      	movs	r2, #0
 8003c60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c62:	4b04      	ldr	r3, [pc, #16]	; (8003c74 <SysTick_Config+0x40>)
 8003c64:	2207      	movs	r2, #7
 8003c66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3708      	adds	r7, #8
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	e000e010 	.word	0xe000e010

08003c78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f7ff ff2d 	bl	8003ae0 <__NVIC_SetPriorityGrouping>
}
 8003c86:	bf00      	nop
 8003c88:	3708      	adds	r7, #8
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c8e:	b580      	push	{r7, lr}
 8003c90:	b086      	sub	sp, #24
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	4603      	mov	r3, r0
 8003c96:	60b9      	str	r1, [r7, #8]
 8003c98:	607a      	str	r2, [r7, #4]
 8003c9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ca0:	f7ff ff42 	bl	8003b28 <__NVIC_GetPriorityGrouping>
 8003ca4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	68b9      	ldr	r1, [r7, #8]
 8003caa:	6978      	ldr	r0, [r7, #20]
 8003cac:	f7ff ff90 	bl	8003bd0 <NVIC_EncodePriority>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cb6:	4611      	mov	r1, r2
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7ff ff5f 	bl	8003b7c <__NVIC_SetPriority>
}
 8003cbe:	bf00      	nop
 8003cc0:	3718      	adds	r7, #24
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b082      	sub	sp, #8
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	4603      	mov	r3, r0
 8003cce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f7ff ff35 	bl	8003b44 <__NVIC_EnableIRQ>
}
 8003cda:	bf00      	nop
 8003cdc:	3708      	adds	r7, #8
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b082      	sub	sp, #8
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f7ff ffa2 	bl	8003c34 <SysTick_Config>
 8003cf0:	4603      	mov	r3, r0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3708      	adds	r7, #8
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
	...

08003cfc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d04:	2300      	movs	r3, #0
 8003d06:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d005      	beq.n	8003d1e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2204      	movs	r2, #4
 8003d16:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	73fb      	strb	r3, [r7, #15]
 8003d1c:	e051      	b.n	8003dc2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f022 020e 	bic.w	r2, r2, #14
 8003d2c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f022 0201 	bic.w	r2, r2, #1
 8003d3c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a22      	ldr	r2, [pc, #136]	; (8003dcc <HAL_DMA_Abort_IT+0xd0>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d029      	beq.n	8003d9c <HAL_DMA_Abort_IT+0xa0>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a20      	ldr	r2, [pc, #128]	; (8003dd0 <HAL_DMA_Abort_IT+0xd4>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d022      	beq.n	8003d98 <HAL_DMA_Abort_IT+0x9c>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a1f      	ldr	r2, [pc, #124]	; (8003dd4 <HAL_DMA_Abort_IT+0xd8>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d01a      	beq.n	8003d92 <HAL_DMA_Abort_IT+0x96>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a1d      	ldr	r2, [pc, #116]	; (8003dd8 <HAL_DMA_Abort_IT+0xdc>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d012      	beq.n	8003d8c <HAL_DMA_Abort_IT+0x90>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a1c      	ldr	r2, [pc, #112]	; (8003ddc <HAL_DMA_Abort_IT+0xe0>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d00a      	beq.n	8003d86 <HAL_DMA_Abort_IT+0x8a>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a1a      	ldr	r2, [pc, #104]	; (8003de0 <HAL_DMA_Abort_IT+0xe4>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d102      	bne.n	8003d80 <HAL_DMA_Abort_IT+0x84>
 8003d7a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003d7e:	e00e      	b.n	8003d9e <HAL_DMA_Abort_IT+0xa2>
 8003d80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d84:	e00b      	b.n	8003d9e <HAL_DMA_Abort_IT+0xa2>
 8003d86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d8a:	e008      	b.n	8003d9e <HAL_DMA_Abort_IT+0xa2>
 8003d8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d90:	e005      	b.n	8003d9e <HAL_DMA_Abort_IT+0xa2>
 8003d92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d96:	e002      	b.n	8003d9e <HAL_DMA_Abort_IT+0xa2>
 8003d98:	2310      	movs	r3, #16
 8003d9a:	e000      	b.n	8003d9e <HAL_DMA_Abort_IT+0xa2>
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	4a11      	ldr	r2, [pc, #68]	; (8003de4 <HAL_DMA_Abort_IT+0xe8>)
 8003da0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d003      	beq.n	8003dc2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	4798      	blx	r3
    } 
  }
  return status;
 8003dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3710      	adds	r7, #16
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	40020008 	.word	0x40020008
 8003dd0:	4002001c 	.word	0x4002001c
 8003dd4:	40020030 	.word	0x40020030
 8003dd8:	40020044 	.word	0x40020044
 8003ddc:	40020058 	.word	0x40020058
 8003de0:	4002006c 	.word	0x4002006c
 8003de4:	40020000 	.word	0x40020000

08003de8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b08b      	sub	sp, #44	; 0x2c
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003df2:	2300      	movs	r3, #0
 8003df4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003df6:	2300      	movs	r3, #0
 8003df8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003dfa:	e127      	b.n	800404c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e00:	fa02 f303 	lsl.w	r3, r2, r3
 8003e04:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	69fa      	ldr	r2, [r7, #28]
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003e10:	69ba      	ldr	r2, [r7, #24]
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	f040 8116 	bne.w	8004046 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	2b12      	cmp	r3, #18
 8003e20:	d034      	beq.n	8003e8c <HAL_GPIO_Init+0xa4>
 8003e22:	2b12      	cmp	r3, #18
 8003e24:	d80d      	bhi.n	8003e42 <HAL_GPIO_Init+0x5a>
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d02b      	beq.n	8003e82 <HAL_GPIO_Init+0x9a>
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d804      	bhi.n	8003e38 <HAL_GPIO_Init+0x50>
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d031      	beq.n	8003e96 <HAL_GPIO_Init+0xae>
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d01c      	beq.n	8003e70 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003e36:	e048      	b.n	8003eca <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003e38:	2b03      	cmp	r3, #3
 8003e3a:	d043      	beq.n	8003ec4 <HAL_GPIO_Init+0xdc>
 8003e3c:	2b11      	cmp	r3, #17
 8003e3e:	d01b      	beq.n	8003e78 <HAL_GPIO_Init+0x90>
          break;
 8003e40:	e043      	b.n	8003eca <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003e42:	4a89      	ldr	r2, [pc, #548]	; (8004068 <HAL_GPIO_Init+0x280>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d026      	beq.n	8003e96 <HAL_GPIO_Init+0xae>
 8003e48:	4a87      	ldr	r2, [pc, #540]	; (8004068 <HAL_GPIO_Init+0x280>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d806      	bhi.n	8003e5c <HAL_GPIO_Init+0x74>
 8003e4e:	4a87      	ldr	r2, [pc, #540]	; (800406c <HAL_GPIO_Init+0x284>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d020      	beq.n	8003e96 <HAL_GPIO_Init+0xae>
 8003e54:	4a86      	ldr	r2, [pc, #536]	; (8004070 <HAL_GPIO_Init+0x288>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d01d      	beq.n	8003e96 <HAL_GPIO_Init+0xae>
          break;
 8003e5a:	e036      	b.n	8003eca <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003e5c:	4a85      	ldr	r2, [pc, #532]	; (8004074 <HAL_GPIO_Init+0x28c>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d019      	beq.n	8003e96 <HAL_GPIO_Init+0xae>
 8003e62:	4a85      	ldr	r2, [pc, #532]	; (8004078 <HAL_GPIO_Init+0x290>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d016      	beq.n	8003e96 <HAL_GPIO_Init+0xae>
 8003e68:	4a84      	ldr	r2, [pc, #528]	; (800407c <HAL_GPIO_Init+0x294>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d013      	beq.n	8003e96 <HAL_GPIO_Init+0xae>
          break;
 8003e6e:	e02c      	b.n	8003eca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	623b      	str	r3, [r7, #32]
          break;
 8003e76:	e028      	b.n	8003eca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	3304      	adds	r3, #4
 8003e7e:	623b      	str	r3, [r7, #32]
          break;
 8003e80:	e023      	b.n	8003eca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	3308      	adds	r3, #8
 8003e88:	623b      	str	r3, [r7, #32]
          break;
 8003e8a:	e01e      	b.n	8003eca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	330c      	adds	r3, #12
 8003e92:	623b      	str	r3, [r7, #32]
          break;
 8003e94:	e019      	b.n	8003eca <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d102      	bne.n	8003ea4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003e9e:	2304      	movs	r3, #4
 8003ea0:	623b      	str	r3, [r7, #32]
          break;
 8003ea2:	e012      	b.n	8003eca <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d105      	bne.n	8003eb8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003eac:	2308      	movs	r3, #8
 8003eae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	69fa      	ldr	r2, [r7, #28]
 8003eb4:	611a      	str	r2, [r3, #16]
          break;
 8003eb6:	e008      	b.n	8003eca <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003eb8:	2308      	movs	r3, #8
 8003eba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	69fa      	ldr	r2, [r7, #28]
 8003ec0:	615a      	str	r2, [r3, #20]
          break;
 8003ec2:	e002      	b.n	8003eca <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	623b      	str	r3, [r7, #32]
          break;
 8003ec8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	2bff      	cmp	r3, #255	; 0xff
 8003ece:	d801      	bhi.n	8003ed4 <HAL_GPIO_Init+0xec>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	e001      	b.n	8003ed8 <HAL_GPIO_Init+0xf0>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	3304      	adds	r3, #4
 8003ed8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	2bff      	cmp	r3, #255	; 0xff
 8003ede:	d802      	bhi.n	8003ee6 <HAL_GPIO_Init+0xfe>
 8003ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	e002      	b.n	8003eec <HAL_GPIO_Init+0x104>
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee8:	3b08      	subs	r3, #8
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	210f      	movs	r1, #15
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8003efa:	43db      	mvns	r3, r3
 8003efc:	401a      	ands	r2, r3
 8003efe:	6a39      	ldr	r1, [r7, #32]
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	fa01 f303 	lsl.w	r3, r1, r3
 8003f06:	431a      	orrs	r2, r3
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f000 8096 	beq.w	8004046 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003f1a:	4b59      	ldr	r3, [pc, #356]	; (8004080 <HAL_GPIO_Init+0x298>)
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	4a58      	ldr	r2, [pc, #352]	; (8004080 <HAL_GPIO_Init+0x298>)
 8003f20:	f043 0301 	orr.w	r3, r3, #1
 8003f24:	6193      	str	r3, [r2, #24]
 8003f26:	4b56      	ldr	r3, [pc, #344]	; (8004080 <HAL_GPIO_Init+0x298>)
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	60bb      	str	r3, [r7, #8]
 8003f30:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003f32:	4a54      	ldr	r2, [pc, #336]	; (8004084 <HAL_GPIO_Init+0x29c>)
 8003f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f36:	089b      	lsrs	r3, r3, #2
 8003f38:	3302      	adds	r3, #2
 8003f3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f3e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f42:	f003 0303 	and.w	r3, r3, #3
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	220f      	movs	r2, #15
 8003f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4e:	43db      	mvns	r3, r3
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	4013      	ands	r3, r2
 8003f54:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a4b      	ldr	r2, [pc, #300]	; (8004088 <HAL_GPIO_Init+0x2a0>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d013      	beq.n	8003f86 <HAL_GPIO_Init+0x19e>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a4a      	ldr	r2, [pc, #296]	; (800408c <HAL_GPIO_Init+0x2a4>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d00d      	beq.n	8003f82 <HAL_GPIO_Init+0x19a>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a49      	ldr	r2, [pc, #292]	; (8004090 <HAL_GPIO_Init+0x2a8>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d007      	beq.n	8003f7e <HAL_GPIO_Init+0x196>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a48      	ldr	r2, [pc, #288]	; (8004094 <HAL_GPIO_Init+0x2ac>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d101      	bne.n	8003f7a <HAL_GPIO_Init+0x192>
 8003f76:	2303      	movs	r3, #3
 8003f78:	e006      	b.n	8003f88 <HAL_GPIO_Init+0x1a0>
 8003f7a:	2304      	movs	r3, #4
 8003f7c:	e004      	b.n	8003f88 <HAL_GPIO_Init+0x1a0>
 8003f7e:	2302      	movs	r3, #2
 8003f80:	e002      	b.n	8003f88 <HAL_GPIO_Init+0x1a0>
 8003f82:	2301      	movs	r3, #1
 8003f84:	e000      	b.n	8003f88 <HAL_GPIO_Init+0x1a0>
 8003f86:	2300      	movs	r3, #0
 8003f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f8a:	f002 0203 	and.w	r2, r2, #3
 8003f8e:	0092      	lsls	r2, r2, #2
 8003f90:	4093      	lsls	r3, r2
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003f98:	493a      	ldr	r1, [pc, #232]	; (8004084 <HAL_GPIO_Init+0x29c>)
 8003f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9c:	089b      	lsrs	r3, r3, #2
 8003f9e:	3302      	adds	r3, #2
 8003fa0:	68fa      	ldr	r2, [r7, #12]
 8003fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d006      	beq.n	8003fc0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003fb2:	4b39      	ldr	r3, [pc, #228]	; (8004098 <HAL_GPIO_Init+0x2b0>)
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	4938      	ldr	r1, [pc, #224]	; (8004098 <HAL_GPIO_Init+0x2b0>)
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	600b      	str	r3, [r1, #0]
 8003fbe:	e006      	b.n	8003fce <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003fc0:	4b35      	ldr	r3, [pc, #212]	; (8004098 <HAL_GPIO_Init+0x2b0>)
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	43db      	mvns	r3, r3
 8003fc8:	4933      	ldr	r1, [pc, #204]	; (8004098 <HAL_GPIO_Init+0x2b0>)
 8003fca:	4013      	ands	r3, r2
 8003fcc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d006      	beq.n	8003fe8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003fda:	4b2f      	ldr	r3, [pc, #188]	; (8004098 <HAL_GPIO_Init+0x2b0>)
 8003fdc:	685a      	ldr	r2, [r3, #4]
 8003fde:	492e      	ldr	r1, [pc, #184]	; (8004098 <HAL_GPIO_Init+0x2b0>)
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	604b      	str	r3, [r1, #4]
 8003fe6:	e006      	b.n	8003ff6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003fe8:	4b2b      	ldr	r3, [pc, #172]	; (8004098 <HAL_GPIO_Init+0x2b0>)
 8003fea:	685a      	ldr	r2, [r3, #4]
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	43db      	mvns	r3, r3
 8003ff0:	4929      	ldr	r1, [pc, #164]	; (8004098 <HAL_GPIO_Init+0x2b0>)
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d006      	beq.n	8004010 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004002:	4b25      	ldr	r3, [pc, #148]	; (8004098 <HAL_GPIO_Init+0x2b0>)
 8004004:	689a      	ldr	r2, [r3, #8]
 8004006:	4924      	ldr	r1, [pc, #144]	; (8004098 <HAL_GPIO_Init+0x2b0>)
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	4313      	orrs	r3, r2
 800400c:	608b      	str	r3, [r1, #8]
 800400e:	e006      	b.n	800401e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004010:	4b21      	ldr	r3, [pc, #132]	; (8004098 <HAL_GPIO_Init+0x2b0>)
 8004012:	689a      	ldr	r2, [r3, #8]
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	43db      	mvns	r3, r3
 8004018:	491f      	ldr	r1, [pc, #124]	; (8004098 <HAL_GPIO_Init+0x2b0>)
 800401a:	4013      	ands	r3, r2
 800401c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d006      	beq.n	8004038 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800402a:	4b1b      	ldr	r3, [pc, #108]	; (8004098 <HAL_GPIO_Init+0x2b0>)
 800402c:	68da      	ldr	r2, [r3, #12]
 800402e:	491a      	ldr	r1, [pc, #104]	; (8004098 <HAL_GPIO_Init+0x2b0>)
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	4313      	orrs	r3, r2
 8004034:	60cb      	str	r3, [r1, #12]
 8004036:	e006      	b.n	8004046 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004038:	4b17      	ldr	r3, [pc, #92]	; (8004098 <HAL_GPIO_Init+0x2b0>)
 800403a:	68da      	ldr	r2, [r3, #12]
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	43db      	mvns	r3, r3
 8004040:	4915      	ldr	r1, [pc, #84]	; (8004098 <HAL_GPIO_Init+0x2b0>)
 8004042:	4013      	ands	r3, r2
 8004044:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004048:	3301      	adds	r3, #1
 800404a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004052:	fa22 f303 	lsr.w	r3, r2, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	f47f aed0 	bne.w	8003dfc <HAL_GPIO_Init+0x14>
  }
}
 800405c:	bf00      	nop
 800405e:	372c      	adds	r7, #44	; 0x2c
 8004060:	46bd      	mov	sp, r7
 8004062:	bc80      	pop	{r7}
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	10210000 	.word	0x10210000
 800406c:	10110000 	.word	0x10110000
 8004070:	10120000 	.word	0x10120000
 8004074:	10310000 	.word	0x10310000
 8004078:	10320000 	.word	0x10320000
 800407c:	10220000 	.word	0x10220000
 8004080:	40021000 	.word	0x40021000
 8004084:	40010000 	.word	0x40010000
 8004088:	40010800 	.word	0x40010800
 800408c:	40010c00 	.word	0x40010c00
 8004090:	40011000 	.word	0x40011000
 8004094:	40011400 	.word	0x40011400
 8004098:	40010400 	.word	0x40010400

0800409c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800409c:	b480      	push	{r7}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	460b      	mov	r3, r1
 80040a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	689a      	ldr	r2, [r3, #8]
 80040ac:	887b      	ldrh	r3, [r7, #2]
 80040ae:	4013      	ands	r3, r2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d002      	beq.n	80040ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80040b4:	2301      	movs	r3, #1
 80040b6:	73fb      	strb	r3, [r7, #15]
 80040b8:	e001      	b.n	80040be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80040ba:	2300      	movs	r3, #0
 80040bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80040be:	7bfb      	ldrb	r3, [r7, #15]
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3714      	adds	r7, #20
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bc80      	pop	{r7}
 80040c8:	4770      	bx	lr

080040ca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040ca:	b480      	push	{r7}
 80040cc:	b083      	sub	sp, #12
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
 80040d2:	460b      	mov	r3, r1
 80040d4:	807b      	strh	r3, [r7, #2]
 80040d6:	4613      	mov	r3, r2
 80040d8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80040da:	787b      	ldrb	r3, [r7, #1]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d003      	beq.n	80040e8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040e0:	887a      	ldrh	r2, [r7, #2]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80040e6:	e003      	b.n	80040f0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80040e8:	887b      	ldrh	r3, [r7, #2]
 80040ea:	041a      	lsls	r2, r3, #16
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	611a      	str	r2, [r3, #16]
}
 80040f0:	bf00      	nop
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bc80      	pop	{r7}
 80040f8:	4770      	bx	lr
	...

080040fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d101      	bne.n	800410e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e11f      	b.n	800434e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004114:	b2db      	uxtb	r3, r3
 8004116:	2b00      	cmp	r3, #0
 8004118:	d106      	bne.n	8004128 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f7fd ff4e 	bl	8001fc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2224      	movs	r2, #36	; 0x24
 800412c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f022 0201 	bic.w	r2, r2, #1
 800413e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800414e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800415e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004160:	f002 f838 	bl	80061d4 <HAL_RCC_GetPCLK1Freq>
 8004164:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	4a7b      	ldr	r2, [pc, #492]	; (8004358 <HAL_I2C_Init+0x25c>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d807      	bhi.n	8004180 <HAL_I2C_Init+0x84>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	4a7a      	ldr	r2, [pc, #488]	; (800435c <HAL_I2C_Init+0x260>)
 8004174:	4293      	cmp	r3, r2
 8004176:	bf94      	ite	ls
 8004178:	2301      	movls	r3, #1
 800417a:	2300      	movhi	r3, #0
 800417c:	b2db      	uxtb	r3, r3
 800417e:	e006      	b.n	800418e <HAL_I2C_Init+0x92>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	4a77      	ldr	r2, [pc, #476]	; (8004360 <HAL_I2C_Init+0x264>)
 8004184:	4293      	cmp	r3, r2
 8004186:	bf94      	ite	ls
 8004188:	2301      	movls	r3, #1
 800418a:	2300      	movhi	r3, #0
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d001      	beq.n	8004196 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e0db      	b.n	800434e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	4a72      	ldr	r2, [pc, #456]	; (8004364 <HAL_I2C_Init+0x268>)
 800419a:	fba2 2303 	umull	r2, r3, r2, r3
 800419e:	0c9b      	lsrs	r3, r3, #18
 80041a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68ba      	ldr	r2, [r7, #8]
 80041b2:	430a      	orrs	r2, r1
 80041b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	6a1b      	ldr	r3, [r3, #32]
 80041bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	4a64      	ldr	r2, [pc, #400]	; (8004358 <HAL_I2C_Init+0x25c>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d802      	bhi.n	80041d0 <HAL_I2C_Init+0xd4>
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	3301      	adds	r3, #1
 80041ce:	e009      	b.n	80041e4 <HAL_I2C_Init+0xe8>
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80041d6:	fb02 f303 	mul.w	r3, r2, r3
 80041da:	4a63      	ldr	r2, [pc, #396]	; (8004368 <HAL_I2C_Init+0x26c>)
 80041dc:	fba2 2303 	umull	r2, r3, r2, r3
 80041e0:	099b      	lsrs	r3, r3, #6
 80041e2:	3301      	adds	r3, #1
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	6812      	ldr	r2, [r2, #0]
 80041e8:	430b      	orrs	r3, r1
 80041ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	69db      	ldr	r3, [r3, #28]
 80041f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80041f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	4956      	ldr	r1, [pc, #344]	; (8004358 <HAL_I2C_Init+0x25c>)
 8004200:	428b      	cmp	r3, r1
 8004202:	d80d      	bhi.n	8004220 <HAL_I2C_Init+0x124>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	1e59      	subs	r1, r3, #1
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	005b      	lsls	r3, r3, #1
 800420e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004212:	3301      	adds	r3, #1
 8004214:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004218:	2b04      	cmp	r3, #4
 800421a:	bf38      	it	cc
 800421c:	2304      	movcc	r3, #4
 800421e:	e04f      	b.n	80042c0 <HAL_I2C_Init+0x1c4>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d111      	bne.n	800424c <HAL_I2C_Init+0x150>
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	1e58      	subs	r0, r3, #1
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6859      	ldr	r1, [r3, #4]
 8004230:	460b      	mov	r3, r1
 8004232:	005b      	lsls	r3, r3, #1
 8004234:	440b      	add	r3, r1
 8004236:	fbb0 f3f3 	udiv	r3, r0, r3
 800423a:	3301      	adds	r3, #1
 800423c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004240:	2b00      	cmp	r3, #0
 8004242:	bf0c      	ite	eq
 8004244:	2301      	moveq	r3, #1
 8004246:	2300      	movne	r3, #0
 8004248:	b2db      	uxtb	r3, r3
 800424a:	e012      	b.n	8004272 <HAL_I2C_Init+0x176>
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	1e58      	subs	r0, r3, #1
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6859      	ldr	r1, [r3, #4]
 8004254:	460b      	mov	r3, r1
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	440b      	add	r3, r1
 800425a:	0099      	lsls	r1, r3, #2
 800425c:	440b      	add	r3, r1
 800425e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004262:	3301      	adds	r3, #1
 8004264:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004268:	2b00      	cmp	r3, #0
 800426a:	bf0c      	ite	eq
 800426c:	2301      	moveq	r3, #1
 800426e:	2300      	movne	r3, #0
 8004270:	b2db      	uxtb	r3, r3
 8004272:	2b00      	cmp	r3, #0
 8004274:	d001      	beq.n	800427a <HAL_I2C_Init+0x17e>
 8004276:	2301      	movs	r3, #1
 8004278:	e022      	b.n	80042c0 <HAL_I2C_Init+0x1c4>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d10e      	bne.n	80042a0 <HAL_I2C_Init+0x1a4>
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	1e58      	subs	r0, r3, #1
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6859      	ldr	r1, [r3, #4]
 800428a:	460b      	mov	r3, r1
 800428c:	005b      	lsls	r3, r3, #1
 800428e:	440b      	add	r3, r1
 8004290:	fbb0 f3f3 	udiv	r3, r0, r3
 8004294:	3301      	adds	r3, #1
 8004296:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800429a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800429e:	e00f      	b.n	80042c0 <HAL_I2C_Init+0x1c4>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	1e58      	subs	r0, r3, #1
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6859      	ldr	r1, [r3, #4]
 80042a8:	460b      	mov	r3, r1
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	440b      	add	r3, r1
 80042ae:	0099      	lsls	r1, r3, #2
 80042b0:	440b      	add	r3, r1
 80042b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80042b6:	3301      	adds	r3, #1
 80042b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042c0:	6879      	ldr	r1, [r7, #4]
 80042c2:	6809      	ldr	r1, [r1, #0]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	69da      	ldr	r2, [r3, #28]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a1b      	ldr	r3, [r3, #32]
 80042da:	431a      	orrs	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	430a      	orrs	r2, r1
 80042e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80042ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	6911      	ldr	r1, [r2, #16]
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	68d2      	ldr	r2, [r2, #12]
 80042fa:	4311      	orrs	r1, r2
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	6812      	ldr	r2, [r2, #0]
 8004300:	430b      	orrs	r3, r1
 8004302:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	695a      	ldr	r2, [r3, #20]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	431a      	orrs	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	430a      	orrs	r2, r1
 800431e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f042 0201 	orr.w	r2, r2, #1
 800432e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2220      	movs	r2, #32
 800433a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800434c:	2300      	movs	r3, #0
}
 800434e:	4618      	mov	r0, r3
 8004350:	3710      	adds	r7, #16
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	000186a0 	.word	0x000186a0
 800435c:	001e847f 	.word	0x001e847f
 8004360:	003d08ff 	.word	0x003d08ff
 8004364:	431bde83 	.word	0x431bde83
 8004368:	10624dd3 	.word	0x10624dd3

0800436c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b088      	sub	sp, #32
 8004370:	af02      	add	r7, sp, #8
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	607a      	str	r2, [r7, #4]
 8004376:	461a      	mov	r2, r3
 8004378:	460b      	mov	r3, r1
 800437a:	817b      	strh	r3, [r7, #10]
 800437c:	4613      	mov	r3, r2
 800437e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004380:	f7fe fe9e 	bl	80030c0 <HAL_GetTick>
 8004384:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b20      	cmp	r3, #32
 8004390:	f040 80e0 	bne.w	8004554 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	9300      	str	r3, [sp, #0]
 8004398:	2319      	movs	r3, #25
 800439a:	2201      	movs	r2, #1
 800439c:	4970      	ldr	r1, [pc, #448]	; (8004560 <HAL_I2C_Master_Transmit+0x1f4>)
 800439e:	68f8      	ldr	r0, [r7, #12]
 80043a0:	f001 f966 	bl	8005670 <I2C_WaitOnFlagUntilTimeout>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d001      	beq.n	80043ae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80043aa:	2302      	movs	r3, #2
 80043ac:	e0d3      	b.n	8004556 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d101      	bne.n	80043bc <HAL_I2C_Master_Transmit+0x50>
 80043b8:	2302      	movs	r3, #2
 80043ba:	e0cc      	b.n	8004556 <HAL_I2C_Master_Transmit+0x1ea>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0301 	and.w	r3, r3, #1
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d007      	beq.n	80043e2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f042 0201 	orr.w	r2, r2, #1
 80043e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043f0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2221      	movs	r2, #33	; 0x21
 80043f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2210      	movs	r2, #16
 80043fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2200      	movs	r2, #0
 8004406:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	893a      	ldrh	r2, [r7, #8]
 8004412:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004418:	b29a      	uxth	r2, r3
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	4a50      	ldr	r2, [pc, #320]	; (8004564 <HAL_I2C_Master_Transmit+0x1f8>)
 8004422:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004424:	8979      	ldrh	r1, [r7, #10]
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	6a3a      	ldr	r2, [r7, #32]
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f000 fe52 	bl	80050d4 <I2C_MasterRequestWrite>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e08d      	b.n	8004556 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800443a:	2300      	movs	r3, #0
 800443c:	613b      	str	r3, [r7, #16]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	695b      	ldr	r3, [r3, #20]
 8004444:	613b      	str	r3, [r7, #16]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	613b      	str	r3, [r7, #16]
 800444e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004450:	e066      	b.n	8004520 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004452:	697a      	ldr	r2, [r7, #20]
 8004454:	6a39      	ldr	r1, [r7, #32]
 8004456:	68f8      	ldr	r0, [r7, #12]
 8004458:	f001 f9e0 	bl	800581c <I2C_WaitOnTXEFlagUntilTimeout>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00d      	beq.n	800447e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004466:	2b04      	cmp	r3, #4
 8004468:	d107      	bne.n	800447a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004478:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e06b      	b.n	8004556 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004482:	781a      	ldrb	r2, [r3, #0]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448e:	1c5a      	adds	r2, r3, #1
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004498:	b29b      	uxth	r3, r3
 800449a:	3b01      	subs	r3, #1
 800449c:	b29a      	uxth	r2, r3
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044a6:	3b01      	subs	r3, #1
 80044a8:	b29a      	uxth	r2, r3
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	695b      	ldr	r3, [r3, #20]
 80044b4:	f003 0304 	and.w	r3, r3, #4
 80044b8:	2b04      	cmp	r3, #4
 80044ba:	d11b      	bne.n	80044f4 <HAL_I2C_Master_Transmit+0x188>
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d017      	beq.n	80044f4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c8:	781a      	ldrb	r2, [r3, #0]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d4:	1c5a      	adds	r2, r3, #1
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044de:	b29b      	uxth	r3, r3
 80044e0:	3b01      	subs	r3, #1
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ec:	3b01      	subs	r3, #1
 80044ee:	b29a      	uxth	r2, r3
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044f4:	697a      	ldr	r2, [r7, #20]
 80044f6:	6a39      	ldr	r1, [r7, #32]
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f001 f9d0 	bl	800589e <I2C_WaitOnBTFFlagUntilTimeout>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d00d      	beq.n	8004520 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004508:	2b04      	cmp	r3, #4
 800450a:	d107      	bne.n	800451c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800451a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e01a      	b.n	8004556 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004524:	2b00      	cmp	r3, #0
 8004526:	d194      	bne.n	8004452 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004536:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2220      	movs	r2, #32
 800453c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2200      	movs	r2, #0
 8004544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004550:	2300      	movs	r3, #0
 8004552:	e000      	b.n	8004556 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004554:	2302      	movs	r3, #2
  }
}
 8004556:	4618      	mov	r0, r3
 8004558:	3718      	adds	r7, #24
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	00100002 	.word	0x00100002
 8004564:	ffff0000 	.word	0xffff0000

08004568 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b08c      	sub	sp, #48	; 0x30
 800456c:	af02      	add	r7, sp, #8
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	607a      	str	r2, [r7, #4]
 8004572:	461a      	mov	r2, r3
 8004574:	460b      	mov	r3, r1
 8004576:	817b      	strh	r3, [r7, #10]
 8004578:	4613      	mov	r3, r2
 800457a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800457c:	2300      	movs	r3, #0
 800457e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004580:	f7fe fd9e 	bl	80030c0 <HAL_GetTick>
 8004584:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800458c:	b2db      	uxtb	r3, r3
 800458e:	2b20      	cmp	r3, #32
 8004590:	f040 8238 	bne.w	8004a04 <HAL_I2C_Master_Receive+0x49c>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004596:	9300      	str	r3, [sp, #0]
 8004598:	2319      	movs	r3, #25
 800459a:	2201      	movs	r2, #1
 800459c:	497e      	ldr	r1, [pc, #504]	; (8004798 <HAL_I2C_Master_Receive+0x230>)
 800459e:	68f8      	ldr	r0, [r7, #12]
 80045a0:	f001 f866 	bl	8005670 <I2C_WaitOnFlagUntilTimeout>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d001      	beq.n	80045ae <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80045aa:	2302      	movs	r3, #2
 80045ac:	e22b      	b.n	8004a06 <HAL_I2C_Master_Receive+0x49e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d101      	bne.n	80045bc <HAL_I2C_Master_Receive+0x54>
 80045b8:	2302      	movs	r3, #2
 80045ba:	e224      	b.n	8004a06 <HAL_I2C_Master_Receive+0x49e>
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d007      	beq.n	80045e2 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f042 0201 	orr.w	r2, r2, #1
 80045e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045f0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2222      	movs	r2, #34	; 0x22
 80045f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2210      	movs	r2, #16
 80045fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2200      	movs	r2, #0
 8004606:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	893a      	ldrh	r2, [r7, #8]
 8004612:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004618:	b29a      	uxth	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	4a5e      	ldr	r2, [pc, #376]	; (800479c <HAL_I2C_Master_Receive+0x234>)
 8004622:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004624:	8979      	ldrh	r1, [r7, #10]
 8004626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004628:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800462a:	68f8      	ldr	r0, [r7, #12]
 800462c:	f000 fdd4 	bl	80051d8 <I2C_MasterRequestRead>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d001      	beq.n	800463a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e1e5      	b.n	8004a06 <HAL_I2C_Master_Receive+0x49e>
    }

    if (hi2c->XferSize == 0U)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800463e:	2b00      	cmp	r3, #0
 8004640:	d113      	bne.n	800466a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004642:	2300      	movs	r3, #0
 8004644:	61fb      	str	r3, [r7, #28]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	695b      	ldr	r3, [r3, #20]
 800464c:	61fb      	str	r3, [r7, #28]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	699b      	ldr	r3, [r3, #24]
 8004654:	61fb      	str	r3, [r7, #28]
 8004656:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004666:	601a      	str	r2, [r3, #0]
 8004668:	e1b9      	b.n	80049de <HAL_I2C_Master_Receive+0x476>
    }
    else if (hi2c->XferSize == 1U)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800466e:	2b01      	cmp	r3, #1
 8004670:	d11d      	bne.n	80046ae <HAL_I2C_Master_Receive+0x146>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004680:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004682:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004684:	2300      	movs	r3, #0
 8004686:	61bb      	str	r3, [r7, #24]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	61bb      	str	r3, [r7, #24]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	699b      	ldr	r3, [r3, #24]
 8004696:	61bb      	str	r3, [r7, #24]
 8004698:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046a8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80046aa:	b662      	cpsie	i
 80046ac:	e197      	b.n	80049de <HAL_I2C_Master_Receive+0x476>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d11d      	bne.n	80046f2 <HAL_I2C_Master_Receive+0x18a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046c4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80046c6:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046c8:	2300      	movs	r3, #0
 80046ca:	617b      	str	r3, [r7, #20]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	617b      	str	r3, [r7, #20]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	617b      	str	r3, [r7, #20]
 80046dc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046ec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80046ee:	b662      	cpsie	i
 80046f0:	e175      	b.n	80049de <HAL_I2C_Master_Receive+0x476>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004700:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004702:	2300      	movs	r3, #0
 8004704:	613b      	str	r3, [r7, #16]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	695b      	ldr	r3, [r3, #20]
 800470c:	613b      	str	r3, [r7, #16]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	699b      	ldr	r3, [r3, #24]
 8004714:	613b      	str	r3, [r7, #16]
 8004716:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004718:	e161      	b.n	80049de <HAL_I2C_Master_Receive+0x476>
    {
      if (hi2c->XferSize <= 3U)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800471e:	2b03      	cmp	r3, #3
 8004720:	f200 811a 	bhi.w	8004958 <HAL_I2C_Master_Receive+0x3f0>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004728:	2b01      	cmp	r3, #1
 800472a:	d123      	bne.n	8004774 <HAL_I2C_Master_Receive+0x20c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800472c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800472e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004730:	68f8      	ldr	r0, [r7, #12]
 8004732:	f001 f8f5 	bl	8005920 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004736:	4603      	mov	r3, r0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d001      	beq.n	8004740 <HAL_I2C_Master_Receive+0x1d8>
          {
            return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e162      	b.n	8004a06 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	691a      	ldr	r2, [r3, #16]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474a:	b2d2      	uxtb	r2, r2
 800474c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004752:	1c5a      	adds	r2, r3, #1
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800475c:	3b01      	subs	r3, #1
 800475e:	b29a      	uxth	r2, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004768:	b29b      	uxth	r3, r3
 800476a:	3b01      	subs	r3, #1
 800476c:	b29a      	uxth	r2, r3
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004772:	e134      	b.n	80049de <HAL_I2C_Master_Receive+0x476>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004778:	2b02      	cmp	r3, #2
 800477a:	d150      	bne.n	800481e <HAL_I2C_Master_Receive+0x2b6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800477c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477e:	9300      	str	r3, [sp, #0]
 8004780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004782:	2200      	movs	r2, #0
 8004784:	4906      	ldr	r1, [pc, #24]	; (80047a0 <HAL_I2C_Master_Receive+0x238>)
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f000 ff72 	bl	8005670 <I2C_WaitOnFlagUntilTimeout>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d008      	beq.n	80047a4 <HAL_I2C_Master_Receive+0x23c>
          {
            return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e137      	b.n	8004a06 <HAL_I2C_Master_Receive+0x49e>
 8004796:	bf00      	nop
 8004798:	00100002 	.word	0x00100002
 800479c:	ffff0000 	.word	0xffff0000
 80047a0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80047a4:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047b4:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	691a      	ldr	r2, [r3, #16]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c0:	b2d2      	uxtb	r2, r2
 80047c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c8:	1c5a      	adds	r2, r3, #1
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047d2:	3b01      	subs	r3, #1
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047de:	b29b      	uxth	r3, r3
 80047e0:	3b01      	subs	r3, #1
 80047e2:	b29a      	uxth	r2, r3
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80047e8:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	691a      	ldr	r2, [r3, #16]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f4:	b2d2      	uxtb	r2, r2
 80047f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fc:	1c5a      	adds	r2, r3, #1
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004806:	3b01      	subs	r3, #1
 8004808:	b29a      	uxth	r2, r3
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004812:	b29b      	uxth	r3, r3
 8004814:	3b01      	subs	r3, #1
 8004816:	b29a      	uxth	r2, r3
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800481c:	e0df      	b.n	80049de <HAL_I2C_Master_Receive+0x476>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800481e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004820:	9300      	str	r3, [sp, #0]
 8004822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004824:	2200      	movs	r2, #0
 8004826:	497a      	ldr	r1, [pc, #488]	; (8004a10 <HAL_I2C_Master_Receive+0x4a8>)
 8004828:	68f8      	ldr	r0, [r7, #12]
 800482a:	f000 ff21 	bl	8005670 <I2C_WaitOnFlagUntilTimeout>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d001      	beq.n	8004838 <HAL_I2C_Master_Receive+0x2d0>
          {
            return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e0e6      	b.n	8004a06 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004846:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004848:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	691a      	ldr	r2, [r3, #16]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004854:	b2d2      	uxtb	r2, r2
 8004856:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485c:	1c5a      	adds	r2, r3, #1
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004866:	3b01      	subs	r3, #1
 8004868:	b29a      	uxth	r2, r3
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004872:	b29b      	uxth	r3, r3
 8004874:	3b01      	subs	r3, #1
 8004876:	b29a      	uxth	r2, r3
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800487c:	4b65      	ldr	r3, [pc, #404]	; (8004a14 <HAL_I2C_Master_Receive+0x4ac>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	08db      	lsrs	r3, r3, #3
 8004882:	4a65      	ldr	r2, [pc, #404]	; (8004a18 <HAL_I2C_Master_Receive+0x4b0>)
 8004884:	fba2 2303 	umull	r2, r3, r2, r3
 8004888:	0a1a      	lsrs	r2, r3, #8
 800488a:	4613      	mov	r3, r2
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	4413      	add	r3, r2
 8004890:	00da      	lsls	r2, r3, #3
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004896:	6a3b      	ldr	r3, [r7, #32]
 8004898:	3b01      	subs	r3, #1
 800489a:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800489c:	6a3b      	ldr	r3, [r7, #32]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d117      	bne.n	80048d2 <HAL_I2C_Master_Receive+0x36a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2200      	movs	r2, #0
 80048a6:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2220      	movs	r2, #32
 80048ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048bc:	f043 0220 	orr.w	r2, r3, #32
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80048c4:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e099      	b.n	8004a06 <HAL_I2C_Master_Receive+0x49e>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	695b      	ldr	r3, [r3, #20]
 80048d8:	f003 0304 	and.w	r3, r3, #4
 80048dc:	2b04      	cmp	r3, #4
 80048de:	d1da      	bne.n	8004896 <HAL_I2C_Master_Receive+0x32e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	691a      	ldr	r2, [r3, #16]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fa:	b2d2      	uxtb	r2, r2
 80048fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004902:	1c5a      	adds	r2, r3, #1
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800490c:	3b01      	subs	r3, #1
 800490e:	b29a      	uxth	r2, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004918:	b29b      	uxth	r3, r3
 800491a:	3b01      	subs	r3, #1
 800491c:	b29a      	uxth	r2, r3
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004922:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	691a      	ldr	r2, [r3, #16]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492e:	b2d2      	uxtb	r2, r2
 8004930:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004936:	1c5a      	adds	r2, r3, #1
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004940:	3b01      	subs	r3, #1
 8004942:	b29a      	uxth	r2, r3
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800494c:	b29b      	uxth	r3, r3
 800494e:	3b01      	subs	r3, #1
 8004950:	b29a      	uxth	r2, r3
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004956:	e042      	b.n	80049de <HAL_I2C_Master_Receive+0x476>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800495a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800495c:	68f8      	ldr	r0, [r7, #12]
 800495e:	f000 ffdf 	bl	8005920 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d001      	beq.n	800496c <HAL_I2C_Master_Receive+0x404>
        {
          return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e04c      	b.n	8004a06 <HAL_I2C_Master_Receive+0x49e>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	691a      	ldr	r2, [r3, #16]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004976:	b2d2      	uxtb	r2, r2
 8004978:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497e:	1c5a      	adds	r2, r3, #1
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004988:	3b01      	subs	r3, #1
 800498a:	b29a      	uxth	r2, r3
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004994:	b29b      	uxth	r3, r3
 8004996:	3b01      	subs	r3, #1
 8004998:	b29a      	uxth	r2, r3
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	695b      	ldr	r3, [r3, #20]
 80049a4:	f003 0304 	and.w	r3, r3, #4
 80049a8:	2b04      	cmp	r3, #4
 80049aa:	d118      	bne.n	80049de <HAL_I2C_Master_Receive+0x476>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	691a      	ldr	r2, [r3, #16]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b6:	b2d2      	uxtb	r2, r2
 80049b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049be:	1c5a      	adds	r2, r3, #1
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049c8:	3b01      	subs	r3, #1
 80049ca:	b29a      	uxth	r2, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	3b01      	subs	r3, #1
 80049d8:	b29a      	uxth	r2, r3
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	f47f ae99 	bne.w	800471a <HAL_I2C_Master_Receive+0x1b2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2220      	movs	r2, #32
 80049ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004a00:	2300      	movs	r3, #0
 8004a02:	e000      	b.n	8004a06 <HAL_I2C_Master_Receive+0x49e>
  }
  else
  {
    return HAL_BUSY;
 8004a04:	2302      	movs	r3, #2
  }
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3728      	adds	r7, #40	; 0x28
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	00010004 	.word	0x00010004
 8004a14:	20000004 	.word	0x20000004
 8004a18:	14f8b589 	.word	0x14f8b589

08004a1c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b088      	sub	sp, #32
 8004a20:	af02      	add	r7, sp, #8
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	4608      	mov	r0, r1
 8004a26:	4611      	mov	r1, r2
 8004a28:	461a      	mov	r2, r3
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	817b      	strh	r3, [r7, #10]
 8004a2e:	460b      	mov	r3, r1
 8004a30:	813b      	strh	r3, [r7, #8]
 8004a32:	4613      	mov	r3, r2
 8004a34:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a36:	f7fe fb43 	bl	80030c0 <HAL_GetTick>
 8004a3a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	2b20      	cmp	r3, #32
 8004a46:	f040 80d9 	bne.w	8004bfc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	9300      	str	r3, [sp, #0]
 8004a4e:	2319      	movs	r3, #25
 8004a50:	2201      	movs	r2, #1
 8004a52:	496d      	ldr	r1, [pc, #436]	; (8004c08 <HAL_I2C_Mem_Write+0x1ec>)
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	f000 fe0b 	bl	8005670 <I2C_WaitOnFlagUntilTimeout>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d001      	beq.n	8004a64 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004a60:	2302      	movs	r3, #2
 8004a62:	e0cc      	b.n	8004bfe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d101      	bne.n	8004a72 <HAL_I2C_Mem_Write+0x56>
 8004a6e:	2302      	movs	r3, #2
 8004a70:	e0c5      	b.n	8004bfe <HAL_I2C_Mem_Write+0x1e2>
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2201      	movs	r2, #1
 8004a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0301 	and.w	r3, r3, #1
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d007      	beq.n	8004a98 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f042 0201 	orr.w	r2, r2, #1
 8004a96:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004aa6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2221      	movs	r2, #33	; 0x21
 8004aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2240      	movs	r2, #64	; 0x40
 8004ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2200      	movs	r2, #0
 8004abc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6a3a      	ldr	r2, [r7, #32]
 8004ac2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004ac8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ace:	b29a      	uxth	r2, r3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	4a4d      	ldr	r2, [pc, #308]	; (8004c0c <HAL_I2C_Mem_Write+0x1f0>)
 8004ad8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004ada:	88f8      	ldrh	r0, [r7, #6]
 8004adc:	893a      	ldrh	r2, [r7, #8]
 8004ade:	8979      	ldrh	r1, [r7, #10]
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	9301      	str	r3, [sp, #4]
 8004ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae6:	9300      	str	r3, [sp, #0]
 8004ae8:	4603      	mov	r3, r0
 8004aea:	68f8      	ldr	r0, [r7, #12]
 8004aec:	f000 fc42 	bl	8005374 <I2C_RequestMemoryWrite>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d052      	beq.n	8004b9c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e081      	b.n	8004bfe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004afa:	697a      	ldr	r2, [r7, #20]
 8004afc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004afe:	68f8      	ldr	r0, [r7, #12]
 8004b00:	f000 fe8c 	bl	800581c <I2C_WaitOnTXEFlagUntilTimeout>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00d      	beq.n	8004b26 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0e:	2b04      	cmp	r3, #4
 8004b10:	d107      	bne.n	8004b22 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b20:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e06b      	b.n	8004bfe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2a:	781a      	ldrb	r2, [r3, #0]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b36:	1c5a      	adds	r2, r3, #1
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b40:	3b01      	subs	r3, #1
 8004b42:	b29a      	uxth	r2, r3
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	3b01      	subs	r3, #1
 8004b50:	b29a      	uxth	r2, r3
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	695b      	ldr	r3, [r3, #20]
 8004b5c:	f003 0304 	and.w	r3, r3, #4
 8004b60:	2b04      	cmp	r3, #4
 8004b62:	d11b      	bne.n	8004b9c <HAL_I2C_Mem_Write+0x180>
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d017      	beq.n	8004b9c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b70:	781a      	ldrb	r2, [r3, #0]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7c:	1c5a      	adds	r2, r3, #1
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b86:	3b01      	subs	r3, #1
 8004b88:	b29a      	uxth	r2, r3
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	3b01      	subs	r3, #1
 8004b96:	b29a      	uxth	r2, r3
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d1aa      	bne.n	8004afa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ba4:	697a      	ldr	r2, [r7, #20]
 8004ba6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ba8:	68f8      	ldr	r0, [r7, #12]
 8004baa:	f000 fe78 	bl	800589e <I2C_WaitOnBTFFlagUntilTimeout>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00d      	beq.n	8004bd0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb8:	2b04      	cmp	r3, #4
 8004bba:	d107      	bne.n	8004bcc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bca:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e016      	b.n	8004bfe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2220      	movs	r2, #32
 8004be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2200      	movs	r2, #0
 8004bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	e000      	b.n	8004bfe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004bfc:	2302      	movs	r3, #2
  }
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3718      	adds	r7, #24
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	00100002 	.word	0x00100002
 8004c0c:	ffff0000 	.word	0xffff0000

08004c10 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b08c      	sub	sp, #48	; 0x30
 8004c14:	af02      	add	r7, sp, #8
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	4608      	mov	r0, r1
 8004c1a:	4611      	mov	r1, r2
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	4603      	mov	r3, r0
 8004c20:	817b      	strh	r3, [r7, #10]
 8004c22:	460b      	mov	r3, r1
 8004c24:	813b      	strh	r3, [r7, #8]
 8004c26:	4613      	mov	r3, r2
 8004c28:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c2e:	f7fe fa47 	bl	80030c0 <HAL_GetTick>
 8004c32:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	2b20      	cmp	r3, #32
 8004c3e:	f040 823d 	bne.w	80050bc <HAL_I2C_Mem_Read+0x4ac>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c44:	9300      	str	r3, [sp, #0]
 8004c46:	2319      	movs	r3, #25
 8004c48:	2201      	movs	r2, #1
 8004c4a:	4981      	ldr	r1, [pc, #516]	; (8004e50 <HAL_I2C_Mem_Read+0x240>)
 8004c4c:	68f8      	ldr	r0, [r7, #12]
 8004c4e:	f000 fd0f 	bl	8005670 <I2C_WaitOnFlagUntilTimeout>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d001      	beq.n	8004c5c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004c58:	2302      	movs	r3, #2
 8004c5a:	e230      	b.n	80050be <HAL_I2C_Mem_Read+0x4ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d101      	bne.n	8004c6a <HAL_I2C_Mem_Read+0x5a>
 8004c66:	2302      	movs	r3, #2
 8004c68:	e229      	b.n	80050be <HAL_I2C_Mem_Read+0x4ae>
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0301 	and.w	r3, r3, #1
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d007      	beq.n	8004c90 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f042 0201 	orr.w	r2, r2, #1
 8004c8e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c9e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2222      	movs	r2, #34	; 0x22
 8004ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2240      	movs	r2, #64	; 0x40
 8004cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004cc0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	4a61      	ldr	r2, [pc, #388]	; (8004e54 <HAL_I2C_Mem_Read+0x244>)
 8004cd0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004cd2:	88f8      	ldrh	r0, [r7, #6]
 8004cd4:	893a      	ldrh	r2, [r7, #8]
 8004cd6:	8979      	ldrh	r1, [r7, #10]
 8004cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cda:	9301      	str	r3, [sp, #4]
 8004cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cde:	9300      	str	r3, [sp, #0]
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	68f8      	ldr	r0, [r7, #12]
 8004ce4:	f000 fbdc 	bl	80054a0 <I2C_RequestMemoryRead>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d001      	beq.n	8004cf2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e1e5      	b.n	80050be <HAL_I2C_Mem_Read+0x4ae>
    }

    if (hi2c->XferSize == 0U)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d113      	bne.n	8004d22 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	61fb      	str	r3, [r7, #28]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	695b      	ldr	r3, [r3, #20]
 8004d04:	61fb      	str	r3, [r7, #28]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	699b      	ldr	r3, [r3, #24]
 8004d0c:	61fb      	str	r3, [r7, #28]
 8004d0e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d1e:	601a      	str	r2, [r3, #0]
 8004d20:	e1b9      	b.n	8005096 <HAL_I2C_Mem_Read+0x486>
    }
    else if (hi2c->XferSize == 1U)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d11d      	bne.n	8004d66 <HAL_I2C_Mem_Read+0x156>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d38:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004d3a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	61bb      	str	r3, [r7, #24]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	695b      	ldr	r3, [r3, #20]
 8004d46:	61bb      	str	r3, [r7, #24]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	699b      	ldr	r3, [r3, #24]
 8004d4e:	61bb      	str	r3, [r7, #24]
 8004d50:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d60:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004d62:	b662      	cpsie	i
 8004d64:	e197      	b.n	8005096 <HAL_I2C_Mem_Read+0x486>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d11d      	bne.n	8004daa <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d7c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004d7e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d80:	2300      	movs	r3, #0
 8004d82:	617b      	str	r3, [r7, #20]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	617b      	str	r3, [r7, #20]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	699b      	ldr	r3, [r3, #24]
 8004d92:	617b      	str	r3, [r7, #20]
 8004d94:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004da4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004da6:	b662      	cpsie	i
 8004da8:	e175      	b.n	8005096 <HAL_I2C_Mem_Read+0x486>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004db8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dba:	2300      	movs	r3, #0
 8004dbc:	613b      	str	r3, [r7, #16]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	695b      	ldr	r3, [r3, #20]
 8004dc4:	613b      	str	r3, [r7, #16]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	699b      	ldr	r3, [r3, #24]
 8004dcc:	613b      	str	r3, [r7, #16]
 8004dce:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004dd0:	e161      	b.n	8005096 <HAL_I2C_Mem_Read+0x486>
    {
      if (hi2c->XferSize <= 3U)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dd6:	2b03      	cmp	r3, #3
 8004dd8:	f200 811a 	bhi.w	8005010 <HAL_I2C_Mem_Read+0x400>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d123      	bne.n	8004e2c <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004de6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004de8:	68f8      	ldr	r0, [r7, #12]
 8004dea:	f000 fd99 	bl	8005920 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d001      	beq.n	8004df8 <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e162      	b.n	80050be <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	691a      	ldr	r2, [r3, #16]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e02:	b2d2      	uxtb	r2, r2
 8004e04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0a:	1c5a      	adds	r2, r3, #1
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e14:	3b01      	subs	r3, #1
 8004e16:	b29a      	uxth	r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	3b01      	subs	r3, #1
 8004e24:	b29a      	uxth	r2, r3
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e2a:	e134      	b.n	8005096 <HAL_I2C_Mem_Read+0x486>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d150      	bne.n	8004ed6 <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e36:	9300      	str	r3, [sp, #0]
 8004e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	4906      	ldr	r1, [pc, #24]	; (8004e58 <HAL_I2C_Mem_Read+0x248>)
 8004e3e:	68f8      	ldr	r0, [r7, #12]
 8004e40:	f000 fc16 	bl	8005670 <I2C_WaitOnFlagUntilTimeout>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d008      	beq.n	8004e5c <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e137      	b.n	80050be <HAL_I2C_Mem_Read+0x4ae>
 8004e4e:	bf00      	nop
 8004e50:	00100002 	.word	0x00100002
 8004e54:	ffff0000 	.word	0xffff0000
 8004e58:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004e5c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e6c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	691a      	ldr	r2, [r3, #16]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e78:	b2d2      	uxtb	r2, r2
 8004e7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e80:	1c5a      	adds	r2, r3, #1
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	b29a      	uxth	r2, r3
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	3b01      	subs	r3, #1
 8004e9a:	b29a      	uxth	r2, r3
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004ea0:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	691a      	ldr	r2, [r3, #16]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eac:	b2d2      	uxtb	r2, r2
 8004eae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb4:	1c5a      	adds	r2, r3, #1
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	b29a      	uxth	r2, r3
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	3b01      	subs	r3, #1
 8004ece:	b29a      	uxth	r2, r3
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ed4:	e0df      	b.n	8005096 <HAL_I2C_Mem_Read+0x486>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed8:	9300      	str	r3, [sp, #0]
 8004eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004edc:	2200      	movs	r2, #0
 8004ede:	497a      	ldr	r1, [pc, #488]	; (80050c8 <HAL_I2C_Mem_Read+0x4b8>)
 8004ee0:	68f8      	ldr	r0, [r7, #12]
 8004ee2:	f000 fbc5 	bl	8005670 <I2C_WaitOnFlagUntilTimeout>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d001      	beq.n	8004ef0 <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e0e6      	b.n	80050be <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004efe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004f00:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	691a      	ldr	r2, [r3, #16]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0c:	b2d2      	uxtb	r2, r2
 8004f0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f14:	1c5a      	adds	r2, r3, #1
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f1e:	3b01      	subs	r3, #1
 8004f20:	b29a      	uxth	r2, r3
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004f34:	4b65      	ldr	r3, [pc, #404]	; (80050cc <HAL_I2C_Mem_Read+0x4bc>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	08db      	lsrs	r3, r3, #3
 8004f3a:	4a65      	ldr	r2, [pc, #404]	; (80050d0 <HAL_I2C_Mem_Read+0x4c0>)
 8004f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f40:	0a1a      	lsrs	r2, r3, #8
 8004f42:	4613      	mov	r3, r2
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	4413      	add	r3, r2
 8004f48:	00da      	lsls	r2, r3, #3
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004f4e:	6a3b      	ldr	r3, [r7, #32]
 8004f50:	3b01      	subs	r3, #1
 8004f52:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004f54:	6a3b      	ldr	r3, [r7, #32]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d117      	bne.n	8004f8a <HAL_I2C_Mem_Read+0x37a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2220      	movs	r2, #32
 8004f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f74:	f043 0220 	orr.w	r2, r3, #32
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004f7c:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e099      	b.n	80050be <HAL_I2C_Mem_Read+0x4ae>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	695b      	ldr	r3, [r3, #20]
 8004f90:	f003 0304 	and.w	r3, r3, #4
 8004f94:	2b04      	cmp	r3, #4
 8004f96:	d1da      	bne.n	8004f4e <HAL_I2C_Mem_Read+0x33e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fa6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	691a      	ldr	r2, [r3, #16]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb2:	b2d2      	uxtb	r2, r2
 8004fb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fba:	1c5a      	adds	r2, r3, #1
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	b29a      	uxth	r2, r3
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	b29a      	uxth	r2, r3
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004fda:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	691a      	ldr	r2, [r3, #16]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe6:	b2d2      	uxtb	r2, r2
 8004fe8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fee:	1c5a      	adds	r2, r3, #1
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	b29a      	uxth	r2, r3
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005004:	b29b      	uxth	r3, r3
 8005006:	3b01      	subs	r3, #1
 8005008:	b29a      	uxth	r2, r3
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800500e:	e042      	b.n	8005096 <HAL_I2C_Mem_Read+0x486>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005012:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005014:	68f8      	ldr	r0, [r7, #12]
 8005016:	f000 fc83 	bl	8005920 <I2C_WaitOnRXNEFlagUntilTimeout>
 800501a:	4603      	mov	r3, r0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d001      	beq.n	8005024 <HAL_I2C_Mem_Read+0x414>
        {
          return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e04c      	b.n	80050be <HAL_I2C_Mem_Read+0x4ae>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	691a      	ldr	r2, [r3, #16]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502e:	b2d2      	uxtb	r2, r2
 8005030:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005036:	1c5a      	adds	r2, r3, #1
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005040:	3b01      	subs	r3, #1
 8005042:	b29a      	uxth	r2, r3
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800504c:	b29b      	uxth	r3, r3
 800504e:	3b01      	subs	r3, #1
 8005050:	b29a      	uxth	r2, r3
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	695b      	ldr	r3, [r3, #20]
 800505c:	f003 0304 	and.w	r3, r3, #4
 8005060:	2b04      	cmp	r3, #4
 8005062:	d118      	bne.n	8005096 <HAL_I2C_Mem_Read+0x486>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	691a      	ldr	r2, [r3, #16]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506e:	b2d2      	uxtb	r2, r2
 8005070:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005076:	1c5a      	adds	r2, r3, #1
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005080:	3b01      	subs	r3, #1
 8005082:	b29a      	uxth	r2, r3
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800508c:	b29b      	uxth	r3, r3
 800508e:	3b01      	subs	r3, #1
 8005090:	b29a      	uxth	r2, r3
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800509a:	2b00      	cmp	r3, #0
 800509c:	f47f ae99 	bne.w	8004dd2 <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2220      	movs	r2, #32
 80050a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80050b8:	2300      	movs	r3, #0
 80050ba:	e000      	b.n	80050be <HAL_I2C_Mem_Read+0x4ae>
  }
  else
  {
    return HAL_BUSY;
 80050bc:	2302      	movs	r3, #2
  }
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3728      	adds	r7, #40	; 0x28
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	00010004 	.word	0x00010004
 80050cc:	20000004 	.word	0x20000004
 80050d0:	14f8b589 	.word	0x14f8b589

080050d4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b088      	sub	sp, #32
 80050d8:	af02      	add	r7, sp, #8
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	607a      	str	r2, [r7, #4]
 80050de:	603b      	str	r3, [r7, #0]
 80050e0:	460b      	mov	r3, r1
 80050e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	2b08      	cmp	r3, #8
 80050ee:	d006      	beq.n	80050fe <I2C_MasterRequestWrite+0x2a>
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d003      	beq.n	80050fe <I2C_MasterRequestWrite+0x2a>
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80050fc:	d108      	bne.n	8005110 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800510c:	601a      	str	r2, [r3, #0]
 800510e:	e00b      	b.n	8005128 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005114:	2b12      	cmp	r3, #18
 8005116:	d107      	bne.n	8005128 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005126:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	9300      	str	r3, [sp, #0]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005134:	68f8      	ldr	r0, [r7, #12]
 8005136:	f000 fa9b 	bl	8005670 <I2C_WaitOnFlagUntilTimeout>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d00d      	beq.n	800515c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800514a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800514e:	d103      	bne.n	8005158 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005156:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005158:	2303      	movs	r3, #3
 800515a:	e035      	b.n	80051c8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	691b      	ldr	r3, [r3, #16]
 8005160:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005164:	d108      	bne.n	8005178 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005166:	897b      	ldrh	r3, [r7, #10]
 8005168:	b2db      	uxtb	r3, r3
 800516a:	461a      	mov	r2, r3
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005174:	611a      	str	r2, [r3, #16]
 8005176:	e01b      	b.n	80051b0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005178:	897b      	ldrh	r3, [r7, #10]
 800517a:	11db      	asrs	r3, r3, #7
 800517c:	b2db      	uxtb	r3, r3
 800517e:	f003 0306 	and.w	r3, r3, #6
 8005182:	b2db      	uxtb	r3, r3
 8005184:	f063 030f 	orn	r3, r3, #15
 8005188:	b2da      	uxtb	r2, r3
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	490e      	ldr	r1, [pc, #56]	; (80051d0 <I2C_MasterRequestWrite+0xfc>)
 8005196:	68f8      	ldr	r0, [r7, #12]
 8005198:	f000 fac1 	bl	800571e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d001      	beq.n	80051a6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e010      	b.n	80051c8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80051a6:	897b      	ldrh	r3, [r7, #10]
 80051a8:	b2da      	uxtb	r2, r3
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	4907      	ldr	r1, [pc, #28]	; (80051d4 <I2C_MasterRequestWrite+0x100>)
 80051b6:	68f8      	ldr	r0, [r7, #12]
 80051b8:	f000 fab1 	bl	800571e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d001      	beq.n	80051c6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e000      	b.n	80051c8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80051c6:	2300      	movs	r3, #0
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3718      	adds	r7, #24
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	00010008 	.word	0x00010008
 80051d4:	00010002 	.word	0x00010002

080051d8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b088      	sub	sp, #32
 80051dc:	af02      	add	r7, sp, #8
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	607a      	str	r2, [r7, #4]
 80051e2:	603b      	str	r3, [r7, #0]
 80051e4:	460b      	mov	r3, r1
 80051e6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ec:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80051fc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	2b08      	cmp	r3, #8
 8005202:	d006      	beq.n	8005212 <I2C_MasterRequestRead+0x3a>
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	2b01      	cmp	r3, #1
 8005208:	d003      	beq.n	8005212 <I2C_MasterRequestRead+0x3a>
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005210:	d108      	bne.n	8005224 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005220:	601a      	str	r2, [r3, #0]
 8005222:	e00b      	b.n	800523c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005228:	2b11      	cmp	r3, #17
 800522a:	d107      	bne.n	800523c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800523a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	9300      	str	r3, [sp, #0]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005248:	68f8      	ldr	r0, [r7, #12]
 800524a:	f000 fa11 	bl	8005670 <I2C_WaitOnFlagUntilTimeout>
 800524e:	4603      	mov	r3, r0
 8005250:	2b00      	cmp	r3, #0
 8005252:	d00d      	beq.n	8005270 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800525e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005262:	d103      	bne.n	800526c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f44f 7200 	mov.w	r2, #512	; 0x200
 800526a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800526c:	2303      	movs	r3, #3
 800526e:	e079      	b.n	8005364 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	691b      	ldr	r3, [r3, #16]
 8005274:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005278:	d108      	bne.n	800528c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800527a:	897b      	ldrh	r3, [r7, #10]
 800527c:	b2db      	uxtb	r3, r3
 800527e:	f043 0301 	orr.w	r3, r3, #1
 8005282:	b2da      	uxtb	r2, r3
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	611a      	str	r2, [r3, #16]
 800528a:	e05f      	b.n	800534c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800528c:	897b      	ldrh	r3, [r7, #10]
 800528e:	11db      	asrs	r3, r3, #7
 8005290:	b2db      	uxtb	r3, r3
 8005292:	f003 0306 	and.w	r3, r3, #6
 8005296:	b2db      	uxtb	r3, r3
 8005298:	f063 030f 	orn	r3, r3, #15
 800529c:	b2da      	uxtb	r2, r3
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	4930      	ldr	r1, [pc, #192]	; (800536c <I2C_MasterRequestRead+0x194>)
 80052aa:	68f8      	ldr	r0, [r7, #12]
 80052ac:	f000 fa37 	bl	800571e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d001      	beq.n	80052ba <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e054      	b.n	8005364 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80052ba:	897b      	ldrh	r3, [r7, #10]
 80052bc:	b2da      	uxtb	r2, r3
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	4929      	ldr	r1, [pc, #164]	; (8005370 <I2C_MasterRequestRead+0x198>)
 80052ca:	68f8      	ldr	r0, [r7, #12]
 80052cc:	f000 fa27 	bl	800571e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d001      	beq.n	80052da <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e044      	b.n	8005364 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052da:	2300      	movs	r3, #0
 80052dc:	613b      	str	r3, [r7, #16]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	695b      	ldr	r3, [r3, #20]
 80052e4:	613b      	str	r3, [r7, #16]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	699b      	ldr	r3, [r3, #24]
 80052ec:	613b      	str	r3, [r7, #16]
 80052ee:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052fe:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	9300      	str	r3, [sp, #0]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800530c:	68f8      	ldr	r0, [r7, #12]
 800530e:	f000 f9af 	bl	8005670 <I2C_WaitOnFlagUntilTimeout>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d00d      	beq.n	8005334 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005322:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005326:	d103      	bne.n	8005330 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800532e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005330:	2303      	movs	r3, #3
 8005332:	e017      	b.n	8005364 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005334:	897b      	ldrh	r3, [r7, #10]
 8005336:	11db      	asrs	r3, r3, #7
 8005338:	b2db      	uxtb	r3, r3
 800533a:	f003 0306 	and.w	r3, r3, #6
 800533e:	b2db      	uxtb	r3, r3
 8005340:	f063 030e 	orn	r3, r3, #14
 8005344:	b2da      	uxtb	r2, r3
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	4907      	ldr	r1, [pc, #28]	; (8005370 <I2C_MasterRequestRead+0x198>)
 8005352:	68f8      	ldr	r0, [r7, #12]
 8005354:	f000 f9e3 	bl	800571e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d001      	beq.n	8005362 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e000      	b.n	8005364 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	4618      	mov	r0, r3
 8005366:	3718      	adds	r7, #24
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	00010008 	.word	0x00010008
 8005370:	00010002 	.word	0x00010002

08005374 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b088      	sub	sp, #32
 8005378:	af02      	add	r7, sp, #8
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	4608      	mov	r0, r1
 800537e:	4611      	mov	r1, r2
 8005380:	461a      	mov	r2, r3
 8005382:	4603      	mov	r3, r0
 8005384:	817b      	strh	r3, [r7, #10]
 8005386:	460b      	mov	r3, r1
 8005388:	813b      	strh	r3, [r7, #8]
 800538a:	4613      	mov	r3, r2
 800538c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800539c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800539e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a0:	9300      	str	r3, [sp, #0]
 80053a2:	6a3b      	ldr	r3, [r7, #32]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80053aa:	68f8      	ldr	r0, [r7, #12]
 80053ac:	f000 f960 	bl	8005670 <I2C_WaitOnFlagUntilTimeout>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00d      	beq.n	80053d2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053c4:	d103      	bne.n	80053ce <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e05f      	b.n	8005492 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80053d2:	897b      	ldrh	r3, [r7, #10]
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	461a      	mov	r2, r3
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80053e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e4:	6a3a      	ldr	r2, [r7, #32]
 80053e6:	492d      	ldr	r1, [pc, #180]	; (800549c <I2C_RequestMemoryWrite+0x128>)
 80053e8:	68f8      	ldr	r0, [r7, #12]
 80053ea:	f000 f998 	bl	800571e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d001      	beq.n	80053f8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e04c      	b.n	8005492 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053f8:	2300      	movs	r3, #0
 80053fa:	617b      	str	r3, [r7, #20]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	617b      	str	r3, [r7, #20]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	617b      	str	r3, [r7, #20]
 800540c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800540e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005410:	6a39      	ldr	r1, [r7, #32]
 8005412:	68f8      	ldr	r0, [r7, #12]
 8005414:	f000 fa02 	bl	800581c <I2C_WaitOnTXEFlagUntilTimeout>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00d      	beq.n	800543a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005422:	2b04      	cmp	r3, #4
 8005424:	d107      	bne.n	8005436 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005434:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e02b      	b.n	8005492 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800543a:	88fb      	ldrh	r3, [r7, #6]
 800543c:	2b01      	cmp	r3, #1
 800543e:	d105      	bne.n	800544c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005440:	893b      	ldrh	r3, [r7, #8]
 8005442:	b2da      	uxtb	r2, r3
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	611a      	str	r2, [r3, #16]
 800544a:	e021      	b.n	8005490 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800544c:	893b      	ldrh	r3, [r7, #8]
 800544e:	0a1b      	lsrs	r3, r3, #8
 8005450:	b29b      	uxth	r3, r3
 8005452:	b2da      	uxtb	r2, r3
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800545a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800545c:	6a39      	ldr	r1, [r7, #32]
 800545e:	68f8      	ldr	r0, [r7, #12]
 8005460:	f000 f9dc 	bl	800581c <I2C_WaitOnTXEFlagUntilTimeout>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00d      	beq.n	8005486 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546e:	2b04      	cmp	r3, #4
 8005470:	d107      	bne.n	8005482 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005480:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e005      	b.n	8005492 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005486:	893b      	ldrh	r3, [r7, #8]
 8005488:	b2da      	uxtb	r2, r3
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	3718      	adds	r7, #24
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	00010002 	.word	0x00010002

080054a0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b088      	sub	sp, #32
 80054a4:	af02      	add	r7, sp, #8
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	4608      	mov	r0, r1
 80054aa:	4611      	mov	r1, r2
 80054ac:	461a      	mov	r2, r3
 80054ae:	4603      	mov	r3, r0
 80054b0:	817b      	strh	r3, [r7, #10]
 80054b2:	460b      	mov	r3, r1
 80054b4:	813b      	strh	r3, [r7, #8]
 80054b6:	4613      	mov	r3, r2
 80054b8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80054c8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80054da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054dc:	9300      	str	r3, [sp, #0]
 80054de:	6a3b      	ldr	r3, [r7, #32]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80054e6:	68f8      	ldr	r0, [r7, #12]
 80054e8:	f000 f8c2 	bl	8005670 <I2C_WaitOnFlagUntilTimeout>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d00d      	beq.n	800550e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005500:	d103      	bne.n	800550a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005508:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e0aa      	b.n	8005664 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800550e:	897b      	ldrh	r3, [r7, #10]
 8005510:	b2db      	uxtb	r3, r3
 8005512:	461a      	mov	r2, r3
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800551c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800551e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005520:	6a3a      	ldr	r2, [r7, #32]
 8005522:	4952      	ldr	r1, [pc, #328]	; (800566c <I2C_RequestMemoryRead+0x1cc>)
 8005524:	68f8      	ldr	r0, [r7, #12]
 8005526:	f000 f8fa 	bl	800571e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d001      	beq.n	8005534 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e097      	b.n	8005664 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005534:	2300      	movs	r3, #0
 8005536:	617b      	str	r3, [r7, #20]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	695b      	ldr	r3, [r3, #20]
 800553e:	617b      	str	r3, [r7, #20]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	617b      	str	r3, [r7, #20]
 8005548:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800554a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800554c:	6a39      	ldr	r1, [r7, #32]
 800554e:	68f8      	ldr	r0, [r7, #12]
 8005550:	f000 f964 	bl	800581c <I2C_WaitOnTXEFlagUntilTimeout>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00d      	beq.n	8005576 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555e:	2b04      	cmp	r3, #4
 8005560:	d107      	bne.n	8005572 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005570:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e076      	b.n	8005664 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005576:	88fb      	ldrh	r3, [r7, #6]
 8005578:	2b01      	cmp	r3, #1
 800557a:	d105      	bne.n	8005588 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800557c:	893b      	ldrh	r3, [r7, #8]
 800557e:	b2da      	uxtb	r2, r3
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	611a      	str	r2, [r3, #16]
 8005586:	e021      	b.n	80055cc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005588:	893b      	ldrh	r3, [r7, #8]
 800558a:	0a1b      	lsrs	r3, r3, #8
 800558c:	b29b      	uxth	r3, r3
 800558e:	b2da      	uxtb	r2, r3
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005598:	6a39      	ldr	r1, [r7, #32]
 800559a:	68f8      	ldr	r0, [r7, #12]
 800559c:	f000 f93e 	bl	800581c <I2C_WaitOnTXEFlagUntilTimeout>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00d      	beq.n	80055c2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055aa:	2b04      	cmp	r3, #4
 80055ac:	d107      	bne.n	80055be <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e050      	b.n	8005664 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80055c2:	893b      	ldrh	r3, [r7, #8]
 80055c4:	b2da      	uxtb	r2, r3
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055ce:	6a39      	ldr	r1, [r7, #32]
 80055d0:	68f8      	ldr	r0, [r7, #12]
 80055d2:	f000 f923 	bl	800581c <I2C_WaitOnTXEFlagUntilTimeout>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d00d      	beq.n	80055f8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e0:	2b04      	cmp	r3, #4
 80055e2:	d107      	bne.n	80055f4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055f2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e035      	b.n	8005664 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005606:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560a:	9300      	str	r3, [sp, #0]
 800560c:	6a3b      	ldr	r3, [r7, #32]
 800560e:	2200      	movs	r2, #0
 8005610:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005614:	68f8      	ldr	r0, [r7, #12]
 8005616:	f000 f82b 	bl	8005670 <I2C_WaitOnFlagUntilTimeout>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d00d      	beq.n	800563c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800562a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800562e:	d103      	bne.n	8005638 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005636:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005638:	2303      	movs	r3, #3
 800563a:	e013      	b.n	8005664 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800563c:	897b      	ldrh	r3, [r7, #10]
 800563e:	b2db      	uxtb	r3, r3
 8005640:	f043 0301 	orr.w	r3, r3, #1
 8005644:	b2da      	uxtb	r2, r3
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800564c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564e:	6a3a      	ldr	r2, [r7, #32]
 8005650:	4906      	ldr	r1, [pc, #24]	; (800566c <I2C_RequestMemoryRead+0x1cc>)
 8005652:	68f8      	ldr	r0, [r7, #12]
 8005654:	f000 f863 	bl	800571e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d001      	beq.n	8005662 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e000      	b.n	8005664 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005662:	2300      	movs	r3, #0
}
 8005664:	4618      	mov	r0, r3
 8005666:	3718      	adds	r7, #24
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}
 800566c:	00010002 	.word	0x00010002

08005670 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	60b9      	str	r1, [r7, #8]
 800567a:	603b      	str	r3, [r7, #0]
 800567c:	4613      	mov	r3, r2
 800567e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005680:	e025      	b.n	80056ce <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005688:	d021      	beq.n	80056ce <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800568a:	f7fd fd19 	bl	80030c0 <HAL_GetTick>
 800568e:	4602      	mov	r2, r0
 8005690:	69bb      	ldr	r3, [r7, #24]
 8005692:	1ad3      	subs	r3, r2, r3
 8005694:	683a      	ldr	r2, [r7, #0]
 8005696:	429a      	cmp	r2, r3
 8005698:	d302      	bcc.n	80056a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d116      	bne.n	80056ce <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2200      	movs	r2, #0
 80056a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2220      	movs	r2, #32
 80056aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ba:	f043 0220 	orr.w	r2, r3, #32
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e023      	b.n	8005716 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	0c1b      	lsrs	r3, r3, #16
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d10d      	bne.n	80056f4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	43da      	mvns	r2, r3
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	4013      	ands	r3, r2
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	bf0c      	ite	eq
 80056ea:	2301      	moveq	r3, #1
 80056ec:	2300      	movne	r3, #0
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	461a      	mov	r2, r3
 80056f2:	e00c      	b.n	800570e <I2C_WaitOnFlagUntilTimeout+0x9e>
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	699b      	ldr	r3, [r3, #24]
 80056fa:	43da      	mvns	r2, r3
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	4013      	ands	r3, r2
 8005700:	b29b      	uxth	r3, r3
 8005702:	2b00      	cmp	r3, #0
 8005704:	bf0c      	ite	eq
 8005706:	2301      	moveq	r3, #1
 8005708:	2300      	movne	r3, #0
 800570a:	b2db      	uxtb	r3, r3
 800570c:	461a      	mov	r2, r3
 800570e:	79fb      	ldrb	r3, [r7, #7]
 8005710:	429a      	cmp	r2, r3
 8005712:	d0b6      	beq.n	8005682 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005714:	2300      	movs	r3, #0
}
 8005716:	4618      	mov	r0, r3
 8005718:	3710      	adds	r7, #16
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}

0800571e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800571e:	b580      	push	{r7, lr}
 8005720:	b084      	sub	sp, #16
 8005722:	af00      	add	r7, sp, #0
 8005724:	60f8      	str	r0, [r7, #12]
 8005726:	60b9      	str	r1, [r7, #8]
 8005728:	607a      	str	r2, [r7, #4]
 800572a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800572c:	e051      	b.n	80057d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	695b      	ldr	r3, [r3, #20]
 8005734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005738:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800573c:	d123      	bne.n	8005786 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800574c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005756:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2200      	movs	r2, #0
 800575c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2220      	movs	r2, #32
 8005762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2200      	movs	r2, #0
 800576a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005772:	f043 0204 	orr.w	r2, r3, #4
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2200      	movs	r2, #0
 800577e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e046      	b.n	8005814 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800578c:	d021      	beq.n	80057d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800578e:	f7fd fc97 	bl	80030c0 <HAL_GetTick>
 8005792:	4602      	mov	r2, r0
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	429a      	cmp	r2, r3
 800579c:	d302      	bcc.n	80057a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d116      	bne.n	80057d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2200      	movs	r2, #0
 80057a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2220      	movs	r2, #32
 80057ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057be:	f043 0220 	orr.w	r2, r3, #32
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2200      	movs	r2, #0
 80057ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e020      	b.n	8005814 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	0c1b      	lsrs	r3, r3, #16
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d10c      	bne.n	80057f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	695b      	ldr	r3, [r3, #20]
 80057e2:	43da      	mvns	r2, r3
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	4013      	ands	r3, r2
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	bf14      	ite	ne
 80057ee:	2301      	movne	r3, #1
 80057f0:	2300      	moveq	r3, #0
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	e00b      	b.n	800580e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	699b      	ldr	r3, [r3, #24]
 80057fc:	43da      	mvns	r2, r3
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	4013      	ands	r3, r2
 8005802:	b29b      	uxth	r3, r3
 8005804:	2b00      	cmp	r3, #0
 8005806:	bf14      	ite	ne
 8005808:	2301      	movne	r3, #1
 800580a:	2300      	moveq	r3, #0
 800580c:	b2db      	uxtb	r3, r3
 800580e:	2b00      	cmp	r3, #0
 8005810:	d18d      	bne.n	800572e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005812:	2300      	movs	r3, #0
}
 8005814:	4618      	mov	r0, r3
 8005816:	3710      	adds	r7, #16
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}

0800581c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005828:	e02d      	b.n	8005886 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	f000 f8ce 	bl	80059cc <I2C_IsAcknowledgeFailed>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d001      	beq.n	800583a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e02d      	b.n	8005896 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005840:	d021      	beq.n	8005886 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005842:	f7fd fc3d 	bl	80030c0 <HAL_GetTick>
 8005846:	4602      	mov	r2, r0
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	1ad3      	subs	r3, r2, r3
 800584c:	68ba      	ldr	r2, [r7, #8]
 800584e:	429a      	cmp	r2, r3
 8005850:	d302      	bcc.n	8005858 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d116      	bne.n	8005886 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2200      	movs	r2, #0
 800585c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2220      	movs	r2, #32
 8005862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005872:	f043 0220 	orr.w	r2, r3, #32
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2200      	movs	r2, #0
 800587e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e007      	b.n	8005896 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	695b      	ldr	r3, [r3, #20]
 800588c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005890:	2b80      	cmp	r3, #128	; 0x80
 8005892:	d1ca      	bne.n	800582a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005894:	2300      	movs	r3, #0
}
 8005896:	4618      	mov	r0, r3
 8005898:	3710      	adds	r7, #16
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}

0800589e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800589e:	b580      	push	{r7, lr}
 80058a0:	b084      	sub	sp, #16
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	60f8      	str	r0, [r7, #12]
 80058a6:	60b9      	str	r1, [r7, #8]
 80058a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80058aa:	e02d      	b.n	8005908 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80058ac:	68f8      	ldr	r0, [r7, #12]
 80058ae:	f000 f88d 	bl	80059cc <I2C_IsAcknowledgeFailed>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d001      	beq.n	80058bc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e02d      	b.n	8005918 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058c2:	d021      	beq.n	8005908 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058c4:	f7fd fbfc 	bl	80030c0 <HAL_GetTick>
 80058c8:	4602      	mov	r2, r0
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	1ad3      	subs	r3, r2, r3
 80058ce:	68ba      	ldr	r2, [r7, #8]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d302      	bcc.n	80058da <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d116      	bne.n	8005908 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2200      	movs	r2, #0
 80058de:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2220      	movs	r2, #32
 80058e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f4:	f043 0220 	orr.w	r2, r3, #32
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2200      	movs	r2, #0
 8005900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e007      	b.n	8005918 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	695b      	ldr	r3, [r3, #20]
 800590e:	f003 0304 	and.w	r3, r3, #4
 8005912:	2b04      	cmp	r3, #4
 8005914:	d1ca      	bne.n	80058ac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005916:	2300      	movs	r3, #0
}
 8005918:	4618      	mov	r0, r3
 800591a:	3710      	adds	r7, #16
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800592c:	e042      	b.n	80059b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	695b      	ldr	r3, [r3, #20]
 8005934:	f003 0310 	and.w	r3, r3, #16
 8005938:	2b10      	cmp	r3, #16
 800593a:	d119      	bne.n	8005970 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f06f 0210 	mvn.w	r2, #16
 8005944:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2200      	movs	r2, #0
 800594a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2220      	movs	r2, #32
 8005950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2200      	movs	r2, #0
 8005958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2200      	movs	r2, #0
 8005968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	e029      	b.n	80059c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005970:	f7fd fba6 	bl	80030c0 <HAL_GetTick>
 8005974:	4602      	mov	r2, r0
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	68ba      	ldr	r2, [r7, #8]
 800597c:	429a      	cmp	r2, r3
 800597e:	d302      	bcc.n	8005986 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d116      	bne.n	80059b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2200      	movs	r2, #0
 800598a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2220      	movs	r2, #32
 8005990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a0:	f043 0220 	orr.w	r2, r3, #32
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e007      	b.n	80059c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	695b      	ldr	r3, [r3, #20]
 80059ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059be:	2b40      	cmp	r3, #64	; 0x40
 80059c0:	d1b5      	bne.n	800592e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80059c2:	2300      	movs	r3, #0
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3710      	adds	r7, #16
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}

080059cc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	695b      	ldr	r3, [r3, #20]
 80059da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059e2:	d11b      	bne.n	8005a1c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80059ec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2220      	movs	r2, #32
 80059f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a08:	f043 0204 	orr.w	r2, r3, #4
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e000      	b.n	8005a1e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	370c      	adds	r7, #12
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bc80      	pop	{r7}
 8005a26:	4770      	bx	lr

08005a28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b086      	sub	sp, #24
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d101      	bne.n	8005a3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e26c      	b.n	8005f14 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0301 	and.w	r3, r3, #1
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	f000 8087 	beq.w	8005b56 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a48:	4b92      	ldr	r3, [pc, #584]	; (8005c94 <HAL_RCC_OscConfig+0x26c>)
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	f003 030c 	and.w	r3, r3, #12
 8005a50:	2b04      	cmp	r3, #4
 8005a52:	d00c      	beq.n	8005a6e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005a54:	4b8f      	ldr	r3, [pc, #572]	; (8005c94 <HAL_RCC_OscConfig+0x26c>)
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	f003 030c 	and.w	r3, r3, #12
 8005a5c:	2b08      	cmp	r3, #8
 8005a5e:	d112      	bne.n	8005a86 <HAL_RCC_OscConfig+0x5e>
 8005a60:	4b8c      	ldr	r3, [pc, #560]	; (8005c94 <HAL_RCC_OscConfig+0x26c>)
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a6c:	d10b      	bne.n	8005a86 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a6e:	4b89      	ldr	r3, [pc, #548]	; (8005c94 <HAL_RCC_OscConfig+0x26c>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d06c      	beq.n	8005b54 <HAL_RCC_OscConfig+0x12c>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d168      	bne.n	8005b54 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e246      	b.n	8005f14 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a8e:	d106      	bne.n	8005a9e <HAL_RCC_OscConfig+0x76>
 8005a90:	4b80      	ldr	r3, [pc, #512]	; (8005c94 <HAL_RCC_OscConfig+0x26c>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a7f      	ldr	r2, [pc, #508]	; (8005c94 <HAL_RCC_OscConfig+0x26c>)
 8005a96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a9a:	6013      	str	r3, [r2, #0]
 8005a9c:	e02e      	b.n	8005afc <HAL_RCC_OscConfig+0xd4>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d10c      	bne.n	8005ac0 <HAL_RCC_OscConfig+0x98>
 8005aa6:	4b7b      	ldr	r3, [pc, #492]	; (8005c94 <HAL_RCC_OscConfig+0x26c>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a7a      	ldr	r2, [pc, #488]	; (8005c94 <HAL_RCC_OscConfig+0x26c>)
 8005aac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ab0:	6013      	str	r3, [r2, #0]
 8005ab2:	4b78      	ldr	r3, [pc, #480]	; (8005c94 <HAL_RCC_OscConfig+0x26c>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a77      	ldr	r2, [pc, #476]	; (8005c94 <HAL_RCC_OscConfig+0x26c>)
 8005ab8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005abc:	6013      	str	r3, [r2, #0]
 8005abe:	e01d      	b.n	8005afc <HAL_RCC_OscConfig+0xd4>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ac8:	d10c      	bne.n	8005ae4 <HAL_RCC_OscConfig+0xbc>
 8005aca:	4b72      	ldr	r3, [pc, #456]	; (8005c94 <HAL_RCC_OscConfig+0x26c>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a71      	ldr	r2, [pc, #452]	; (8005c94 <HAL_RCC_OscConfig+0x26c>)
 8005ad0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ad4:	6013      	str	r3, [r2, #0]
 8005ad6:	4b6f      	ldr	r3, [pc, #444]	; (8005c94 <HAL_RCC_OscConfig+0x26c>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a6e      	ldr	r2, [pc, #440]	; (8005c94 <HAL_RCC_OscConfig+0x26c>)
 8005adc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ae0:	6013      	str	r3, [r2, #0]
 8005ae2:	e00b      	b.n	8005afc <HAL_RCC_OscConfig+0xd4>
 8005ae4:	4b6b      	ldr	r3, [pc, #428]	; (8005c94 <HAL_RCC_OscConfig+0x26c>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a6a      	ldr	r2, [pc, #424]	; (8005c94 <HAL_RCC_OscConfig+0x26c>)
 8005aea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005aee:	6013      	str	r3, [r2, #0]
 8005af0:	4b68      	ldr	r3, [pc, #416]	; (8005c94 <HAL_RCC_OscConfig+0x26c>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a67      	ldr	r2, [pc, #412]	; (8005c94 <HAL_RCC_OscConfig+0x26c>)
 8005af6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005afa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d013      	beq.n	8005b2c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b04:	f7fd fadc 	bl	80030c0 <HAL_GetTick>
 8005b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b0a:	e008      	b.n	8005b1e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b0c:	f7fd fad8 	bl	80030c0 <HAL_GetTick>
 8005b10:	4602      	mov	r2, r0
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	2b64      	cmp	r3, #100	; 0x64
 8005b18:	d901      	bls.n	8005b1e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e1fa      	b.n	8005f14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b1e:	4b5d      	ldr	r3, [pc, #372]	; (8005c94 <HAL_RCC_OscConfig+0x26c>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d0f0      	beq.n	8005b0c <HAL_RCC_OscConfig+0xe4>
 8005b2a:	e014      	b.n	8005b56 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b2c:	f7fd fac8 	bl	80030c0 <HAL_GetTick>
 8005b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b32:	e008      	b.n	8005b46 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b34:	f7fd fac4 	bl	80030c0 <HAL_GetTick>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	1ad3      	subs	r3, r2, r3
 8005b3e:	2b64      	cmp	r3, #100	; 0x64
 8005b40:	d901      	bls.n	8005b46 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	e1e6      	b.n	8005f14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b46:	4b53      	ldr	r3, [pc, #332]	; (8005c94 <HAL_RCC_OscConfig+0x26c>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d1f0      	bne.n	8005b34 <HAL_RCC_OscConfig+0x10c>
 8005b52:	e000      	b.n	8005b56 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 0302 	and.w	r3, r3, #2
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d063      	beq.n	8005c2a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b62:	4b4c      	ldr	r3, [pc, #304]	; (8005c94 <HAL_RCC_OscConfig+0x26c>)
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	f003 030c 	and.w	r3, r3, #12
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d00b      	beq.n	8005b86 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005b6e:	4b49      	ldr	r3, [pc, #292]	; (8005c94 <HAL_RCC_OscConfig+0x26c>)
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	f003 030c 	and.w	r3, r3, #12
 8005b76:	2b08      	cmp	r3, #8
 8005b78:	d11c      	bne.n	8005bb4 <HAL_RCC_OscConfig+0x18c>
 8005b7a:	4b46      	ldr	r3, [pc, #280]	; (8005c94 <HAL_RCC_OscConfig+0x26c>)
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d116      	bne.n	8005bb4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b86:	4b43      	ldr	r3, [pc, #268]	; (8005c94 <HAL_RCC_OscConfig+0x26c>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 0302 	and.w	r3, r3, #2
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d005      	beq.n	8005b9e <HAL_RCC_OscConfig+0x176>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	691b      	ldr	r3, [r3, #16]
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d001      	beq.n	8005b9e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e1ba      	b.n	8005f14 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b9e:	4b3d      	ldr	r3, [pc, #244]	; (8005c94 <HAL_RCC_OscConfig+0x26c>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	695b      	ldr	r3, [r3, #20]
 8005baa:	00db      	lsls	r3, r3, #3
 8005bac:	4939      	ldr	r1, [pc, #228]	; (8005c94 <HAL_RCC_OscConfig+0x26c>)
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bb2:	e03a      	b.n	8005c2a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	691b      	ldr	r3, [r3, #16]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d020      	beq.n	8005bfe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005bbc:	4b36      	ldr	r3, [pc, #216]	; (8005c98 <HAL_RCC_OscConfig+0x270>)
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bc2:	f7fd fa7d 	bl	80030c0 <HAL_GetTick>
 8005bc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bc8:	e008      	b.n	8005bdc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bca:	f7fd fa79 	bl	80030c0 <HAL_GetTick>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	1ad3      	subs	r3, r2, r3
 8005bd4:	2b02      	cmp	r3, #2
 8005bd6:	d901      	bls.n	8005bdc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	e19b      	b.n	8005f14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bdc:	4b2d      	ldr	r3, [pc, #180]	; (8005c94 <HAL_RCC_OscConfig+0x26c>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 0302 	and.w	r3, r3, #2
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d0f0      	beq.n	8005bca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005be8:	4b2a      	ldr	r3, [pc, #168]	; (8005c94 <HAL_RCC_OscConfig+0x26c>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	695b      	ldr	r3, [r3, #20]
 8005bf4:	00db      	lsls	r3, r3, #3
 8005bf6:	4927      	ldr	r1, [pc, #156]	; (8005c94 <HAL_RCC_OscConfig+0x26c>)
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	600b      	str	r3, [r1, #0]
 8005bfc:	e015      	b.n	8005c2a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bfe:	4b26      	ldr	r3, [pc, #152]	; (8005c98 <HAL_RCC_OscConfig+0x270>)
 8005c00:	2200      	movs	r2, #0
 8005c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c04:	f7fd fa5c 	bl	80030c0 <HAL_GetTick>
 8005c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c0a:	e008      	b.n	8005c1e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c0c:	f7fd fa58 	bl	80030c0 <HAL_GetTick>
 8005c10:	4602      	mov	r2, r0
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	1ad3      	subs	r3, r2, r3
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	d901      	bls.n	8005c1e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	e17a      	b.n	8005f14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c1e:	4b1d      	ldr	r3, [pc, #116]	; (8005c94 <HAL_RCC_OscConfig+0x26c>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f003 0302 	and.w	r3, r3, #2
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1f0      	bne.n	8005c0c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 0308 	and.w	r3, r3, #8
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d03a      	beq.n	8005cac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	699b      	ldr	r3, [r3, #24]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d019      	beq.n	8005c72 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c3e:	4b17      	ldr	r3, [pc, #92]	; (8005c9c <HAL_RCC_OscConfig+0x274>)
 8005c40:	2201      	movs	r2, #1
 8005c42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c44:	f7fd fa3c 	bl	80030c0 <HAL_GetTick>
 8005c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c4a:	e008      	b.n	8005c5e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c4c:	f7fd fa38 	bl	80030c0 <HAL_GetTick>
 8005c50:	4602      	mov	r2, r0
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	1ad3      	subs	r3, r2, r3
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	d901      	bls.n	8005c5e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e15a      	b.n	8005f14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c5e:	4b0d      	ldr	r3, [pc, #52]	; (8005c94 <HAL_RCC_OscConfig+0x26c>)
 8005c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c62:	f003 0302 	and.w	r3, r3, #2
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d0f0      	beq.n	8005c4c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005c6a:	2001      	movs	r0, #1
 8005c6c:	f000 fada 	bl	8006224 <RCC_Delay>
 8005c70:	e01c      	b.n	8005cac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c72:	4b0a      	ldr	r3, [pc, #40]	; (8005c9c <HAL_RCC_OscConfig+0x274>)
 8005c74:	2200      	movs	r2, #0
 8005c76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c78:	f7fd fa22 	bl	80030c0 <HAL_GetTick>
 8005c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c7e:	e00f      	b.n	8005ca0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c80:	f7fd fa1e 	bl	80030c0 <HAL_GetTick>
 8005c84:	4602      	mov	r2, r0
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	2b02      	cmp	r3, #2
 8005c8c:	d908      	bls.n	8005ca0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	e140      	b.n	8005f14 <HAL_RCC_OscConfig+0x4ec>
 8005c92:	bf00      	nop
 8005c94:	40021000 	.word	0x40021000
 8005c98:	42420000 	.word	0x42420000
 8005c9c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ca0:	4b9e      	ldr	r3, [pc, #632]	; (8005f1c <HAL_RCC_OscConfig+0x4f4>)
 8005ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca4:	f003 0302 	and.w	r3, r3, #2
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d1e9      	bne.n	8005c80 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 0304 	and.w	r3, r3, #4
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	f000 80a6 	beq.w	8005e06 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005cbe:	4b97      	ldr	r3, [pc, #604]	; (8005f1c <HAL_RCC_OscConfig+0x4f4>)
 8005cc0:	69db      	ldr	r3, [r3, #28]
 8005cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d10d      	bne.n	8005ce6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cca:	4b94      	ldr	r3, [pc, #592]	; (8005f1c <HAL_RCC_OscConfig+0x4f4>)
 8005ccc:	69db      	ldr	r3, [r3, #28]
 8005cce:	4a93      	ldr	r2, [pc, #588]	; (8005f1c <HAL_RCC_OscConfig+0x4f4>)
 8005cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cd4:	61d3      	str	r3, [r2, #28]
 8005cd6:	4b91      	ldr	r3, [pc, #580]	; (8005f1c <HAL_RCC_OscConfig+0x4f4>)
 8005cd8:	69db      	ldr	r3, [r3, #28]
 8005cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cde:	60bb      	str	r3, [r7, #8]
 8005ce0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ce6:	4b8e      	ldr	r3, [pc, #568]	; (8005f20 <HAL_RCC_OscConfig+0x4f8>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d118      	bne.n	8005d24 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005cf2:	4b8b      	ldr	r3, [pc, #556]	; (8005f20 <HAL_RCC_OscConfig+0x4f8>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a8a      	ldr	r2, [pc, #552]	; (8005f20 <HAL_RCC_OscConfig+0x4f8>)
 8005cf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cfe:	f7fd f9df 	bl	80030c0 <HAL_GetTick>
 8005d02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d04:	e008      	b.n	8005d18 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d06:	f7fd f9db 	bl	80030c0 <HAL_GetTick>
 8005d0a:	4602      	mov	r2, r0
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	1ad3      	subs	r3, r2, r3
 8005d10:	2b64      	cmp	r3, #100	; 0x64
 8005d12:	d901      	bls.n	8005d18 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005d14:	2303      	movs	r3, #3
 8005d16:	e0fd      	b.n	8005f14 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d18:	4b81      	ldr	r3, [pc, #516]	; (8005f20 <HAL_RCC_OscConfig+0x4f8>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d0f0      	beq.n	8005d06 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d106      	bne.n	8005d3a <HAL_RCC_OscConfig+0x312>
 8005d2c:	4b7b      	ldr	r3, [pc, #492]	; (8005f1c <HAL_RCC_OscConfig+0x4f4>)
 8005d2e:	6a1b      	ldr	r3, [r3, #32]
 8005d30:	4a7a      	ldr	r2, [pc, #488]	; (8005f1c <HAL_RCC_OscConfig+0x4f4>)
 8005d32:	f043 0301 	orr.w	r3, r3, #1
 8005d36:	6213      	str	r3, [r2, #32]
 8005d38:	e02d      	b.n	8005d96 <HAL_RCC_OscConfig+0x36e>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d10c      	bne.n	8005d5c <HAL_RCC_OscConfig+0x334>
 8005d42:	4b76      	ldr	r3, [pc, #472]	; (8005f1c <HAL_RCC_OscConfig+0x4f4>)
 8005d44:	6a1b      	ldr	r3, [r3, #32]
 8005d46:	4a75      	ldr	r2, [pc, #468]	; (8005f1c <HAL_RCC_OscConfig+0x4f4>)
 8005d48:	f023 0301 	bic.w	r3, r3, #1
 8005d4c:	6213      	str	r3, [r2, #32]
 8005d4e:	4b73      	ldr	r3, [pc, #460]	; (8005f1c <HAL_RCC_OscConfig+0x4f4>)
 8005d50:	6a1b      	ldr	r3, [r3, #32]
 8005d52:	4a72      	ldr	r2, [pc, #456]	; (8005f1c <HAL_RCC_OscConfig+0x4f4>)
 8005d54:	f023 0304 	bic.w	r3, r3, #4
 8005d58:	6213      	str	r3, [r2, #32]
 8005d5a:	e01c      	b.n	8005d96 <HAL_RCC_OscConfig+0x36e>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	2b05      	cmp	r3, #5
 8005d62:	d10c      	bne.n	8005d7e <HAL_RCC_OscConfig+0x356>
 8005d64:	4b6d      	ldr	r3, [pc, #436]	; (8005f1c <HAL_RCC_OscConfig+0x4f4>)
 8005d66:	6a1b      	ldr	r3, [r3, #32]
 8005d68:	4a6c      	ldr	r2, [pc, #432]	; (8005f1c <HAL_RCC_OscConfig+0x4f4>)
 8005d6a:	f043 0304 	orr.w	r3, r3, #4
 8005d6e:	6213      	str	r3, [r2, #32]
 8005d70:	4b6a      	ldr	r3, [pc, #424]	; (8005f1c <HAL_RCC_OscConfig+0x4f4>)
 8005d72:	6a1b      	ldr	r3, [r3, #32]
 8005d74:	4a69      	ldr	r2, [pc, #420]	; (8005f1c <HAL_RCC_OscConfig+0x4f4>)
 8005d76:	f043 0301 	orr.w	r3, r3, #1
 8005d7a:	6213      	str	r3, [r2, #32]
 8005d7c:	e00b      	b.n	8005d96 <HAL_RCC_OscConfig+0x36e>
 8005d7e:	4b67      	ldr	r3, [pc, #412]	; (8005f1c <HAL_RCC_OscConfig+0x4f4>)
 8005d80:	6a1b      	ldr	r3, [r3, #32]
 8005d82:	4a66      	ldr	r2, [pc, #408]	; (8005f1c <HAL_RCC_OscConfig+0x4f4>)
 8005d84:	f023 0301 	bic.w	r3, r3, #1
 8005d88:	6213      	str	r3, [r2, #32]
 8005d8a:	4b64      	ldr	r3, [pc, #400]	; (8005f1c <HAL_RCC_OscConfig+0x4f4>)
 8005d8c:	6a1b      	ldr	r3, [r3, #32]
 8005d8e:	4a63      	ldr	r2, [pc, #396]	; (8005f1c <HAL_RCC_OscConfig+0x4f4>)
 8005d90:	f023 0304 	bic.w	r3, r3, #4
 8005d94:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d015      	beq.n	8005dca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d9e:	f7fd f98f 	bl	80030c0 <HAL_GetTick>
 8005da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005da4:	e00a      	b.n	8005dbc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005da6:	f7fd f98b 	bl	80030c0 <HAL_GetTick>
 8005daa:	4602      	mov	r2, r0
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d901      	bls.n	8005dbc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005db8:	2303      	movs	r3, #3
 8005dba:	e0ab      	b.n	8005f14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dbc:	4b57      	ldr	r3, [pc, #348]	; (8005f1c <HAL_RCC_OscConfig+0x4f4>)
 8005dbe:	6a1b      	ldr	r3, [r3, #32]
 8005dc0:	f003 0302 	and.w	r3, r3, #2
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d0ee      	beq.n	8005da6 <HAL_RCC_OscConfig+0x37e>
 8005dc8:	e014      	b.n	8005df4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005dca:	f7fd f979 	bl	80030c0 <HAL_GetTick>
 8005dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005dd0:	e00a      	b.n	8005de8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dd2:	f7fd f975 	bl	80030c0 <HAL_GetTick>
 8005dd6:	4602      	mov	r2, r0
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	1ad3      	subs	r3, r2, r3
 8005ddc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d901      	bls.n	8005de8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005de4:	2303      	movs	r3, #3
 8005de6:	e095      	b.n	8005f14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005de8:	4b4c      	ldr	r3, [pc, #304]	; (8005f1c <HAL_RCC_OscConfig+0x4f4>)
 8005dea:	6a1b      	ldr	r3, [r3, #32]
 8005dec:	f003 0302 	and.w	r3, r3, #2
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d1ee      	bne.n	8005dd2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005df4:	7dfb      	ldrb	r3, [r7, #23]
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d105      	bne.n	8005e06 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005dfa:	4b48      	ldr	r3, [pc, #288]	; (8005f1c <HAL_RCC_OscConfig+0x4f4>)
 8005dfc:	69db      	ldr	r3, [r3, #28]
 8005dfe:	4a47      	ldr	r2, [pc, #284]	; (8005f1c <HAL_RCC_OscConfig+0x4f4>)
 8005e00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e04:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	69db      	ldr	r3, [r3, #28]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	f000 8081 	beq.w	8005f12 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e10:	4b42      	ldr	r3, [pc, #264]	; (8005f1c <HAL_RCC_OscConfig+0x4f4>)
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	f003 030c 	and.w	r3, r3, #12
 8005e18:	2b08      	cmp	r3, #8
 8005e1a:	d061      	beq.n	8005ee0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	69db      	ldr	r3, [r3, #28]
 8005e20:	2b02      	cmp	r3, #2
 8005e22:	d146      	bne.n	8005eb2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e24:	4b3f      	ldr	r3, [pc, #252]	; (8005f24 <HAL_RCC_OscConfig+0x4fc>)
 8005e26:	2200      	movs	r2, #0
 8005e28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e2a:	f7fd f949 	bl	80030c0 <HAL_GetTick>
 8005e2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e30:	e008      	b.n	8005e44 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e32:	f7fd f945 	bl	80030c0 <HAL_GetTick>
 8005e36:	4602      	mov	r2, r0
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	1ad3      	subs	r3, r2, r3
 8005e3c:	2b02      	cmp	r3, #2
 8005e3e:	d901      	bls.n	8005e44 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005e40:	2303      	movs	r3, #3
 8005e42:	e067      	b.n	8005f14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e44:	4b35      	ldr	r3, [pc, #212]	; (8005f1c <HAL_RCC_OscConfig+0x4f4>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d1f0      	bne.n	8005e32 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6a1b      	ldr	r3, [r3, #32]
 8005e54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e58:	d108      	bne.n	8005e6c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005e5a:	4b30      	ldr	r3, [pc, #192]	; (8005f1c <HAL_RCC_OscConfig+0x4f4>)
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	492d      	ldr	r1, [pc, #180]	; (8005f1c <HAL_RCC_OscConfig+0x4f4>)
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e6c:	4b2b      	ldr	r3, [pc, #172]	; (8005f1c <HAL_RCC_OscConfig+0x4f4>)
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6a19      	ldr	r1, [r3, #32]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7c:	430b      	orrs	r3, r1
 8005e7e:	4927      	ldr	r1, [pc, #156]	; (8005f1c <HAL_RCC_OscConfig+0x4f4>)
 8005e80:	4313      	orrs	r3, r2
 8005e82:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e84:	4b27      	ldr	r3, [pc, #156]	; (8005f24 <HAL_RCC_OscConfig+0x4fc>)
 8005e86:	2201      	movs	r2, #1
 8005e88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e8a:	f7fd f919 	bl	80030c0 <HAL_GetTick>
 8005e8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005e90:	e008      	b.n	8005ea4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e92:	f7fd f915 	bl	80030c0 <HAL_GetTick>
 8005e96:	4602      	mov	r2, r0
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	1ad3      	subs	r3, r2, r3
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d901      	bls.n	8005ea4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	e037      	b.n	8005f14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005ea4:	4b1d      	ldr	r3, [pc, #116]	; (8005f1c <HAL_RCC_OscConfig+0x4f4>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d0f0      	beq.n	8005e92 <HAL_RCC_OscConfig+0x46a>
 8005eb0:	e02f      	b.n	8005f12 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005eb2:	4b1c      	ldr	r3, [pc, #112]	; (8005f24 <HAL_RCC_OscConfig+0x4fc>)
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eb8:	f7fd f902 	bl	80030c0 <HAL_GetTick>
 8005ebc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ebe:	e008      	b.n	8005ed2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ec0:	f7fd f8fe 	bl	80030c0 <HAL_GetTick>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	2b02      	cmp	r3, #2
 8005ecc:	d901      	bls.n	8005ed2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	e020      	b.n	8005f14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ed2:	4b12      	ldr	r3, [pc, #72]	; (8005f1c <HAL_RCC_OscConfig+0x4f4>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d1f0      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x498>
 8005ede:	e018      	b.n	8005f12 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	69db      	ldr	r3, [r3, #28]
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d101      	bne.n	8005eec <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e013      	b.n	8005f14 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005eec:	4b0b      	ldr	r3, [pc, #44]	; (8005f1c <HAL_RCC_OscConfig+0x4f4>)
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6a1b      	ldr	r3, [r3, #32]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d106      	bne.n	8005f0e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d001      	beq.n	8005f12 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e000      	b.n	8005f14 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005f12:	2300      	movs	r3, #0
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3718      	adds	r7, #24
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}
 8005f1c:	40021000 	.word	0x40021000
 8005f20:	40007000 	.word	0x40007000
 8005f24:	42420060 	.word	0x42420060

08005f28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d101      	bne.n	8005f3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e0d0      	b.n	80060de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f3c:	4b6a      	ldr	r3, [pc, #424]	; (80060e8 <HAL_RCC_ClockConfig+0x1c0>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 0307 	and.w	r3, r3, #7
 8005f44:	683a      	ldr	r2, [r7, #0]
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d910      	bls.n	8005f6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f4a:	4b67      	ldr	r3, [pc, #412]	; (80060e8 <HAL_RCC_ClockConfig+0x1c0>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f023 0207 	bic.w	r2, r3, #7
 8005f52:	4965      	ldr	r1, [pc, #404]	; (80060e8 <HAL_RCC_ClockConfig+0x1c0>)
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f5a:	4b63      	ldr	r3, [pc, #396]	; (80060e8 <HAL_RCC_ClockConfig+0x1c0>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f003 0307 	and.w	r3, r3, #7
 8005f62:	683a      	ldr	r2, [r7, #0]
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d001      	beq.n	8005f6c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e0b8      	b.n	80060de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 0302 	and.w	r3, r3, #2
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d020      	beq.n	8005fba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 0304 	and.w	r3, r3, #4
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d005      	beq.n	8005f90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f84:	4b59      	ldr	r3, [pc, #356]	; (80060ec <HAL_RCC_ClockConfig+0x1c4>)
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	4a58      	ldr	r2, [pc, #352]	; (80060ec <HAL_RCC_ClockConfig+0x1c4>)
 8005f8a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005f8e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f003 0308 	and.w	r3, r3, #8
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d005      	beq.n	8005fa8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f9c:	4b53      	ldr	r3, [pc, #332]	; (80060ec <HAL_RCC_ClockConfig+0x1c4>)
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	4a52      	ldr	r2, [pc, #328]	; (80060ec <HAL_RCC_ClockConfig+0x1c4>)
 8005fa2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005fa6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fa8:	4b50      	ldr	r3, [pc, #320]	; (80060ec <HAL_RCC_ClockConfig+0x1c4>)
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	494d      	ldr	r1, [pc, #308]	; (80060ec <HAL_RCC_ClockConfig+0x1c4>)
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 0301 	and.w	r3, r3, #1
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d040      	beq.n	8006048 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d107      	bne.n	8005fde <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fce:	4b47      	ldr	r3, [pc, #284]	; (80060ec <HAL_RCC_ClockConfig+0x1c4>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d115      	bne.n	8006006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e07f      	b.n	80060de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	2b02      	cmp	r3, #2
 8005fe4:	d107      	bne.n	8005ff6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fe6:	4b41      	ldr	r3, [pc, #260]	; (80060ec <HAL_RCC_ClockConfig+0x1c4>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d109      	bne.n	8006006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e073      	b.n	80060de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ff6:	4b3d      	ldr	r3, [pc, #244]	; (80060ec <HAL_RCC_ClockConfig+0x1c4>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f003 0302 	and.w	r3, r3, #2
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d101      	bne.n	8006006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e06b      	b.n	80060de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006006:	4b39      	ldr	r3, [pc, #228]	; (80060ec <HAL_RCC_ClockConfig+0x1c4>)
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	f023 0203 	bic.w	r2, r3, #3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	4936      	ldr	r1, [pc, #216]	; (80060ec <HAL_RCC_ClockConfig+0x1c4>)
 8006014:	4313      	orrs	r3, r2
 8006016:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006018:	f7fd f852 	bl	80030c0 <HAL_GetTick>
 800601c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800601e:	e00a      	b.n	8006036 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006020:	f7fd f84e 	bl	80030c0 <HAL_GetTick>
 8006024:	4602      	mov	r2, r0
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	f241 3288 	movw	r2, #5000	; 0x1388
 800602e:	4293      	cmp	r3, r2
 8006030:	d901      	bls.n	8006036 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006032:	2303      	movs	r3, #3
 8006034:	e053      	b.n	80060de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006036:	4b2d      	ldr	r3, [pc, #180]	; (80060ec <HAL_RCC_ClockConfig+0x1c4>)
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	f003 020c 	and.w	r2, r3, #12
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	429a      	cmp	r2, r3
 8006046:	d1eb      	bne.n	8006020 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006048:	4b27      	ldr	r3, [pc, #156]	; (80060e8 <HAL_RCC_ClockConfig+0x1c0>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 0307 	and.w	r3, r3, #7
 8006050:	683a      	ldr	r2, [r7, #0]
 8006052:	429a      	cmp	r2, r3
 8006054:	d210      	bcs.n	8006078 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006056:	4b24      	ldr	r3, [pc, #144]	; (80060e8 <HAL_RCC_ClockConfig+0x1c0>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f023 0207 	bic.w	r2, r3, #7
 800605e:	4922      	ldr	r1, [pc, #136]	; (80060e8 <HAL_RCC_ClockConfig+0x1c0>)
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	4313      	orrs	r3, r2
 8006064:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006066:	4b20      	ldr	r3, [pc, #128]	; (80060e8 <HAL_RCC_ClockConfig+0x1c0>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f003 0307 	and.w	r3, r3, #7
 800606e:	683a      	ldr	r2, [r7, #0]
 8006070:	429a      	cmp	r2, r3
 8006072:	d001      	beq.n	8006078 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	e032      	b.n	80060de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f003 0304 	and.w	r3, r3, #4
 8006080:	2b00      	cmp	r3, #0
 8006082:	d008      	beq.n	8006096 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006084:	4b19      	ldr	r3, [pc, #100]	; (80060ec <HAL_RCC_ClockConfig+0x1c4>)
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	4916      	ldr	r1, [pc, #88]	; (80060ec <HAL_RCC_ClockConfig+0x1c4>)
 8006092:	4313      	orrs	r3, r2
 8006094:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f003 0308 	and.w	r3, r3, #8
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d009      	beq.n	80060b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80060a2:	4b12      	ldr	r3, [pc, #72]	; (80060ec <HAL_RCC_ClockConfig+0x1c4>)
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	00db      	lsls	r3, r3, #3
 80060b0:	490e      	ldr	r1, [pc, #56]	; (80060ec <HAL_RCC_ClockConfig+0x1c4>)
 80060b2:	4313      	orrs	r3, r2
 80060b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80060b6:	f000 f821 	bl	80060fc <HAL_RCC_GetSysClockFreq>
 80060ba:	4601      	mov	r1, r0
 80060bc:	4b0b      	ldr	r3, [pc, #44]	; (80060ec <HAL_RCC_ClockConfig+0x1c4>)
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	091b      	lsrs	r3, r3, #4
 80060c2:	f003 030f 	and.w	r3, r3, #15
 80060c6:	4a0a      	ldr	r2, [pc, #40]	; (80060f0 <HAL_RCC_ClockConfig+0x1c8>)
 80060c8:	5cd3      	ldrb	r3, [r2, r3]
 80060ca:	fa21 f303 	lsr.w	r3, r1, r3
 80060ce:	4a09      	ldr	r2, [pc, #36]	; (80060f4 <HAL_RCC_ClockConfig+0x1cc>)
 80060d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80060d2:	4b09      	ldr	r3, [pc, #36]	; (80060f8 <HAL_RCC_ClockConfig+0x1d0>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4618      	mov	r0, r3
 80060d8:	f7fc ffb0 	bl	800303c <HAL_InitTick>

  return HAL_OK;
 80060dc:	2300      	movs	r3, #0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3710      	adds	r7, #16
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop
 80060e8:	40022000 	.word	0x40022000
 80060ec:	40021000 	.word	0x40021000
 80060f0:	0800a5b8 	.word	0x0800a5b8
 80060f4:	20000004 	.word	0x20000004
 80060f8:	20000008 	.word	0x20000008

080060fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060fc:	b490      	push	{r4, r7}
 80060fe:	b08a      	sub	sp, #40	; 0x28
 8006100:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006102:	4b2a      	ldr	r3, [pc, #168]	; (80061ac <HAL_RCC_GetSysClockFreq+0xb0>)
 8006104:	1d3c      	adds	r4, r7, #4
 8006106:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006108:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800610c:	4b28      	ldr	r3, [pc, #160]	; (80061b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800610e:	881b      	ldrh	r3, [r3, #0]
 8006110:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006112:	2300      	movs	r3, #0
 8006114:	61fb      	str	r3, [r7, #28]
 8006116:	2300      	movs	r3, #0
 8006118:	61bb      	str	r3, [r7, #24]
 800611a:	2300      	movs	r3, #0
 800611c:	627b      	str	r3, [r7, #36]	; 0x24
 800611e:	2300      	movs	r3, #0
 8006120:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006122:	2300      	movs	r3, #0
 8006124:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006126:	4b23      	ldr	r3, [pc, #140]	; (80061b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	f003 030c 	and.w	r3, r3, #12
 8006132:	2b04      	cmp	r3, #4
 8006134:	d002      	beq.n	800613c <HAL_RCC_GetSysClockFreq+0x40>
 8006136:	2b08      	cmp	r3, #8
 8006138:	d003      	beq.n	8006142 <HAL_RCC_GetSysClockFreq+0x46>
 800613a:	e02d      	b.n	8006198 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800613c:	4b1e      	ldr	r3, [pc, #120]	; (80061b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800613e:	623b      	str	r3, [r7, #32]
      break;
 8006140:	e02d      	b.n	800619e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	0c9b      	lsrs	r3, r3, #18
 8006146:	f003 030f 	and.w	r3, r3, #15
 800614a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800614e:	4413      	add	r3, r2
 8006150:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006154:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800615c:	2b00      	cmp	r3, #0
 800615e:	d013      	beq.n	8006188 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006160:	4b14      	ldr	r3, [pc, #80]	; (80061b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	0c5b      	lsrs	r3, r3, #17
 8006166:	f003 0301 	and.w	r3, r3, #1
 800616a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800616e:	4413      	add	r3, r2
 8006170:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006174:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	4a0f      	ldr	r2, [pc, #60]	; (80061b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800617a:	fb02 f203 	mul.w	r2, r2, r3
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	fbb2 f3f3 	udiv	r3, r2, r3
 8006184:	627b      	str	r3, [r7, #36]	; 0x24
 8006186:	e004      	b.n	8006192 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	4a0c      	ldr	r2, [pc, #48]	; (80061bc <HAL_RCC_GetSysClockFreq+0xc0>)
 800618c:	fb02 f303 	mul.w	r3, r2, r3
 8006190:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006194:	623b      	str	r3, [r7, #32]
      break;
 8006196:	e002      	b.n	800619e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006198:	4b07      	ldr	r3, [pc, #28]	; (80061b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800619a:	623b      	str	r3, [r7, #32]
      break;
 800619c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800619e:	6a3b      	ldr	r3, [r7, #32]
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3728      	adds	r7, #40	; 0x28
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bc90      	pop	{r4, r7}
 80061a8:	4770      	bx	lr
 80061aa:	bf00      	nop
 80061ac:	0800a57c 	.word	0x0800a57c
 80061b0:	0800a58c 	.word	0x0800a58c
 80061b4:	40021000 	.word	0x40021000
 80061b8:	007a1200 	.word	0x007a1200
 80061bc:	003d0900 	.word	0x003d0900

080061c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061c0:	b480      	push	{r7}
 80061c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80061c4:	4b02      	ldr	r3, [pc, #8]	; (80061d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80061c6:	681b      	ldr	r3, [r3, #0]
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bc80      	pop	{r7}
 80061ce:	4770      	bx	lr
 80061d0:	20000004 	.word	0x20000004

080061d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80061d8:	f7ff fff2 	bl	80061c0 <HAL_RCC_GetHCLKFreq>
 80061dc:	4601      	mov	r1, r0
 80061de:	4b05      	ldr	r3, [pc, #20]	; (80061f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	0a1b      	lsrs	r3, r3, #8
 80061e4:	f003 0307 	and.w	r3, r3, #7
 80061e8:	4a03      	ldr	r2, [pc, #12]	; (80061f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80061ea:	5cd3      	ldrb	r3, [r2, r3]
 80061ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	bd80      	pop	{r7, pc}
 80061f4:	40021000 	.word	0x40021000
 80061f8:	0800a5c8 	.word	0x0800a5c8

080061fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006200:	f7ff ffde 	bl	80061c0 <HAL_RCC_GetHCLKFreq>
 8006204:	4601      	mov	r1, r0
 8006206:	4b05      	ldr	r3, [pc, #20]	; (800621c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	0adb      	lsrs	r3, r3, #11
 800620c:	f003 0307 	and.w	r3, r3, #7
 8006210:	4a03      	ldr	r2, [pc, #12]	; (8006220 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006212:	5cd3      	ldrb	r3, [r2, r3]
 8006214:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006218:	4618      	mov	r0, r3
 800621a:	bd80      	pop	{r7, pc}
 800621c:	40021000 	.word	0x40021000
 8006220:	0800a5c8 	.word	0x0800a5c8

08006224 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006224:	b480      	push	{r7}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800622c:	4b0a      	ldr	r3, [pc, #40]	; (8006258 <RCC_Delay+0x34>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a0a      	ldr	r2, [pc, #40]	; (800625c <RCC_Delay+0x38>)
 8006232:	fba2 2303 	umull	r2, r3, r2, r3
 8006236:	0a5b      	lsrs	r3, r3, #9
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	fb02 f303 	mul.w	r3, r2, r3
 800623e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006240:	bf00      	nop
  }
  while (Delay --);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	1e5a      	subs	r2, r3, #1
 8006246:	60fa      	str	r2, [r7, #12]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d1f9      	bne.n	8006240 <RCC_Delay+0x1c>
}
 800624c:	bf00      	nop
 800624e:	3714      	adds	r7, #20
 8006250:	46bd      	mov	sp, r7
 8006252:	bc80      	pop	{r7}
 8006254:	4770      	bx	lr
 8006256:	bf00      	nop
 8006258:	20000004 	.word	0x20000004
 800625c:	10624dd3 	.word	0x10624dd3

08006260 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b086      	sub	sp, #24
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006268:	2300      	movs	r3, #0
 800626a:	613b      	str	r3, [r7, #16]
 800626c:	2300      	movs	r3, #0
 800626e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f003 0301 	and.w	r3, r3, #1
 8006278:	2b00      	cmp	r3, #0
 800627a:	d07d      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800627c:	2300      	movs	r3, #0
 800627e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006280:	4b4f      	ldr	r3, [pc, #316]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006282:	69db      	ldr	r3, [r3, #28]
 8006284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006288:	2b00      	cmp	r3, #0
 800628a:	d10d      	bne.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800628c:	4b4c      	ldr	r3, [pc, #304]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800628e:	69db      	ldr	r3, [r3, #28]
 8006290:	4a4b      	ldr	r2, [pc, #300]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006292:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006296:	61d3      	str	r3, [r2, #28]
 8006298:	4b49      	ldr	r3, [pc, #292]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800629a:	69db      	ldr	r3, [r3, #28]
 800629c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062a0:	60bb      	str	r3, [r7, #8]
 80062a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80062a4:	2301      	movs	r3, #1
 80062a6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062a8:	4b46      	ldr	r3, [pc, #280]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d118      	bne.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80062b4:	4b43      	ldr	r3, [pc, #268]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a42      	ldr	r2, [pc, #264]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80062ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80062c0:	f7fc fefe 	bl	80030c0 <HAL_GetTick>
 80062c4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062c6:	e008      	b.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062c8:	f7fc fefa 	bl	80030c0 <HAL_GetTick>
 80062cc:	4602      	mov	r2, r0
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	2b64      	cmp	r3, #100	; 0x64
 80062d4:	d901      	bls.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80062d6:	2303      	movs	r3, #3
 80062d8:	e06d      	b.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062da:	4b3a      	ldr	r3, [pc, #232]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d0f0      	beq.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80062e6:	4b36      	ldr	r3, [pc, #216]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062e8:	6a1b      	ldr	r3, [r3, #32]
 80062ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062ee:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d02e      	beq.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062fe:	68fa      	ldr	r2, [r7, #12]
 8006300:	429a      	cmp	r2, r3
 8006302:	d027      	beq.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006304:	4b2e      	ldr	r3, [pc, #184]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006306:	6a1b      	ldr	r3, [r3, #32]
 8006308:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800630c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800630e:	4b2e      	ldr	r3, [pc, #184]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006310:	2201      	movs	r2, #1
 8006312:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006314:	4b2c      	ldr	r3, [pc, #176]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006316:	2200      	movs	r2, #0
 8006318:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800631a:	4a29      	ldr	r2, [pc, #164]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f003 0301 	and.w	r3, r3, #1
 8006326:	2b00      	cmp	r3, #0
 8006328:	d014      	beq.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800632a:	f7fc fec9 	bl	80030c0 <HAL_GetTick>
 800632e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006330:	e00a      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006332:	f7fc fec5 	bl	80030c0 <HAL_GetTick>
 8006336:	4602      	mov	r2, r0
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	1ad3      	subs	r3, r2, r3
 800633c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006340:	4293      	cmp	r3, r2
 8006342:	d901      	bls.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006344:	2303      	movs	r3, #3
 8006346:	e036      	b.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006348:	4b1d      	ldr	r3, [pc, #116]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800634a:	6a1b      	ldr	r3, [r3, #32]
 800634c:	f003 0302 	and.w	r3, r3, #2
 8006350:	2b00      	cmp	r3, #0
 8006352:	d0ee      	beq.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006354:	4b1a      	ldr	r3, [pc, #104]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006356:	6a1b      	ldr	r3, [r3, #32]
 8006358:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	4917      	ldr	r1, [pc, #92]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006362:	4313      	orrs	r3, r2
 8006364:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006366:	7dfb      	ldrb	r3, [r7, #23]
 8006368:	2b01      	cmp	r3, #1
 800636a:	d105      	bne.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800636c:	4b14      	ldr	r3, [pc, #80]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800636e:	69db      	ldr	r3, [r3, #28]
 8006370:	4a13      	ldr	r2, [pc, #76]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006372:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006376:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f003 0302 	and.w	r3, r3, #2
 8006380:	2b00      	cmp	r3, #0
 8006382:	d008      	beq.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006384:	4b0e      	ldr	r3, [pc, #56]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	490b      	ldr	r1, [pc, #44]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006392:	4313      	orrs	r3, r2
 8006394:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f003 0310 	and.w	r3, r3, #16
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d008      	beq.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80063a2:	4b07      	ldr	r3, [pc, #28]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	4904      	ldr	r1, [pc, #16]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063b0:	4313      	orrs	r3, r2
 80063b2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3718      	adds	r7, #24
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	40021000 	.word	0x40021000
 80063c4:	40007000 	.word	0x40007000
 80063c8:	42420440 	.word	0x42420440

080063cc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80063cc:	b590      	push	{r4, r7, lr}
 80063ce:	b08d      	sub	sp, #52	; 0x34
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80063d4:	4b55      	ldr	r3, [pc, #340]	; (800652c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80063d6:	f107 040c 	add.w	r4, r7, #12
 80063da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80063dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80063e0:	4b53      	ldr	r3, [pc, #332]	; (8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80063e2:	881b      	ldrh	r3, [r3, #0]
 80063e4:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80063e6:	2300      	movs	r3, #0
 80063e8:	627b      	str	r3, [r7, #36]	; 0x24
 80063ea:	2300      	movs	r3, #0
 80063ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063ee:	2300      	movs	r3, #0
 80063f0:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80063f2:	2300      	movs	r3, #0
 80063f4:	61fb      	str	r3, [r7, #28]
 80063f6:	2300      	movs	r3, #0
 80063f8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2b02      	cmp	r3, #2
 80063fe:	d07f      	beq.n	8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8006400:	2b10      	cmp	r3, #16
 8006402:	d002      	beq.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8006404:	2b01      	cmp	r3, #1
 8006406:	d048      	beq.n	800649a <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8006408:	e08b      	b.n	8006522 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 800640a:	4b4a      	ldr	r3, [pc, #296]	; (8006534 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8006410:	4b48      	ldr	r3, [pc, #288]	; (8006534 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006418:	2b00      	cmp	r3, #0
 800641a:	d07f      	beq.n	800651c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	0c9b      	lsrs	r3, r3, #18
 8006420:	f003 030f 	and.w	r3, r3, #15
 8006424:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006428:	4413      	add	r3, r2
 800642a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800642e:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006436:	2b00      	cmp	r3, #0
 8006438:	d018      	beq.n	800646c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800643a:	4b3e      	ldr	r3, [pc, #248]	; (8006534 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	0c5b      	lsrs	r3, r3, #17
 8006440:	f003 0301 	and.w	r3, r3, #1
 8006444:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006448:	4413      	add	r3, r2
 800644a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800644e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006450:	69fb      	ldr	r3, [r7, #28]
 8006452:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00d      	beq.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800645a:	4a37      	ldr	r2, [pc, #220]	; (8006538 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 800645c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006462:	6a3b      	ldr	r3, [r7, #32]
 8006464:	fb02 f303 	mul.w	r3, r2, r3
 8006468:	62fb      	str	r3, [r7, #44]	; 0x2c
 800646a:	e004      	b.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800646c:	6a3b      	ldr	r3, [r7, #32]
 800646e:	4a33      	ldr	r2, [pc, #204]	; (800653c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006470:	fb02 f303 	mul.w	r3, r2, r3
 8006474:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8006476:	4b2f      	ldr	r3, [pc, #188]	; (8006534 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800647e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006482:	d102      	bne.n	800648a <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8006484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006486:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006488:	e048      	b.n	800651c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 800648a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800648c:	005b      	lsls	r3, r3, #1
 800648e:	4a2c      	ldr	r2, [pc, #176]	; (8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8006490:	fba2 2303 	umull	r2, r3, r2, r3
 8006494:	085b      	lsrs	r3, r3, #1
 8006496:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006498:	e040      	b.n	800651c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 800649a:	4b26      	ldr	r3, [pc, #152]	; (8006534 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800649c:	6a1b      	ldr	r3, [r3, #32]
 800649e:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064aa:	d108      	bne.n	80064be <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	f003 0302 	and.w	r3, r3, #2
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d003      	beq.n	80064be <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 80064b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80064bc:	e01f      	b.n	80064fe <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064c8:	d109      	bne.n	80064de <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 80064ca:	4b1a      	ldr	r3, [pc, #104]	; (8006534 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80064cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ce:	f003 0302 	and.w	r3, r3, #2
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d003      	beq.n	80064de <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 80064d6:	f649 4340 	movw	r3, #40000	; 0x9c40
 80064da:	62bb      	str	r3, [r7, #40]	; 0x28
 80064dc:	e00f      	b.n	80064fe <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064e8:	d11a      	bne.n	8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80064ea:	4b12      	ldr	r3, [pc, #72]	; (8006534 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d014      	beq.n	8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 80064f6:	f24f 4324 	movw	r3, #62500	; 0xf424
 80064fa:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80064fc:	e010      	b.n	8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80064fe:	e00f      	b.n	8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8006500:	f7ff fe7c 	bl	80061fc <HAL_RCC_GetPCLK2Freq>
 8006504:	4602      	mov	r2, r0
 8006506:	4b0b      	ldr	r3, [pc, #44]	; (8006534 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	0b9b      	lsrs	r3, r3, #14
 800650c:	f003 0303 	and.w	r3, r3, #3
 8006510:	3301      	adds	r3, #1
 8006512:	005b      	lsls	r3, r3, #1
 8006514:	fbb2 f3f3 	udiv	r3, r2, r3
 8006518:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800651a:	e002      	b.n	8006522 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 800651c:	bf00      	nop
 800651e:	e000      	b.n	8006522 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8006520:	bf00      	nop
    }
  }
  return (frequency);
 8006522:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8006524:	4618      	mov	r0, r3
 8006526:	3734      	adds	r7, #52	; 0x34
 8006528:	46bd      	mov	sp, r7
 800652a:	bd90      	pop	{r4, r7, pc}
 800652c:	0800a590 	.word	0x0800a590
 8006530:	0800a5a0 	.word	0x0800a5a0
 8006534:	40021000 	.word	0x40021000
 8006538:	007a1200 	.word	0x007a1200
 800653c:	003d0900 	.word	0x003d0900
 8006540:	aaaaaaab 	.word	0xaaaaaaab

08006544 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b082      	sub	sp, #8
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d101      	bne.n	8006556 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	e041      	b.n	80065da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800655c:	b2db      	uxtb	r3, r3
 800655e:	2b00      	cmp	r3, #0
 8006560:	d106      	bne.n	8006570 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f7fc fc24 	bl	8002db8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2202      	movs	r2, #2
 8006574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	3304      	adds	r3, #4
 8006580:	4619      	mov	r1, r3
 8006582:	4610      	mov	r0, r2
 8006584:	f000 f938 	bl	80067f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2201      	movs	r2, #1
 8006594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2201      	movs	r2, #1
 80065ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2201      	movs	r2, #1
 80065b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2201      	movs	r2, #1
 80065d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3708      	adds	r7, #8
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
	...

080065e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b085      	sub	sp, #20
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d001      	beq.n	80065fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	e03a      	b.n	8006672 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2202      	movs	r2, #2
 8006600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	68da      	ldr	r2, [r3, #12]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f042 0201 	orr.w	r2, r2, #1
 8006612:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a18      	ldr	r2, [pc, #96]	; (800667c <HAL_TIM_Base_Start_IT+0x98>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d00e      	beq.n	800663c <HAL_TIM_Base_Start_IT+0x58>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006626:	d009      	beq.n	800663c <HAL_TIM_Base_Start_IT+0x58>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a14      	ldr	r2, [pc, #80]	; (8006680 <HAL_TIM_Base_Start_IT+0x9c>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d004      	beq.n	800663c <HAL_TIM_Base_Start_IT+0x58>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a13      	ldr	r2, [pc, #76]	; (8006684 <HAL_TIM_Base_Start_IT+0xa0>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d111      	bne.n	8006660 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	f003 0307 	and.w	r3, r3, #7
 8006646:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2b06      	cmp	r3, #6
 800664c:	d010      	beq.n	8006670 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f042 0201 	orr.w	r2, r2, #1
 800665c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800665e:	e007      	b.n	8006670 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f042 0201 	orr.w	r2, r2, #1
 800666e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006670:	2300      	movs	r3, #0
}
 8006672:	4618      	mov	r0, r3
 8006674:	3714      	adds	r7, #20
 8006676:	46bd      	mov	sp, r7
 8006678:	bc80      	pop	{r7}
 800667a:	4770      	bx	lr
 800667c:	40012c00 	.word	0x40012c00
 8006680:	40000400 	.word	0x40000400
 8006684:	40000800 	.word	0x40000800

08006688 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006698:	2b01      	cmp	r3, #1
 800669a:	d101      	bne.n	80066a0 <HAL_TIM_ConfigClockSource+0x18>
 800669c:	2302      	movs	r3, #2
 800669e:	e0a6      	b.n	80067ee <HAL_TIM_ConfigClockSource+0x166>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2202      	movs	r2, #2
 80066ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80066be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066c6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	68fa      	ldr	r2, [r7, #12]
 80066ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	2b40      	cmp	r3, #64	; 0x40
 80066d6:	d067      	beq.n	80067a8 <HAL_TIM_ConfigClockSource+0x120>
 80066d8:	2b40      	cmp	r3, #64	; 0x40
 80066da:	d80b      	bhi.n	80066f4 <HAL_TIM_ConfigClockSource+0x6c>
 80066dc:	2b10      	cmp	r3, #16
 80066de:	d073      	beq.n	80067c8 <HAL_TIM_ConfigClockSource+0x140>
 80066e0:	2b10      	cmp	r3, #16
 80066e2:	d802      	bhi.n	80066ea <HAL_TIM_ConfigClockSource+0x62>
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d06f      	beq.n	80067c8 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80066e8:	e078      	b.n	80067dc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80066ea:	2b20      	cmp	r3, #32
 80066ec:	d06c      	beq.n	80067c8 <HAL_TIM_ConfigClockSource+0x140>
 80066ee:	2b30      	cmp	r3, #48	; 0x30
 80066f0:	d06a      	beq.n	80067c8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80066f2:	e073      	b.n	80067dc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80066f4:	2b70      	cmp	r3, #112	; 0x70
 80066f6:	d00d      	beq.n	8006714 <HAL_TIM_ConfigClockSource+0x8c>
 80066f8:	2b70      	cmp	r3, #112	; 0x70
 80066fa:	d804      	bhi.n	8006706 <HAL_TIM_ConfigClockSource+0x7e>
 80066fc:	2b50      	cmp	r3, #80	; 0x50
 80066fe:	d033      	beq.n	8006768 <HAL_TIM_ConfigClockSource+0xe0>
 8006700:	2b60      	cmp	r3, #96	; 0x60
 8006702:	d041      	beq.n	8006788 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006704:	e06a      	b.n	80067dc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006706:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800670a:	d066      	beq.n	80067da <HAL_TIM_ConfigClockSource+0x152>
 800670c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006710:	d017      	beq.n	8006742 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006712:	e063      	b.n	80067dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6818      	ldr	r0, [r3, #0]
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	6899      	ldr	r1, [r3, #8]
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	685a      	ldr	r2, [r3, #4]
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	f000 f941 	bl	80069aa <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006736:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	68fa      	ldr	r2, [r7, #12]
 800673e:	609a      	str	r2, [r3, #8]
      break;
 8006740:	e04c      	b.n	80067dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6818      	ldr	r0, [r3, #0]
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	6899      	ldr	r1, [r3, #8]
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	685a      	ldr	r2, [r3, #4]
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	68db      	ldr	r3, [r3, #12]
 8006752:	f000 f92a 	bl	80069aa <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	689a      	ldr	r2, [r3, #8]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006764:	609a      	str	r2, [r3, #8]
      break;
 8006766:	e039      	b.n	80067dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6818      	ldr	r0, [r3, #0]
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	6859      	ldr	r1, [r3, #4]
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	461a      	mov	r2, r3
 8006776:	f000 f8a1 	bl	80068bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	2150      	movs	r1, #80	; 0x50
 8006780:	4618      	mov	r0, r3
 8006782:	f000 f8f8 	bl	8006976 <TIM_ITRx_SetConfig>
      break;
 8006786:	e029      	b.n	80067dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6818      	ldr	r0, [r3, #0]
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	6859      	ldr	r1, [r3, #4]
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	461a      	mov	r2, r3
 8006796:	f000 f8bf 	bl	8006918 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2160      	movs	r1, #96	; 0x60
 80067a0:	4618      	mov	r0, r3
 80067a2:	f000 f8e8 	bl	8006976 <TIM_ITRx_SetConfig>
      break;
 80067a6:	e019      	b.n	80067dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6818      	ldr	r0, [r3, #0]
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	6859      	ldr	r1, [r3, #4]
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	68db      	ldr	r3, [r3, #12]
 80067b4:	461a      	mov	r2, r3
 80067b6:	f000 f881 	bl	80068bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	2140      	movs	r1, #64	; 0x40
 80067c0:	4618      	mov	r0, r3
 80067c2:	f000 f8d8 	bl	8006976 <TIM_ITRx_SetConfig>
      break;
 80067c6:	e009      	b.n	80067dc <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4619      	mov	r1, r3
 80067d2:	4610      	mov	r0, r2
 80067d4:	f000 f8cf 	bl	8006976 <TIM_ITRx_SetConfig>
        break;
 80067d8:	e000      	b.n	80067dc <HAL_TIM_ConfigClockSource+0x154>
      break;
 80067da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067ec:	2300      	movs	r3, #0
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3710      	adds	r7, #16
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
	...

080067f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b085      	sub	sp, #20
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	4a29      	ldr	r2, [pc, #164]	; (80068b0 <TIM_Base_SetConfig+0xb8>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d00b      	beq.n	8006828 <TIM_Base_SetConfig+0x30>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006816:	d007      	beq.n	8006828 <TIM_Base_SetConfig+0x30>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4a26      	ldr	r2, [pc, #152]	; (80068b4 <TIM_Base_SetConfig+0xbc>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d003      	beq.n	8006828 <TIM_Base_SetConfig+0x30>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	4a25      	ldr	r2, [pc, #148]	; (80068b8 <TIM_Base_SetConfig+0xc0>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d108      	bne.n	800683a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800682e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	68fa      	ldr	r2, [r7, #12]
 8006836:	4313      	orrs	r3, r2
 8006838:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a1c      	ldr	r2, [pc, #112]	; (80068b0 <TIM_Base_SetConfig+0xb8>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d00b      	beq.n	800685a <TIM_Base_SetConfig+0x62>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006848:	d007      	beq.n	800685a <TIM_Base_SetConfig+0x62>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4a19      	ldr	r2, [pc, #100]	; (80068b4 <TIM_Base_SetConfig+0xbc>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d003      	beq.n	800685a <TIM_Base_SetConfig+0x62>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4a18      	ldr	r2, [pc, #96]	; (80068b8 <TIM_Base_SetConfig+0xc0>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d108      	bne.n	800686c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006860:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	68db      	ldr	r3, [r3, #12]
 8006866:	68fa      	ldr	r2, [r7, #12]
 8006868:	4313      	orrs	r3, r2
 800686a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	695b      	ldr	r3, [r3, #20]
 8006876:	4313      	orrs	r3, r2
 8006878:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	68fa      	ldr	r2, [r7, #12]
 800687e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	689a      	ldr	r2, [r3, #8]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4a07      	ldr	r2, [pc, #28]	; (80068b0 <TIM_Base_SetConfig+0xb8>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d103      	bne.n	80068a0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	691a      	ldr	r2, [r3, #16]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	615a      	str	r2, [r3, #20]
}
 80068a6:	bf00      	nop
 80068a8:	3714      	adds	r7, #20
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bc80      	pop	{r7}
 80068ae:	4770      	bx	lr
 80068b0:	40012c00 	.word	0x40012c00
 80068b4:	40000400 	.word	0x40000400
 80068b8:	40000800 	.word	0x40000800

080068bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068bc:	b480      	push	{r7}
 80068be:	b087      	sub	sp, #28
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	60b9      	str	r1, [r7, #8]
 80068c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6a1b      	ldr	r3, [r3, #32]
 80068cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	6a1b      	ldr	r3, [r3, #32]
 80068d2:	f023 0201 	bic.w	r2, r3, #1
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	699b      	ldr	r3, [r3, #24]
 80068de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80068e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	011b      	lsls	r3, r3, #4
 80068ec:	693a      	ldr	r2, [r7, #16]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	f023 030a 	bic.w	r3, r3, #10
 80068f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80068fa:	697a      	ldr	r2, [r7, #20]
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	4313      	orrs	r3, r2
 8006900:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	693a      	ldr	r2, [r7, #16]
 8006906:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	697a      	ldr	r2, [r7, #20]
 800690c:	621a      	str	r2, [r3, #32]
}
 800690e:	bf00      	nop
 8006910:	371c      	adds	r7, #28
 8006912:	46bd      	mov	sp, r7
 8006914:	bc80      	pop	{r7}
 8006916:	4770      	bx	lr

08006918 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006918:	b480      	push	{r7}
 800691a:	b087      	sub	sp, #28
 800691c:	af00      	add	r7, sp, #0
 800691e:	60f8      	str	r0, [r7, #12]
 8006920:	60b9      	str	r1, [r7, #8]
 8006922:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	6a1b      	ldr	r3, [r3, #32]
 8006928:	f023 0210 	bic.w	r2, r3, #16
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	699b      	ldr	r3, [r3, #24]
 8006934:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6a1b      	ldr	r3, [r3, #32]
 800693a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006942:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	031b      	lsls	r3, r3, #12
 8006948:	697a      	ldr	r2, [r7, #20]
 800694a:	4313      	orrs	r3, r2
 800694c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006954:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	011b      	lsls	r3, r3, #4
 800695a:	693a      	ldr	r2, [r7, #16]
 800695c:	4313      	orrs	r3, r2
 800695e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	697a      	ldr	r2, [r7, #20]
 8006964:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	693a      	ldr	r2, [r7, #16]
 800696a:	621a      	str	r2, [r3, #32]
}
 800696c:	bf00      	nop
 800696e:	371c      	adds	r7, #28
 8006970:	46bd      	mov	sp, r7
 8006972:	bc80      	pop	{r7}
 8006974:	4770      	bx	lr

08006976 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006976:	b480      	push	{r7}
 8006978:	b085      	sub	sp, #20
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
 800697e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800698c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800698e:	683a      	ldr	r2, [r7, #0]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	4313      	orrs	r3, r2
 8006994:	f043 0307 	orr.w	r3, r3, #7
 8006998:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	68fa      	ldr	r2, [r7, #12]
 800699e:	609a      	str	r2, [r3, #8]
}
 80069a0:	bf00      	nop
 80069a2:	3714      	adds	r7, #20
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bc80      	pop	{r7}
 80069a8:	4770      	bx	lr

080069aa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80069aa:	b480      	push	{r7}
 80069ac:	b087      	sub	sp, #28
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	60f8      	str	r0, [r7, #12]
 80069b2:	60b9      	str	r1, [r7, #8]
 80069b4:	607a      	str	r2, [r7, #4]
 80069b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80069c4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	021a      	lsls	r2, r3, #8
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	431a      	orrs	r2, r3
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	697a      	ldr	r2, [r7, #20]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	697a      	ldr	r2, [r7, #20]
 80069dc:	609a      	str	r2, [r3, #8]
}
 80069de:	bf00      	nop
 80069e0:	371c      	adds	r7, #28
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bc80      	pop	{r7}
 80069e6:	4770      	bx	lr

080069e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b085      	sub	sp, #20
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d101      	bne.n	8006a00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069fc:	2302      	movs	r3, #2
 80069fe:	e046      	b.n	8006a8e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2201      	movs	r2, #1
 8006a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2202      	movs	r2, #2
 8006a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	68fa      	ldr	r2, [r7, #12]
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	68fa      	ldr	r2, [r7, #12]
 8006a38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a16      	ldr	r2, [pc, #88]	; (8006a98 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d00e      	beq.n	8006a62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a4c:	d009      	beq.n	8006a62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a12      	ldr	r2, [pc, #72]	; (8006a9c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d004      	beq.n	8006a62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a10      	ldr	r2, [pc, #64]	; (8006aa0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d10c      	bne.n	8006a7c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	68ba      	ldr	r2, [r7, #8]
 8006a70:	4313      	orrs	r3, r2
 8006a72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	68ba      	ldr	r2, [r7, #8]
 8006a7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2201      	movs	r2, #1
 8006a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3714      	adds	r7, #20
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bc80      	pop	{r7}
 8006a96:	4770      	bx	lr
 8006a98:	40012c00 	.word	0x40012c00
 8006a9c:	40000400 	.word	0x40000400
 8006aa0:	40000800 	.word	0x40000800

08006aa4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b082      	sub	sp, #8
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d101      	bne.n	8006ab6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e03f      	b.n	8006b36 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d106      	bne.n	8006ad0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f7fc f9e4 	bl	8002e98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2224      	movs	r2, #36	; 0x24
 8006ad4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	68da      	ldr	r2, [r3, #12]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ae6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f000 fb83 	bl	80071f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	691a      	ldr	r2, [r3, #16]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006afc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	695a      	ldr	r2, [r3, #20]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	68da      	ldr	r2, [r3, #12]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2220      	movs	r2, #32
 8006b28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2220      	movs	r2, #32
 8006b30:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006b34:	2300      	movs	r3, #0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3708      	adds	r7, #8
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b08a      	sub	sp, #40	; 0x28
 8006b42:	af02      	add	r7, sp, #8
 8006b44:	60f8      	str	r0, [r7, #12]
 8006b46:	60b9      	str	r1, [r7, #8]
 8006b48:	603b      	str	r3, [r7, #0]
 8006b4a:	4613      	mov	r3, r2
 8006b4c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	2b20      	cmp	r3, #32
 8006b5c:	d17c      	bne.n	8006c58 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d002      	beq.n	8006b6a <HAL_UART_Transmit+0x2c>
 8006b64:	88fb      	ldrh	r3, [r7, #6]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d101      	bne.n	8006b6e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e075      	b.n	8006c5a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d101      	bne.n	8006b7c <HAL_UART_Transmit+0x3e>
 8006b78:	2302      	movs	r3, #2
 8006b7a:	e06e      	b.n	8006c5a <HAL_UART_Transmit+0x11c>
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2200      	movs	r2, #0
 8006b88:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2221      	movs	r2, #33	; 0x21
 8006b8e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006b92:	f7fc fa95 	bl	80030c0 <HAL_GetTick>
 8006b96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	88fa      	ldrh	r2, [r7, #6]
 8006b9c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	88fa      	ldrh	r2, [r7, #6]
 8006ba2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	689b      	ldr	r3, [r3, #8]
 8006ba8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bac:	d108      	bne.n	8006bc0 <HAL_UART_Transmit+0x82>
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	691b      	ldr	r3, [r3, #16]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d104      	bne.n	8006bc0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	61bb      	str	r3, [r7, #24]
 8006bbe:	e003      	b.n	8006bc8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8006bd0:	e02a      	b.n	8006c28 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	9300      	str	r3, [sp, #0]
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	2180      	movs	r1, #128	; 0x80
 8006bdc:	68f8      	ldr	r0, [r7, #12]
 8006bde:	f000 f9a7 	bl	8006f30 <UART_WaitOnFlagUntilTimeout>
 8006be2:	4603      	mov	r3, r0
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d001      	beq.n	8006bec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006be8:	2303      	movs	r3, #3
 8006bea:	e036      	b.n	8006c5a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d10b      	bne.n	8006c0a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	881b      	ldrh	r3, [r3, #0]
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c00:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006c02:	69bb      	ldr	r3, [r7, #24]
 8006c04:	3302      	adds	r3, #2
 8006c06:	61bb      	str	r3, [r7, #24]
 8006c08:	e007      	b.n	8006c1a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006c0a:	69fb      	ldr	r3, [r7, #28]
 8006c0c:	781a      	ldrb	r2, [r3, #0]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006c14:	69fb      	ldr	r3, [r7, #28]
 8006c16:	3301      	adds	r3, #1
 8006c18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	3b01      	subs	r3, #1
 8006c22:	b29a      	uxth	r2, r3
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d1cf      	bne.n	8006bd2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	9300      	str	r3, [sp, #0]
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	2140      	movs	r1, #64	; 0x40
 8006c3c:	68f8      	ldr	r0, [r7, #12]
 8006c3e:	f000 f977 	bl	8006f30 <UART_WaitOnFlagUntilTimeout>
 8006c42:	4603      	mov	r3, r0
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d001      	beq.n	8006c4c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006c48:	2303      	movs	r3, #3
 8006c4a:	e006      	b.n	8006c5a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2220      	movs	r2, #32
 8006c50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8006c54:	2300      	movs	r3, #0
 8006c56:	e000      	b.n	8006c5a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006c58:	2302      	movs	r3, #2
  }
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3720      	adds	r7, #32
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}

08006c62 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c62:	b480      	push	{r7}
 8006c64:	b085      	sub	sp, #20
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	60f8      	str	r0, [r7, #12]
 8006c6a:	60b9      	str	r1, [r7, #8]
 8006c6c:	4613      	mov	r3, r2
 8006c6e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	2b20      	cmp	r3, #32
 8006c7a:	d140      	bne.n	8006cfe <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d002      	beq.n	8006c88 <HAL_UART_Receive_IT+0x26>
 8006c82:	88fb      	ldrh	r3, [r7, #6]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d101      	bne.n	8006c8c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	e039      	b.n	8006d00 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d101      	bne.n	8006c9a <HAL_UART_Receive_IT+0x38>
 8006c96:	2302      	movs	r3, #2
 8006c98:	e032      	b.n	8006d00 <HAL_UART_Receive_IT+0x9e>
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	68ba      	ldr	r2, [r7, #8]
 8006ca6:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	88fa      	ldrh	r2, [r7, #6]
 8006cac:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	88fa      	ldrh	r2, [r7, #6]
 8006cb2:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2222      	movs	r2, #34	; 0x22
 8006cbe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	68da      	ldr	r2, [r3, #12]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006cd8:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	695a      	ldr	r2, [r3, #20]
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f042 0201 	orr.w	r2, r2, #1
 8006ce8:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	68da      	ldr	r2, [r3, #12]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f042 0220 	orr.w	r2, r2, #32
 8006cf8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	e000      	b.n	8006d00 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006cfe:	2302      	movs	r3, #2
  }
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3714      	adds	r7, #20
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bc80      	pop	{r7}
 8006d08:	4770      	bx	lr
	...

08006d0c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b088      	sub	sp, #32
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	68db      	ldr	r3, [r3, #12]
 8006d22:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	695b      	ldr	r3, [r3, #20]
 8006d2a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006d30:	2300      	movs	r3, #0
 8006d32:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006d34:	69fb      	ldr	r3, [r7, #28]
 8006d36:	f003 030f 	and.w	r3, r3, #15
 8006d3a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d10d      	bne.n	8006d5e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	f003 0320 	and.w	r3, r3, #32
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d008      	beq.n	8006d5e <HAL_UART_IRQHandler+0x52>
 8006d4c:	69bb      	ldr	r3, [r7, #24]
 8006d4e:	f003 0320 	and.w	r3, r3, #32
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d003      	beq.n	8006d5e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 f9cc 	bl	80070f4 <UART_Receive_IT>
      return;
 8006d5c:	e0d1      	b.n	8006f02 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	f000 80b0 	beq.w	8006ec6 <HAL_UART_IRQHandler+0x1ba>
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	f003 0301 	and.w	r3, r3, #1
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d105      	bne.n	8006d7c <HAL_UART_IRQHandler+0x70>
 8006d70:	69bb      	ldr	r3, [r7, #24]
 8006d72:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	f000 80a5 	beq.w	8006ec6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006d7c:	69fb      	ldr	r3, [r7, #28]
 8006d7e:	f003 0301 	and.w	r3, r3, #1
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d00a      	beq.n	8006d9c <HAL_UART_IRQHandler+0x90>
 8006d86:	69bb      	ldr	r3, [r7, #24]
 8006d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d005      	beq.n	8006d9c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d94:	f043 0201 	orr.w	r2, r3, #1
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006d9c:	69fb      	ldr	r3, [r7, #28]
 8006d9e:	f003 0304 	and.w	r3, r3, #4
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d00a      	beq.n	8006dbc <HAL_UART_IRQHandler+0xb0>
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	f003 0301 	and.w	r3, r3, #1
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d005      	beq.n	8006dbc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006db4:	f043 0202 	orr.w	r2, r3, #2
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	f003 0302 	and.w	r3, r3, #2
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d00a      	beq.n	8006ddc <HAL_UART_IRQHandler+0xd0>
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	f003 0301 	and.w	r3, r3, #1
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d005      	beq.n	8006ddc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dd4:	f043 0204 	orr.w	r2, r3, #4
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006ddc:	69fb      	ldr	r3, [r7, #28]
 8006dde:	f003 0308 	and.w	r3, r3, #8
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d00f      	beq.n	8006e06 <HAL_UART_IRQHandler+0xfa>
 8006de6:	69bb      	ldr	r3, [r7, #24]
 8006de8:	f003 0320 	and.w	r3, r3, #32
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d104      	bne.n	8006dfa <HAL_UART_IRQHandler+0xee>
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	f003 0301 	and.w	r3, r3, #1
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d005      	beq.n	8006e06 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dfe:	f043 0208 	orr.w	r2, r3, #8
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d078      	beq.n	8006f00 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006e0e:	69fb      	ldr	r3, [r7, #28]
 8006e10:	f003 0320 	and.w	r3, r3, #32
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d007      	beq.n	8006e28 <HAL_UART_IRQHandler+0x11c>
 8006e18:	69bb      	ldr	r3, [r7, #24]
 8006e1a:	f003 0320 	and.w	r3, r3, #32
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d002      	beq.n	8006e28 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 f966 	bl	80070f4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	695b      	ldr	r3, [r3, #20]
 8006e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	bf14      	ite	ne
 8006e36:	2301      	movne	r3, #1
 8006e38:	2300      	moveq	r3, #0
 8006e3a:	b2db      	uxtb	r3, r3
 8006e3c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e42:	f003 0308 	and.w	r3, r3, #8
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d102      	bne.n	8006e50 <HAL_UART_IRQHandler+0x144>
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d031      	beq.n	8006eb4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f000 f8b7 	bl	8006fc4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	695b      	ldr	r3, [r3, #20]
 8006e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d023      	beq.n	8006eac <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	695a      	ldr	r2, [r3, #20]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e72:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d013      	beq.n	8006ea4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e80:	4a21      	ldr	r2, [pc, #132]	; (8006f08 <HAL_UART_IRQHandler+0x1fc>)
 8006e82:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f7fc ff37 	bl	8003cfc <HAL_DMA_Abort_IT>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d016      	beq.n	8006ec2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e9a:	687a      	ldr	r2, [r7, #4]
 8006e9c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006e9e:	4610      	mov	r0, r2
 8006ea0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ea2:	e00e      	b.n	8006ec2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 f83a 	bl	8006f1e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eaa:	e00a      	b.n	8006ec2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 f836 	bl	8006f1e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eb2:	e006      	b.n	8006ec2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f000 f832 	bl	8006f1e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006ec0:	e01e      	b.n	8006f00 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ec2:	bf00      	nop
    return;
 8006ec4:	e01c      	b.n	8006f00 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006ec6:	69fb      	ldr	r3, [r7, #28]
 8006ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d008      	beq.n	8006ee2 <HAL_UART_IRQHandler+0x1d6>
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d003      	beq.n	8006ee2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 f8a3 	bl	8007026 <UART_Transmit_IT>
    return;
 8006ee0:	e00f      	b.n	8006f02 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d00a      	beq.n	8006f02 <HAL_UART_IRQHandler+0x1f6>
 8006eec:	69bb      	ldr	r3, [r7, #24]
 8006eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d005      	beq.n	8006f02 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 f8e4 	bl	80070c4 <UART_EndTransmit_IT>
    return;
 8006efc:	bf00      	nop
 8006efe:	e000      	b.n	8006f02 <HAL_UART_IRQHandler+0x1f6>
    return;
 8006f00:	bf00      	nop
  }
}
 8006f02:	3720      	adds	r7, #32
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}
 8006f08:	08006fff 	.word	0x08006fff

08006f0c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b083      	sub	sp, #12
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006f14:	bf00      	nop
 8006f16:	370c      	adds	r7, #12
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bc80      	pop	{r7}
 8006f1c:	4770      	bx	lr

08006f1e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f1e:	b480      	push	{r7}
 8006f20:	b083      	sub	sp, #12
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006f26:	bf00      	nop
 8006f28:	370c      	adds	r7, #12
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bc80      	pop	{r7}
 8006f2e:	4770      	bx	lr

08006f30 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	603b      	str	r3, [r7, #0]
 8006f3c:	4613      	mov	r3, r2
 8006f3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f40:	e02c      	b.n	8006f9c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f42:	69bb      	ldr	r3, [r7, #24]
 8006f44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f48:	d028      	beq.n	8006f9c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d007      	beq.n	8006f60 <UART_WaitOnFlagUntilTimeout+0x30>
 8006f50:	f7fc f8b6 	bl	80030c0 <HAL_GetTick>
 8006f54:	4602      	mov	r2, r0
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	1ad3      	subs	r3, r2, r3
 8006f5a:	69ba      	ldr	r2, [r7, #24]
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d21d      	bcs.n	8006f9c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	68da      	ldr	r2, [r3, #12]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006f6e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	695a      	ldr	r2, [r3, #20]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f022 0201 	bic.w	r2, r2, #1
 8006f7e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2220      	movs	r2, #32
 8006f84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2220      	movs	r2, #32
 8006f8c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2200      	movs	r2, #0
 8006f94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006f98:	2303      	movs	r3, #3
 8006f9a:	e00f      	b.n	8006fbc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	4013      	ands	r3, r2
 8006fa6:	68ba      	ldr	r2, [r7, #8]
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	bf0c      	ite	eq
 8006fac:	2301      	moveq	r3, #1
 8006fae:	2300      	movne	r3, #0
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	79fb      	ldrb	r3, [r7, #7]
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d0c3      	beq.n	8006f42 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006fba:	2300      	movs	r3, #0
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3710      	adds	r7, #16
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b083      	sub	sp, #12
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	68da      	ldr	r2, [r3, #12]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006fda:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	695a      	ldr	r2, [r3, #20]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f022 0201 	bic.w	r2, r2, #1
 8006fea:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2220      	movs	r2, #32
 8006ff0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006ff4:	bf00      	nop
 8006ff6:	370c      	adds	r7, #12
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bc80      	pop	{r7}
 8006ffc:	4770      	bx	lr

08006ffe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ffe:	b580      	push	{r7, lr}
 8007000:	b084      	sub	sp, #16
 8007002:	af00      	add	r7, sp, #0
 8007004:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800700a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2200      	movs	r2, #0
 8007010:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2200      	movs	r2, #0
 8007016:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007018:	68f8      	ldr	r0, [r7, #12]
 800701a:	f7ff ff80 	bl	8006f1e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800701e:	bf00      	nop
 8007020:	3710      	adds	r7, #16
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}

08007026 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007026:	b480      	push	{r7}
 8007028:	b085      	sub	sp, #20
 800702a:	af00      	add	r7, sp, #0
 800702c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007034:	b2db      	uxtb	r3, r3
 8007036:	2b21      	cmp	r3, #33	; 0x21
 8007038:	d13e      	bne.n	80070b8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007042:	d114      	bne.n	800706e <UART_Transmit_IT+0x48>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	691b      	ldr	r3, [r3, #16]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d110      	bne.n	800706e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6a1b      	ldr	r3, [r3, #32]
 8007050:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	881b      	ldrh	r3, [r3, #0]
 8007056:	461a      	mov	r2, r3
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007060:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6a1b      	ldr	r3, [r3, #32]
 8007066:	1c9a      	adds	r2, r3, #2
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	621a      	str	r2, [r3, #32]
 800706c:	e008      	b.n	8007080 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6a1b      	ldr	r3, [r3, #32]
 8007072:	1c59      	adds	r1, r3, #1
 8007074:	687a      	ldr	r2, [r7, #4]
 8007076:	6211      	str	r1, [r2, #32]
 8007078:	781a      	ldrb	r2, [r3, #0]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007084:	b29b      	uxth	r3, r3
 8007086:	3b01      	subs	r3, #1
 8007088:	b29b      	uxth	r3, r3
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	4619      	mov	r1, r3
 800708e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007090:	2b00      	cmp	r3, #0
 8007092:	d10f      	bne.n	80070b4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	68da      	ldr	r2, [r3, #12]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80070a2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	68da      	ldr	r2, [r3, #12]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070b2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80070b4:	2300      	movs	r3, #0
 80070b6:	e000      	b.n	80070ba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80070b8:	2302      	movs	r3, #2
  }
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3714      	adds	r7, #20
 80070be:	46bd      	mov	sp, r7
 80070c0:	bc80      	pop	{r7}
 80070c2:	4770      	bx	lr

080070c4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b082      	sub	sp, #8
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	68da      	ldr	r2, [r3, #12]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070da:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2220      	movs	r2, #32
 80070e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f7ff ff11 	bl	8006f0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80070ea:	2300      	movs	r3, #0
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3708      	adds	r7, #8
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b084      	sub	sp, #16
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007102:	b2db      	uxtb	r3, r3
 8007104:	2b22      	cmp	r3, #34	; 0x22
 8007106:	d170      	bne.n	80071ea <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007110:	d117      	bne.n	8007142 <UART_Receive_IT+0x4e>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d113      	bne.n	8007142 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 800711a:	2300      	movs	r3, #0
 800711c:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007122:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	b29b      	uxth	r3, r3
 800712c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007130:	b29a      	uxth	r2, r3
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800713a:	1c9a      	adds	r2, r3, #2
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	629a      	str	r2, [r3, #40]	; 0x28
 8007140:	e026      	b.n	8007190 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007146:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8007148:	2300      	movs	r3, #0
 800714a:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007154:	d007      	beq.n	8007166 <UART_Receive_IT+0x72>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d10a      	bne.n	8007174 <UART_Receive_IT+0x80>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	691b      	ldr	r3, [r3, #16]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d106      	bne.n	8007174 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	b2da      	uxtb	r2, r3
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	701a      	strb	r2, [r3, #0]
 8007172:	e008      	b.n	8007186 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	b2db      	uxtb	r3, r3
 800717c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007180:	b2da      	uxtb	r2, r3
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800718a:	1c5a      	adds	r2, r3, #1
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007194:	b29b      	uxth	r3, r3
 8007196:	3b01      	subs	r3, #1
 8007198:	b29b      	uxth	r3, r3
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	4619      	mov	r1, r3
 800719e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d120      	bne.n	80071e6 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	68da      	ldr	r2, [r3, #12]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f022 0220 	bic.w	r2, r2, #32
 80071b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	68da      	ldr	r2, [r3, #12]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80071c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	695a      	ldr	r2, [r3, #20]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f022 0201 	bic.w	r2, r2, #1
 80071d2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2220      	movs	r2, #32
 80071d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f7fb f9ab 	bl	8002538 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80071e2:	2300      	movs	r3, #0
 80071e4:	e002      	b.n	80071ec <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 80071e6:	2300      	movs	r3, #0
 80071e8:	e000      	b.n	80071ec <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 80071ea:	2302      	movs	r3, #2
  }
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3710      	adds	r7, #16
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	691b      	ldr	r3, [r3, #16]
 8007202:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	68da      	ldr	r2, [r3, #12]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	430a      	orrs	r2, r1
 8007210:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	689a      	ldr	r2, [r3, #8]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	691b      	ldr	r3, [r3, #16]
 800721a:	431a      	orrs	r2, r3
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	695b      	ldr	r3, [r3, #20]
 8007220:	4313      	orrs	r3, r2
 8007222:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	68db      	ldr	r3, [r3, #12]
 800722a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800722e:	f023 030c 	bic.w	r3, r3, #12
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	6812      	ldr	r2, [r2, #0]
 8007236:	68b9      	ldr	r1, [r7, #8]
 8007238:	430b      	orrs	r3, r1
 800723a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	695b      	ldr	r3, [r3, #20]
 8007242:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	699a      	ldr	r2, [r3, #24]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	430a      	orrs	r2, r1
 8007250:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a2c      	ldr	r2, [pc, #176]	; (8007308 <UART_SetConfig+0x114>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d103      	bne.n	8007264 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800725c:	f7fe ffce 	bl	80061fc <HAL_RCC_GetPCLK2Freq>
 8007260:	60f8      	str	r0, [r7, #12]
 8007262:	e002      	b.n	800726a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007264:	f7fe ffb6 	bl	80061d4 <HAL_RCC_GetPCLK1Freq>
 8007268:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800726a:	68fa      	ldr	r2, [r7, #12]
 800726c:	4613      	mov	r3, r2
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	4413      	add	r3, r2
 8007272:	009a      	lsls	r2, r3, #2
 8007274:	441a      	add	r2, r3
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	009b      	lsls	r3, r3, #2
 800727c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007280:	4a22      	ldr	r2, [pc, #136]	; (800730c <UART_SetConfig+0x118>)
 8007282:	fba2 2303 	umull	r2, r3, r2, r3
 8007286:	095b      	lsrs	r3, r3, #5
 8007288:	0119      	lsls	r1, r3, #4
 800728a:	68fa      	ldr	r2, [r7, #12]
 800728c:	4613      	mov	r3, r2
 800728e:	009b      	lsls	r3, r3, #2
 8007290:	4413      	add	r3, r2
 8007292:	009a      	lsls	r2, r3, #2
 8007294:	441a      	add	r2, r3
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	009b      	lsls	r3, r3, #2
 800729c:	fbb2 f2f3 	udiv	r2, r2, r3
 80072a0:	4b1a      	ldr	r3, [pc, #104]	; (800730c <UART_SetConfig+0x118>)
 80072a2:	fba3 0302 	umull	r0, r3, r3, r2
 80072a6:	095b      	lsrs	r3, r3, #5
 80072a8:	2064      	movs	r0, #100	; 0x64
 80072aa:	fb00 f303 	mul.w	r3, r0, r3
 80072ae:	1ad3      	subs	r3, r2, r3
 80072b0:	011b      	lsls	r3, r3, #4
 80072b2:	3332      	adds	r3, #50	; 0x32
 80072b4:	4a15      	ldr	r2, [pc, #84]	; (800730c <UART_SetConfig+0x118>)
 80072b6:	fba2 2303 	umull	r2, r3, r2, r3
 80072ba:	095b      	lsrs	r3, r3, #5
 80072bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80072c0:	4419      	add	r1, r3
 80072c2:	68fa      	ldr	r2, [r7, #12]
 80072c4:	4613      	mov	r3, r2
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	4413      	add	r3, r2
 80072ca:	009a      	lsls	r2, r3, #2
 80072cc:	441a      	add	r2, r3
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	009b      	lsls	r3, r3, #2
 80072d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80072d8:	4b0c      	ldr	r3, [pc, #48]	; (800730c <UART_SetConfig+0x118>)
 80072da:	fba3 0302 	umull	r0, r3, r3, r2
 80072de:	095b      	lsrs	r3, r3, #5
 80072e0:	2064      	movs	r0, #100	; 0x64
 80072e2:	fb00 f303 	mul.w	r3, r0, r3
 80072e6:	1ad3      	subs	r3, r2, r3
 80072e8:	011b      	lsls	r3, r3, #4
 80072ea:	3332      	adds	r3, #50	; 0x32
 80072ec:	4a07      	ldr	r2, [pc, #28]	; (800730c <UART_SetConfig+0x118>)
 80072ee:	fba2 2303 	umull	r2, r3, r2, r3
 80072f2:	095b      	lsrs	r3, r3, #5
 80072f4:	f003 020f 	and.w	r2, r3, #15
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	440a      	add	r2, r1
 80072fe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007300:	bf00      	nop
 8007302:	3710      	adds	r7, #16
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}
 8007308:	40013800 	.word	0x40013800
 800730c:	51eb851f 	.word	0x51eb851f

08007310 <__errno>:
 8007310:	4b01      	ldr	r3, [pc, #4]	; (8007318 <__errno+0x8>)
 8007312:	6818      	ldr	r0, [r3, #0]
 8007314:	4770      	bx	lr
 8007316:	bf00      	nop
 8007318:	20000010 	.word	0x20000010

0800731c <__libc_init_array>:
 800731c:	b570      	push	{r4, r5, r6, lr}
 800731e:	2500      	movs	r5, #0
 8007320:	4e0c      	ldr	r6, [pc, #48]	; (8007354 <__libc_init_array+0x38>)
 8007322:	4c0d      	ldr	r4, [pc, #52]	; (8007358 <__libc_init_array+0x3c>)
 8007324:	1ba4      	subs	r4, r4, r6
 8007326:	10a4      	asrs	r4, r4, #2
 8007328:	42a5      	cmp	r5, r4
 800732a:	d109      	bne.n	8007340 <__libc_init_array+0x24>
 800732c:	f003 f8c2 	bl	800a4b4 <_init>
 8007330:	2500      	movs	r5, #0
 8007332:	4e0a      	ldr	r6, [pc, #40]	; (800735c <__libc_init_array+0x40>)
 8007334:	4c0a      	ldr	r4, [pc, #40]	; (8007360 <__libc_init_array+0x44>)
 8007336:	1ba4      	subs	r4, r4, r6
 8007338:	10a4      	asrs	r4, r4, #2
 800733a:	42a5      	cmp	r5, r4
 800733c:	d105      	bne.n	800734a <__libc_init_array+0x2e>
 800733e:	bd70      	pop	{r4, r5, r6, pc}
 8007340:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007344:	4798      	blx	r3
 8007346:	3501      	adds	r5, #1
 8007348:	e7ee      	b.n	8007328 <__libc_init_array+0xc>
 800734a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800734e:	4798      	blx	r3
 8007350:	3501      	adds	r5, #1
 8007352:	e7f2      	b.n	800733a <__libc_init_array+0x1e>
 8007354:	0800a8f4 	.word	0x0800a8f4
 8007358:	0800a8f4 	.word	0x0800a8f4
 800735c:	0800a8f4 	.word	0x0800a8f4
 8007360:	0800a8f8 	.word	0x0800a8f8

08007364 <memset>:
 8007364:	4603      	mov	r3, r0
 8007366:	4402      	add	r2, r0
 8007368:	4293      	cmp	r3, r2
 800736a:	d100      	bne.n	800736e <memset+0xa>
 800736c:	4770      	bx	lr
 800736e:	f803 1b01 	strb.w	r1, [r3], #1
 8007372:	e7f9      	b.n	8007368 <memset+0x4>

08007374 <_scanf_float>:
 8007374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007378:	469a      	mov	sl, r3
 800737a:	688b      	ldr	r3, [r1, #8]
 800737c:	4616      	mov	r6, r2
 800737e:	1e5a      	subs	r2, r3, #1
 8007380:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007384:	bf88      	it	hi
 8007386:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800738a:	b087      	sub	sp, #28
 800738c:	bf85      	ittet	hi
 800738e:	189b      	addhi	r3, r3, r2
 8007390:	9301      	strhi	r3, [sp, #4]
 8007392:	2300      	movls	r3, #0
 8007394:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007398:	4688      	mov	r8, r1
 800739a:	f04f 0b00 	mov.w	fp, #0
 800739e:	bf8c      	ite	hi
 80073a0:	608b      	strhi	r3, [r1, #8]
 80073a2:	9301      	strls	r3, [sp, #4]
 80073a4:	680b      	ldr	r3, [r1, #0]
 80073a6:	4607      	mov	r7, r0
 80073a8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80073ac:	f848 3b1c 	str.w	r3, [r8], #28
 80073b0:	460c      	mov	r4, r1
 80073b2:	4645      	mov	r5, r8
 80073b4:	465a      	mov	r2, fp
 80073b6:	46d9      	mov	r9, fp
 80073b8:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80073bc:	f8cd b008 	str.w	fp, [sp, #8]
 80073c0:	68a1      	ldr	r1, [r4, #8]
 80073c2:	b181      	cbz	r1, 80073e6 <_scanf_float+0x72>
 80073c4:	6833      	ldr	r3, [r6, #0]
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	2b49      	cmp	r3, #73	; 0x49
 80073ca:	d071      	beq.n	80074b0 <_scanf_float+0x13c>
 80073cc:	d84d      	bhi.n	800746a <_scanf_float+0xf6>
 80073ce:	2b39      	cmp	r3, #57	; 0x39
 80073d0:	d840      	bhi.n	8007454 <_scanf_float+0xe0>
 80073d2:	2b31      	cmp	r3, #49	; 0x31
 80073d4:	f080 8088 	bcs.w	80074e8 <_scanf_float+0x174>
 80073d8:	2b2d      	cmp	r3, #45	; 0x2d
 80073da:	f000 8090 	beq.w	80074fe <_scanf_float+0x18a>
 80073de:	d815      	bhi.n	800740c <_scanf_float+0x98>
 80073e0:	2b2b      	cmp	r3, #43	; 0x2b
 80073e2:	f000 808c 	beq.w	80074fe <_scanf_float+0x18a>
 80073e6:	f1b9 0f00 	cmp.w	r9, #0
 80073ea:	d003      	beq.n	80073f4 <_scanf_float+0x80>
 80073ec:	6823      	ldr	r3, [r4, #0]
 80073ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073f2:	6023      	str	r3, [r4, #0]
 80073f4:	3a01      	subs	r2, #1
 80073f6:	2a01      	cmp	r2, #1
 80073f8:	f200 80ea 	bhi.w	80075d0 <_scanf_float+0x25c>
 80073fc:	4545      	cmp	r5, r8
 80073fe:	f200 80dc 	bhi.w	80075ba <_scanf_float+0x246>
 8007402:	2601      	movs	r6, #1
 8007404:	4630      	mov	r0, r6
 8007406:	b007      	add	sp, #28
 8007408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800740c:	2b2e      	cmp	r3, #46	; 0x2e
 800740e:	f000 809f 	beq.w	8007550 <_scanf_float+0x1dc>
 8007412:	2b30      	cmp	r3, #48	; 0x30
 8007414:	d1e7      	bne.n	80073e6 <_scanf_float+0x72>
 8007416:	6820      	ldr	r0, [r4, #0]
 8007418:	f410 7f80 	tst.w	r0, #256	; 0x100
 800741c:	d064      	beq.n	80074e8 <_scanf_float+0x174>
 800741e:	9b01      	ldr	r3, [sp, #4]
 8007420:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8007424:	6020      	str	r0, [r4, #0]
 8007426:	f109 0901 	add.w	r9, r9, #1
 800742a:	b11b      	cbz	r3, 8007434 <_scanf_float+0xc0>
 800742c:	3b01      	subs	r3, #1
 800742e:	3101      	adds	r1, #1
 8007430:	9301      	str	r3, [sp, #4]
 8007432:	60a1      	str	r1, [r4, #8]
 8007434:	68a3      	ldr	r3, [r4, #8]
 8007436:	3b01      	subs	r3, #1
 8007438:	60a3      	str	r3, [r4, #8]
 800743a:	6923      	ldr	r3, [r4, #16]
 800743c:	3301      	adds	r3, #1
 800743e:	6123      	str	r3, [r4, #16]
 8007440:	6873      	ldr	r3, [r6, #4]
 8007442:	3b01      	subs	r3, #1
 8007444:	2b00      	cmp	r3, #0
 8007446:	6073      	str	r3, [r6, #4]
 8007448:	f340 80ac 	ble.w	80075a4 <_scanf_float+0x230>
 800744c:	6833      	ldr	r3, [r6, #0]
 800744e:	3301      	adds	r3, #1
 8007450:	6033      	str	r3, [r6, #0]
 8007452:	e7b5      	b.n	80073c0 <_scanf_float+0x4c>
 8007454:	2b45      	cmp	r3, #69	; 0x45
 8007456:	f000 8085 	beq.w	8007564 <_scanf_float+0x1f0>
 800745a:	2b46      	cmp	r3, #70	; 0x46
 800745c:	d06a      	beq.n	8007534 <_scanf_float+0x1c0>
 800745e:	2b41      	cmp	r3, #65	; 0x41
 8007460:	d1c1      	bne.n	80073e6 <_scanf_float+0x72>
 8007462:	2a01      	cmp	r2, #1
 8007464:	d1bf      	bne.n	80073e6 <_scanf_float+0x72>
 8007466:	2202      	movs	r2, #2
 8007468:	e046      	b.n	80074f8 <_scanf_float+0x184>
 800746a:	2b65      	cmp	r3, #101	; 0x65
 800746c:	d07a      	beq.n	8007564 <_scanf_float+0x1f0>
 800746e:	d818      	bhi.n	80074a2 <_scanf_float+0x12e>
 8007470:	2b54      	cmp	r3, #84	; 0x54
 8007472:	d066      	beq.n	8007542 <_scanf_float+0x1ce>
 8007474:	d811      	bhi.n	800749a <_scanf_float+0x126>
 8007476:	2b4e      	cmp	r3, #78	; 0x4e
 8007478:	d1b5      	bne.n	80073e6 <_scanf_float+0x72>
 800747a:	2a00      	cmp	r2, #0
 800747c:	d146      	bne.n	800750c <_scanf_float+0x198>
 800747e:	f1b9 0f00 	cmp.w	r9, #0
 8007482:	d145      	bne.n	8007510 <_scanf_float+0x19c>
 8007484:	6821      	ldr	r1, [r4, #0]
 8007486:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800748a:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800748e:	d13f      	bne.n	8007510 <_scanf_float+0x19c>
 8007490:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8007494:	6021      	str	r1, [r4, #0]
 8007496:	2201      	movs	r2, #1
 8007498:	e02e      	b.n	80074f8 <_scanf_float+0x184>
 800749a:	2b59      	cmp	r3, #89	; 0x59
 800749c:	d01e      	beq.n	80074dc <_scanf_float+0x168>
 800749e:	2b61      	cmp	r3, #97	; 0x61
 80074a0:	e7de      	b.n	8007460 <_scanf_float+0xec>
 80074a2:	2b6e      	cmp	r3, #110	; 0x6e
 80074a4:	d0e9      	beq.n	800747a <_scanf_float+0x106>
 80074a6:	d815      	bhi.n	80074d4 <_scanf_float+0x160>
 80074a8:	2b66      	cmp	r3, #102	; 0x66
 80074aa:	d043      	beq.n	8007534 <_scanf_float+0x1c0>
 80074ac:	2b69      	cmp	r3, #105	; 0x69
 80074ae:	d19a      	bne.n	80073e6 <_scanf_float+0x72>
 80074b0:	f1bb 0f00 	cmp.w	fp, #0
 80074b4:	d138      	bne.n	8007528 <_scanf_float+0x1b4>
 80074b6:	f1b9 0f00 	cmp.w	r9, #0
 80074ba:	d197      	bne.n	80073ec <_scanf_float+0x78>
 80074bc:	6821      	ldr	r1, [r4, #0]
 80074be:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80074c2:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80074c6:	d195      	bne.n	80073f4 <_scanf_float+0x80>
 80074c8:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80074cc:	6021      	str	r1, [r4, #0]
 80074ce:	f04f 0b01 	mov.w	fp, #1
 80074d2:	e011      	b.n	80074f8 <_scanf_float+0x184>
 80074d4:	2b74      	cmp	r3, #116	; 0x74
 80074d6:	d034      	beq.n	8007542 <_scanf_float+0x1ce>
 80074d8:	2b79      	cmp	r3, #121	; 0x79
 80074da:	d184      	bne.n	80073e6 <_scanf_float+0x72>
 80074dc:	f1bb 0f07 	cmp.w	fp, #7
 80074e0:	d181      	bne.n	80073e6 <_scanf_float+0x72>
 80074e2:	f04f 0b08 	mov.w	fp, #8
 80074e6:	e007      	b.n	80074f8 <_scanf_float+0x184>
 80074e8:	eb12 0f0b 	cmn.w	r2, fp
 80074ec:	f47f af7b 	bne.w	80073e6 <_scanf_float+0x72>
 80074f0:	6821      	ldr	r1, [r4, #0]
 80074f2:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80074f6:	6021      	str	r1, [r4, #0]
 80074f8:	702b      	strb	r3, [r5, #0]
 80074fa:	3501      	adds	r5, #1
 80074fc:	e79a      	b.n	8007434 <_scanf_float+0xc0>
 80074fe:	6821      	ldr	r1, [r4, #0]
 8007500:	0608      	lsls	r0, r1, #24
 8007502:	f57f af70 	bpl.w	80073e6 <_scanf_float+0x72>
 8007506:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800750a:	e7f4      	b.n	80074f6 <_scanf_float+0x182>
 800750c:	2a02      	cmp	r2, #2
 800750e:	d047      	beq.n	80075a0 <_scanf_float+0x22c>
 8007510:	f1bb 0f01 	cmp.w	fp, #1
 8007514:	d003      	beq.n	800751e <_scanf_float+0x1aa>
 8007516:	f1bb 0f04 	cmp.w	fp, #4
 800751a:	f47f af64 	bne.w	80073e6 <_scanf_float+0x72>
 800751e:	f10b 0b01 	add.w	fp, fp, #1
 8007522:	fa5f fb8b 	uxtb.w	fp, fp
 8007526:	e7e7      	b.n	80074f8 <_scanf_float+0x184>
 8007528:	f1bb 0f03 	cmp.w	fp, #3
 800752c:	d0f7      	beq.n	800751e <_scanf_float+0x1aa>
 800752e:	f1bb 0f05 	cmp.w	fp, #5
 8007532:	e7f2      	b.n	800751a <_scanf_float+0x1a6>
 8007534:	f1bb 0f02 	cmp.w	fp, #2
 8007538:	f47f af55 	bne.w	80073e6 <_scanf_float+0x72>
 800753c:	f04f 0b03 	mov.w	fp, #3
 8007540:	e7da      	b.n	80074f8 <_scanf_float+0x184>
 8007542:	f1bb 0f06 	cmp.w	fp, #6
 8007546:	f47f af4e 	bne.w	80073e6 <_scanf_float+0x72>
 800754a:	f04f 0b07 	mov.w	fp, #7
 800754e:	e7d3      	b.n	80074f8 <_scanf_float+0x184>
 8007550:	6821      	ldr	r1, [r4, #0]
 8007552:	0588      	lsls	r0, r1, #22
 8007554:	f57f af47 	bpl.w	80073e6 <_scanf_float+0x72>
 8007558:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800755c:	6021      	str	r1, [r4, #0]
 800755e:	f8cd 9008 	str.w	r9, [sp, #8]
 8007562:	e7c9      	b.n	80074f8 <_scanf_float+0x184>
 8007564:	6821      	ldr	r1, [r4, #0]
 8007566:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800756a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800756e:	d006      	beq.n	800757e <_scanf_float+0x20a>
 8007570:	0548      	lsls	r0, r1, #21
 8007572:	f57f af38 	bpl.w	80073e6 <_scanf_float+0x72>
 8007576:	f1b9 0f00 	cmp.w	r9, #0
 800757a:	f43f af3b 	beq.w	80073f4 <_scanf_float+0x80>
 800757e:	0588      	lsls	r0, r1, #22
 8007580:	bf58      	it	pl
 8007582:	9802      	ldrpl	r0, [sp, #8]
 8007584:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8007588:	bf58      	it	pl
 800758a:	eba9 0000 	subpl.w	r0, r9, r0
 800758e:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8007592:	bf58      	it	pl
 8007594:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8007598:	6021      	str	r1, [r4, #0]
 800759a:	f04f 0900 	mov.w	r9, #0
 800759e:	e7ab      	b.n	80074f8 <_scanf_float+0x184>
 80075a0:	2203      	movs	r2, #3
 80075a2:	e7a9      	b.n	80074f8 <_scanf_float+0x184>
 80075a4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80075a8:	4631      	mov	r1, r6
 80075aa:	4638      	mov	r0, r7
 80075ac:	9205      	str	r2, [sp, #20]
 80075ae:	4798      	blx	r3
 80075b0:	9a05      	ldr	r2, [sp, #20]
 80075b2:	2800      	cmp	r0, #0
 80075b4:	f43f af04 	beq.w	80073c0 <_scanf_float+0x4c>
 80075b8:	e715      	b.n	80073e6 <_scanf_float+0x72>
 80075ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80075be:	4632      	mov	r2, r6
 80075c0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80075c4:	4638      	mov	r0, r7
 80075c6:	4798      	blx	r3
 80075c8:	6923      	ldr	r3, [r4, #16]
 80075ca:	3b01      	subs	r3, #1
 80075cc:	6123      	str	r3, [r4, #16]
 80075ce:	e715      	b.n	80073fc <_scanf_float+0x88>
 80075d0:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 80075d4:	2b06      	cmp	r3, #6
 80075d6:	d80a      	bhi.n	80075ee <_scanf_float+0x27a>
 80075d8:	f1bb 0f02 	cmp.w	fp, #2
 80075dc:	d967      	bls.n	80076ae <_scanf_float+0x33a>
 80075de:	f1ab 0b03 	sub.w	fp, fp, #3
 80075e2:	fa5f fb8b 	uxtb.w	fp, fp
 80075e6:	eba5 0b0b 	sub.w	fp, r5, fp
 80075ea:	455d      	cmp	r5, fp
 80075ec:	d14a      	bne.n	8007684 <_scanf_float+0x310>
 80075ee:	6823      	ldr	r3, [r4, #0]
 80075f0:	05da      	lsls	r2, r3, #23
 80075f2:	d51f      	bpl.n	8007634 <_scanf_float+0x2c0>
 80075f4:	055b      	lsls	r3, r3, #21
 80075f6:	d467      	bmi.n	80076c8 <_scanf_float+0x354>
 80075f8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80075fc:	6923      	ldr	r3, [r4, #16]
 80075fe:	2965      	cmp	r1, #101	; 0x65
 8007600:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8007604:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 8007608:	6123      	str	r3, [r4, #16]
 800760a:	d00d      	beq.n	8007628 <_scanf_float+0x2b4>
 800760c:	2945      	cmp	r1, #69	; 0x45
 800760e:	d00b      	beq.n	8007628 <_scanf_float+0x2b4>
 8007610:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007614:	4632      	mov	r2, r6
 8007616:	4638      	mov	r0, r7
 8007618:	4798      	blx	r3
 800761a:	6923      	ldr	r3, [r4, #16]
 800761c:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8007620:	3b01      	subs	r3, #1
 8007622:	f1a5 0b02 	sub.w	fp, r5, #2
 8007626:	6123      	str	r3, [r4, #16]
 8007628:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800762c:	4632      	mov	r2, r6
 800762e:	4638      	mov	r0, r7
 8007630:	4798      	blx	r3
 8007632:	465d      	mov	r5, fp
 8007634:	6826      	ldr	r6, [r4, #0]
 8007636:	f016 0610 	ands.w	r6, r6, #16
 800763a:	d176      	bne.n	800772a <_scanf_float+0x3b6>
 800763c:	702e      	strb	r6, [r5, #0]
 800763e:	6823      	ldr	r3, [r4, #0]
 8007640:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007644:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007648:	d141      	bne.n	80076ce <_scanf_float+0x35a>
 800764a:	9b02      	ldr	r3, [sp, #8]
 800764c:	eba9 0303 	sub.w	r3, r9, r3
 8007650:	425a      	negs	r2, r3
 8007652:	2b00      	cmp	r3, #0
 8007654:	d148      	bne.n	80076e8 <_scanf_float+0x374>
 8007656:	4641      	mov	r1, r8
 8007658:	2200      	movs	r2, #0
 800765a:	4638      	mov	r0, r7
 800765c:	f000 fef0 	bl	8008440 <_strtod_r>
 8007660:	6825      	ldr	r5, [r4, #0]
 8007662:	4680      	mov	r8, r0
 8007664:	f015 0f02 	tst.w	r5, #2
 8007668:	4689      	mov	r9, r1
 800766a:	f8da 3000 	ldr.w	r3, [sl]
 800766e:	d046      	beq.n	80076fe <_scanf_float+0x38a>
 8007670:	1d1a      	adds	r2, r3, #4
 8007672:	f8ca 2000 	str.w	r2, [sl]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	e9c3 8900 	strd	r8, r9, [r3]
 800767c:	68e3      	ldr	r3, [r4, #12]
 800767e:	3301      	adds	r3, #1
 8007680:	60e3      	str	r3, [r4, #12]
 8007682:	e6bf      	b.n	8007404 <_scanf_float+0x90>
 8007684:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007688:	4632      	mov	r2, r6
 800768a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800768e:	4638      	mov	r0, r7
 8007690:	4798      	blx	r3
 8007692:	6923      	ldr	r3, [r4, #16]
 8007694:	3b01      	subs	r3, #1
 8007696:	6123      	str	r3, [r4, #16]
 8007698:	e7a7      	b.n	80075ea <_scanf_float+0x276>
 800769a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800769e:	4632      	mov	r2, r6
 80076a0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80076a4:	4638      	mov	r0, r7
 80076a6:	4798      	blx	r3
 80076a8:	6923      	ldr	r3, [r4, #16]
 80076aa:	3b01      	subs	r3, #1
 80076ac:	6123      	str	r3, [r4, #16]
 80076ae:	4545      	cmp	r5, r8
 80076b0:	d8f3      	bhi.n	800769a <_scanf_float+0x326>
 80076b2:	e6a6      	b.n	8007402 <_scanf_float+0x8e>
 80076b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80076b8:	4632      	mov	r2, r6
 80076ba:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80076be:	4638      	mov	r0, r7
 80076c0:	4798      	blx	r3
 80076c2:	6923      	ldr	r3, [r4, #16]
 80076c4:	3b01      	subs	r3, #1
 80076c6:	6123      	str	r3, [r4, #16]
 80076c8:	4545      	cmp	r5, r8
 80076ca:	d8f3      	bhi.n	80076b4 <_scanf_float+0x340>
 80076cc:	e699      	b.n	8007402 <_scanf_float+0x8e>
 80076ce:	9b03      	ldr	r3, [sp, #12]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d0c0      	beq.n	8007656 <_scanf_float+0x2e2>
 80076d4:	9904      	ldr	r1, [sp, #16]
 80076d6:	230a      	movs	r3, #10
 80076d8:	4632      	mov	r2, r6
 80076da:	3101      	adds	r1, #1
 80076dc:	4638      	mov	r0, r7
 80076de:	f000 ff3b 	bl	8008558 <_strtol_r>
 80076e2:	9b03      	ldr	r3, [sp, #12]
 80076e4:	9d04      	ldr	r5, [sp, #16]
 80076e6:	1ac2      	subs	r2, r0, r3
 80076e8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80076ec:	429d      	cmp	r5, r3
 80076ee:	bf28      	it	cs
 80076f0:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80076f4:	490e      	ldr	r1, [pc, #56]	; (8007730 <_scanf_float+0x3bc>)
 80076f6:	4628      	mov	r0, r5
 80076f8:	f000 f820 	bl	800773c <siprintf>
 80076fc:	e7ab      	b.n	8007656 <_scanf_float+0x2e2>
 80076fe:	1d1f      	adds	r7, r3, #4
 8007700:	f015 0504 	ands.w	r5, r5, #4
 8007704:	f8ca 7000 	str.w	r7, [sl]
 8007708:	d1b5      	bne.n	8007676 <_scanf_float+0x302>
 800770a:	681f      	ldr	r7, [r3, #0]
 800770c:	4602      	mov	r2, r0
 800770e:	460b      	mov	r3, r1
 8007710:	f7f9 f97c 	bl	8000a0c <__aeabi_dcmpun>
 8007714:	b120      	cbz	r0, 8007720 <_scanf_float+0x3ac>
 8007716:	4628      	mov	r0, r5
 8007718:	f000 f80c 	bl	8007734 <nanf>
 800771c:	6038      	str	r0, [r7, #0]
 800771e:	e7ad      	b.n	800767c <_scanf_float+0x308>
 8007720:	4640      	mov	r0, r8
 8007722:	4649      	mov	r1, r9
 8007724:	f7f9 f9d0 	bl	8000ac8 <__aeabi_d2f>
 8007728:	e7f8      	b.n	800771c <_scanf_float+0x3a8>
 800772a:	2600      	movs	r6, #0
 800772c:	e66a      	b.n	8007404 <_scanf_float+0x90>
 800772e:	bf00      	nop
 8007730:	0800a5d0 	.word	0x0800a5d0

08007734 <nanf>:
 8007734:	4800      	ldr	r0, [pc, #0]	; (8007738 <nanf+0x4>)
 8007736:	4770      	bx	lr
 8007738:	7fc00000 	.word	0x7fc00000

0800773c <siprintf>:
 800773c:	b40e      	push	{r1, r2, r3}
 800773e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007742:	b500      	push	{lr}
 8007744:	b09c      	sub	sp, #112	; 0x70
 8007746:	ab1d      	add	r3, sp, #116	; 0x74
 8007748:	9002      	str	r0, [sp, #8]
 800774a:	9006      	str	r0, [sp, #24]
 800774c:	9107      	str	r1, [sp, #28]
 800774e:	9104      	str	r1, [sp, #16]
 8007750:	4808      	ldr	r0, [pc, #32]	; (8007774 <siprintf+0x38>)
 8007752:	4909      	ldr	r1, [pc, #36]	; (8007778 <siprintf+0x3c>)
 8007754:	f853 2b04 	ldr.w	r2, [r3], #4
 8007758:	9105      	str	r1, [sp, #20]
 800775a:	6800      	ldr	r0, [r0, #0]
 800775c:	a902      	add	r1, sp, #8
 800775e:	9301      	str	r3, [sp, #4]
 8007760:	f001 ff20 	bl	80095a4 <_svfiprintf_r>
 8007764:	2200      	movs	r2, #0
 8007766:	9b02      	ldr	r3, [sp, #8]
 8007768:	701a      	strb	r2, [r3, #0]
 800776a:	b01c      	add	sp, #112	; 0x70
 800776c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007770:	b003      	add	sp, #12
 8007772:	4770      	bx	lr
 8007774:	20000010 	.word	0x20000010
 8007778:	ffff0208 	.word	0xffff0208

0800777c <siscanf>:
 800777c:	b40e      	push	{r1, r2, r3}
 800777e:	f44f 7201 	mov.w	r2, #516	; 0x204
 8007782:	b530      	push	{r4, r5, lr}
 8007784:	b09c      	sub	sp, #112	; 0x70
 8007786:	ac1f      	add	r4, sp, #124	; 0x7c
 8007788:	f854 5b04 	ldr.w	r5, [r4], #4
 800778c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8007790:	9002      	str	r0, [sp, #8]
 8007792:	9006      	str	r0, [sp, #24]
 8007794:	f7f8 fcdc 	bl	8000150 <strlen>
 8007798:	4b0b      	ldr	r3, [pc, #44]	; (80077c8 <siscanf+0x4c>)
 800779a:	9003      	str	r0, [sp, #12]
 800779c:	930b      	str	r3, [sp, #44]	; 0x2c
 800779e:	2300      	movs	r3, #0
 80077a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80077a2:	9314      	str	r3, [sp, #80]	; 0x50
 80077a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80077a8:	9007      	str	r0, [sp, #28]
 80077aa:	4808      	ldr	r0, [pc, #32]	; (80077cc <siscanf+0x50>)
 80077ac:	f8ad 3016 	strh.w	r3, [sp, #22]
 80077b0:	462a      	mov	r2, r5
 80077b2:	4623      	mov	r3, r4
 80077b4:	a902      	add	r1, sp, #8
 80077b6:	6800      	ldr	r0, [r0, #0]
 80077b8:	9401      	str	r4, [sp, #4]
 80077ba:	f002 f845 	bl	8009848 <__ssvfiscanf_r>
 80077be:	b01c      	add	sp, #112	; 0x70
 80077c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80077c4:	b003      	add	sp, #12
 80077c6:	4770      	bx	lr
 80077c8:	080077d1 	.word	0x080077d1
 80077cc:	20000010 	.word	0x20000010

080077d0 <__seofread>:
 80077d0:	2000      	movs	r0, #0
 80077d2:	4770      	bx	lr

080077d4 <strncmp>:
 80077d4:	b510      	push	{r4, lr}
 80077d6:	b16a      	cbz	r2, 80077f4 <strncmp+0x20>
 80077d8:	3901      	subs	r1, #1
 80077da:	1884      	adds	r4, r0, r2
 80077dc:	f810 3b01 	ldrb.w	r3, [r0], #1
 80077e0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d103      	bne.n	80077f0 <strncmp+0x1c>
 80077e8:	42a0      	cmp	r0, r4
 80077ea:	d001      	beq.n	80077f0 <strncmp+0x1c>
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d1f5      	bne.n	80077dc <strncmp+0x8>
 80077f0:	1a98      	subs	r0, r3, r2
 80077f2:	bd10      	pop	{r4, pc}
 80077f4:	4610      	mov	r0, r2
 80077f6:	e7fc      	b.n	80077f2 <strncmp+0x1e>

080077f8 <sulp>:
 80077f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077fc:	460f      	mov	r7, r1
 80077fe:	4690      	mov	r8, r2
 8007800:	f001 fce0 	bl	80091c4 <__ulp>
 8007804:	4604      	mov	r4, r0
 8007806:	460d      	mov	r5, r1
 8007808:	f1b8 0f00 	cmp.w	r8, #0
 800780c:	d011      	beq.n	8007832 <sulp+0x3a>
 800780e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8007812:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007816:	2b00      	cmp	r3, #0
 8007818:	dd0b      	ble.n	8007832 <sulp+0x3a>
 800781a:	2400      	movs	r4, #0
 800781c:	051b      	lsls	r3, r3, #20
 800781e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007822:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007826:	4622      	mov	r2, r4
 8007828:	462b      	mov	r3, r5
 800782a:	f7f8 fe55 	bl	80004d8 <__aeabi_dmul>
 800782e:	4604      	mov	r4, r0
 8007830:	460d      	mov	r5, r1
 8007832:	4620      	mov	r0, r4
 8007834:	4629      	mov	r1, r5
 8007836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800783a:	0000      	movs	r0, r0
 800783c:	0000      	movs	r0, r0
	...

08007840 <_strtod_l>:
 8007840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007844:	461f      	mov	r7, r3
 8007846:	2300      	movs	r3, #0
 8007848:	b0a1      	sub	sp, #132	; 0x84
 800784a:	4683      	mov	fp, r0
 800784c:	4638      	mov	r0, r7
 800784e:	460e      	mov	r6, r1
 8007850:	9217      	str	r2, [sp, #92]	; 0x5c
 8007852:	931c      	str	r3, [sp, #112]	; 0x70
 8007854:	f001 f9cc 	bl	8008bf0 <__localeconv_l>
 8007858:	4680      	mov	r8, r0
 800785a:	6800      	ldr	r0, [r0, #0]
 800785c:	f7f8 fc78 	bl	8000150 <strlen>
 8007860:	f04f 0900 	mov.w	r9, #0
 8007864:	4604      	mov	r4, r0
 8007866:	f04f 0a00 	mov.w	sl, #0
 800786a:	961b      	str	r6, [sp, #108]	; 0x6c
 800786c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800786e:	781a      	ldrb	r2, [r3, #0]
 8007870:	2a0d      	cmp	r2, #13
 8007872:	d832      	bhi.n	80078da <_strtod_l+0x9a>
 8007874:	2a09      	cmp	r2, #9
 8007876:	d236      	bcs.n	80078e6 <_strtod_l+0xa6>
 8007878:	2a00      	cmp	r2, #0
 800787a:	d03e      	beq.n	80078fa <_strtod_l+0xba>
 800787c:	2300      	movs	r3, #0
 800787e:	930d      	str	r3, [sp, #52]	; 0x34
 8007880:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8007882:	782b      	ldrb	r3, [r5, #0]
 8007884:	2b30      	cmp	r3, #48	; 0x30
 8007886:	f040 80ac 	bne.w	80079e2 <_strtod_l+0x1a2>
 800788a:	786b      	ldrb	r3, [r5, #1]
 800788c:	2b58      	cmp	r3, #88	; 0x58
 800788e:	d001      	beq.n	8007894 <_strtod_l+0x54>
 8007890:	2b78      	cmp	r3, #120	; 0x78
 8007892:	d167      	bne.n	8007964 <_strtod_l+0x124>
 8007894:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007896:	9702      	str	r7, [sp, #8]
 8007898:	9301      	str	r3, [sp, #4]
 800789a:	ab1c      	add	r3, sp, #112	; 0x70
 800789c:	9300      	str	r3, [sp, #0]
 800789e:	4a89      	ldr	r2, [pc, #548]	; (8007ac4 <_strtod_l+0x284>)
 80078a0:	ab1d      	add	r3, sp, #116	; 0x74
 80078a2:	a91b      	add	r1, sp, #108	; 0x6c
 80078a4:	4658      	mov	r0, fp
 80078a6:	f000 feb9 	bl	800861c <__gethex>
 80078aa:	f010 0407 	ands.w	r4, r0, #7
 80078ae:	4606      	mov	r6, r0
 80078b0:	d005      	beq.n	80078be <_strtod_l+0x7e>
 80078b2:	2c06      	cmp	r4, #6
 80078b4:	d12b      	bne.n	800790e <_strtod_l+0xce>
 80078b6:	2300      	movs	r3, #0
 80078b8:	3501      	adds	r5, #1
 80078ba:	951b      	str	r5, [sp, #108]	; 0x6c
 80078bc:	930d      	str	r3, [sp, #52]	; 0x34
 80078be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	f040 85a6 	bne.w	8008412 <_strtod_l+0xbd2>
 80078c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078c8:	b1e3      	cbz	r3, 8007904 <_strtod_l+0xc4>
 80078ca:	464a      	mov	r2, r9
 80078cc:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 80078d0:	4610      	mov	r0, r2
 80078d2:	4619      	mov	r1, r3
 80078d4:	b021      	add	sp, #132	; 0x84
 80078d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078da:	2a2b      	cmp	r2, #43	; 0x2b
 80078dc:	d015      	beq.n	800790a <_strtod_l+0xca>
 80078de:	2a2d      	cmp	r2, #45	; 0x2d
 80078e0:	d004      	beq.n	80078ec <_strtod_l+0xac>
 80078e2:	2a20      	cmp	r2, #32
 80078e4:	d1ca      	bne.n	800787c <_strtod_l+0x3c>
 80078e6:	3301      	adds	r3, #1
 80078e8:	931b      	str	r3, [sp, #108]	; 0x6c
 80078ea:	e7bf      	b.n	800786c <_strtod_l+0x2c>
 80078ec:	2201      	movs	r2, #1
 80078ee:	920d      	str	r2, [sp, #52]	; 0x34
 80078f0:	1c5a      	adds	r2, r3, #1
 80078f2:	921b      	str	r2, [sp, #108]	; 0x6c
 80078f4:	785b      	ldrb	r3, [r3, #1]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d1c2      	bne.n	8007880 <_strtod_l+0x40>
 80078fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80078fc:	961b      	str	r6, [sp, #108]	; 0x6c
 80078fe:	2b00      	cmp	r3, #0
 8007900:	f040 8585 	bne.w	800840e <_strtod_l+0xbce>
 8007904:	464a      	mov	r2, r9
 8007906:	4653      	mov	r3, sl
 8007908:	e7e2      	b.n	80078d0 <_strtod_l+0x90>
 800790a:	2200      	movs	r2, #0
 800790c:	e7ef      	b.n	80078ee <_strtod_l+0xae>
 800790e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007910:	b13a      	cbz	r2, 8007922 <_strtod_l+0xe2>
 8007912:	2135      	movs	r1, #53	; 0x35
 8007914:	a81e      	add	r0, sp, #120	; 0x78
 8007916:	f001 fd48 	bl	80093aa <__copybits>
 800791a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800791c:	4658      	mov	r0, fp
 800791e:	f001 f9ba 	bl	8008c96 <_Bfree>
 8007922:	3c01      	subs	r4, #1
 8007924:	2c04      	cmp	r4, #4
 8007926:	d806      	bhi.n	8007936 <_strtod_l+0xf6>
 8007928:	e8df f004 	tbb	[pc, r4]
 800792c:	1714030a 	.word	0x1714030a
 8007930:	0a          	.byte	0x0a
 8007931:	00          	.byte	0x00
 8007932:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 8007936:	0731      	lsls	r1, r6, #28
 8007938:	d5c1      	bpl.n	80078be <_strtod_l+0x7e>
 800793a:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 800793e:	e7be      	b.n	80078be <_strtod_l+0x7e>
 8007940:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007942:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 8007946:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800794a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800794e:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 8007952:	e7f0      	b.n	8007936 <_strtod_l+0xf6>
 8007954:	f8df a170 	ldr.w	sl, [pc, #368]	; 8007ac8 <_strtod_l+0x288>
 8007958:	e7ed      	b.n	8007936 <_strtod_l+0xf6>
 800795a:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 800795e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8007962:	e7e8      	b.n	8007936 <_strtod_l+0xf6>
 8007964:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007966:	1c5a      	adds	r2, r3, #1
 8007968:	921b      	str	r2, [sp, #108]	; 0x6c
 800796a:	785b      	ldrb	r3, [r3, #1]
 800796c:	2b30      	cmp	r3, #48	; 0x30
 800796e:	d0f9      	beq.n	8007964 <_strtod_l+0x124>
 8007970:	2b00      	cmp	r3, #0
 8007972:	d0a4      	beq.n	80078be <_strtod_l+0x7e>
 8007974:	2301      	movs	r3, #1
 8007976:	2500      	movs	r5, #0
 8007978:	220a      	movs	r2, #10
 800797a:	9307      	str	r3, [sp, #28]
 800797c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800797e:	9506      	str	r5, [sp, #24]
 8007980:	9308      	str	r3, [sp, #32]
 8007982:	9504      	str	r5, [sp, #16]
 8007984:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8007986:	7807      	ldrb	r7, [r0, #0]
 8007988:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800798c:	b2d9      	uxtb	r1, r3
 800798e:	2909      	cmp	r1, #9
 8007990:	d929      	bls.n	80079e6 <_strtod_l+0x1a6>
 8007992:	4622      	mov	r2, r4
 8007994:	f8d8 1000 	ldr.w	r1, [r8]
 8007998:	f7ff ff1c 	bl	80077d4 <strncmp>
 800799c:	2800      	cmp	r0, #0
 800799e:	d031      	beq.n	8007a04 <_strtod_l+0x1c4>
 80079a0:	2000      	movs	r0, #0
 80079a2:	463b      	mov	r3, r7
 80079a4:	4602      	mov	r2, r0
 80079a6:	9c04      	ldr	r4, [sp, #16]
 80079a8:	9005      	str	r0, [sp, #20]
 80079aa:	2b65      	cmp	r3, #101	; 0x65
 80079ac:	d001      	beq.n	80079b2 <_strtod_l+0x172>
 80079ae:	2b45      	cmp	r3, #69	; 0x45
 80079b0:	d114      	bne.n	80079dc <_strtod_l+0x19c>
 80079b2:	b924      	cbnz	r4, 80079be <_strtod_l+0x17e>
 80079b4:	b910      	cbnz	r0, 80079bc <_strtod_l+0x17c>
 80079b6:	9b07      	ldr	r3, [sp, #28]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d09e      	beq.n	80078fa <_strtod_l+0xba>
 80079bc:	2400      	movs	r4, #0
 80079be:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80079c0:	1c73      	adds	r3, r6, #1
 80079c2:	931b      	str	r3, [sp, #108]	; 0x6c
 80079c4:	7873      	ldrb	r3, [r6, #1]
 80079c6:	2b2b      	cmp	r3, #43	; 0x2b
 80079c8:	d078      	beq.n	8007abc <_strtod_l+0x27c>
 80079ca:	2b2d      	cmp	r3, #45	; 0x2d
 80079cc:	d070      	beq.n	8007ab0 <_strtod_l+0x270>
 80079ce:	f04f 0c00 	mov.w	ip, #0
 80079d2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80079d6:	2f09      	cmp	r7, #9
 80079d8:	d97c      	bls.n	8007ad4 <_strtod_l+0x294>
 80079da:	961b      	str	r6, [sp, #108]	; 0x6c
 80079dc:	f04f 0e00 	mov.w	lr, #0
 80079e0:	e09a      	b.n	8007b18 <_strtod_l+0x2d8>
 80079e2:	2300      	movs	r3, #0
 80079e4:	e7c7      	b.n	8007976 <_strtod_l+0x136>
 80079e6:	9904      	ldr	r1, [sp, #16]
 80079e8:	3001      	adds	r0, #1
 80079ea:	2908      	cmp	r1, #8
 80079ec:	bfd7      	itett	le
 80079ee:	9906      	ldrle	r1, [sp, #24]
 80079f0:	fb02 3505 	mlagt	r5, r2, r5, r3
 80079f4:	fb02 3301 	mlale	r3, r2, r1, r3
 80079f8:	9306      	strle	r3, [sp, #24]
 80079fa:	9b04      	ldr	r3, [sp, #16]
 80079fc:	901b      	str	r0, [sp, #108]	; 0x6c
 80079fe:	3301      	adds	r3, #1
 8007a00:	9304      	str	r3, [sp, #16]
 8007a02:	e7bf      	b.n	8007984 <_strtod_l+0x144>
 8007a04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007a06:	191a      	adds	r2, r3, r4
 8007a08:	921b      	str	r2, [sp, #108]	; 0x6c
 8007a0a:	9a04      	ldr	r2, [sp, #16]
 8007a0c:	5d1b      	ldrb	r3, [r3, r4]
 8007a0e:	2a00      	cmp	r2, #0
 8007a10:	d037      	beq.n	8007a82 <_strtod_l+0x242>
 8007a12:	4602      	mov	r2, r0
 8007a14:	9c04      	ldr	r4, [sp, #16]
 8007a16:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007a1a:	2909      	cmp	r1, #9
 8007a1c:	d913      	bls.n	8007a46 <_strtod_l+0x206>
 8007a1e:	2101      	movs	r1, #1
 8007a20:	9105      	str	r1, [sp, #20]
 8007a22:	e7c2      	b.n	80079aa <_strtod_l+0x16a>
 8007a24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007a26:	3001      	adds	r0, #1
 8007a28:	1c5a      	adds	r2, r3, #1
 8007a2a:	921b      	str	r2, [sp, #108]	; 0x6c
 8007a2c:	785b      	ldrb	r3, [r3, #1]
 8007a2e:	2b30      	cmp	r3, #48	; 0x30
 8007a30:	d0f8      	beq.n	8007a24 <_strtod_l+0x1e4>
 8007a32:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8007a36:	2a08      	cmp	r2, #8
 8007a38:	f200 84f0 	bhi.w	800841c <_strtod_l+0xbdc>
 8007a3c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007a3e:	9208      	str	r2, [sp, #32]
 8007a40:	4602      	mov	r2, r0
 8007a42:	2000      	movs	r0, #0
 8007a44:	4604      	mov	r4, r0
 8007a46:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8007a4a:	f100 0101 	add.w	r1, r0, #1
 8007a4e:	d012      	beq.n	8007a76 <_strtod_l+0x236>
 8007a50:	440a      	add	r2, r1
 8007a52:	270a      	movs	r7, #10
 8007a54:	4621      	mov	r1, r4
 8007a56:	eb00 0c04 	add.w	ip, r0, r4
 8007a5a:	458c      	cmp	ip, r1
 8007a5c:	d113      	bne.n	8007a86 <_strtod_l+0x246>
 8007a5e:	1821      	adds	r1, r4, r0
 8007a60:	2908      	cmp	r1, #8
 8007a62:	f104 0401 	add.w	r4, r4, #1
 8007a66:	4404      	add	r4, r0
 8007a68:	dc19      	bgt.n	8007a9e <_strtod_l+0x25e>
 8007a6a:	210a      	movs	r1, #10
 8007a6c:	9b06      	ldr	r3, [sp, #24]
 8007a6e:	fb01 e303 	mla	r3, r1, r3, lr
 8007a72:	9306      	str	r3, [sp, #24]
 8007a74:	2100      	movs	r1, #0
 8007a76:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007a78:	1c58      	adds	r0, r3, #1
 8007a7a:	901b      	str	r0, [sp, #108]	; 0x6c
 8007a7c:	785b      	ldrb	r3, [r3, #1]
 8007a7e:	4608      	mov	r0, r1
 8007a80:	e7c9      	b.n	8007a16 <_strtod_l+0x1d6>
 8007a82:	9804      	ldr	r0, [sp, #16]
 8007a84:	e7d3      	b.n	8007a2e <_strtod_l+0x1ee>
 8007a86:	2908      	cmp	r1, #8
 8007a88:	f101 0101 	add.w	r1, r1, #1
 8007a8c:	dc03      	bgt.n	8007a96 <_strtod_l+0x256>
 8007a8e:	9b06      	ldr	r3, [sp, #24]
 8007a90:	437b      	muls	r3, r7
 8007a92:	9306      	str	r3, [sp, #24]
 8007a94:	e7e1      	b.n	8007a5a <_strtod_l+0x21a>
 8007a96:	2910      	cmp	r1, #16
 8007a98:	bfd8      	it	le
 8007a9a:	437d      	mulle	r5, r7
 8007a9c:	e7dd      	b.n	8007a5a <_strtod_l+0x21a>
 8007a9e:	2c10      	cmp	r4, #16
 8007aa0:	bfdc      	itt	le
 8007aa2:	210a      	movle	r1, #10
 8007aa4:	fb01 e505 	mlale	r5, r1, r5, lr
 8007aa8:	e7e4      	b.n	8007a74 <_strtod_l+0x234>
 8007aaa:	2301      	movs	r3, #1
 8007aac:	9305      	str	r3, [sp, #20]
 8007aae:	e781      	b.n	80079b4 <_strtod_l+0x174>
 8007ab0:	f04f 0c01 	mov.w	ip, #1
 8007ab4:	1cb3      	adds	r3, r6, #2
 8007ab6:	931b      	str	r3, [sp, #108]	; 0x6c
 8007ab8:	78b3      	ldrb	r3, [r6, #2]
 8007aba:	e78a      	b.n	80079d2 <_strtod_l+0x192>
 8007abc:	f04f 0c00 	mov.w	ip, #0
 8007ac0:	e7f8      	b.n	8007ab4 <_strtod_l+0x274>
 8007ac2:	bf00      	nop
 8007ac4:	0800a5e4 	.word	0x0800a5e4
 8007ac8:	7ff00000 	.word	0x7ff00000
 8007acc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007ace:	1c5f      	adds	r7, r3, #1
 8007ad0:	971b      	str	r7, [sp, #108]	; 0x6c
 8007ad2:	785b      	ldrb	r3, [r3, #1]
 8007ad4:	2b30      	cmp	r3, #48	; 0x30
 8007ad6:	d0f9      	beq.n	8007acc <_strtod_l+0x28c>
 8007ad8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8007adc:	2f08      	cmp	r7, #8
 8007ade:	f63f af7d 	bhi.w	80079dc <_strtod_l+0x19c>
 8007ae2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8007ae6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007ae8:	9309      	str	r3, [sp, #36]	; 0x24
 8007aea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007aec:	1c5f      	adds	r7, r3, #1
 8007aee:	971b      	str	r7, [sp, #108]	; 0x6c
 8007af0:	785b      	ldrb	r3, [r3, #1]
 8007af2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8007af6:	f1b8 0f09 	cmp.w	r8, #9
 8007afa:	d937      	bls.n	8007b6c <_strtod_l+0x32c>
 8007afc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007afe:	1a7f      	subs	r7, r7, r1
 8007b00:	2f08      	cmp	r7, #8
 8007b02:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007b06:	dc37      	bgt.n	8007b78 <_strtod_l+0x338>
 8007b08:	45be      	cmp	lr, r7
 8007b0a:	bfa8      	it	ge
 8007b0c:	46be      	movge	lr, r7
 8007b0e:	f1bc 0f00 	cmp.w	ip, #0
 8007b12:	d001      	beq.n	8007b18 <_strtod_l+0x2d8>
 8007b14:	f1ce 0e00 	rsb	lr, lr, #0
 8007b18:	2c00      	cmp	r4, #0
 8007b1a:	d151      	bne.n	8007bc0 <_strtod_l+0x380>
 8007b1c:	2800      	cmp	r0, #0
 8007b1e:	f47f aece 	bne.w	80078be <_strtod_l+0x7e>
 8007b22:	9a07      	ldr	r2, [sp, #28]
 8007b24:	2a00      	cmp	r2, #0
 8007b26:	f47f aeca 	bne.w	80078be <_strtod_l+0x7e>
 8007b2a:	9a05      	ldr	r2, [sp, #20]
 8007b2c:	2a00      	cmp	r2, #0
 8007b2e:	f47f aee4 	bne.w	80078fa <_strtod_l+0xba>
 8007b32:	2b4e      	cmp	r3, #78	; 0x4e
 8007b34:	d027      	beq.n	8007b86 <_strtod_l+0x346>
 8007b36:	dc21      	bgt.n	8007b7c <_strtod_l+0x33c>
 8007b38:	2b49      	cmp	r3, #73	; 0x49
 8007b3a:	f47f aede 	bne.w	80078fa <_strtod_l+0xba>
 8007b3e:	49a4      	ldr	r1, [pc, #656]	; (8007dd0 <_strtod_l+0x590>)
 8007b40:	a81b      	add	r0, sp, #108	; 0x6c
 8007b42:	f000 ff9f 	bl	8008a84 <__match>
 8007b46:	2800      	cmp	r0, #0
 8007b48:	f43f aed7 	beq.w	80078fa <_strtod_l+0xba>
 8007b4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007b4e:	49a1      	ldr	r1, [pc, #644]	; (8007dd4 <_strtod_l+0x594>)
 8007b50:	3b01      	subs	r3, #1
 8007b52:	a81b      	add	r0, sp, #108	; 0x6c
 8007b54:	931b      	str	r3, [sp, #108]	; 0x6c
 8007b56:	f000 ff95 	bl	8008a84 <__match>
 8007b5a:	b910      	cbnz	r0, 8007b62 <_strtod_l+0x322>
 8007b5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007b5e:	3301      	adds	r3, #1
 8007b60:	931b      	str	r3, [sp, #108]	; 0x6c
 8007b62:	f8df a284 	ldr.w	sl, [pc, #644]	; 8007de8 <_strtod_l+0x5a8>
 8007b66:	f04f 0900 	mov.w	r9, #0
 8007b6a:	e6a8      	b.n	80078be <_strtod_l+0x7e>
 8007b6c:	210a      	movs	r1, #10
 8007b6e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8007b72:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007b76:	e7b8      	b.n	8007aea <_strtod_l+0x2aa>
 8007b78:	46be      	mov	lr, r7
 8007b7a:	e7c8      	b.n	8007b0e <_strtod_l+0x2ce>
 8007b7c:	2b69      	cmp	r3, #105	; 0x69
 8007b7e:	d0de      	beq.n	8007b3e <_strtod_l+0x2fe>
 8007b80:	2b6e      	cmp	r3, #110	; 0x6e
 8007b82:	f47f aeba 	bne.w	80078fa <_strtod_l+0xba>
 8007b86:	4994      	ldr	r1, [pc, #592]	; (8007dd8 <_strtod_l+0x598>)
 8007b88:	a81b      	add	r0, sp, #108	; 0x6c
 8007b8a:	f000 ff7b 	bl	8008a84 <__match>
 8007b8e:	2800      	cmp	r0, #0
 8007b90:	f43f aeb3 	beq.w	80078fa <_strtod_l+0xba>
 8007b94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007b96:	781b      	ldrb	r3, [r3, #0]
 8007b98:	2b28      	cmp	r3, #40	; 0x28
 8007b9a:	d10e      	bne.n	8007bba <_strtod_l+0x37a>
 8007b9c:	aa1e      	add	r2, sp, #120	; 0x78
 8007b9e:	498f      	ldr	r1, [pc, #572]	; (8007ddc <_strtod_l+0x59c>)
 8007ba0:	a81b      	add	r0, sp, #108	; 0x6c
 8007ba2:	f000 ff83 	bl	8008aac <__hexnan>
 8007ba6:	2805      	cmp	r0, #5
 8007ba8:	d107      	bne.n	8007bba <_strtod_l+0x37a>
 8007baa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007bac:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8007bb0:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 8007bb4:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8007bb8:	e681      	b.n	80078be <_strtod_l+0x7e>
 8007bba:	f8df a234 	ldr.w	sl, [pc, #564]	; 8007df0 <_strtod_l+0x5b0>
 8007bbe:	e7d2      	b.n	8007b66 <_strtod_l+0x326>
 8007bc0:	ebae 0302 	sub.w	r3, lr, r2
 8007bc4:	9307      	str	r3, [sp, #28]
 8007bc6:	9b04      	ldr	r3, [sp, #16]
 8007bc8:	9806      	ldr	r0, [sp, #24]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	bf08      	it	eq
 8007bce:	4623      	moveq	r3, r4
 8007bd0:	2c10      	cmp	r4, #16
 8007bd2:	9304      	str	r3, [sp, #16]
 8007bd4:	46a0      	mov	r8, r4
 8007bd6:	bfa8      	it	ge
 8007bd8:	f04f 0810 	movge.w	r8, #16
 8007bdc:	f7f8 fc02 	bl	80003e4 <__aeabi_ui2d>
 8007be0:	2c09      	cmp	r4, #9
 8007be2:	4681      	mov	r9, r0
 8007be4:	468a      	mov	sl, r1
 8007be6:	dc13      	bgt.n	8007c10 <_strtod_l+0x3d0>
 8007be8:	9b07      	ldr	r3, [sp, #28]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	f43f ae67 	beq.w	80078be <_strtod_l+0x7e>
 8007bf0:	9b07      	ldr	r3, [sp, #28]
 8007bf2:	dd7e      	ble.n	8007cf2 <_strtod_l+0x4b2>
 8007bf4:	2b16      	cmp	r3, #22
 8007bf6:	dc65      	bgt.n	8007cc4 <_strtod_l+0x484>
 8007bf8:	4a79      	ldr	r2, [pc, #484]	; (8007de0 <_strtod_l+0x5a0>)
 8007bfa:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8007bfe:	464a      	mov	r2, r9
 8007c00:	e9de 0100 	ldrd	r0, r1, [lr]
 8007c04:	4653      	mov	r3, sl
 8007c06:	f7f8 fc67 	bl	80004d8 <__aeabi_dmul>
 8007c0a:	4681      	mov	r9, r0
 8007c0c:	468a      	mov	sl, r1
 8007c0e:	e656      	b.n	80078be <_strtod_l+0x7e>
 8007c10:	4b73      	ldr	r3, [pc, #460]	; (8007de0 <_strtod_l+0x5a0>)
 8007c12:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007c16:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007c1a:	f7f8 fc5d 	bl	80004d8 <__aeabi_dmul>
 8007c1e:	4606      	mov	r6, r0
 8007c20:	4628      	mov	r0, r5
 8007c22:	460f      	mov	r7, r1
 8007c24:	f7f8 fbde 	bl	80003e4 <__aeabi_ui2d>
 8007c28:	4602      	mov	r2, r0
 8007c2a:	460b      	mov	r3, r1
 8007c2c:	4630      	mov	r0, r6
 8007c2e:	4639      	mov	r1, r7
 8007c30:	f7f8 fa9c 	bl	800016c <__adddf3>
 8007c34:	2c0f      	cmp	r4, #15
 8007c36:	4681      	mov	r9, r0
 8007c38:	468a      	mov	sl, r1
 8007c3a:	ddd5      	ble.n	8007be8 <_strtod_l+0x3a8>
 8007c3c:	9b07      	ldr	r3, [sp, #28]
 8007c3e:	eba4 0808 	sub.w	r8, r4, r8
 8007c42:	4498      	add	r8, r3
 8007c44:	f1b8 0f00 	cmp.w	r8, #0
 8007c48:	f340 809a 	ble.w	8007d80 <_strtod_l+0x540>
 8007c4c:	f018 030f 	ands.w	r3, r8, #15
 8007c50:	d00a      	beq.n	8007c68 <_strtod_l+0x428>
 8007c52:	4963      	ldr	r1, [pc, #396]	; (8007de0 <_strtod_l+0x5a0>)
 8007c54:	464a      	mov	r2, r9
 8007c56:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007c5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c5e:	4653      	mov	r3, sl
 8007c60:	f7f8 fc3a 	bl	80004d8 <__aeabi_dmul>
 8007c64:	4681      	mov	r9, r0
 8007c66:	468a      	mov	sl, r1
 8007c68:	f038 080f 	bics.w	r8, r8, #15
 8007c6c:	d077      	beq.n	8007d5e <_strtod_l+0x51e>
 8007c6e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007c72:	dd4b      	ble.n	8007d0c <_strtod_l+0x4cc>
 8007c74:	f04f 0800 	mov.w	r8, #0
 8007c78:	f8cd 8010 	str.w	r8, [sp, #16]
 8007c7c:	f8cd 8020 	str.w	r8, [sp, #32]
 8007c80:	f8cd 8018 	str.w	r8, [sp, #24]
 8007c84:	2322      	movs	r3, #34	; 0x22
 8007c86:	f04f 0900 	mov.w	r9, #0
 8007c8a:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8007de8 <_strtod_l+0x5a8>
 8007c8e:	f8cb 3000 	str.w	r3, [fp]
 8007c92:	9b08      	ldr	r3, [sp, #32]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	f43f ae12 	beq.w	80078be <_strtod_l+0x7e>
 8007c9a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007c9c:	4658      	mov	r0, fp
 8007c9e:	f000 fffa 	bl	8008c96 <_Bfree>
 8007ca2:	9906      	ldr	r1, [sp, #24]
 8007ca4:	4658      	mov	r0, fp
 8007ca6:	f000 fff6 	bl	8008c96 <_Bfree>
 8007caa:	9904      	ldr	r1, [sp, #16]
 8007cac:	4658      	mov	r0, fp
 8007cae:	f000 fff2 	bl	8008c96 <_Bfree>
 8007cb2:	9908      	ldr	r1, [sp, #32]
 8007cb4:	4658      	mov	r0, fp
 8007cb6:	f000 ffee 	bl	8008c96 <_Bfree>
 8007cba:	4641      	mov	r1, r8
 8007cbc:	4658      	mov	r0, fp
 8007cbe:	f000 ffea 	bl	8008c96 <_Bfree>
 8007cc2:	e5fc      	b.n	80078be <_strtod_l+0x7e>
 8007cc4:	9a07      	ldr	r2, [sp, #28]
 8007cc6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	dbb6      	blt.n	8007c3c <_strtod_l+0x3fc>
 8007cce:	4d44      	ldr	r5, [pc, #272]	; (8007de0 <_strtod_l+0x5a0>)
 8007cd0:	f1c4 040f 	rsb	r4, r4, #15
 8007cd4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8007cd8:	464a      	mov	r2, r9
 8007cda:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007cde:	4653      	mov	r3, sl
 8007ce0:	f7f8 fbfa 	bl	80004d8 <__aeabi_dmul>
 8007ce4:	9b07      	ldr	r3, [sp, #28]
 8007ce6:	1b1c      	subs	r4, r3, r4
 8007ce8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8007cec:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007cf0:	e789      	b.n	8007c06 <_strtod_l+0x3c6>
 8007cf2:	f113 0f16 	cmn.w	r3, #22
 8007cf6:	dba1      	blt.n	8007c3c <_strtod_l+0x3fc>
 8007cf8:	4a39      	ldr	r2, [pc, #228]	; (8007de0 <_strtod_l+0x5a0>)
 8007cfa:	4648      	mov	r0, r9
 8007cfc:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8007d00:	e9d2 2300 	ldrd	r2, r3, [r2]
 8007d04:	4651      	mov	r1, sl
 8007d06:	f7f8 fd11 	bl	800072c <__aeabi_ddiv>
 8007d0a:	e77e      	b.n	8007c0a <_strtod_l+0x3ca>
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	4648      	mov	r0, r9
 8007d10:	4651      	mov	r1, sl
 8007d12:	461d      	mov	r5, r3
 8007d14:	4e33      	ldr	r6, [pc, #204]	; (8007de4 <_strtod_l+0x5a4>)
 8007d16:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007d1a:	f1b8 0f01 	cmp.w	r8, #1
 8007d1e:	dc21      	bgt.n	8007d64 <_strtod_l+0x524>
 8007d20:	b10b      	cbz	r3, 8007d26 <_strtod_l+0x4e6>
 8007d22:	4681      	mov	r9, r0
 8007d24:	468a      	mov	sl, r1
 8007d26:	4b2f      	ldr	r3, [pc, #188]	; (8007de4 <_strtod_l+0x5a4>)
 8007d28:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 8007d2c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007d30:	464a      	mov	r2, r9
 8007d32:	e9d5 0100 	ldrd	r0, r1, [r5]
 8007d36:	4653      	mov	r3, sl
 8007d38:	f7f8 fbce 	bl	80004d8 <__aeabi_dmul>
 8007d3c:	4b2a      	ldr	r3, [pc, #168]	; (8007de8 <_strtod_l+0x5a8>)
 8007d3e:	460a      	mov	r2, r1
 8007d40:	400b      	ands	r3, r1
 8007d42:	492a      	ldr	r1, [pc, #168]	; (8007dec <_strtod_l+0x5ac>)
 8007d44:	4681      	mov	r9, r0
 8007d46:	428b      	cmp	r3, r1
 8007d48:	d894      	bhi.n	8007c74 <_strtod_l+0x434>
 8007d4a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007d4e:	428b      	cmp	r3, r1
 8007d50:	bf86      	itte	hi
 8007d52:	f04f 39ff 	movhi.w	r9, #4294967295	; 0xffffffff
 8007d56:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 8007df4 <_strtod_l+0x5b4>
 8007d5a:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 8007d5e:	2300      	movs	r3, #0
 8007d60:	9305      	str	r3, [sp, #20]
 8007d62:	e07b      	b.n	8007e5c <_strtod_l+0x61c>
 8007d64:	f018 0f01 	tst.w	r8, #1
 8007d68:	d006      	beq.n	8007d78 <_strtod_l+0x538>
 8007d6a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8007d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d72:	f7f8 fbb1 	bl	80004d8 <__aeabi_dmul>
 8007d76:	2301      	movs	r3, #1
 8007d78:	3501      	adds	r5, #1
 8007d7a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007d7e:	e7cc      	b.n	8007d1a <_strtod_l+0x4da>
 8007d80:	d0ed      	beq.n	8007d5e <_strtod_l+0x51e>
 8007d82:	f1c8 0800 	rsb	r8, r8, #0
 8007d86:	f018 020f 	ands.w	r2, r8, #15
 8007d8a:	d00a      	beq.n	8007da2 <_strtod_l+0x562>
 8007d8c:	4b14      	ldr	r3, [pc, #80]	; (8007de0 <_strtod_l+0x5a0>)
 8007d8e:	4648      	mov	r0, r9
 8007d90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d94:	4651      	mov	r1, sl
 8007d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d9a:	f7f8 fcc7 	bl	800072c <__aeabi_ddiv>
 8007d9e:	4681      	mov	r9, r0
 8007da0:	468a      	mov	sl, r1
 8007da2:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007da6:	d0da      	beq.n	8007d5e <_strtod_l+0x51e>
 8007da8:	f1b8 0f1f 	cmp.w	r8, #31
 8007dac:	dd24      	ble.n	8007df8 <_strtod_l+0x5b8>
 8007dae:	f04f 0800 	mov.w	r8, #0
 8007db2:	f8cd 8010 	str.w	r8, [sp, #16]
 8007db6:	f8cd 8020 	str.w	r8, [sp, #32]
 8007dba:	f8cd 8018 	str.w	r8, [sp, #24]
 8007dbe:	2322      	movs	r3, #34	; 0x22
 8007dc0:	f04f 0900 	mov.w	r9, #0
 8007dc4:	f04f 0a00 	mov.w	sl, #0
 8007dc8:	f8cb 3000 	str.w	r3, [fp]
 8007dcc:	e761      	b.n	8007c92 <_strtod_l+0x452>
 8007dce:	bf00      	nop
 8007dd0:	0800a5d5 	.word	0x0800a5d5
 8007dd4:	0800a5d8 	.word	0x0800a5d8
 8007dd8:	0800a5de 	.word	0x0800a5de
 8007ddc:	0800a5f8 	.word	0x0800a5f8
 8007de0:	0800a670 	.word	0x0800a670
 8007de4:	0800a648 	.word	0x0800a648
 8007de8:	7ff00000 	.word	0x7ff00000
 8007dec:	7ca00000 	.word	0x7ca00000
 8007df0:	fff80000 	.word	0xfff80000
 8007df4:	7fefffff 	.word	0x7fefffff
 8007df8:	f018 0310 	ands.w	r3, r8, #16
 8007dfc:	bf18      	it	ne
 8007dfe:	236a      	movne	r3, #106	; 0x6a
 8007e00:	4648      	mov	r0, r9
 8007e02:	9305      	str	r3, [sp, #20]
 8007e04:	4651      	mov	r1, sl
 8007e06:	2300      	movs	r3, #0
 8007e08:	4da1      	ldr	r5, [pc, #644]	; (8008090 <_strtod_l+0x850>)
 8007e0a:	f1b8 0f00 	cmp.w	r8, #0
 8007e0e:	f300 8113 	bgt.w	8008038 <_strtod_l+0x7f8>
 8007e12:	b10b      	cbz	r3, 8007e18 <_strtod_l+0x5d8>
 8007e14:	4681      	mov	r9, r0
 8007e16:	468a      	mov	sl, r1
 8007e18:	9b05      	ldr	r3, [sp, #20]
 8007e1a:	b1bb      	cbz	r3, 8007e4c <_strtod_l+0x60c>
 8007e1c:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8007e20:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	4651      	mov	r1, sl
 8007e28:	dd10      	ble.n	8007e4c <_strtod_l+0x60c>
 8007e2a:	2b1f      	cmp	r3, #31
 8007e2c:	f340 8110 	ble.w	8008050 <_strtod_l+0x810>
 8007e30:	2b34      	cmp	r3, #52	; 0x34
 8007e32:	bfd8      	it	le
 8007e34:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8007e38:	f04f 0900 	mov.w	r9, #0
 8007e3c:	bfcf      	iteee	gt
 8007e3e:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 8007e42:	3b20      	suble	r3, #32
 8007e44:	fa02 f303 	lslle.w	r3, r2, r3
 8007e48:	ea03 0a01 	andle.w	sl, r3, r1
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	2300      	movs	r3, #0
 8007e50:	4648      	mov	r0, r9
 8007e52:	4651      	mov	r1, sl
 8007e54:	f7f8 fda8 	bl	80009a8 <__aeabi_dcmpeq>
 8007e58:	2800      	cmp	r0, #0
 8007e5a:	d1a8      	bne.n	8007dae <_strtod_l+0x56e>
 8007e5c:	9b06      	ldr	r3, [sp, #24]
 8007e5e:	9a04      	ldr	r2, [sp, #16]
 8007e60:	9300      	str	r3, [sp, #0]
 8007e62:	9908      	ldr	r1, [sp, #32]
 8007e64:	4623      	mov	r3, r4
 8007e66:	4658      	mov	r0, fp
 8007e68:	f000 ff67 	bl	8008d3a <__s2b>
 8007e6c:	9008      	str	r0, [sp, #32]
 8007e6e:	2800      	cmp	r0, #0
 8007e70:	f43f af00 	beq.w	8007c74 <_strtod_l+0x434>
 8007e74:	9a07      	ldr	r2, [sp, #28]
 8007e76:	9b07      	ldr	r3, [sp, #28]
 8007e78:	2a00      	cmp	r2, #0
 8007e7a:	f1c3 0300 	rsb	r3, r3, #0
 8007e7e:	bfa8      	it	ge
 8007e80:	2300      	movge	r3, #0
 8007e82:	f04f 0800 	mov.w	r8, #0
 8007e86:	930e      	str	r3, [sp, #56]	; 0x38
 8007e88:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007e8c:	9316      	str	r3, [sp, #88]	; 0x58
 8007e8e:	f8cd 8010 	str.w	r8, [sp, #16]
 8007e92:	9b08      	ldr	r3, [sp, #32]
 8007e94:	4658      	mov	r0, fp
 8007e96:	6859      	ldr	r1, [r3, #4]
 8007e98:	f000 fec9 	bl	8008c2e <_Balloc>
 8007e9c:	9006      	str	r0, [sp, #24]
 8007e9e:	2800      	cmp	r0, #0
 8007ea0:	f43f aef0 	beq.w	8007c84 <_strtod_l+0x444>
 8007ea4:	9b08      	ldr	r3, [sp, #32]
 8007ea6:	300c      	adds	r0, #12
 8007ea8:	691a      	ldr	r2, [r3, #16]
 8007eaa:	f103 010c 	add.w	r1, r3, #12
 8007eae:	3202      	adds	r2, #2
 8007eb0:	0092      	lsls	r2, r2, #2
 8007eb2:	f000 feb1 	bl	8008c18 <memcpy>
 8007eb6:	ab1e      	add	r3, sp, #120	; 0x78
 8007eb8:	9301      	str	r3, [sp, #4]
 8007eba:	ab1d      	add	r3, sp, #116	; 0x74
 8007ebc:	9300      	str	r3, [sp, #0]
 8007ebe:	464a      	mov	r2, r9
 8007ec0:	4653      	mov	r3, sl
 8007ec2:	4658      	mov	r0, fp
 8007ec4:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8007ec8:	f001 f9f2 	bl	80092b0 <__d2b>
 8007ecc:	901c      	str	r0, [sp, #112]	; 0x70
 8007ece:	2800      	cmp	r0, #0
 8007ed0:	f43f aed8 	beq.w	8007c84 <_strtod_l+0x444>
 8007ed4:	2101      	movs	r1, #1
 8007ed6:	4658      	mov	r0, fp
 8007ed8:	f000 ffbb 	bl	8008e52 <__i2b>
 8007edc:	9004      	str	r0, [sp, #16]
 8007ede:	4603      	mov	r3, r0
 8007ee0:	2800      	cmp	r0, #0
 8007ee2:	f43f aecf 	beq.w	8007c84 <_strtod_l+0x444>
 8007ee6:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8007ee8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007eea:	2d00      	cmp	r5, #0
 8007eec:	bfab      	itete	ge
 8007eee:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8007ef0:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8007ef2:	18ee      	addge	r6, r5, r3
 8007ef4:	1b5c      	sublt	r4, r3, r5
 8007ef6:	9b05      	ldr	r3, [sp, #20]
 8007ef8:	bfa8      	it	ge
 8007efa:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8007efc:	eba5 0503 	sub.w	r5, r5, r3
 8007f00:	4415      	add	r5, r2
 8007f02:	4b64      	ldr	r3, [pc, #400]	; (8008094 <_strtod_l+0x854>)
 8007f04:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8007f08:	bfb8      	it	lt
 8007f0a:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8007f0c:	429d      	cmp	r5, r3
 8007f0e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007f12:	f280 80af 	bge.w	8008074 <_strtod_l+0x834>
 8007f16:	1b5b      	subs	r3, r3, r5
 8007f18:	2b1f      	cmp	r3, #31
 8007f1a:	eba2 0203 	sub.w	r2, r2, r3
 8007f1e:	f04f 0701 	mov.w	r7, #1
 8007f22:	f300 809c 	bgt.w	800805e <_strtod_l+0x81e>
 8007f26:	2500      	movs	r5, #0
 8007f28:	fa07 f303 	lsl.w	r3, r7, r3
 8007f2c:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f2e:	18b7      	adds	r7, r6, r2
 8007f30:	9b05      	ldr	r3, [sp, #20]
 8007f32:	42be      	cmp	r6, r7
 8007f34:	4414      	add	r4, r2
 8007f36:	441c      	add	r4, r3
 8007f38:	4633      	mov	r3, r6
 8007f3a:	bfa8      	it	ge
 8007f3c:	463b      	movge	r3, r7
 8007f3e:	42a3      	cmp	r3, r4
 8007f40:	bfa8      	it	ge
 8007f42:	4623      	movge	r3, r4
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	bfc2      	ittt	gt
 8007f48:	1aff      	subgt	r7, r7, r3
 8007f4a:	1ae4      	subgt	r4, r4, r3
 8007f4c:	1af6      	subgt	r6, r6, r3
 8007f4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f50:	b1bb      	cbz	r3, 8007f82 <_strtod_l+0x742>
 8007f52:	461a      	mov	r2, r3
 8007f54:	9904      	ldr	r1, [sp, #16]
 8007f56:	4658      	mov	r0, fp
 8007f58:	f001 f81a 	bl	8008f90 <__pow5mult>
 8007f5c:	9004      	str	r0, [sp, #16]
 8007f5e:	2800      	cmp	r0, #0
 8007f60:	f43f ae90 	beq.w	8007c84 <_strtod_l+0x444>
 8007f64:	4601      	mov	r1, r0
 8007f66:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007f68:	4658      	mov	r0, fp
 8007f6a:	f000 ff7b 	bl	8008e64 <__multiply>
 8007f6e:	9009      	str	r0, [sp, #36]	; 0x24
 8007f70:	2800      	cmp	r0, #0
 8007f72:	f43f ae87 	beq.w	8007c84 <_strtod_l+0x444>
 8007f76:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007f78:	4658      	mov	r0, fp
 8007f7a:	f000 fe8c 	bl	8008c96 <_Bfree>
 8007f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f80:	931c      	str	r3, [sp, #112]	; 0x70
 8007f82:	2f00      	cmp	r7, #0
 8007f84:	dc7a      	bgt.n	800807c <_strtod_l+0x83c>
 8007f86:	9b07      	ldr	r3, [sp, #28]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	dd08      	ble.n	8007f9e <_strtod_l+0x75e>
 8007f8c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007f8e:	9906      	ldr	r1, [sp, #24]
 8007f90:	4658      	mov	r0, fp
 8007f92:	f000 fffd 	bl	8008f90 <__pow5mult>
 8007f96:	9006      	str	r0, [sp, #24]
 8007f98:	2800      	cmp	r0, #0
 8007f9a:	f43f ae73 	beq.w	8007c84 <_strtod_l+0x444>
 8007f9e:	2c00      	cmp	r4, #0
 8007fa0:	dd08      	ble.n	8007fb4 <_strtod_l+0x774>
 8007fa2:	4622      	mov	r2, r4
 8007fa4:	9906      	ldr	r1, [sp, #24]
 8007fa6:	4658      	mov	r0, fp
 8007fa8:	f001 f840 	bl	800902c <__lshift>
 8007fac:	9006      	str	r0, [sp, #24]
 8007fae:	2800      	cmp	r0, #0
 8007fb0:	f43f ae68 	beq.w	8007c84 <_strtod_l+0x444>
 8007fb4:	2e00      	cmp	r6, #0
 8007fb6:	dd08      	ble.n	8007fca <_strtod_l+0x78a>
 8007fb8:	4632      	mov	r2, r6
 8007fba:	9904      	ldr	r1, [sp, #16]
 8007fbc:	4658      	mov	r0, fp
 8007fbe:	f001 f835 	bl	800902c <__lshift>
 8007fc2:	9004      	str	r0, [sp, #16]
 8007fc4:	2800      	cmp	r0, #0
 8007fc6:	f43f ae5d 	beq.w	8007c84 <_strtod_l+0x444>
 8007fca:	9a06      	ldr	r2, [sp, #24]
 8007fcc:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007fce:	4658      	mov	r0, fp
 8007fd0:	f001 f89a 	bl	8009108 <__mdiff>
 8007fd4:	4680      	mov	r8, r0
 8007fd6:	2800      	cmp	r0, #0
 8007fd8:	f43f ae54 	beq.w	8007c84 <_strtod_l+0x444>
 8007fdc:	2400      	movs	r4, #0
 8007fde:	68c3      	ldr	r3, [r0, #12]
 8007fe0:	9904      	ldr	r1, [sp, #16]
 8007fe2:	60c4      	str	r4, [r0, #12]
 8007fe4:	930c      	str	r3, [sp, #48]	; 0x30
 8007fe6:	f001 f875 	bl	80090d4 <__mcmp>
 8007fea:	42a0      	cmp	r0, r4
 8007fec:	da54      	bge.n	8008098 <_strtod_l+0x858>
 8007fee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ff0:	b9f3      	cbnz	r3, 8008030 <_strtod_l+0x7f0>
 8007ff2:	f1b9 0f00 	cmp.w	r9, #0
 8007ff6:	d11b      	bne.n	8008030 <_strtod_l+0x7f0>
 8007ff8:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8007ffc:	b9c3      	cbnz	r3, 8008030 <_strtod_l+0x7f0>
 8007ffe:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8008002:	0d1b      	lsrs	r3, r3, #20
 8008004:	051b      	lsls	r3, r3, #20
 8008006:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800800a:	d911      	bls.n	8008030 <_strtod_l+0x7f0>
 800800c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8008010:	b91b      	cbnz	r3, 800801a <_strtod_l+0x7da>
 8008012:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8008016:	2b01      	cmp	r3, #1
 8008018:	dd0a      	ble.n	8008030 <_strtod_l+0x7f0>
 800801a:	4641      	mov	r1, r8
 800801c:	2201      	movs	r2, #1
 800801e:	4658      	mov	r0, fp
 8008020:	f001 f804 	bl	800902c <__lshift>
 8008024:	9904      	ldr	r1, [sp, #16]
 8008026:	4680      	mov	r8, r0
 8008028:	f001 f854 	bl	80090d4 <__mcmp>
 800802c:	2800      	cmp	r0, #0
 800802e:	dc68      	bgt.n	8008102 <_strtod_l+0x8c2>
 8008030:	9b05      	ldr	r3, [sp, #20]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d172      	bne.n	800811c <_strtod_l+0x8dc>
 8008036:	e630      	b.n	8007c9a <_strtod_l+0x45a>
 8008038:	f018 0f01 	tst.w	r8, #1
 800803c:	d004      	beq.n	8008048 <_strtod_l+0x808>
 800803e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008042:	f7f8 fa49 	bl	80004d8 <__aeabi_dmul>
 8008046:	2301      	movs	r3, #1
 8008048:	ea4f 0868 	mov.w	r8, r8, asr #1
 800804c:	3508      	adds	r5, #8
 800804e:	e6dc      	b.n	8007e0a <_strtod_l+0x5ca>
 8008050:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008054:	fa02 f303 	lsl.w	r3, r2, r3
 8008058:	ea03 0909 	and.w	r9, r3, r9
 800805c:	e6f6      	b.n	8007e4c <_strtod_l+0x60c>
 800805e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8008062:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8008066:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800806a:	35e2      	adds	r5, #226	; 0xe2
 800806c:	fa07 f505 	lsl.w	r5, r7, r5
 8008070:	970f      	str	r7, [sp, #60]	; 0x3c
 8008072:	e75c      	b.n	8007f2e <_strtod_l+0x6ee>
 8008074:	2301      	movs	r3, #1
 8008076:	2500      	movs	r5, #0
 8008078:	930f      	str	r3, [sp, #60]	; 0x3c
 800807a:	e758      	b.n	8007f2e <_strtod_l+0x6ee>
 800807c:	463a      	mov	r2, r7
 800807e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008080:	4658      	mov	r0, fp
 8008082:	f000 ffd3 	bl	800902c <__lshift>
 8008086:	901c      	str	r0, [sp, #112]	; 0x70
 8008088:	2800      	cmp	r0, #0
 800808a:	f47f af7c 	bne.w	8007f86 <_strtod_l+0x746>
 800808e:	e5f9      	b.n	8007c84 <_strtod_l+0x444>
 8008090:	0800a610 	.word	0x0800a610
 8008094:	fffffc02 	.word	0xfffffc02
 8008098:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800809c:	f040 8089 	bne.w	80081b2 <_strtod_l+0x972>
 80080a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80080a2:	f3ca 0313 	ubfx	r3, sl, #0, #20
 80080a6:	b342      	cbz	r2, 80080fa <_strtod_l+0x8ba>
 80080a8:	4aaf      	ldr	r2, [pc, #700]	; (8008368 <_strtod_l+0xb28>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d156      	bne.n	800815c <_strtod_l+0x91c>
 80080ae:	9b05      	ldr	r3, [sp, #20]
 80080b0:	4648      	mov	r0, r9
 80080b2:	b1eb      	cbz	r3, 80080f0 <_strtod_l+0x8b0>
 80080b4:	4653      	mov	r3, sl
 80080b6:	4aad      	ldr	r2, [pc, #692]	; (800836c <_strtod_l+0xb2c>)
 80080b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80080bc:	401a      	ands	r2, r3
 80080be:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80080c2:	d818      	bhi.n	80080f6 <_strtod_l+0x8b6>
 80080c4:	0d12      	lsrs	r2, r2, #20
 80080c6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80080ca:	fa01 f303 	lsl.w	r3, r1, r3
 80080ce:	4298      	cmp	r0, r3
 80080d0:	d144      	bne.n	800815c <_strtod_l+0x91c>
 80080d2:	4ba7      	ldr	r3, [pc, #668]	; (8008370 <_strtod_l+0xb30>)
 80080d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d102      	bne.n	80080e0 <_strtod_l+0x8a0>
 80080da:	3001      	adds	r0, #1
 80080dc:	f43f add2 	beq.w	8007c84 <_strtod_l+0x444>
 80080e0:	4ba2      	ldr	r3, [pc, #648]	; (800836c <_strtod_l+0xb2c>)
 80080e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080e4:	f04f 0900 	mov.w	r9, #0
 80080e8:	401a      	ands	r2, r3
 80080ea:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 80080ee:	e79f      	b.n	8008030 <_strtod_l+0x7f0>
 80080f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80080f4:	e7eb      	b.n	80080ce <_strtod_l+0x88e>
 80080f6:	460b      	mov	r3, r1
 80080f8:	e7e9      	b.n	80080ce <_strtod_l+0x88e>
 80080fa:	bb7b      	cbnz	r3, 800815c <_strtod_l+0x91c>
 80080fc:	f1b9 0f00 	cmp.w	r9, #0
 8008100:	d12c      	bne.n	800815c <_strtod_l+0x91c>
 8008102:	9905      	ldr	r1, [sp, #20]
 8008104:	4653      	mov	r3, sl
 8008106:	4a99      	ldr	r2, [pc, #612]	; (800836c <_strtod_l+0xb2c>)
 8008108:	b1f1      	cbz	r1, 8008148 <_strtod_l+0x908>
 800810a:	ea02 010a 	and.w	r1, r2, sl
 800810e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008112:	dc19      	bgt.n	8008148 <_strtod_l+0x908>
 8008114:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008118:	f77f ae51 	ble.w	8007dbe <_strtod_l+0x57e>
 800811c:	2300      	movs	r3, #0
 800811e:	4a95      	ldr	r2, [pc, #596]	; (8008374 <_strtod_l+0xb34>)
 8008120:	4648      	mov	r0, r9
 8008122:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8008126:	4651      	mov	r1, sl
 8008128:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800812c:	f7f8 f9d4 	bl	80004d8 <__aeabi_dmul>
 8008130:	4681      	mov	r9, r0
 8008132:	468a      	mov	sl, r1
 8008134:	2900      	cmp	r1, #0
 8008136:	f47f adb0 	bne.w	8007c9a <_strtod_l+0x45a>
 800813a:	2800      	cmp	r0, #0
 800813c:	f47f adad 	bne.w	8007c9a <_strtod_l+0x45a>
 8008140:	2322      	movs	r3, #34	; 0x22
 8008142:	f8cb 3000 	str.w	r3, [fp]
 8008146:	e5a8      	b.n	8007c9a <_strtod_l+0x45a>
 8008148:	4013      	ands	r3, r2
 800814a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800814e:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 8008152:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8008156:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 800815a:	e769      	b.n	8008030 <_strtod_l+0x7f0>
 800815c:	b19d      	cbz	r5, 8008186 <_strtod_l+0x946>
 800815e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008160:	421d      	tst	r5, r3
 8008162:	f43f af65 	beq.w	8008030 <_strtod_l+0x7f0>
 8008166:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008168:	9a05      	ldr	r2, [sp, #20]
 800816a:	4648      	mov	r0, r9
 800816c:	4651      	mov	r1, sl
 800816e:	b173      	cbz	r3, 800818e <_strtod_l+0x94e>
 8008170:	f7ff fb42 	bl	80077f8 <sulp>
 8008174:	4602      	mov	r2, r0
 8008176:	460b      	mov	r3, r1
 8008178:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800817c:	f7f7 fff6 	bl	800016c <__adddf3>
 8008180:	4681      	mov	r9, r0
 8008182:	468a      	mov	sl, r1
 8008184:	e754      	b.n	8008030 <_strtod_l+0x7f0>
 8008186:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008188:	ea13 0f09 	tst.w	r3, r9
 800818c:	e7e9      	b.n	8008162 <_strtod_l+0x922>
 800818e:	f7ff fb33 	bl	80077f8 <sulp>
 8008192:	4602      	mov	r2, r0
 8008194:	460b      	mov	r3, r1
 8008196:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800819a:	f7f7 ffe5 	bl	8000168 <__aeabi_dsub>
 800819e:	2200      	movs	r2, #0
 80081a0:	2300      	movs	r3, #0
 80081a2:	4681      	mov	r9, r0
 80081a4:	468a      	mov	sl, r1
 80081a6:	f7f8 fbff 	bl	80009a8 <__aeabi_dcmpeq>
 80081aa:	2800      	cmp	r0, #0
 80081ac:	f47f ae07 	bne.w	8007dbe <_strtod_l+0x57e>
 80081b0:	e73e      	b.n	8008030 <_strtod_l+0x7f0>
 80081b2:	9904      	ldr	r1, [sp, #16]
 80081b4:	4640      	mov	r0, r8
 80081b6:	f001 f8ca 	bl	800934e <__ratio>
 80081ba:	2200      	movs	r2, #0
 80081bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80081c0:	4606      	mov	r6, r0
 80081c2:	460f      	mov	r7, r1
 80081c4:	f7f8 fc04 	bl	80009d0 <__aeabi_dcmple>
 80081c8:	2800      	cmp	r0, #0
 80081ca:	d075      	beq.n	80082b8 <_strtod_l+0xa78>
 80081cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d047      	beq.n	8008262 <_strtod_l+0xa22>
 80081d2:	2600      	movs	r6, #0
 80081d4:	4f68      	ldr	r7, [pc, #416]	; (8008378 <_strtod_l+0xb38>)
 80081d6:	4d68      	ldr	r5, [pc, #416]	; (8008378 <_strtod_l+0xb38>)
 80081d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80081de:	0d1b      	lsrs	r3, r3, #20
 80081e0:	051b      	lsls	r3, r3, #20
 80081e2:	930f      	str	r3, [sp, #60]	; 0x3c
 80081e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80081e6:	4b65      	ldr	r3, [pc, #404]	; (800837c <_strtod_l+0xb3c>)
 80081e8:	429a      	cmp	r2, r3
 80081ea:	f040 80cf 	bne.w	800838c <_strtod_l+0xb4c>
 80081ee:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80081f2:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80081f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081f8:	4648      	mov	r0, r9
 80081fa:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 80081fe:	4651      	mov	r1, sl
 8008200:	f000 ffe0 	bl	80091c4 <__ulp>
 8008204:	4602      	mov	r2, r0
 8008206:	460b      	mov	r3, r1
 8008208:	4630      	mov	r0, r6
 800820a:	4639      	mov	r1, r7
 800820c:	f7f8 f964 	bl	80004d8 <__aeabi_dmul>
 8008210:	464a      	mov	r2, r9
 8008212:	4653      	mov	r3, sl
 8008214:	f7f7 ffaa 	bl	800016c <__adddf3>
 8008218:	460b      	mov	r3, r1
 800821a:	4954      	ldr	r1, [pc, #336]	; (800836c <_strtod_l+0xb2c>)
 800821c:	4a58      	ldr	r2, [pc, #352]	; (8008380 <_strtod_l+0xb40>)
 800821e:	4019      	ands	r1, r3
 8008220:	4291      	cmp	r1, r2
 8008222:	4681      	mov	r9, r0
 8008224:	d95e      	bls.n	80082e4 <_strtod_l+0xaa4>
 8008226:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008228:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800822c:	4293      	cmp	r3, r2
 800822e:	d103      	bne.n	8008238 <_strtod_l+0x9f8>
 8008230:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008232:	3301      	adds	r3, #1
 8008234:	f43f ad26 	beq.w	8007c84 <_strtod_l+0x444>
 8008238:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800823c:	f8df a130 	ldr.w	sl, [pc, #304]	; 8008370 <_strtod_l+0xb30>
 8008240:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008242:	4658      	mov	r0, fp
 8008244:	f000 fd27 	bl	8008c96 <_Bfree>
 8008248:	9906      	ldr	r1, [sp, #24]
 800824a:	4658      	mov	r0, fp
 800824c:	f000 fd23 	bl	8008c96 <_Bfree>
 8008250:	9904      	ldr	r1, [sp, #16]
 8008252:	4658      	mov	r0, fp
 8008254:	f000 fd1f 	bl	8008c96 <_Bfree>
 8008258:	4641      	mov	r1, r8
 800825a:	4658      	mov	r0, fp
 800825c:	f000 fd1b 	bl	8008c96 <_Bfree>
 8008260:	e617      	b.n	8007e92 <_strtod_l+0x652>
 8008262:	f1b9 0f00 	cmp.w	r9, #0
 8008266:	d119      	bne.n	800829c <_strtod_l+0xa5c>
 8008268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800826a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800826e:	b9e3      	cbnz	r3, 80082aa <_strtod_l+0xa6a>
 8008270:	2200      	movs	r2, #0
 8008272:	4b41      	ldr	r3, [pc, #260]	; (8008378 <_strtod_l+0xb38>)
 8008274:	4630      	mov	r0, r6
 8008276:	4639      	mov	r1, r7
 8008278:	f7f8 fba0 	bl	80009bc <__aeabi_dcmplt>
 800827c:	b9c8      	cbnz	r0, 80082b2 <_strtod_l+0xa72>
 800827e:	2200      	movs	r2, #0
 8008280:	4b40      	ldr	r3, [pc, #256]	; (8008384 <_strtod_l+0xb44>)
 8008282:	4630      	mov	r0, r6
 8008284:	4639      	mov	r1, r7
 8008286:	f7f8 f927 	bl	80004d8 <__aeabi_dmul>
 800828a:	4604      	mov	r4, r0
 800828c:	460d      	mov	r5, r1
 800828e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008292:	9418      	str	r4, [sp, #96]	; 0x60
 8008294:	9319      	str	r3, [sp, #100]	; 0x64
 8008296:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800829a:	e79d      	b.n	80081d8 <_strtod_l+0x998>
 800829c:	f1b9 0f01 	cmp.w	r9, #1
 80082a0:	d103      	bne.n	80082aa <_strtod_l+0xa6a>
 80082a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	f43f ad8a 	beq.w	8007dbe <_strtod_l+0x57e>
 80082aa:	2600      	movs	r6, #0
 80082ac:	4f36      	ldr	r7, [pc, #216]	; (8008388 <_strtod_l+0xb48>)
 80082ae:	2400      	movs	r4, #0
 80082b0:	e791      	b.n	80081d6 <_strtod_l+0x996>
 80082b2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80082b4:	4d33      	ldr	r5, [pc, #204]	; (8008384 <_strtod_l+0xb44>)
 80082b6:	e7ea      	b.n	800828e <_strtod_l+0xa4e>
 80082b8:	4b32      	ldr	r3, [pc, #200]	; (8008384 <_strtod_l+0xb44>)
 80082ba:	2200      	movs	r2, #0
 80082bc:	4630      	mov	r0, r6
 80082be:	4639      	mov	r1, r7
 80082c0:	f7f8 f90a 	bl	80004d8 <__aeabi_dmul>
 80082c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80082c6:	4604      	mov	r4, r0
 80082c8:	460d      	mov	r5, r1
 80082ca:	b933      	cbnz	r3, 80082da <_strtod_l+0xa9a>
 80082cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80082d0:	9010      	str	r0, [sp, #64]	; 0x40
 80082d2:	9311      	str	r3, [sp, #68]	; 0x44
 80082d4:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80082d8:	e77e      	b.n	80081d8 <_strtod_l+0x998>
 80082da:	4602      	mov	r2, r0
 80082dc:	460b      	mov	r3, r1
 80082de:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80082e2:	e7f7      	b.n	80082d4 <_strtod_l+0xa94>
 80082e4:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 80082e8:	9b05      	ldr	r3, [sp, #20]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d1a8      	bne.n	8008240 <_strtod_l+0xa00>
 80082ee:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80082f2:	0d1b      	lsrs	r3, r3, #20
 80082f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80082f6:	051b      	lsls	r3, r3, #20
 80082f8:	429a      	cmp	r2, r3
 80082fa:	4656      	mov	r6, sl
 80082fc:	d1a0      	bne.n	8008240 <_strtod_l+0xa00>
 80082fe:	4629      	mov	r1, r5
 8008300:	4620      	mov	r0, r4
 8008302:	f7f8 fb99 	bl	8000a38 <__aeabi_d2iz>
 8008306:	f7f8 f87d 	bl	8000404 <__aeabi_i2d>
 800830a:	460b      	mov	r3, r1
 800830c:	4602      	mov	r2, r0
 800830e:	4629      	mov	r1, r5
 8008310:	4620      	mov	r0, r4
 8008312:	f7f7 ff29 	bl	8000168 <__aeabi_dsub>
 8008316:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008318:	4604      	mov	r4, r0
 800831a:	460d      	mov	r5, r1
 800831c:	b933      	cbnz	r3, 800832c <_strtod_l+0xaec>
 800831e:	f1b9 0f00 	cmp.w	r9, #0
 8008322:	d103      	bne.n	800832c <_strtod_l+0xaec>
 8008324:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8008328:	2e00      	cmp	r6, #0
 800832a:	d06a      	beq.n	8008402 <_strtod_l+0xbc2>
 800832c:	a30a      	add	r3, pc, #40	; (adr r3, 8008358 <_strtod_l+0xb18>)
 800832e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008332:	4620      	mov	r0, r4
 8008334:	4629      	mov	r1, r5
 8008336:	f7f8 fb41 	bl	80009bc <__aeabi_dcmplt>
 800833a:	2800      	cmp	r0, #0
 800833c:	f47f acad 	bne.w	8007c9a <_strtod_l+0x45a>
 8008340:	a307      	add	r3, pc, #28	; (adr r3, 8008360 <_strtod_l+0xb20>)
 8008342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008346:	4620      	mov	r0, r4
 8008348:	4629      	mov	r1, r5
 800834a:	f7f8 fb55 	bl	80009f8 <__aeabi_dcmpgt>
 800834e:	2800      	cmp	r0, #0
 8008350:	f43f af76 	beq.w	8008240 <_strtod_l+0xa00>
 8008354:	e4a1      	b.n	8007c9a <_strtod_l+0x45a>
 8008356:	bf00      	nop
 8008358:	94a03595 	.word	0x94a03595
 800835c:	3fdfffff 	.word	0x3fdfffff
 8008360:	35afe535 	.word	0x35afe535
 8008364:	3fe00000 	.word	0x3fe00000
 8008368:	000fffff 	.word	0x000fffff
 800836c:	7ff00000 	.word	0x7ff00000
 8008370:	7fefffff 	.word	0x7fefffff
 8008374:	39500000 	.word	0x39500000
 8008378:	3ff00000 	.word	0x3ff00000
 800837c:	7fe00000 	.word	0x7fe00000
 8008380:	7c9fffff 	.word	0x7c9fffff
 8008384:	3fe00000 	.word	0x3fe00000
 8008388:	bff00000 	.word	0xbff00000
 800838c:	9b05      	ldr	r3, [sp, #20]
 800838e:	b313      	cbz	r3, 80083d6 <_strtod_l+0xb96>
 8008390:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008392:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008396:	d81e      	bhi.n	80083d6 <_strtod_l+0xb96>
 8008398:	a325      	add	r3, pc, #148	; (adr r3, 8008430 <_strtod_l+0xbf0>)
 800839a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800839e:	4620      	mov	r0, r4
 80083a0:	4629      	mov	r1, r5
 80083a2:	f7f8 fb15 	bl	80009d0 <__aeabi_dcmple>
 80083a6:	b190      	cbz	r0, 80083ce <_strtod_l+0xb8e>
 80083a8:	4629      	mov	r1, r5
 80083aa:	4620      	mov	r0, r4
 80083ac:	f7f8 fb6c 	bl	8000a88 <__aeabi_d2uiz>
 80083b0:	2800      	cmp	r0, #0
 80083b2:	bf08      	it	eq
 80083b4:	2001      	moveq	r0, #1
 80083b6:	f7f8 f815 	bl	80003e4 <__aeabi_ui2d>
 80083ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80083bc:	4604      	mov	r4, r0
 80083be:	460d      	mov	r5, r1
 80083c0:	b9d3      	cbnz	r3, 80083f8 <_strtod_l+0xbb8>
 80083c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80083c6:	9012      	str	r0, [sp, #72]	; 0x48
 80083c8:	9313      	str	r3, [sp, #76]	; 0x4c
 80083ca:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80083ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80083d0:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80083d4:	1a9f      	subs	r7, r3, r2
 80083d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80083da:	f000 fef3 	bl	80091c4 <__ulp>
 80083de:	4602      	mov	r2, r0
 80083e0:	460b      	mov	r3, r1
 80083e2:	4630      	mov	r0, r6
 80083e4:	4639      	mov	r1, r7
 80083e6:	f7f8 f877 	bl	80004d8 <__aeabi_dmul>
 80083ea:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80083ee:	f7f7 febd 	bl	800016c <__adddf3>
 80083f2:	4681      	mov	r9, r0
 80083f4:	468a      	mov	sl, r1
 80083f6:	e777      	b.n	80082e8 <_strtod_l+0xaa8>
 80083f8:	4602      	mov	r2, r0
 80083fa:	460b      	mov	r3, r1
 80083fc:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8008400:	e7e3      	b.n	80083ca <_strtod_l+0xb8a>
 8008402:	a30d      	add	r3, pc, #52	; (adr r3, 8008438 <_strtod_l+0xbf8>)
 8008404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008408:	f7f8 fad8 	bl	80009bc <__aeabi_dcmplt>
 800840c:	e79f      	b.n	800834e <_strtod_l+0xb0e>
 800840e:	2300      	movs	r3, #0
 8008410:	930d      	str	r3, [sp, #52]	; 0x34
 8008412:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008414:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008416:	6013      	str	r3, [r2, #0]
 8008418:	f7ff ba55 	b.w	80078c6 <_strtod_l+0x86>
 800841c:	2b65      	cmp	r3, #101	; 0x65
 800841e:	f04f 0200 	mov.w	r2, #0
 8008422:	f43f ab42 	beq.w	8007aaa <_strtod_l+0x26a>
 8008426:	2101      	movs	r1, #1
 8008428:	4614      	mov	r4, r2
 800842a:	9105      	str	r1, [sp, #20]
 800842c:	f7ff babf 	b.w	80079ae <_strtod_l+0x16e>
 8008430:	ffc00000 	.word	0xffc00000
 8008434:	41dfffff 	.word	0x41dfffff
 8008438:	94a03595 	.word	0x94a03595
 800843c:	3fcfffff 	.word	0x3fcfffff

08008440 <_strtod_r>:
 8008440:	4b05      	ldr	r3, [pc, #20]	; (8008458 <_strtod_r+0x18>)
 8008442:	b410      	push	{r4}
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4c05      	ldr	r4, [pc, #20]	; (800845c <_strtod_r+0x1c>)
 8008448:	6a1b      	ldr	r3, [r3, #32]
 800844a:	2b00      	cmp	r3, #0
 800844c:	bf08      	it	eq
 800844e:	4623      	moveq	r3, r4
 8008450:	bc10      	pop	{r4}
 8008452:	f7ff b9f5 	b.w	8007840 <_strtod_l>
 8008456:	bf00      	nop
 8008458:	20000010 	.word	0x20000010
 800845c:	20000074 	.word	0x20000074

08008460 <_strtol_l.isra.0>:
 8008460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008464:	4680      	mov	r8, r0
 8008466:	4689      	mov	r9, r1
 8008468:	4692      	mov	sl, r2
 800846a:	461e      	mov	r6, r3
 800846c:	460f      	mov	r7, r1
 800846e:	463d      	mov	r5, r7
 8008470:	9808      	ldr	r0, [sp, #32]
 8008472:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008476:	f000 fba9 	bl	8008bcc <__locale_ctype_ptr_l>
 800847a:	4420      	add	r0, r4
 800847c:	7843      	ldrb	r3, [r0, #1]
 800847e:	f013 0308 	ands.w	r3, r3, #8
 8008482:	d132      	bne.n	80084ea <_strtol_l.isra.0+0x8a>
 8008484:	2c2d      	cmp	r4, #45	; 0x2d
 8008486:	d132      	bne.n	80084ee <_strtol_l.isra.0+0x8e>
 8008488:	2201      	movs	r2, #1
 800848a:	787c      	ldrb	r4, [r7, #1]
 800848c:	1cbd      	adds	r5, r7, #2
 800848e:	2e00      	cmp	r6, #0
 8008490:	d05d      	beq.n	800854e <_strtol_l.isra.0+0xee>
 8008492:	2e10      	cmp	r6, #16
 8008494:	d109      	bne.n	80084aa <_strtol_l.isra.0+0x4a>
 8008496:	2c30      	cmp	r4, #48	; 0x30
 8008498:	d107      	bne.n	80084aa <_strtol_l.isra.0+0x4a>
 800849a:	782b      	ldrb	r3, [r5, #0]
 800849c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80084a0:	2b58      	cmp	r3, #88	; 0x58
 80084a2:	d14f      	bne.n	8008544 <_strtol_l.isra.0+0xe4>
 80084a4:	2610      	movs	r6, #16
 80084a6:	786c      	ldrb	r4, [r5, #1]
 80084a8:	3502      	adds	r5, #2
 80084aa:	2a00      	cmp	r2, #0
 80084ac:	bf14      	ite	ne
 80084ae:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80084b2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80084b6:	2700      	movs	r7, #0
 80084b8:	fbb1 fcf6 	udiv	ip, r1, r6
 80084bc:	4638      	mov	r0, r7
 80084be:	fb06 1e1c 	mls	lr, r6, ip, r1
 80084c2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80084c6:	2b09      	cmp	r3, #9
 80084c8:	d817      	bhi.n	80084fa <_strtol_l.isra.0+0x9a>
 80084ca:	461c      	mov	r4, r3
 80084cc:	42a6      	cmp	r6, r4
 80084ce:	dd23      	ble.n	8008518 <_strtol_l.isra.0+0xb8>
 80084d0:	1c7b      	adds	r3, r7, #1
 80084d2:	d007      	beq.n	80084e4 <_strtol_l.isra.0+0x84>
 80084d4:	4584      	cmp	ip, r0
 80084d6:	d31c      	bcc.n	8008512 <_strtol_l.isra.0+0xb2>
 80084d8:	d101      	bne.n	80084de <_strtol_l.isra.0+0x7e>
 80084da:	45a6      	cmp	lr, r4
 80084dc:	db19      	blt.n	8008512 <_strtol_l.isra.0+0xb2>
 80084de:	2701      	movs	r7, #1
 80084e0:	fb00 4006 	mla	r0, r0, r6, r4
 80084e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80084e8:	e7eb      	b.n	80084c2 <_strtol_l.isra.0+0x62>
 80084ea:	462f      	mov	r7, r5
 80084ec:	e7bf      	b.n	800846e <_strtol_l.isra.0+0xe>
 80084ee:	2c2b      	cmp	r4, #43	; 0x2b
 80084f0:	bf04      	itt	eq
 80084f2:	1cbd      	addeq	r5, r7, #2
 80084f4:	787c      	ldrbeq	r4, [r7, #1]
 80084f6:	461a      	mov	r2, r3
 80084f8:	e7c9      	b.n	800848e <_strtol_l.isra.0+0x2e>
 80084fa:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80084fe:	2b19      	cmp	r3, #25
 8008500:	d801      	bhi.n	8008506 <_strtol_l.isra.0+0xa6>
 8008502:	3c37      	subs	r4, #55	; 0x37
 8008504:	e7e2      	b.n	80084cc <_strtol_l.isra.0+0x6c>
 8008506:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800850a:	2b19      	cmp	r3, #25
 800850c:	d804      	bhi.n	8008518 <_strtol_l.isra.0+0xb8>
 800850e:	3c57      	subs	r4, #87	; 0x57
 8008510:	e7dc      	b.n	80084cc <_strtol_l.isra.0+0x6c>
 8008512:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008516:	e7e5      	b.n	80084e4 <_strtol_l.isra.0+0x84>
 8008518:	1c7b      	adds	r3, r7, #1
 800851a:	d108      	bne.n	800852e <_strtol_l.isra.0+0xce>
 800851c:	2322      	movs	r3, #34	; 0x22
 800851e:	4608      	mov	r0, r1
 8008520:	f8c8 3000 	str.w	r3, [r8]
 8008524:	f1ba 0f00 	cmp.w	sl, #0
 8008528:	d107      	bne.n	800853a <_strtol_l.isra.0+0xda>
 800852a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800852e:	b102      	cbz	r2, 8008532 <_strtol_l.isra.0+0xd2>
 8008530:	4240      	negs	r0, r0
 8008532:	f1ba 0f00 	cmp.w	sl, #0
 8008536:	d0f8      	beq.n	800852a <_strtol_l.isra.0+0xca>
 8008538:	b10f      	cbz	r7, 800853e <_strtol_l.isra.0+0xde>
 800853a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800853e:	f8ca 9000 	str.w	r9, [sl]
 8008542:	e7f2      	b.n	800852a <_strtol_l.isra.0+0xca>
 8008544:	2430      	movs	r4, #48	; 0x30
 8008546:	2e00      	cmp	r6, #0
 8008548:	d1af      	bne.n	80084aa <_strtol_l.isra.0+0x4a>
 800854a:	2608      	movs	r6, #8
 800854c:	e7ad      	b.n	80084aa <_strtol_l.isra.0+0x4a>
 800854e:	2c30      	cmp	r4, #48	; 0x30
 8008550:	d0a3      	beq.n	800849a <_strtol_l.isra.0+0x3a>
 8008552:	260a      	movs	r6, #10
 8008554:	e7a9      	b.n	80084aa <_strtol_l.isra.0+0x4a>
	...

08008558 <_strtol_r>:
 8008558:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800855a:	4c06      	ldr	r4, [pc, #24]	; (8008574 <_strtol_r+0x1c>)
 800855c:	4d06      	ldr	r5, [pc, #24]	; (8008578 <_strtol_r+0x20>)
 800855e:	6824      	ldr	r4, [r4, #0]
 8008560:	6a24      	ldr	r4, [r4, #32]
 8008562:	2c00      	cmp	r4, #0
 8008564:	bf08      	it	eq
 8008566:	462c      	moveq	r4, r5
 8008568:	9400      	str	r4, [sp, #0]
 800856a:	f7ff ff79 	bl	8008460 <_strtol_l.isra.0>
 800856e:	b003      	add	sp, #12
 8008570:	bd30      	pop	{r4, r5, pc}
 8008572:	bf00      	nop
 8008574:	20000010 	.word	0x20000010
 8008578:	20000074 	.word	0x20000074

0800857c <rshift>:
 800857c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800857e:	6906      	ldr	r6, [r0, #16]
 8008580:	114b      	asrs	r3, r1, #5
 8008582:	429e      	cmp	r6, r3
 8008584:	f100 0414 	add.w	r4, r0, #20
 8008588:	dd31      	ble.n	80085ee <rshift+0x72>
 800858a:	f011 011f 	ands.w	r1, r1, #31
 800858e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8008592:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8008596:	d108      	bne.n	80085aa <rshift+0x2e>
 8008598:	4621      	mov	r1, r4
 800859a:	42b2      	cmp	r2, r6
 800859c:	460b      	mov	r3, r1
 800859e:	d211      	bcs.n	80085c4 <rshift+0x48>
 80085a0:	f852 3b04 	ldr.w	r3, [r2], #4
 80085a4:	f841 3b04 	str.w	r3, [r1], #4
 80085a8:	e7f7      	b.n	800859a <rshift+0x1e>
 80085aa:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80085ae:	4623      	mov	r3, r4
 80085b0:	f1c1 0c20 	rsb	ip, r1, #32
 80085b4:	40cd      	lsrs	r5, r1
 80085b6:	3204      	adds	r2, #4
 80085b8:	42b2      	cmp	r2, r6
 80085ba:	4617      	mov	r7, r2
 80085bc:	d30d      	bcc.n	80085da <rshift+0x5e>
 80085be:	601d      	str	r5, [r3, #0]
 80085c0:	b105      	cbz	r5, 80085c4 <rshift+0x48>
 80085c2:	3304      	adds	r3, #4
 80085c4:	42a3      	cmp	r3, r4
 80085c6:	eba3 0204 	sub.w	r2, r3, r4
 80085ca:	bf08      	it	eq
 80085cc:	2300      	moveq	r3, #0
 80085ce:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80085d2:	6102      	str	r2, [r0, #16]
 80085d4:	bf08      	it	eq
 80085d6:	6143      	streq	r3, [r0, #20]
 80085d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085da:	683f      	ldr	r7, [r7, #0]
 80085dc:	fa07 f70c 	lsl.w	r7, r7, ip
 80085e0:	433d      	orrs	r5, r7
 80085e2:	f843 5b04 	str.w	r5, [r3], #4
 80085e6:	f852 5b04 	ldr.w	r5, [r2], #4
 80085ea:	40cd      	lsrs	r5, r1
 80085ec:	e7e4      	b.n	80085b8 <rshift+0x3c>
 80085ee:	4623      	mov	r3, r4
 80085f0:	e7e8      	b.n	80085c4 <rshift+0x48>

080085f2 <__hexdig_fun>:
 80085f2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80085f6:	2b09      	cmp	r3, #9
 80085f8:	d802      	bhi.n	8008600 <__hexdig_fun+0xe>
 80085fa:	3820      	subs	r0, #32
 80085fc:	b2c0      	uxtb	r0, r0
 80085fe:	4770      	bx	lr
 8008600:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008604:	2b05      	cmp	r3, #5
 8008606:	d801      	bhi.n	800860c <__hexdig_fun+0x1a>
 8008608:	3847      	subs	r0, #71	; 0x47
 800860a:	e7f7      	b.n	80085fc <__hexdig_fun+0xa>
 800860c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008610:	2b05      	cmp	r3, #5
 8008612:	d801      	bhi.n	8008618 <__hexdig_fun+0x26>
 8008614:	3827      	subs	r0, #39	; 0x27
 8008616:	e7f1      	b.n	80085fc <__hexdig_fun+0xa>
 8008618:	2000      	movs	r0, #0
 800861a:	4770      	bx	lr

0800861c <__gethex>:
 800861c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008620:	b08b      	sub	sp, #44	; 0x2c
 8008622:	9002      	str	r0, [sp, #8]
 8008624:	9816      	ldr	r0, [sp, #88]	; 0x58
 8008626:	468a      	mov	sl, r1
 8008628:	4690      	mov	r8, r2
 800862a:	9306      	str	r3, [sp, #24]
 800862c:	f000 fae0 	bl	8008bf0 <__localeconv_l>
 8008630:	6803      	ldr	r3, [r0, #0]
 8008632:	f04f 0b00 	mov.w	fp, #0
 8008636:	4618      	mov	r0, r3
 8008638:	9303      	str	r3, [sp, #12]
 800863a:	f7f7 fd89 	bl	8000150 <strlen>
 800863e:	9b03      	ldr	r3, [sp, #12]
 8008640:	9001      	str	r0, [sp, #4]
 8008642:	4403      	add	r3, r0
 8008644:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008648:	9307      	str	r3, [sp, #28]
 800864a:	f8da 3000 	ldr.w	r3, [sl]
 800864e:	3302      	adds	r3, #2
 8008650:	461f      	mov	r7, r3
 8008652:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008656:	2830      	cmp	r0, #48	; 0x30
 8008658:	d06c      	beq.n	8008734 <__gethex+0x118>
 800865a:	f7ff ffca 	bl	80085f2 <__hexdig_fun>
 800865e:	4604      	mov	r4, r0
 8008660:	2800      	cmp	r0, #0
 8008662:	d16a      	bne.n	800873a <__gethex+0x11e>
 8008664:	9a01      	ldr	r2, [sp, #4]
 8008666:	9903      	ldr	r1, [sp, #12]
 8008668:	4638      	mov	r0, r7
 800866a:	f7ff f8b3 	bl	80077d4 <strncmp>
 800866e:	2800      	cmp	r0, #0
 8008670:	d166      	bne.n	8008740 <__gethex+0x124>
 8008672:	9b01      	ldr	r3, [sp, #4]
 8008674:	5cf8      	ldrb	r0, [r7, r3]
 8008676:	18fe      	adds	r6, r7, r3
 8008678:	f7ff ffbb 	bl	80085f2 <__hexdig_fun>
 800867c:	2800      	cmp	r0, #0
 800867e:	d062      	beq.n	8008746 <__gethex+0x12a>
 8008680:	4633      	mov	r3, r6
 8008682:	7818      	ldrb	r0, [r3, #0]
 8008684:	461f      	mov	r7, r3
 8008686:	2830      	cmp	r0, #48	; 0x30
 8008688:	f103 0301 	add.w	r3, r3, #1
 800868c:	d0f9      	beq.n	8008682 <__gethex+0x66>
 800868e:	f7ff ffb0 	bl	80085f2 <__hexdig_fun>
 8008692:	fab0 f580 	clz	r5, r0
 8008696:	4634      	mov	r4, r6
 8008698:	f04f 0b01 	mov.w	fp, #1
 800869c:	096d      	lsrs	r5, r5, #5
 800869e:	463a      	mov	r2, r7
 80086a0:	4616      	mov	r6, r2
 80086a2:	7830      	ldrb	r0, [r6, #0]
 80086a4:	3201      	adds	r2, #1
 80086a6:	f7ff ffa4 	bl	80085f2 <__hexdig_fun>
 80086aa:	2800      	cmp	r0, #0
 80086ac:	d1f8      	bne.n	80086a0 <__gethex+0x84>
 80086ae:	9a01      	ldr	r2, [sp, #4]
 80086b0:	9903      	ldr	r1, [sp, #12]
 80086b2:	4630      	mov	r0, r6
 80086b4:	f7ff f88e 	bl	80077d4 <strncmp>
 80086b8:	b950      	cbnz	r0, 80086d0 <__gethex+0xb4>
 80086ba:	b954      	cbnz	r4, 80086d2 <__gethex+0xb6>
 80086bc:	9b01      	ldr	r3, [sp, #4]
 80086be:	18f4      	adds	r4, r6, r3
 80086c0:	4622      	mov	r2, r4
 80086c2:	4616      	mov	r6, r2
 80086c4:	7830      	ldrb	r0, [r6, #0]
 80086c6:	3201      	adds	r2, #1
 80086c8:	f7ff ff93 	bl	80085f2 <__hexdig_fun>
 80086cc:	2800      	cmp	r0, #0
 80086ce:	d1f8      	bne.n	80086c2 <__gethex+0xa6>
 80086d0:	b10c      	cbz	r4, 80086d6 <__gethex+0xba>
 80086d2:	1ba4      	subs	r4, r4, r6
 80086d4:	00a4      	lsls	r4, r4, #2
 80086d6:	7833      	ldrb	r3, [r6, #0]
 80086d8:	2b50      	cmp	r3, #80	; 0x50
 80086da:	d001      	beq.n	80086e0 <__gethex+0xc4>
 80086dc:	2b70      	cmp	r3, #112	; 0x70
 80086de:	d140      	bne.n	8008762 <__gethex+0x146>
 80086e0:	7873      	ldrb	r3, [r6, #1]
 80086e2:	2b2b      	cmp	r3, #43	; 0x2b
 80086e4:	d031      	beq.n	800874a <__gethex+0x12e>
 80086e6:	2b2d      	cmp	r3, #45	; 0x2d
 80086e8:	d033      	beq.n	8008752 <__gethex+0x136>
 80086ea:	f04f 0900 	mov.w	r9, #0
 80086ee:	1c71      	adds	r1, r6, #1
 80086f0:	7808      	ldrb	r0, [r1, #0]
 80086f2:	f7ff ff7e 	bl	80085f2 <__hexdig_fun>
 80086f6:	1e43      	subs	r3, r0, #1
 80086f8:	b2db      	uxtb	r3, r3
 80086fa:	2b18      	cmp	r3, #24
 80086fc:	d831      	bhi.n	8008762 <__gethex+0x146>
 80086fe:	f1a0 0210 	sub.w	r2, r0, #16
 8008702:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008706:	f7ff ff74 	bl	80085f2 <__hexdig_fun>
 800870a:	1e43      	subs	r3, r0, #1
 800870c:	b2db      	uxtb	r3, r3
 800870e:	2b18      	cmp	r3, #24
 8008710:	d922      	bls.n	8008758 <__gethex+0x13c>
 8008712:	f1b9 0f00 	cmp.w	r9, #0
 8008716:	d000      	beq.n	800871a <__gethex+0xfe>
 8008718:	4252      	negs	r2, r2
 800871a:	4414      	add	r4, r2
 800871c:	f8ca 1000 	str.w	r1, [sl]
 8008720:	b30d      	cbz	r5, 8008766 <__gethex+0x14a>
 8008722:	f1bb 0f00 	cmp.w	fp, #0
 8008726:	bf0c      	ite	eq
 8008728:	2706      	moveq	r7, #6
 800872a:	2700      	movne	r7, #0
 800872c:	4638      	mov	r0, r7
 800872e:	b00b      	add	sp, #44	; 0x2c
 8008730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008734:	f10b 0b01 	add.w	fp, fp, #1
 8008738:	e78a      	b.n	8008650 <__gethex+0x34>
 800873a:	2500      	movs	r5, #0
 800873c:	462c      	mov	r4, r5
 800873e:	e7ae      	b.n	800869e <__gethex+0x82>
 8008740:	463e      	mov	r6, r7
 8008742:	2501      	movs	r5, #1
 8008744:	e7c7      	b.n	80086d6 <__gethex+0xba>
 8008746:	4604      	mov	r4, r0
 8008748:	e7fb      	b.n	8008742 <__gethex+0x126>
 800874a:	f04f 0900 	mov.w	r9, #0
 800874e:	1cb1      	adds	r1, r6, #2
 8008750:	e7ce      	b.n	80086f0 <__gethex+0xd4>
 8008752:	f04f 0901 	mov.w	r9, #1
 8008756:	e7fa      	b.n	800874e <__gethex+0x132>
 8008758:	230a      	movs	r3, #10
 800875a:	fb03 0202 	mla	r2, r3, r2, r0
 800875e:	3a10      	subs	r2, #16
 8008760:	e7cf      	b.n	8008702 <__gethex+0xe6>
 8008762:	4631      	mov	r1, r6
 8008764:	e7da      	b.n	800871c <__gethex+0x100>
 8008766:	4629      	mov	r1, r5
 8008768:	1bf3      	subs	r3, r6, r7
 800876a:	3b01      	subs	r3, #1
 800876c:	2b07      	cmp	r3, #7
 800876e:	dc49      	bgt.n	8008804 <__gethex+0x1e8>
 8008770:	9802      	ldr	r0, [sp, #8]
 8008772:	f000 fa5c 	bl	8008c2e <_Balloc>
 8008776:	f04f 0b00 	mov.w	fp, #0
 800877a:	4605      	mov	r5, r0
 800877c:	46da      	mov	sl, fp
 800877e:	9b01      	ldr	r3, [sp, #4]
 8008780:	f100 0914 	add.w	r9, r0, #20
 8008784:	f1c3 0301 	rsb	r3, r3, #1
 8008788:	f8cd 9010 	str.w	r9, [sp, #16]
 800878c:	9308      	str	r3, [sp, #32]
 800878e:	42b7      	cmp	r7, r6
 8008790:	d33b      	bcc.n	800880a <__gethex+0x1ee>
 8008792:	9804      	ldr	r0, [sp, #16]
 8008794:	f840 ab04 	str.w	sl, [r0], #4
 8008798:	eba0 0009 	sub.w	r0, r0, r9
 800879c:	1080      	asrs	r0, r0, #2
 800879e:	6128      	str	r0, [r5, #16]
 80087a0:	0147      	lsls	r7, r0, #5
 80087a2:	4650      	mov	r0, sl
 80087a4:	f000 fb07 	bl	8008db6 <__hi0bits>
 80087a8:	f8d8 6000 	ldr.w	r6, [r8]
 80087ac:	1a3f      	subs	r7, r7, r0
 80087ae:	42b7      	cmp	r7, r6
 80087b0:	dd64      	ble.n	800887c <__gethex+0x260>
 80087b2:	1bbf      	subs	r7, r7, r6
 80087b4:	4639      	mov	r1, r7
 80087b6:	4628      	mov	r0, r5
 80087b8:	f000 fe11 	bl	80093de <__any_on>
 80087bc:	4682      	mov	sl, r0
 80087be:	b178      	cbz	r0, 80087e0 <__gethex+0x1c4>
 80087c0:	f04f 0a01 	mov.w	sl, #1
 80087c4:	1e7b      	subs	r3, r7, #1
 80087c6:	1159      	asrs	r1, r3, #5
 80087c8:	f003 021f 	and.w	r2, r3, #31
 80087cc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80087d0:	fa0a f202 	lsl.w	r2, sl, r2
 80087d4:	420a      	tst	r2, r1
 80087d6:	d003      	beq.n	80087e0 <__gethex+0x1c4>
 80087d8:	4553      	cmp	r3, sl
 80087da:	dc46      	bgt.n	800886a <__gethex+0x24e>
 80087dc:	f04f 0a02 	mov.w	sl, #2
 80087e0:	4639      	mov	r1, r7
 80087e2:	4628      	mov	r0, r5
 80087e4:	f7ff feca 	bl	800857c <rshift>
 80087e8:	443c      	add	r4, r7
 80087ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80087ee:	42a3      	cmp	r3, r4
 80087f0:	da52      	bge.n	8008898 <__gethex+0x27c>
 80087f2:	4629      	mov	r1, r5
 80087f4:	9802      	ldr	r0, [sp, #8]
 80087f6:	f000 fa4e 	bl	8008c96 <_Bfree>
 80087fa:	2300      	movs	r3, #0
 80087fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80087fe:	27a3      	movs	r7, #163	; 0xa3
 8008800:	6013      	str	r3, [r2, #0]
 8008802:	e793      	b.n	800872c <__gethex+0x110>
 8008804:	3101      	adds	r1, #1
 8008806:	105b      	asrs	r3, r3, #1
 8008808:	e7b0      	b.n	800876c <__gethex+0x150>
 800880a:	1e73      	subs	r3, r6, #1
 800880c:	9305      	str	r3, [sp, #20]
 800880e:	9a07      	ldr	r2, [sp, #28]
 8008810:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008814:	4293      	cmp	r3, r2
 8008816:	d018      	beq.n	800884a <__gethex+0x22e>
 8008818:	f1bb 0f20 	cmp.w	fp, #32
 800881c:	d107      	bne.n	800882e <__gethex+0x212>
 800881e:	9b04      	ldr	r3, [sp, #16]
 8008820:	f8c3 a000 	str.w	sl, [r3]
 8008824:	f04f 0a00 	mov.w	sl, #0
 8008828:	46d3      	mov	fp, sl
 800882a:	3304      	adds	r3, #4
 800882c:	9304      	str	r3, [sp, #16]
 800882e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008832:	f7ff fede 	bl	80085f2 <__hexdig_fun>
 8008836:	f000 000f 	and.w	r0, r0, #15
 800883a:	fa00 f00b 	lsl.w	r0, r0, fp
 800883e:	ea4a 0a00 	orr.w	sl, sl, r0
 8008842:	f10b 0b04 	add.w	fp, fp, #4
 8008846:	9b05      	ldr	r3, [sp, #20]
 8008848:	e00d      	b.n	8008866 <__gethex+0x24a>
 800884a:	9b05      	ldr	r3, [sp, #20]
 800884c:	9a08      	ldr	r2, [sp, #32]
 800884e:	4413      	add	r3, r2
 8008850:	42bb      	cmp	r3, r7
 8008852:	d3e1      	bcc.n	8008818 <__gethex+0x1fc>
 8008854:	4618      	mov	r0, r3
 8008856:	9a01      	ldr	r2, [sp, #4]
 8008858:	9903      	ldr	r1, [sp, #12]
 800885a:	9309      	str	r3, [sp, #36]	; 0x24
 800885c:	f7fe ffba 	bl	80077d4 <strncmp>
 8008860:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008862:	2800      	cmp	r0, #0
 8008864:	d1d8      	bne.n	8008818 <__gethex+0x1fc>
 8008866:	461e      	mov	r6, r3
 8008868:	e791      	b.n	800878e <__gethex+0x172>
 800886a:	1eb9      	subs	r1, r7, #2
 800886c:	4628      	mov	r0, r5
 800886e:	f000 fdb6 	bl	80093de <__any_on>
 8008872:	2800      	cmp	r0, #0
 8008874:	d0b2      	beq.n	80087dc <__gethex+0x1c0>
 8008876:	f04f 0a03 	mov.w	sl, #3
 800887a:	e7b1      	b.n	80087e0 <__gethex+0x1c4>
 800887c:	da09      	bge.n	8008892 <__gethex+0x276>
 800887e:	1bf7      	subs	r7, r6, r7
 8008880:	4629      	mov	r1, r5
 8008882:	463a      	mov	r2, r7
 8008884:	9802      	ldr	r0, [sp, #8]
 8008886:	f000 fbd1 	bl	800902c <__lshift>
 800888a:	4605      	mov	r5, r0
 800888c:	1be4      	subs	r4, r4, r7
 800888e:	f100 0914 	add.w	r9, r0, #20
 8008892:	f04f 0a00 	mov.w	sl, #0
 8008896:	e7a8      	b.n	80087ea <__gethex+0x1ce>
 8008898:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800889c:	42a0      	cmp	r0, r4
 800889e:	dd6b      	ble.n	8008978 <__gethex+0x35c>
 80088a0:	1b04      	subs	r4, r0, r4
 80088a2:	42a6      	cmp	r6, r4
 80088a4:	dc2e      	bgt.n	8008904 <__gethex+0x2e8>
 80088a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80088aa:	2b02      	cmp	r3, #2
 80088ac:	d022      	beq.n	80088f4 <__gethex+0x2d8>
 80088ae:	2b03      	cmp	r3, #3
 80088b0:	d024      	beq.n	80088fc <__gethex+0x2e0>
 80088b2:	2b01      	cmp	r3, #1
 80088b4:	d115      	bne.n	80088e2 <__gethex+0x2c6>
 80088b6:	42a6      	cmp	r6, r4
 80088b8:	d113      	bne.n	80088e2 <__gethex+0x2c6>
 80088ba:	2e01      	cmp	r6, #1
 80088bc:	dc0b      	bgt.n	80088d6 <__gethex+0x2ba>
 80088be:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80088c2:	9a06      	ldr	r2, [sp, #24]
 80088c4:	2762      	movs	r7, #98	; 0x62
 80088c6:	6013      	str	r3, [r2, #0]
 80088c8:	2301      	movs	r3, #1
 80088ca:	612b      	str	r3, [r5, #16]
 80088cc:	f8c9 3000 	str.w	r3, [r9]
 80088d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80088d2:	601d      	str	r5, [r3, #0]
 80088d4:	e72a      	b.n	800872c <__gethex+0x110>
 80088d6:	1e71      	subs	r1, r6, #1
 80088d8:	4628      	mov	r0, r5
 80088da:	f000 fd80 	bl	80093de <__any_on>
 80088de:	2800      	cmp	r0, #0
 80088e0:	d1ed      	bne.n	80088be <__gethex+0x2a2>
 80088e2:	4629      	mov	r1, r5
 80088e4:	9802      	ldr	r0, [sp, #8]
 80088e6:	f000 f9d6 	bl	8008c96 <_Bfree>
 80088ea:	2300      	movs	r3, #0
 80088ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80088ee:	2750      	movs	r7, #80	; 0x50
 80088f0:	6013      	str	r3, [r2, #0]
 80088f2:	e71b      	b.n	800872c <__gethex+0x110>
 80088f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d0e1      	beq.n	80088be <__gethex+0x2a2>
 80088fa:	e7f2      	b.n	80088e2 <__gethex+0x2c6>
 80088fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d1dd      	bne.n	80088be <__gethex+0x2a2>
 8008902:	e7ee      	b.n	80088e2 <__gethex+0x2c6>
 8008904:	1e67      	subs	r7, r4, #1
 8008906:	f1ba 0f00 	cmp.w	sl, #0
 800890a:	d132      	bne.n	8008972 <__gethex+0x356>
 800890c:	b127      	cbz	r7, 8008918 <__gethex+0x2fc>
 800890e:	4639      	mov	r1, r7
 8008910:	4628      	mov	r0, r5
 8008912:	f000 fd64 	bl	80093de <__any_on>
 8008916:	4682      	mov	sl, r0
 8008918:	2301      	movs	r3, #1
 800891a:	117a      	asrs	r2, r7, #5
 800891c:	f007 071f 	and.w	r7, r7, #31
 8008920:	fa03 f707 	lsl.w	r7, r3, r7
 8008924:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8008928:	4621      	mov	r1, r4
 800892a:	421f      	tst	r7, r3
 800892c:	f04f 0702 	mov.w	r7, #2
 8008930:	4628      	mov	r0, r5
 8008932:	bf18      	it	ne
 8008934:	f04a 0a02 	orrne.w	sl, sl, #2
 8008938:	1b36      	subs	r6, r6, r4
 800893a:	f7ff fe1f 	bl	800857c <rshift>
 800893e:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8008942:	f1ba 0f00 	cmp.w	sl, #0
 8008946:	d048      	beq.n	80089da <__gethex+0x3be>
 8008948:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800894c:	2b02      	cmp	r3, #2
 800894e:	d015      	beq.n	800897c <__gethex+0x360>
 8008950:	2b03      	cmp	r3, #3
 8008952:	d017      	beq.n	8008984 <__gethex+0x368>
 8008954:	2b01      	cmp	r3, #1
 8008956:	d109      	bne.n	800896c <__gethex+0x350>
 8008958:	f01a 0f02 	tst.w	sl, #2
 800895c:	d006      	beq.n	800896c <__gethex+0x350>
 800895e:	f8d9 3000 	ldr.w	r3, [r9]
 8008962:	ea4a 0a03 	orr.w	sl, sl, r3
 8008966:	f01a 0f01 	tst.w	sl, #1
 800896a:	d10e      	bne.n	800898a <__gethex+0x36e>
 800896c:	f047 0710 	orr.w	r7, r7, #16
 8008970:	e033      	b.n	80089da <__gethex+0x3be>
 8008972:	f04f 0a01 	mov.w	sl, #1
 8008976:	e7cf      	b.n	8008918 <__gethex+0x2fc>
 8008978:	2701      	movs	r7, #1
 800897a:	e7e2      	b.n	8008942 <__gethex+0x326>
 800897c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800897e:	f1c3 0301 	rsb	r3, r3, #1
 8008982:	9315      	str	r3, [sp, #84]	; 0x54
 8008984:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008986:	2b00      	cmp	r3, #0
 8008988:	d0f0      	beq.n	800896c <__gethex+0x350>
 800898a:	f04f 0c00 	mov.w	ip, #0
 800898e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8008992:	f105 0314 	add.w	r3, r5, #20
 8008996:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800899a:	eb03 010a 	add.w	r1, r3, sl
 800899e:	4618      	mov	r0, r3
 80089a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80089a4:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80089a8:	d01c      	beq.n	80089e4 <__gethex+0x3c8>
 80089aa:	3201      	adds	r2, #1
 80089ac:	6002      	str	r2, [r0, #0]
 80089ae:	2f02      	cmp	r7, #2
 80089b0:	f105 0314 	add.w	r3, r5, #20
 80089b4:	d138      	bne.n	8008a28 <__gethex+0x40c>
 80089b6:	f8d8 2000 	ldr.w	r2, [r8]
 80089ba:	3a01      	subs	r2, #1
 80089bc:	42b2      	cmp	r2, r6
 80089be:	d10a      	bne.n	80089d6 <__gethex+0x3ba>
 80089c0:	2201      	movs	r2, #1
 80089c2:	1171      	asrs	r1, r6, #5
 80089c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80089c8:	f006 061f 	and.w	r6, r6, #31
 80089cc:	fa02 f606 	lsl.w	r6, r2, r6
 80089d0:	421e      	tst	r6, r3
 80089d2:	bf18      	it	ne
 80089d4:	4617      	movne	r7, r2
 80089d6:	f047 0720 	orr.w	r7, r7, #32
 80089da:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80089dc:	601d      	str	r5, [r3, #0]
 80089de:	9b06      	ldr	r3, [sp, #24]
 80089e0:	601c      	str	r4, [r3, #0]
 80089e2:	e6a3      	b.n	800872c <__gethex+0x110>
 80089e4:	4299      	cmp	r1, r3
 80089e6:	f843 cc04 	str.w	ip, [r3, #-4]
 80089ea:	d8d8      	bhi.n	800899e <__gethex+0x382>
 80089ec:	68ab      	ldr	r3, [r5, #8]
 80089ee:	4599      	cmp	r9, r3
 80089f0:	db12      	blt.n	8008a18 <__gethex+0x3fc>
 80089f2:	6869      	ldr	r1, [r5, #4]
 80089f4:	9802      	ldr	r0, [sp, #8]
 80089f6:	3101      	adds	r1, #1
 80089f8:	f000 f919 	bl	8008c2e <_Balloc>
 80089fc:	4683      	mov	fp, r0
 80089fe:	692a      	ldr	r2, [r5, #16]
 8008a00:	f105 010c 	add.w	r1, r5, #12
 8008a04:	3202      	adds	r2, #2
 8008a06:	0092      	lsls	r2, r2, #2
 8008a08:	300c      	adds	r0, #12
 8008a0a:	f000 f905 	bl	8008c18 <memcpy>
 8008a0e:	4629      	mov	r1, r5
 8008a10:	9802      	ldr	r0, [sp, #8]
 8008a12:	f000 f940 	bl	8008c96 <_Bfree>
 8008a16:	465d      	mov	r5, fp
 8008a18:	692b      	ldr	r3, [r5, #16]
 8008a1a:	1c5a      	adds	r2, r3, #1
 8008a1c:	612a      	str	r2, [r5, #16]
 8008a1e:	2201      	movs	r2, #1
 8008a20:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008a24:	615a      	str	r2, [r3, #20]
 8008a26:	e7c2      	b.n	80089ae <__gethex+0x392>
 8008a28:	692a      	ldr	r2, [r5, #16]
 8008a2a:	454a      	cmp	r2, r9
 8008a2c:	dd0b      	ble.n	8008a46 <__gethex+0x42a>
 8008a2e:	2101      	movs	r1, #1
 8008a30:	4628      	mov	r0, r5
 8008a32:	f7ff fda3 	bl	800857c <rshift>
 8008a36:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008a3a:	3401      	adds	r4, #1
 8008a3c:	42a3      	cmp	r3, r4
 8008a3e:	f6ff aed8 	blt.w	80087f2 <__gethex+0x1d6>
 8008a42:	2701      	movs	r7, #1
 8008a44:	e7c7      	b.n	80089d6 <__gethex+0x3ba>
 8008a46:	f016 061f 	ands.w	r6, r6, #31
 8008a4a:	d0fa      	beq.n	8008a42 <__gethex+0x426>
 8008a4c:	449a      	add	sl, r3
 8008a4e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8008a52:	f000 f9b0 	bl	8008db6 <__hi0bits>
 8008a56:	f1c6 0620 	rsb	r6, r6, #32
 8008a5a:	42b0      	cmp	r0, r6
 8008a5c:	dbe7      	blt.n	8008a2e <__gethex+0x412>
 8008a5e:	e7f0      	b.n	8008a42 <__gethex+0x426>

08008a60 <L_shift>:
 8008a60:	f1c2 0208 	rsb	r2, r2, #8
 8008a64:	0092      	lsls	r2, r2, #2
 8008a66:	b570      	push	{r4, r5, r6, lr}
 8008a68:	f1c2 0620 	rsb	r6, r2, #32
 8008a6c:	6843      	ldr	r3, [r0, #4]
 8008a6e:	6804      	ldr	r4, [r0, #0]
 8008a70:	fa03 f506 	lsl.w	r5, r3, r6
 8008a74:	432c      	orrs	r4, r5
 8008a76:	40d3      	lsrs	r3, r2
 8008a78:	6004      	str	r4, [r0, #0]
 8008a7a:	f840 3f04 	str.w	r3, [r0, #4]!
 8008a7e:	4288      	cmp	r0, r1
 8008a80:	d3f4      	bcc.n	8008a6c <L_shift+0xc>
 8008a82:	bd70      	pop	{r4, r5, r6, pc}

08008a84 <__match>:
 8008a84:	b530      	push	{r4, r5, lr}
 8008a86:	6803      	ldr	r3, [r0, #0]
 8008a88:	3301      	adds	r3, #1
 8008a8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a8e:	b914      	cbnz	r4, 8008a96 <__match+0x12>
 8008a90:	6003      	str	r3, [r0, #0]
 8008a92:	2001      	movs	r0, #1
 8008a94:	bd30      	pop	{r4, r5, pc}
 8008a96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a9a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008a9e:	2d19      	cmp	r5, #25
 8008aa0:	bf98      	it	ls
 8008aa2:	3220      	addls	r2, #32
 8008aa4:	42a2      	cmp	r2, r4
 8008aa6:	d0f0      	beq.n	8008a8a <__match+0x6>
 8008aa8:	2000      	movs	r0, #0
 8008aaa:	e7f3      	b.n	8008a94 <__match+0x10>

08008aac <__hexnan>:
 8008aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ab0:	2500      	movs	r5, #0
 8008ab2:	680b      	ldr	r3, [r1, #0]
 8008ab4:	4682      	mov	sl, r0
 8008ab6:	115f      	asrs	r7, r3, #5
 8008ab8:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8008abc:	f013 031f 	ands.w	r3, r3, #31
 8008ac0:	bf18      	it	ne
 8008ac2:	3704      	addne	r7, #4
 8008ac4:	1f3e      	subs	r6, r7, #4
 8008ac6:	4690      	mov	r8, r2
 8008ac8:	46b1      	mov	r9, r6
 8008aca:	4634      	mov	r4, r6
 8008acc:	46ab      	mov	fp, r5
 8008ace:	b087      	sub	sp, #28
 8008ad0:	6801      	ldr	r1, [r0, #0]
 8008ad2:	9301      	str	r3, [sp, #4]
 8008ad4:	f847 5c04 	str.w	r5, [r7, #-4]
 8008ad8:	9502      	str	r5, [sp, #8]
 8008ada:	784a      	ldrb	r2, [r1, #1]
 8008adc:	1c4b      	adds	r3, r1, #1
 8008ade:	9303      	str	r3, [sp, #12]
 8008ae0:	b342      	cbz	r2, 8008b34 <__hexnan+0x88>
 8008ae2:	4610      	mov	r0, r2
 8008ae4:	9105      	str	r1, [sp, #20]
 8008ae6:	9204      	str	r2, [sp, #16]
 8008ae8:	f7ff fd83 	bl	80085f2 <__hexdig_fun>
 8008aec:	2800      	cmp	r0, #0
 8008aee:	d143      	bne.n	8008b78 <__hexnan+0xcc>
 8008af0:	9a04      	ldr	r2, [sp, #16]
 8008af2:	9905      	ldr	r1, [sp, #20]
 8008af4:	2a20      	cmp	r2, #32
 8008af6:	d818      	bhi.n	8008b2a <__hexnan+0x7e>
 8008af8:	9b02      	ldr	r3, [sp, #8]
 8008afa:	459b      	cmp	fp, r3
 8008afc:	dd13      	ble.n	8008b26 <__hexnan+0x7a>
 8008afe:	454c      	cmp	r4, r9
 8008b00:	d206      	bcs.n	8008b10 <__hexnan+0x64>
 8008b02:	2d07      	cmp	r5, #7
 8008b04:	dc04      	bgt.n	8008b10 <__hexnan+0x64>
 8008b06:	462a      	mov	r2, r5
 8008b08:	4649      	mov	r1, r9
 8008b0a:	4620      	mov	r0, r4
 8008b0c:	f7ff ffa8 	bl	8008a60 <L_shift>
 8008b10:	4544      	cmp	r4, r8
 8008b12:	d944      	bls.n	8008b9e <__hexnan+0xf2>
 8008b14:	2300      	movs	r3, #0
 8008b16:	f1a4 0904 	sub.w	r9, r4, #4
 8008b1a:	f844 3c04 	str.w	r3, [r4, #-4]
 8008b1e:	461d      	mov	r5, r3
 8008b20:	464c      	mov	r4, r9
 8008b22:	f8cd b008 	str.w	fp, [sp, #8]
 8008b26:	9903      	ldr	r1, [sp, #12]
 8008b28:	e7d7      	b.n	8008ada <__hexnan+0x2e>
 8008b2a:	2a29      	cmp	r2, #41	; 0x29
 8008b2c:	d14a      	bne.n	8008bc4 <__hexnan+0x118>
 8008b2e:	3102      	adds	r1, #2
 8008b30:	f8ca 1000 	str.w	r1, [sl]
 8008b34:	f1bb 0f00 	cmp.w	fp, #0
 8008b38:	d044      	beq.n	8008bc4 <__hexnan+0x118>
 8008b3a:	454c      	cmp	r4, r9
 8008b3c:	d206      	bcs.n	8008b4c <__hexnan+0xa0>
 8008b3e:	2d07      	cmp	r5, #7
 8008b40:	dc04      	bgt.n	8008b4c <__hexnan+0xa0>
 8008b42:	462a      	mov	r2, r5
 8008b44:	4649      	mov	r1, r9
 8008b46:	4620      	mov	r0, r4
 8008b48:	f7ff ff8a 	bl	8008a60 <L_shift>
 8008b4c:	4544      	cmp	r4, r8
 8008b4e:	d928      	bls.n	8008ba2 <__hexnan+0xf6>
 8008b50:	4643      	mov	r3, r8
 8008b52:	f854 2b04 	ldr.w	r2, [r4], #4
 8008b56:	42a6      	cmp	r6, r4
 8008b58:	f843 2b04 	str.w	r2, [r3], #4
 8008b5c:	d2f9      	bcs.n	8008b52 <__hexnan+0xa6>
 8008b5e:	2200      	movs	r2, #0
 8008b60:	f843 2b04 	str.w	r2, [r3], #4
 8008b64:	429e      	cmp	r6, r3
 8008b66:	d2fb      	bcs.n	8008b60 <__hexnan+0xb4>
 8008b68:	6833      	ldr	r3, [r6, #0]
 8008b6a:	b91b      	cbnz	r3, 8008b74 <__hexnan+0xc8>
 8008b6c:	4546      	cmp	r6, r8
 8008b6e:	d127      	bne.n	8008bc0 <__hexnan+0x114>
 8008b70:	2301      	movs	r3, #1
 8008b72:	6033      	str	r3, [r6, #0]
 8008b74:	2005      	movs	r0, #5
 8008b76:	e026      	b.n	8008bc6 <__hexnan+0x11a>
 8008b78:	3501      	adds	r5, #1
 8008b7a:	2d08      	cmp	r5, #8
 8008b7c:	f10b 0b01 	add.w	fp, fp, #1
 8008b80:	dd06      	ble.n	8008b90 <__hexnan+0xe4>
 8008b82:	4544      	cmp	r4, r8
 8008b84:	d9cf      	bls.n	8008b26 <__hexnan+0x7a>
 8008b86:	2300      	movs	r3, #0
 8008b88:	2501      	movs	r5, #1
 8008b8a:	f844 3c04 	str.w	r3, [r4, #-4]
 8008b8e:	3c04      	subs	r4, #4
 8008b90:	6822      	ldr	r2, [r4, #0]
 8008b92:	f000 000f 	and.w	r0, r0, #15
 8008b96:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008b9a:	6020      	str	r0, [r4, #0]
 8008b9c:	e7c3      	b.n	8008b26 <__hexnan+0x7a>
 8008b9e:	2508      	movs	r5, #8
 8008ba0:	e7c1      	b.n	8008b26 <__hexnan+0x7a>
 8008ba2:	9b01      	ldr	r3, [sp, #4]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d0df      	beq.n	8008b68 <__hexnan+0xbc>
 8008ba8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008bac:	f1c3 0320 	rsb	r3, r3, #32
 8008bb0:	fa22 f303 	lsr.w	r3, r2, r3
 8008bb4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8008bb8:	401a      	ands	r2, r3
 8008bba:	f847 2c04 	str.w	r2, [r7, #-4]
 8008bbe:	e7d3      	b.n	8008b68 <__hexnan+0xbc>
 8008bc0:	3e04      	subs	r6, #4
 8008bc2:	e7d1      	b.n	8008b68 <__hexnan+0xbc>
 8008bc4:	2004      	movs	r0, #4
 8008bc6:	b007      	add	sp, #28
 8008bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008bcc <__locale_ctype_ptr_l>:
 8008bcc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8008bd0:	4770      	bx	lr
	...

08008bd4 <__locale_ctype_ptr>:
 8008bd4:	4b04      	ldr	r3, [pc, #16]	; (8008be8 <__locale_ctype_ptr+0x14>)
 8008bd6:	4a05      	ldr	r2, [pc, #20]	; (8008bec <__locale_ctype_ptr+0x18>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	6a1b      	ldr	r3, [r3, #32]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	bf08      	it	eq
 8008be0:	4613      	moveq	r3, r2
 8008be2:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8008be6:	4770      	bx	lr
 8008be8:	20000010 	.word	0x20000010
 8008bec:	20000074 	.word	0x20000074

08008bf0 <__localeconv_l>:
 8008bf0:	30f0      	adds	r0, #240	; 0xf0
 8008bf2:	4770      	bx	lr

08008bf4 <__ascii_mbtowc>:
 8008bf4:	b082      	sub	sp, #8
 8008bf6:	b901      	cbnz	r1, 8008bfa <__ascii_mbtowc+0x6>
 8008bf8:	a901      	add	r1, sp, #4
 8008bfa:	b142      	cbz	r2, 8008c0e <__ascii_mbtowc+0x1a>
 8008bfc:	b14b      	cbz	r3, 8008c12 <__ascii_mbtowc+0x1e>
 8008bfe:	7813      	ldrb	r3, [r2, #0]
 8008c00:	600b      	str	r3, [r1, #0]
 8008c02:	7812      	ldrb	r2, [r2, #0]
 8008c04:	1c10      	adds	r0, r2, #0
 8008c06:	bf18      	it	ne
 8008c08:	2001      	movne	r0, #1
 8008c0a:	b002      	add	sp, #8
 8008c0c:	4770      	bx	lr
 8008c0e:	4610      	mov	r0, r2
 8008c10:	e7fb      	b.n	8008c0a <__ascii_mbtowc+0x16>
 8008c12:	f06f 0001 	mvn.w	r0, #1
 8008c16:	e7f8      	b.n	8008c0a <__ascii_mbtowc+0x16>

08008c18 <memcpy>:
 8008c18:	b510      	push	{r4, lr}
 8008c1a:	1e43      	subs	r3, r0, #1
 8008c1c:	440a      	add	r2, r1
 8008c1e:	4291      	cmp	r1, r2
 8008c20:	d100      	bne.n	8008c24 <memcpy+0xc>
 8008c22:	bd10      	pop	{r4, pc}
 8008c24:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c28:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c2c:	e7f7      	b.n	8008c1e <memcpy+0x6>

08008c2e <_Balloc>:
 8008c2e:	b570      	push	{r4, r5, r6, lr}
 8008c30:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008c32:	4604      	mov	r4, r0
 8008c34:	460e      	mov	r6, r1
 8008c36:	b93d      	cbnz	r5, 8008c48 <_Balloc+0x1a>
 8008c38:	2010      	movs	r0, #16
 8008c3a:	f001 fb49 	bl	800a2d0 <malloc>
 8008c3e:	6260      	str	r0, [r4, #36]	; 0x24
 8008c40:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008c44:	6005      	str	r5, [r0, #0]
 8008c46:	60c5      	str	r5, [r0, #12]
 8008c48:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008c4a:	68eb      	ldr	r3, [r5, #12]
 8008c4c:	b183      	cbz	r3, 8008c70 <_Balloc+0x42>
 8008c4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c50:	68db      	ldr	r3, [r3, #12]
 8008c52:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008c56:	b9b8      	cbnz	r0, 8008c88 <_Balloc+0x5a>
 8008c58:	2101      	movs	r1, #1
 8008c5a:	fa01 f506 	lsl.w	r5, r1, r6
 8008c5e:	1d6a      	adds	r2, r5, #5
 8008c60:	0092      	lsls	r2, r2, #2
 8008c62:	4620      	mov	r0, r4
 8008c64:	f000 fbdc 	bl	8009420 <_calloc_r>
 8008c68:	b160      	cbz	r0, 8008c84 <_Balloc+0x56>
 8008c6a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008c6e:	e00e      	b.n	8008c8e <_Balloc+0x60>
 8008c70:	2221      	movs	r2, #33	; 0x21
 8008c72:	2104      	movs	r1, #4
 8008c74:	4620      	mov	r0, r4
 8008c76:	f000 fbd3 	bl	8009420 <_calloc_r>
 8008c7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c7c:	60e8      	str	r0, [r5, #12]
 8008c7e:	68db      	ldr	r3, [r3, #12]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d1e4      	bne.n	8008c4e <_Balloc+0x20>
 8008c84:	2000      	movs	r0, #0
 8008c86:	bd70      	pop	{r4, r5, r6, pc}
 8008c88:	6802      	ldr	r2, [r0, #0]
 8008c8a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008c8e:	2300      	movs	r3, #0
 8008c90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008c94:	e7f7      	b.n	8008c86 <_Balloc+0x58>

08008c96 <_Bfree>:
 8008c96:	b570      	push	{r4, r5, r6, lr}
 8008c98:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008c9a:	4606      	mov	r6, r0
 8008c9c:	460d      	mov	r5, r1
 8008c9e:	b93c      	cbnz	r4, 8008cb0 <_Bfree+0x1a>
 8008ca0:	2010      	movs	r0, #16
 8008ca2:	f001 fb15 	bl	800a2d0 <malloc>
 8008ca6:	6270      	str	r0, [r6, #36]	; 0x24
 8008ca8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008cac:	6004      	str	r4, [r0, #0]
 8008cae:	60c4      	str	r4, [r0, #12]
 8008cb0:	b13d      	cbz	r5, 8008cc2 <_Bfree+0x2c>
 8008cb2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008cb4:	686a      	ldr	r2, [r5, #4]
 8008cb6:	68db      	ldr	r3, [r3, #12]
 8008cb8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008cbc:	6029      	str	r1, [r5, #0]
 8008cbe:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008cc2:	bd70      	pop	{r4, r5, r6, pc}

08008cc4 <__multadd>:
 8008cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cc8:	461f      	mov	r7, r3
 8008cca:	4606      	mov	r6, r0
 8008ccc:	460c      	mov	r4, r1
 8008cce:	2300      	movs	r3, #0
 8008cd0:	690d      	ldr	r5, [r1, #16]
 8008cd2:	f101 0c14 	add.w	ip, r1, #20
 8008cd6:	f8dc 0000 	ldr.w	r0, [ip]
 8008cda:	3301      	adds	r3, #1
 8008cdc:	b281      	uxth	r1, r0
 8008cde:	fb02 7101 	mla	r1, r2, r1, r7
 8008ce2:	0c00      	lsrs	r0, r0, #16
 8008ce4:	0c0f      	lsrs	r7, r1, #16
 8008ce6:	fb02 7000 	mla	r0, r2, r0, r7
 8008cea:	b289      	uxth	r1, r1
 8008cec:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008cf0:	429d      	cmp	r5, r3
 8008cf2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008cf6:	f84c 1b04 	str.w	r1, [ip], #4
 8008cfa:	dcec      	bgt.n	8008cd6 <__multadd+0x12>
 8008cfc:	b1d7      	cbz	r7, 8008d34 <__multadd+0x70>
 8008cfe:	68a3      	ldr	r3, [r4, #8]
 8008d00:	42ab      	cmp	r3, r5
 8008d02:	dc12      	bgt.n	8008d2a <__multadd+0x66>
 8008d04:	6861      	ldr	r1, [r4, #4]
 8008d06:	4630      	mov	r0, r6
 8008d08:	3101      	adds	r1, #1
 8008d0a:	f7ff ff90 	bl	8008c2e <_Balloc>
 8008d0e:	4680      	mov	r8, r0
 8008d10:	6922      	ldr	r2, [r4, #16]
 8008d12:	f104 010c 	add.w	r1, r4, #12
 8008d16:	3202      	adds	r2, #2
 8008d18:	0092      	lsls	r2, r2, #2
 8008d1a:	300c      	adds	r0, #12
 8008d1c:	f7ff ff7c 	bl	8008c18 <memcpy>
 8008d20:	4621      	mov	r1, r4
 8008d22:	4630      	mov	r0, r6
 8008d24:	f7ff ffb7 	bl	8008c96 <_Bfree>
 8008d28:	4644      	mov	r4, r8
 8008d2a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008d2e:	3501      	adds	r5, #1
 8008d30:	615f      	str	r7, [r3, #20]
 8008d32:	6125      	str	r5, [r4, #16]
 8008d34:	4620      	mov	r0, r4
 8008d36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008d3a <__s2b>:
 8008d3a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d3e:	4615      	mov	r5, r2
 8008d40:	2209      	movs	r2, #9
 8008d42:	461f      	mov	r7, r3
 8008d44:	3308      	adds	r3, #8
 8008d46:	460c      	mov	r4, r1
 8008d48:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d4c:	4606      	mov	r6, r0
 8008d4e:	2201      	movs	r2, #1
 8008d50:	2100      	movs	r1, #0
 8008d52:	429a      	cmp	r2, r3
 8008d54:	db20      	blt.n	8008d98 <__s2b+0x5e>
 8008d56:	4630      	mov	r0, r6
 8008d58:	f7ff ff69 	bl	8008c2e <_Balloc>
 8008d5c:	9b08      	ldr	r3, [sp, #32]
 8008d5e:	2d09      	cmp	r5, #9
 8008d60:	6143      	str	r3, [r0, #20]
 8008d62:	f04f 0301 	mov.w	r3, #1
 8008d66:	6103      	str	r3, [r0, #16]
 8008d68:	dd19      	ble.n	8008d9e <__s2b+0x64>
 8008d6a:	f104 0809 	add.w	r8, r4, #9
 8008d6e:	46c1      	mov	r9, r8
 8008d70:	442c      	add	r4, r5
 8008d72:	f819 3b01 	ldrb.w	r3, [r9], #1
 8008d76:	4601      	mov	r1, r0
 8008d78:	3b30      	subs	r3, #48	; 0x30
 8008d7a:	220a      	movs	r2, #10
 8008d7c:	4630      	mov	r0, r6
 8008d7e:	f7ff ffa1 	bl	8008cc4 <__multadd>
 8008d82:	45a1      	cmp	r9, r4
 8008d84:	d1f5      	bne.n	8008d72 <__s2b+0x38>
 8008d86:	eb08 0405 	add.w	r4, r8, r5
 8008d8a:	3c08      	subs	r4, #8
 8008d8c:	1b2d      	subs	r5, r5, r4
 8008d8e:	1963      	adds	r3, r4, r5
 8008d90:	42bb      	cmp	r3, r7
 8008d92:	db07      	blt.n	8008da4 <__s2b+0x6a>
 8008d94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d98:	0052      	lsls	r2, r2, #1
 8008d9a:	3101      	adds	r1, #1
 8008d9c:	e7d9      	b.n	8008d52 <__s2b+0x18>
 8008d9e:	340a      	adds	r4, #10
 8008da0:	2509      	movs	r5, #9
 8008da2:	e7f3      	b.n	8008d8c <__s2b+0x52>
 8008da4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008da8:	4601      	mov	r1, r0
 8008daa:	3b30      	subs	r3, #48	; 0x30
 8008dac:	220a      	movs	r2, #10
 8008dae:	4630      	mov	r0, r6
 8008db0:	f7ff ff88 	bl	8008cc4 <__multadd>
 8008db4:	e7eb      	b.n	8008d8e <__s2b+0x54>

08008db6 <__hi0bits>:
 8008db6:	0c02      	lsrs	r2, r0, #16
 8008db8:	0412      	lsls	r2, r2, #16
 8008dba:	4603      	mov	r3, r0
 8008dbc:	b9b2      	cbnz	r2, 8008dec <__hi0bits+0x36>
 8008dbe:	0403      	lsls	r3, r0, #16
 8008dc0:	2010      	movs	r0, #16
 8008dc2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008dc6:	bf04      	itt	eq
 8008dc8:	021b      	lsleq	r3, r3, #8
 8008dca:	3008      	addeq	r0, #8
 8008dcc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008dd0:	bf04      	itt	eq
 8008dd2:	011b      	lsleq	r3, r3, #4
 8008dd4:	3004      	addeq	r0, #4
 8008dd6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008dda:	bf04      	itt	eq
 8008ddc:	009b      	lsleq	r3, r3, #2
 8008dde:	3002      	addeq	r0, #2
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	db06      	blt.n	8008df2 <__hi0bits+0x3c>
 8008de4:	005b      	lsls	r3, r3, #1
 8008de6:	d503      	bpl.n	8008df0 <__hi0bits+0x3a>
 8008de8:	3001      	adds	r0, #1
 8008dea:	4770      	bx	lr
 8008dec:	2000      	movs	r0, #0
 8008dee:	e7e8      	b.n	8008dc2 <__hi0bits+0xc>
 8008df0:	2020      	movs	r0, #32
 8008df2:	4770      	bx	lr

08008df4 <__lo0bits>:
 8008df4:	6803      	ldr	r3, [r0, #0]
 8008df6:	4601      	mov	r1, r0
 8008df8:	f013 0207 	ands.w	r2, r3, #7
 8008dfc:	d00b      	beq.n	8008e16 <__lo0bits+0x22>
 8008dfe:	07da      	lsls	r2, r3, #31
 8008e00:	d423      	bmi.n	8008e4a <__lo0bits+0x56>
 8008e02:	0798      	lsls	r0, r3, #30
 8008e04:	bf49      	itett	mi
 8008e06:	085b      	lsrmi	r3, r3, #1
 8008e08:	089b      	lsrpl	r3, r3, #2
 8008e0a:	2001      	movmi	r0, #1
 8008e0c:	600b      	strmi	r3, [r1, #0]
 8008e0e:	bf5c      	itt	pl
 8008e10:	600b      	strpl	r3, [r1, #0]
 8008e12:	2002      	movpl	r0, #2
 8008e14:	4770      	bx	lr
 8008e16:	b298      	uxth	r0, r3
 8008e18:	b9a8      	cbnz	r0, 8008e46 <__lo0bits+0x52>
 8008e1a:	2010      	movs	r0, #16
 8008e1c:	0c1b      	lsrs	r3, r3, #16
 8008e1e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008e22:	bf04      	itt	eq
 8008e24:	0a1b      	lsreq	r3, r3, #8
 8008e26:	3008      	addeq	r0, #8
 8008e28:	071a      	lsls	r2, r3, #28
 8008e2a:	bf04      	itt	eq
 8008e2c:	091b      	lsreq	r3, r3, #4
 8008e2e:	3004      	addeq	r0, #4
 8008e30:	079a      	lsls	r2, r3, #30
 8008e32:	bf04      	itt	eq
 8008e34:	089b      	lsreq	r3, r3, #2
 8008e36:	3002      	addeq	r0, #2
 8008e38:	07da      	lsls	r2, r3, #31
 8008e3a:	d402      	bmi.n	8008e42 <__lo0bits+0x4e>
 8008e3c:	085b      	lsrs	r3, r3, #1
 8008e3e:	d006      	beq.n	8008e4e <__lo0bits+0x5a>
 8008e40:	3001      	adds	r0, #1
 8008e42:	600b      	str	r3, [r1, #0]
 8008e44:	4770      	bx	lr
 8008e46:	4610      	mov	r0, r2
 8008e48:	e7e9      	b.n	8008e1e <__lo0bits+0x2a>
 8008e4a:	2000      	movs	r0, #0
 8008e4c:	4770      	bx	lr
 8008e4e:	2020      	movs	r0, #32
 8008e50:	4770      	bx	lr

08008e52 <__i2b>:
 8008e52:	b510      	push	{r4, lr}
 8008e54:	460c      	mov	r4, r1
 8008e56:	2101      	movs	r1, #1
 8008e58:	f7ff fee9 	bl	8008c2e <_Balloc>
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	6144      	str	r4, [r0, #20]
 8008e60:	6102      	str	r2, [r0, #16]
 8008e62:	bd10      	pop	{r4, pc}

08008e64 <__multiply>:
 8008e64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e68:	4614      	mov	r4, r2
 8008e6a:	690a      	ldr	r2, [r1, #16]
 8008e6c:	6923      	ldr	r3, [r4, #16]
 8008e6e:	4688      	mov	r8, r1
 8008e70:	429a      	cmp	r2, r3
 8008e72:	bfbe      	ittt	lt
 8008e74:	460b      	movlt	r3, r1
 8008e76:	46a0      	movlt	r8, r4
 8008e78:	461c      	movlt	r4, r3
 8008e7a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008e7e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008e82:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008e86:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008e8a:	eb07 0609 	add.w	r6, r7, r9
 8008e8e:	42b3      	cmp	r3, r6
 8008e90:	bfb8      	it	lt
 8008e92:	3101      	addlt	r1, #1
 8008e94:	f7ff fecb 	bl	8008c2e <_Balloc>
 8008e98:	f100 0514 	add.w	r5, r0, #20
 8008e9c:	462b      	mov	r3, r5
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008ea4:	4573      	cmp	r3, lr
 8008ea6:	d316      	bcc.n	8008ed6 <__multiply+0x72>
 8008ea8:	f104 0214 	add.w	r2, r4, #20
 8008eac:	f108 0114 	add.w	r1, r8, #20
 8008eb0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008eb4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008eb8:	9300      	str	r3, [sp, #0]
 8008eba:	9b00      	ldr	r3, [sp, #0]
 8008ebc:	9201      	str	r2, [sp, #4]
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d80c      	bhi.n	8008edc <__multiply+0x78>
 8008ec2:	2e00      	cmp	r6, #0
 8008ec4:	dd03      	ble.n	8008ece <__multiply+0x6a>
 8008ec6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d05d      	beq.n	8008f8a <__multiply+0x126>
 8008ece:	6106      	str	r6, [r0, #16]
 8008ed0:	b003      	add	sp, #12
 8008ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ed6:	f843 2b04 	str.w	r2, [r3], #4
 8008eda:	e7e3      	b.n	8008ea4 <__multiply+0x40>
 8008edc:	f8b2 b000 	ldrh.w	fp, [r2]
 8008ee0:	f1bb 0f00 	cmp.w	fp, #0
 8008ee4:	d023      	beq.n	8008f2e <__multiply+0xca>
 8008ee6:	4689      	mov	r9, r1
 8008ee8:	46ac      	mov	ip, r5
 8008eea:	f04f 0800 	mov.w	r8, #0
 8008eee:	f859 4b04 	ldr.w	r4, [r9], #4
 8008ef2:	f8dc a000 	ldr.w	sl, [ip]
 8008ef6:	b2a3      	uxth	r3, r4
 8008ef8:	fa1f fa8a 	uxth.w	sl, sl
 8008efc:	fb0b a303 	mla	r3, fp, r3, sl
 8008f00:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008f04:	f8dc 4000 	ldr.w	r4, [ip]
 8008f08:	4443      	add	r3, r8
 8008f0a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008f0e:	fb0b 840a 	mla	r4, fp, sl, r8
 8008f12:	46e2      	mov	sl, ip
 8008f14:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008f18:	b29b      	uxth	r3, r3
 8008f1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008f1e:	454f      	cmp	r7, r9
 8008f20:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008f24:	f84a 3b04 	str.w	r3, [sl], #4
 8008f28:	d82b      	bhi.n	8008f82 <__multiply+0x11e>
 8008f2a:	f8cc 8004 	str.w	r8, [ip, #4]
 8008f2e:	9b01      	ldr	r3, [sp, #4]
 8008f30:	3204      	adds	r2, #4
 8008f32:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8008f36:	f1ba 0f00 	cmp.w	sl, #0
 8008f3a:	d020      	beq.n	8008f7e <__multiply+0x11a>
 8008f3c:	4689      	mov	r9, r1
 8008f3e:	46a8      	mov	r8, r5
 8008f40:	f04f 0b00 	mov.w	fp, #0
 8008f44:	682b      	ldr	r3, [r5, #0]
 8008f46:	f8b9 c000 	ldrh.w	ip, [r9]
 8008f4a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008f4e:	b29b      	uxth	r3, r3
 8008f50:	fb0a 440c 	mla	r4, sl, ip, r4
 8008f54:	46c4      	mov	ip, r8
 8008f56:	445c      	add	r4, fp
 8008f58:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008f5c:	f84c 3b04 	str.w	r3, [ip], #4
 8008f60:	f859 3b04 	ldr.w	r3, [r9], #4
 8008f64:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008f68:	0c1b      	lsrs	r3, r3, #16
 8008f6a:	fb0a b303 	mla	r3, sl, r3, fp
 8008f6e:	454f      	cmp	r7, r9
 8008f70:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008f74:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008f78:	d805      	bhi.n	8008f86 <__multiply+0x122>
 8008f7a:	f8c8 3004 	str.w	r3, [r8, #4]
 8008f7e:	3504      	adds	r5, #4
 8008f80:	e79b      	b.n	8008eba <__multiply+0x56>
 8008f82:	46d4      	mov	ip, sl
 8008f84:	e7b3      	b.n	8008eee <__multiply+0x8a>
 8008f86:	46e0      	mov	r8, ip
 8008f88:	e7dd      	b.n	8008f46 <__multiply+0xe2>
 8008f8a:	3e01      	subs	r6, #1
 8008f8c:	e799      	b.n	8008ec2 <__multiply+0x5e>
	...

08008f90 <__pow5mult>:
 8008f90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f94:	4615      	mov	r5, r2
 8008f96:	f012 0203 	ands.w	r2, r2, #3
 8008f9a:	4606      	mov	r6, r0
 8008f9c:	460f      	mov	r7, r1
 8008f9e:	d007      	beq.n	8008fb0 <__pow5mult+0x20>
 8008fa0:	4c21      	ldr	r4, [pc, #132]	; (8009028 <__pow5mult+0x98>)
 8008fa2:	3a01      	subs	r2, #1
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008faa:	f7ff fe8b 	bl	8008cc4 <__multadd>
 8008fae:	4607      	mov	r7, r0
 8008fb0:	10ad      	asrs	r5, r5, #2
 8008fb2:	d035      	beq.n	8009020 <__pow5mult+0x90>
 8008fb4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008fb6:	b93c      	cbnz	r4, 8008fc8 <__pow5mult+0x38>
 8008fb8:	2010      	movs	r0, #16
 8008fba:	f001 f989 	bl	800a2d0 <malloc>
 8008fbe:	6270      	str	r0, [r6, #36]	; 0x24
 8008fc0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008fc4:	6004      	str	r4, [r0, #0]
 8008fc6:	60c4      	str	r4, [r0, #12]
 8008fc8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008fcc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008fd0:	b94c      	cbnz	r4, 8008fe6 <__pow5mult+0x56>
 8008fd2:	f240 2171 	movw	r1, #625	; 0x271
 8008fd6:	4630      	mov	r0, r6
 8008fd8:	f7ff ff3b 	bl	8008e52 <__i2b>
 8008fdc:	2300      	movs	r3, #0
 8008fde:	4604      	mov	r4, r0
 8008fe0:	f8c8 0008 	str.w	r0, [r8, #8]
 8008fe4:	6003      	str	r3, [r0, #0]
 8008fe6:	f04f 0800 	mov.w	r8, #0
 8008fea:	07eb      	lsls	r3, r5, #31
 8008fec:	d50a      	bpl.n	8009004 <__pow5mult+0x74>
 8008fee:	4639      	mov	r1, r7
 8008ff0:	4622      	mov	r2, r4
 8008ff2:	4630      	mov	r0, r6
 8008ff4:	f7ff ff36 	bl	8008e64 <__multiply>
 8008ff8:	4681      	mov	r9, r0
 8008ffa:	4639      	mov	r1, r7
 8008ffc:	4630      	mov	r0, r6
 8008ffe:	f7ff fe4a 	bl	8008c96 <_Bfree>
 8009002:	464f      	mov	r7, r9
 8009004:	106d      	asrs	r5, r5, #1
 8009006:	d00b      	beq.n	8009020 <__pow5mult+0x90>
 8009008:	6820      	ldr	r0, [r4, #0]
 800900a:	b938      	cbnz	r0, 800901c <__pow5mult+0x8c>
 800900c:	4622      	mov	r2, r4
 800900e:	4621      	mov	r1, r4
 8009010:	4630      	mov	r0, r6
 8009012:	f7ff ff27 	bl	8008e64 <__multiply>
 8009016:	6020      	str	r0, [r4, #0]
 8009018:	f8c0 8000 	str.w	r8, [r0]
 800901c:	4604      	mov	r4, r0
 800901e:	e7e4      	b.n	8008fea <__pow5mult+0x5a>
 8009020:	4638      	mov	r0, r7
 8009022:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009026:	bf00      	nop
 8009028:	0800a738 	.word	0x0800a738

0800902c <__lshift>:
 800902c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009030:	460c      	mov	r4, r1
 8009032:	4607      	mov	r7, r0
 8009034:	4616      	mov	r6, r2
 8009036:	6923      	ldr	r3, [r4, #16]
 8009038:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800903c:	eb0a 0903 	add.w	r9, sl, r3
 8009040:	6849      	ldr	r1, [r1, #4]
 8009042:	68a3      	ldr	r3, [r4, #8]
 8009044:	f109 0501 	add.w	r5, r9, #1
 8009048:	42ab      	cmp	r3, r5
 800904a:	db32      	blt.n	80090b2 <__lshift+0x86>
 800904c:	4638      	mov	r0, r7
 800904e:	f7ff fdee 	bl	8008c2e <_Balloc>
 8009052:	2300      	movs	r3, #0
 8009054:	4680      	mov	r8, r0
 8009056:	461a      	mov	r2, r3
 8009058:	f100 0114 	add.w	r1, r0, #20
 800905c:	4553      	cmp	r3, sl
 800905e:	db2b      	blt.n	80090b8 <__lshift+0x8c>
 8009060:	6920      	ldr	r0, [r4, #16]
 8009062:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009066:	f104 0314 	add.w	r3, r4, #20
 800906a:	f016 021f 	ands.w	r2, r6, #31
 800906e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009072:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009076:	d025      	beq.n	80090c4 <__lshift+0x98>
 8009078:	2000      	movs	r0, #0
 800907a:	f1c2 0e20 	rsb	lr, r2, #32
 800907e:	468a      	mov	sl, r1
 8009080:	681e      	ldr	r6, [r3, #0]
 8009082:	4096      	lsls	r6, r2
 8009084:	4330      	orrs	r0, r6
 8009086:	f84a 0b04 	str.w	r0, [sl], #4
 800908a:	f853 0b04 	ldr.w	r0, [r3], #4
 800908e:	459c      	cmp	ip, r3
 8009090:	fa20 f00e 	lsr.w	r0, r0, lr
 8009094:	d814      	bhi.n	80090c0 <__lshift+0x94>
 8009096:	6048      	str	r0, [r1, #4]
 8009098:	b108      	cbz	r0, 800909e <__lshift+0x72>
 800909a:	f109 0502 	add.w	r5, r9, #2
 800909e:	3d01      	subs	r5, #1
 80090a0:	4638      	mov	r0, r7
 80090a2:	f8c8 5010 	str.w	r5, [r8, #16]
 80090a6:	4621      	mov	r1, r4
 80090a8:	f7ff fdf5 	bl	8008c96 <_Bfree>
 80090ac:	4640      	mov	r0, r8
 80090ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090b2:	3101      	adds	r1, #1
 80090b4:	005b      	lsls	r3, r3, #1
 80090b6:	e7c7      	b.n	8009048 <__lshift+0x1c>
 80090b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80090bc:	3301      	adds	r3, #1
 80090be:	e7cd      	b.n	800905c <__lshift+0x30>
 80090c0:	4651      	mov	r1, sl
 80090c2:	e7dc      	b.n	800907e <__lshift+0x52>
 80090c4:	3904      	subs	r1, #4
 80090c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80090ca:	459c      	cmp	ip, r3
 80090cc:	f841 2f04 	str.w	r2, [r1, #4]!
 80090d0:	d8f9      	bhi.n	80090c6 <__lshift+0x9a>
 80090d2:	e7e4      	b.n	800909e <__lshift+0x72>

080090d4 <__mcmp>:
 80090d4:	6903      	ldr	r3, [r0, #16]
 80090d6:	690a      	ldr	r2, [r1, #16]
 80090d8:	b530      	push	{r4, r5, lr}
 80090da:	1a9b      	subs	r3, r3, r2
 80090dc:	d10c      	bne.n	80090f8 <__mcmp+0x24>
 80090de:	0092      	lsls	r2, r2, #2
 80090e0:	3014      	adds	r0, #20
 80090e2:	3114      	adds	r1, #20
 80090e4:	1884      	adds	r4, r0, r2
 80090e6:	4411      	add	r1, r2
 80090e8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80090ec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80090f0:	4295      	cmp	r5, r2
 80090f2:	d003      	beq.n	80090fc <__mcmp+0x28>
 80090f4:	d305      	bcc.n	8009102 <__mcmp+0x2e>
 80090f6:	2301      	movs	r3, #1
 80090f8:	4618      	mov	r0, r3
 80090fa:	bd30      	pop	{r4, r5, pc}
 80090fc:	42a0      	cmp	r0, r4
 80090fe:	d3f3      	bcc.n	80090e8 <__mcmp+0x14>
 8009100:	e7fa      	b.n	80090f8 <__mcmp+0x24>
 8009102:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009106:	e7f7      	b.n	80090f8 <__mcmp+0x24>

08009108 <__mdiff>:
 8009108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800910c:	460d      	mov	r5, r1
 800910e:	4607      	mov	r7, r0
 8009110:	4611      	mov	r1, r2
 8009112:	4628      	mov	r0, r5
 8009114:	4614      	mov	r4, r2
 8009116:	f7ff ffdd 	bl	80090d4 <__mcmp>
 800911a:	1e06      	subs	r6, r0, #0
 800911c:	d108      	bne.n	8009130 <__mdiff+0x28>
 800911e:	4631      	mov	r1, r6
 8009120:	4638      	mov	r0, r7
 8009122:	f7ff fd84 	bl	8008c2e <_Balloc>
 8009126:	2301      	movs	r3, #1
 8009128:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800912c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009130:	bfa4      	itt	ge
 8009132:	4623      	movge	r3, r4
 8009134:	462c      	movge	r4, r5
 8009136:	4638      	mov	r0, r7
 8009138:	6861      	ldr	r1, [r4, #4]
 800913a:	bfa6      	itte	ge
 800913c:	461d      	movge	r5, r3
 800913e:	2600      	movge	r6, #0
 8009140:	2601      	movlt	r6, #1
 8009142:	f7ff fd74 	bl	8008c2e <_Balloc>
 8009146:	f04f 0e00 	mov.w	lr, #0
 800914a:	60c6      	str	r6, [r0, #12]
 800914c:	692b      	ldr	r3, [r5, #16]
 800914e:	6926      	ldr	r6, [r4, #16]
 8009150:	f104 0214 	add.w	r2, r4, #20
 8009154:	f105 0914 	add.w	r9, r5, #20
 8009158:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800915c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009160:	f100 0114 	add.w	r1, r0, #20
 8009164:	f852 ab04 	ldr.w	sl, [r2], #4
 8009168:	f859 5b04 	ldr.w	r5, [r9], #4
 800916c:	fa1f f38a 	uxth.w	r3, sl
 8009170:	4473      	add	r3, lr
 8009172:	b2ac      	uxth	r4, r5
 8009174:	1b1b      	subs	r3, r3, r4
 8009176:	0c2c      	lsrs	r4, r5, #16
 8009178:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800917c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8009180:	b29b      	uxth	r3, r3
 8009182:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8009186:	45c8      	cmp	r8, r9
 8009188:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800918c:	4694      	mov	ip, r2
 800918e:	f841 4b04 	str.w	r4, [r1], #4
 8009192:	d8e7      	bhi.n	8009164 <__mdiff+0x5c>
 8009194:	45bc      	cmp	ip, r7
 8009196:	d304      	bcc.n	80091a2 <__mdiff+0x9a>
 8009198:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800919c:	b183      	cbz	r3, 80091c0 <__mdiff+0xb8>
 800919e:	6106      	str	r6, [r0, #16]
 80091a0:	e7c4      	b.n	800912c <__mdiff+0x24>
 80091a2:	f85c 4b04 	ldr.w	r4, [ip], #4
 80091a6:	b2a2      	uxth	r2, r4
 80091a8:	4472      	add	r2, lr
 80091aa:	1413      	asrs	r3, r2, #16
 80091ac:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80091b0:	b292      	uxth	r2, r2
 80091b2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80091b6:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80091ba:	f841 2b04 	str.w	r2, [r1], #4
 80091be:	e7e9      	b.n	8009194 <__mdiff+0x8c>
 80091c0:	3e01      	subs	r6, #1
 80091c2:	e7e9      	b.n	8009198 <__mdiff+0x90>

080091c4 <__ulp>:
 80091c4:	4b10      	ldr	r3, [pc, #64]	; (8009208 <__ulp+0x44>)
 80091c6:	400b      	ands	r3, r1
 80091c8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	dd02      	ble.n	80091d6 <__ulp+0x12>
 80091d0:	2000      	movs	r0, #0
 80091d2:	4619      	mov	r1, r3
 80091d4:	4770      	bx	lr
 80091d6:	425b      	negs	r3, r3
 80091d8:	151b      	asrs	r3, r3, #20
 80091da:	2b13      	cmp	r3, #19
 80091dc:	f04f 0000 	mov.w	r0, #0
 80091e0:	f04f 0100 	mov.w	r1, #0
 80091e4:	dc04      	bgt.n	80091f0 <__ulp+0x2c>
 80091e6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80091ea:	fa42 f103 	asr.w	r1, r2, r3
 80091ee:	4770      	bx	lr
 80091f0:	2201      	movs	r2, #1
 80091f2:	3b14      	subs	r3, #20
 80091f4:	2b1e      	cmp	r3, #30
 80091f6:	bfce      	itee	gt
 80091f8:	4613      	movgt	r3, r2
 80091fa:	f1c3 031f 	rsble	r3, r3, #31
 80091fe:	fa02 f303 	lslle.w	r3, r2, r3
 8009202:	4618      	mov	r0, r3
 8009204:	4770      	bx	lr
 8009206:	bf00      	nop
 8009208:	7ff00000 	.word	0x7ff00000

0800920c <__b2d>:
 800920c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009210:	6907      	ldr	r7, [r0, #16]
 8009212:	f100 0914 	add.w	r9, r0, #20
 8009216:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800921a:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800921e:	f1a7 0804 	sub.w	r8, r7, #4
 8009222:	4630      	mov	r0, r6
 8009224:	f7ff fdc7 	bl	8008db6 <__hi0bits>
 8009228:	f1c0 0320 	rsb	r3, r0, #32
 800922c:	280a      	cmp	r0, #10
 800922e:	600b      	str	r3, [r1, #0]
 8009230:	491e      	ldr	r1, [pc, #120]	; (80092ac <__b2d+0xa0>)
 8009232:	dc17      	bgt.n	8009264 <__b2d+0x58>
 8009234:	45c1      	cmp	r9, r8
 8009236:	bf28      	it	cs
 8009238:	2200      	movcs	r2, #0
 800923a:	f1c0 0c0b 	rsb	ip, r0, #11
 800923e:	fa26 f30c 	lsr.w	r3, r6, ip
 8009242:	bf38      	it	cc
 8009244:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009248:	ea43 0501 	orr.w	r5, r3, r1
 800924c:	f100 0315 	add.w	r3, r0, #21
 8009250:	fa06 f303 	lsl.w	r3, r6, r3
 8009254:	fa22 f20c 	lsr.w	r2, r2, ip
 8009258:	ea43 0402 	orr.w	r4, r3, r2
 800925c:	4620      	mov	r0, r4
 800925e:	4629      	mov	r1, r5
 8009260:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009264:	45c1      	cmp	r9, r8
 8009266:	bf3a      	itte	cc
 8009268:	f1a7 0808 	subcc.w	r8, r7, #8
 800926c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009270:	2200      	movcs	r2, #0
 8009272:	f1b0 030b 	subs.w	r3, r0, #11
 8009276:	d015      	beq.n	80092a4 <__b2d+0x98>
 8009278:	409e      	lsls	r6, r3
 800927a:	f1c3 0720 	rsb	r7, r3, #32
 800927e:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 8009282:	fa22 f107 	lsr.w	r1, r2, r7
 8009286:	45c8      	cmp	r8, r9
 8009288:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 800928c:	ea46 0501 	orr.w	r5, r6, r1
 8009290:	bf94      	ite	ls
 8009292:	2100      	movls	r1, #0
 8009294:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8009298:	fa02 f003 	lsl.w	r0, r2, r3
 800929c:	40f9      	lsrs	r1, r7
 800929e:	ea40 0401 	orr.w	r4, r0, r1
 80092a2:	e7db      	b.n	800925c <__b2d+0x50>
 80092a4:	ea46 0501 	orr.w	r5, r6, r1
 80092a8:	4614      	mov	r4, r2
 80092aa:	e7d7      	b.n	800925c <__b2d+0x50>
 80092ac:	3ff00000 	.word	0x3ff00000

080092b0 <__d2b>:
 80092b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80092b4:	461c      	mov	r4, r3
 80092b6:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 80092ba:	2101      	movs	r1, #1
 80092bc:	4690      	mov	r8, r2
 80092be:	f7ff fcb6 	bl	8008c2e <_Balloc>
 80092c2:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80092c6:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80092ca:	4607      	mov	r7, r0
 80092cc:	bb34      	cbnz	r4, 800931c <__d2b+0x6c>
 80092ce:	9201      	str	r2, [sp, #4]
 80092d0:	f1b8 0200 	subs.w	r2, r8, #0
 80092d4:	d027      	beq.n	8009326 <__d2b+0x76>
 80092d6:	a802      	add	r0, sp, #8
 80092d8:	f840 2d08 	str.w	r2, [r0, #-8]!
 80092dc:	f7ff fd8a 	bl	8008df4 <__lo0bits>
 80092e0:	9900      	ldr	r1, [sp, #0]
 80092e2:	b1f0      	cbz	r0, 8009322 <__d2b+0x72>
 80092e4:	9a01      	ldr	r2, [sp, #4]
 80092e6:	f1c0 0320 	rsb	r3, r0, #32
 80092ea:	fa02 f303 	lsl.w	r3, r2, r3
 80092ee:	430b      	orrs	r3, r1
 80092f0:	40c2      	lsrs	r2, r0
 80092f2:	617b      	str	r3, [r7, #20]
 80092f4:	9201      	str	r2, [sp, #4]
 80092f6:	9b01      	ldr	r3, [sp, #4]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	bf14      	ite	ne
 80092fc:	2102      	movne	r1, #2
 80092fe:	2101      	moveq	r1, #1
 8009300:	61bb      	str	r3, [r7, #24]
 8009302:	6139      	str	r1, [r7, #16]
 8009304:	b1c4      	cbz	r4, 8009338 <__d2b+0x88>
 8009306:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800930a:	4404      	add	r4, r0
 800930c:	6034      	str	r4, [r6, #0]
 800930e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009312:	6028      	str	r0, [r5, #0]
 8009314:	4638      	mov	r0, r7
 8009316:	b002      	add	sp, #8
 8009318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800931c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8009320:	e7d5      	b.n	80092ce <__d2b+0x1e>
 8009322:	6179      	str	r1, [r7, #20]
 8009324:	e7e7      	b.n	80092f6 <__d2b+0x46>
 8009326:	a801      	add	r0, sp, #4
 8009328:	f7ff fd64 	bl	8008df4 <__lo0bits>
 800932c:	2101      	movs	r1, #1
 800932e:	9b01      	ldr	r3, [sp, #4]
 8009330:	6139      	str	r1, [r7, #16]
 8009332:	617b      	str	r3, [r7, #20]
 8009334:	3020      	adds	r0, #32
 8009336:	e7e5      	b.n	8009304 <__d2b+0x54>
 8009338:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800933c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009340:	6030      	str	r0, [r6, #0]
 8009342:	6918      	ldr	r0, [r3, #16]
 8009344:	f7ff fd37 	bl	8008db6 <__hi0bits>
 8009348:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800934c:	e7e1      	b.n	8009312 <__d2b+0x62>

0800934e <__ratio>:
 800934e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009352:	4688      	mov	r8, r1
 8009354:	4669      	mov	r1, sp
 8009356:	4681      	mov	r9, r0
 8009358:	f7ff ff58 	bl	800920c <__b2d>
 800935c:	468b      	mov	fp, r1
 800935e:	4606      	mov	r6, r0
 8009360:	460f      	mov	r7, r1
 8009362:	4640      	mov	r0, r8
 8009364:	a901      	add	r1, sp, #4
 8009366:	f7ff ff51 	bl	800920c <__b2d>
 800936a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800936e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009372:	460d      	mov	r5, r1
 8009374:	eba3 0c02 	sub.w	ip, r3, r2
 8009378:	e9dd 3200 	ldrd	r3, r2, [sp]
 800937c:	1a9b      	subs	r3, r3, r2
 800937e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009382:	2b00      	cmp	r3, #0
 8009384:	bfd5      	itete	le
 8009386:	460a      	movle	r2, r1
 8009388:	463a      	movgt	r2, r7
 800938a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800938e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8009392:	bfd8      	it	le
 8009394:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 8009398:	462b      	mov	r3, r5
 800939a:	4602      	mov	r2, r0
 800939c:	4659      	mov	r1, fp
 800939e:	4630      	mov	r0, r6
 80093a0:	f7f7 f9c4 	bl	800072c <__aeabi_ddiv>
 80093a4:	b003      	add	sp, #12
 80093a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080093aa <__copybits>:
 80093aa:	3901      	subs	r1, #1
 80093ac:	b510      	push	{r4, lr}
 80093ae:	1149      	asrs	r1, r1, #5
 80093b0:	6914      	ldr	r4, [r2, #16]
 80093b2:	3101      	adds	r1, #1
 80093b4:	f102 0314 	add.w	r3, r2, #20
 80093b8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80093bc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80093c0:	42a3      	cmp	r3, r4
 80093c2:	4602      	mov	r2, r0
 80093c4:	d303      	bcc.n	80093ce <__copybits+0x24>
 80093c6:	2300      	movs	r3, #0
 80093c8:	428a      	cmp	r2, r1
 80093ca:	d305      	bcc.n	80093d8 <__copybits+0x2e>
 80093cc:	bd10      	pop	{r4, pc}
 80093ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80093d2:	f840 2b04 	str.w	r2, [r0], #4
 80093d6:	e7f3      	b.n	80093c0 <__copybits+0x16>
 80093d8:	f842 3b04 	str.w	r3, [r2], #4
 80093dc:	e7f4      	b.n	80093c8 <__copybits+0x1e>

080093de <__any_on>:
 80093de:	f100 0214 	add.w	r2, r0, #20
 80093e2:	6900      	ldr	r0, [r0, #16]
 80093e4:	114b      	asrs	r3, r1, #5
 80093e6:	4298      	cmp	r0, r3
 80093e8:	b510      	push	{r4, lr}
 80093ea:	db11      	blt.n	8009410 <__any_on+0x32>
 80093ec:	dd0a      	ble.n	8009404 <__any_on+0x26>
 80093ee:	f011 011f 	ands.w	r1, r1, #31
 80093f2:	d007      	beq.n	8009404 <__any_on+0x26>
 80093f4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80093f8:	fa24 f001 	lsr.w	r0, r4, r1
 80093fc:	fa00 f101 	lsl.w	r1, r0, r1
 8009400:	428c      	cmp	r4, r1
 8009402:	d10b      	bne.n	800941c <__any_on+0x3e>
 8009404:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009408:	4293      	cmp	r3, r2
 800940a:	d803      	bhi.n	8009414 <__any_on+0x36>
 800940c:	2000      	movs	r0, #0
 800940e:	bd10      	pop	{r4, pc}
 8009410:	4603      	mov	r3, r0
 8009412:	e7f7      	b.n	8009404 <__any_on+0x26>
 8009414:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009418:	2900      	cmp	r1, #0
 800941a:	d0f5      	beq.n	8009408 <__any_on+0x2a>
 800941c:	2001      	movs	r0, #1
 800941e:	e7f6      	b.n	800940e <__any_on+0x30>

08009420 <_calloc_r>:
 8009420:	b538      	push	{r3, r4, r5, lr}
 8009422:	fb02 f401 	mul.w	r4, r2, r1
 8009426:	4621      	mov	r1, r4
 8009428:	f000 f808 	bl	800943c <_malloc_r>
 800942c:	4605      	mov	r5, r0
 800942e:	b118      	cbz	r0, 8009438 <_calloc_r+0x18>
 8009430:	4622      	mov	r2, r4
 8009432:	2100      	movs	r1, #0
 8009434:	f7fd ff96 	bl	8007364 <memset>
 8009438:	4628      	mov	r0, r5
 800943a:	bd38      	pop	{r3, r4, r5, pc}

0800943c <_malloc_r>:
 800943c:	b570      	push	{r4, r5, r6, lr}
 800943e:	1ccd      	adds	r5, r1, #3
 8009440:	f025 0503 	bic.w	r5, r5, #3
 8009444:	3508      	adds	r5, #8
 8009446:	2d0c      	cmp	r5, #12
 8009448:	bf38      	it	cc
 800944a:	250c      	movcc	r5, #12
 800944c:	2d00      	cmp	r5, #0
 800944e:	4606      	mov	r6, r0
 8009450:	db01      	blt.n	8009456 <_malloc_r+0x1a>
 8009452:	42a9      	cmp	r1, r5
 8009454:	d903      	bls.n	800945e <_malloc_r+0x22>
 8009456:	230c      	movs	r3, #12
 8009458:	6033      	str	r3, [r6, #0]
 800945a:	2000      	movs	r0, #0
 800945c:	bd70      	pop	{r4, r5, r6, pc}
 800945e:	f000 ff66 	bl	800a32e <__malloc_lock>
 8009462:	4a21      	ldr	r2, [pc, #132]	; (80094e8 <_malloc_r+0xac>)
 8009464:	6814      	ldr	r4, [r2, #0]
 8009466:	4621      	mov	r1, r4
 8009468:	b991      	cbnz	r1, 8009490 <_malloc_r+0x54>
 800946a:	4c20      	ldr	r4, [pc, #128]	; (80094ec <_malloc_r+0xb0>)
 800946c:	6823      	ldr	r3, [r4, #0]
 800946e:	b91b      	cbnz	r3, 8009478 <_malloc_r+0x3c>
 8009470:	4630      	mov	r0, r6
 8009472:	f000 fe19 	bl	800a0a8 <_sbrk_r>
 8009476:	6020      	str	r0, [r4, #0]
 8009478:	4629      	mov	r1, r5
 800947a:	4630      	mov	r0, r6
 800947c:	f000 fe14 	bl	800a0a8 <_sbrk_r>
 8009480:	1c43      	adds	r3, r0, #1
 8009482:	d124      	bne.n	80094ce <_malloc_r+0x92>
 8009484:	230c      	movs	r3, #12
 8009486:	4630      	mov	r0, r6
 8009488:	6033      	str	r3, [r6, #0]
 800948a:	f000 ff51 	bl	800a330 <__malloc_unlock>
 800948e:	e7e4      	b.n	800945a <_malloc_r+0x1e>
 8009490:	680b      	ldr	r3, [r1, #0]
 8009492:	1b5b      	subs	r3, r3, r5
 8009494:	d418      	bmi.n	80094c8 <_malloc_r+0x8c>
 8009496:	2b0b      	cmp	r3, #11
 8009498:	d90f      	bls.n	80094ba <_malloc_r+0x7e>
 800949a:	600b      	str	r3, [r1, #0]
 800949c:	18cc      	adds	r4, r1, r3
 800949e:	50cd      	str	r5, [r1, r3]
 80094a0:	4630      	mov	r0, r6
 80094a2:	f000 ff45 	bl	800a330 <__malloc_unlock>
 80094a6:	f104 000b 	add.w	r0, r4, #11
 80094aa:	1d23      	adds	r3, r4, #4
 80094ac:	f020 0007 	bic.w	r0, r0, #7
 80094b0:	1ac3      	subs	r3, r0, r3
 80094b2:	d0d3      	beq.n	800945c <_malloc_r+0x20>
 80094b4:	425a      	negs	r2, r3
 80094b6:	50e2      	str	r2, [r4, r3]
 80094b8:	e7d0      	b.n	800945c <_malloc_r+0x20>
 80094ba:	684b      	ldr	r3, [r1, #4]
 80094bc:	428c      	cmp	r4, r1
 80094be:	bf16      	itet	ne
 80094c0:	6063      	strne	r3, [r4, #4]
 80094c2:	6013      	streq	r3, [r2, #0]
 80094c4:	460c      	movne	r4, r1
 80094c6:	e7eb      	b.n	80094a0 <_malloc_r+0x64>
 80094c8:	460c      	mov	r4, r1
 80094ca:	6849      	ldr	r1, [r1, #4]
 80094cc:	e7cc      	b.n	8009468 <_malloc_r+0x2c>
 80094ce:	1cc4      	adds	r4, r0, #3
 80094d0:	f024 0403 	bic.w	r4, r4, #3
 80094d4:	42a0      	cmp	r0, r4
 80094d6:	d005      	beq.n	80094e4 <_malloc_r+0xa8>
 80094d8:	1a21      	subs	r1, r4, r0
 80094da:	4630      	mov	r0, r6
 80094dc:	f000 fde4 	bl	800a0a8 <_sbrk_r>
 80094e0:	3001      	adds	r0, #1
 80094e2:	d0cf      	beq.n	8009484 <_malloc_r+0x48>
 80094e4:	6025      	str	r5, [r4, #0]
 80094e6:	e7db      	b.n	80094a0 <_malloc_r+0x64>
 80094e8:	20000264 	.word	0x20000264
 80094ec:	20000268 	.word	0x20000268

080094f0 <__ssputs_r>:
 80094f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094f4:	688e      	ldr	r6, [r1, #8]
 80094f6:	4682      	mov	sl, r0
 80094f8:	429e      	cmp	r6, r3
 80094fa:	460c      	mov	r4, r1
 80094fc:	4690      	mov	r8, r2
 80094fe:	4699      	mov	r9, r3
 8009500:	d837      	bhi.n	8009572 <__ssputs_r+0x82>
 8009502:	898a      	ldrh	r2, [r1, #12]
 8009504:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009508:	d031      	beq.n	800956e <__ssputs_r+0x7e>
 800950a:	2302      	movs	r3, #2
 800950c:	6825      	ldr	r5, [r4, #0]
 800950e:	6909      	ldr	r1, [r1, #16]
 8009510:	1a6f      	subs	r7, r5, r1
 8009512:	6965      	ldr	r5, [r4, #20]
 8009514:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009518:	fb95 f5f3 	sdiv	r5, r5, r3
 800951c:	f109 0301 	add.w	r3, r9, #1
 8009520:	443b      	add	r3, r7
 8009522:	429d      	cmp	r5, r3
 8009524:	bf38      	it	cc
 8009526:	461d      	movcc	r5, r3
 8009528:	0553      	lsls	r3, r2, #21
 800952a:	d530      	bpl.n	800958e <__ssputs_r+0x9e>
 800952c:	4629      	mov	r1, r5
 800952e:	f7ff ff85 	bl	800943c <_malloc_r>
 8009532:	4606      	mov	r6, r0
 8009534:	b950      	cbnz	r0, 800954c <__ssputs_r+0x5c>
 8009536:	230c      	movs	r3, #12
 8009538:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800953c:	f8ca 3000 	str.w	r3, [sl]
 8009540:	89a3      	ldrh	r3, [r4, #12]
 8009542:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009546:	81a3      	strh	r3, [r4, #12]
 8009548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800954c:	463a      	mov	r2, r7
 800954e:	6921      	ldr	r1, [r4, #16]
 8009550:	f7ff fb62 	bl	8008c18 <memcpy>
 8009554:	89a3      	ldrh	r3, [r4, #12]
 8009556:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800955a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800955e:	81a3      	strh	r3, [r4, #12]
 8009560:	6126      	str	r6, [r4, #16]
 8009562:	443e      	add	r6, r7
 8009564:	6026      	str	r6, [r4, #0]
 8009566:	464e      	mov	r6, r9
 8009568:	6165      	str	r5, [r4, #20]
 800956a:	1bed      	subs	r5, r5, r7
 800956c:	60a5      	str	r5, [r4, #8]
 800956e:	454e      	cmp	r6, r9
 8009570:	d900      	bls.n	8009574 <__ssputs_r+0x84>
 8009572:	464e      	mov	r6, r9
 8009574:	4632      	mov	r2, r6
 8009576:	4641      	mov	r1, r8
 8009578:	6820      	ldr	r0, [r4, #0]
 800957a:	f000 febf 	bl	800a2fc <memmove>
 800957e:	68a3      	ldr	r3, [r4, #8]
 8009580:	2000      	movs	r0, #0
 8009582:	1b9b      	subs	r3, r3, r6
 8009584:	60a3      	str	r3, [r4, #8]
 8009586:	6823      	ldr	r3, [r4, #0]
 8009588:	441e      	add	r6, r3
 800958a:	6026      	str	r6, [r4, #0]
 800958c:	e7dc      	b.n	8009548 <__ssputs_r+0x58>
 800958e:	462a      	mov	r2, r5
 8009590:	f000 ff1c 	bl	800a3cc <_realloc_r>
 8009594:	4606      	mov	r6, r0
 8009596:	2800      	cmp	r0, #0
 8009598:	d1e2      	bne.n	8009560 <__ssputs_r+0x70>
 800959a:	6921      	ldr	r1, [r4, #16]
 800959c:	4650      	mov	r0, sl
 800959e:	f000 fec9 	bl	800a334 <_free_r>
 80095a2:	e7c8      	b.n	8009536 <__ssputs_r+0x46>

080095a4 <_svfiprintf_r>:
 80095a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095a8:	461d      	mov	r5, r3
 80095aa:	898b      	ldrh	r3, [r1, #12]
 80095ac:	b09d      	sub	sp, #116	; 0x74
 80095ae:	061f      	lsls	r7, r3, #24
 80095b0:	4680      	mov	r8, r0
 80095b2:	460c      	mov	r4, r1
 80095b4:	4616      	mov	r6, r2
 80095b6:	d50f      	bpl.n	80095d8 <_svfiprintf_r+0x34>
 80095b8:	690b      	ldr	r3, [r1, #16]
 80095ba:	b96b      	cbnz	r3, 80095d8 <_svfiprintf_r+0x34>
 80095bc:	2140      	movs	r1, #64	; 0x40
 80095be:	f7ff ff3d 	bl	800943c <_malloc_r>
 80095c2:	6020      	str	r0, [r4, #0]
 80095c4:	6120      	str	r0, [r4, #16]
 80095c6:	b928      	cbnz	r0, 80095d4 <_svfiprintf_r+0x30>
 80095c8:	230c      	movs	r3, #12
 80095ca:	f8c8 3000 	str.w	r3, [r8]
 80095ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80095d2:	e0c8      	b.n	8009766 <_svfiprintf_r+0x1c2>
 80095d4:	2340      	movs	r3, #64	; 0x40
 80095d6:	6163      	str	r3, [r4, #20]
 80095d8:	2300      	movs	r3, #0
 80095da:	9309      	str	r3, [sp, #36]	; 0x24
 80095dc:	2320      	movs	r3, #32
 80095de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80095e2:	2330      	movs	r3, #48	; 0x30
 80095e4:	f04f 0b01 	mov.w	fp, #1
 80095e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80095ec:	9503      	str	r5, [sp, #12]
 80095ee:	4637      	mov	r7, r6
 80095f0:	463d      	mov	r5, r7
 80095f2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80095f6:	b10b      	cbz	r3, 80095fc <_svfiprintf_r+0x58>
 80095f8:	2b25      	cmp	r3, #37	; 0x25
 80095fa:	d13e      	bne.n	800967a <_svfiprintf_r+0xd6>
 80095fc:	ebb7 0a06 	subs.w	sl, r7, r6
 8009600:	d00b      	beq.n	800961a <_svfiprintf_r+0x76>
 8009602:	4653      	mov	r3, sl
 8009604:	4632      	mov	r2, r6
 8009606:	4621      	mov	r1, r4
 8009608:	4640      	mov	r0, r8
 800960a:	f7ff ff71 	bl	80094f0 <__ssputs_r>
 800960e:	3001      	adds	r0, #1
 8009610:	f000 80a4 	beq.w	800975c <_svfiprintf_r+0x1b8>
 8009614:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009616:	4453      	add	r3, sl
 8009618:	9309      	str	r3, [sp, #36]	; 0x24
 800961a:	783b      	ldrb	r3, [r7, #0]
 800961c:	2b00      	cmp	r3, #0
 800961e:	f000 809d 	beq.w	800975c <_svfiprintf_r+0x1b8>
 8009622:	2300      	movs	r3, #0
 8009624:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009628:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800962c:	9304      	str	r3, [sp, #16]
 800962e:	9307      	str	r3, [sp, #28]
 8009630:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009634:	931a      	str	r3, [sp, #104]	; 0x68
 8009636:	462f      	mov	r7, r5
 8009638:	2205      	movs	r2, #5
 800963a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800963e:	4850      	ldr	r0, [pc, #320]	; (8009780 <_svfiprintf_r+0x1dc>)
 8009640:	f000 fe4e 	bl	800a2e0 <memchr>
 8009644:	9b04      	ldr	r3, [sp, #16]
 8009646:	b9d0      	cbnz	r0, 800967e <_svfiprintf_r+0xda>
 8009648:	06d9      	lsls	r1, r3, #27
 800964a:	bf44      	itt	mi
 800964c:	2220      	movmi	r2, #32
 800964e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009652:	071a      	lsls	r2, r3, #28
 8009654:	bf44      	itt	mi
 8009656:	222b      	movmi	r2, #43	; 0x2b
 8009658:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800965c:	782a      	ldrb	r2, [r5, #0]
 800965e:	2a2a      	cmp	r2, #42	; 0x2a
 8009660:	d015      	beq.n	800968e <_svfiprintf_r+0xea>
 8009662:	462f      	mov	r7, r5
 8009664:	2000      	movs	r0, #0
 8009666:	250a      	movs	r5, #10
 8009668:	9a07      	ldr	r2, [sp, #28]
 800966a:	4639      	mov	r1, r7
 800966c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009670:	3b30      	subs	r3, #48	; 0x30
 8009672:	2b09      	cmp	r3, #9
 8009674:	d94d      	bls.n	8009712 <_svfiprintf_r+0x16e>
 8009676:	b1b8      	cbz	r0, 80096a8 <_svfiprintf_r+0x104>
 8009678:	e00f      	b.n	800969a <_svfiprintf_r+0xf6>
 800967a:	462f      	mov	r7, r5
 800967c:	e7b8      	b.n	80095f0 <_svfiprintf_r+0x4c>
 800967e:	4a40      	ldr	r2, [pc, #256]	; (8009780 <_svfiprintf_r+0x1dc>)
 8009680:	463d      	mov	r5, r7
 8009682:	1a80      	subs	r0, r0, r2
 8009684:	fa0b f000 	lsl.w	r0, fp, r0
 8009688:	4318      	orrs	r0, r3
 800968a:	9004      	str	r0, [sp, #16]
 800968c:	e7d3      	b.n	8009636 <_svfiprintf_r+0x92>
 800968e:	9a03      	ldr	r2, [sp, #12]
 8009690:	1d11      	adds	r1, r2, #4
 8009692:	6812      	ldr	r2, [r2, #0]
 8009694:	9103      	str	r1, [sp, #12]
 8009696:	2a00      	cmp	r2, #0
 8009698:	db01      	blt.n	800969e <_svfiprintf_r+0xfa>
 800969a:	9207      	str	r2, [sp, #28]
 800969c:	e004      	b.n	80096a8 <_svfiprintf_r+0x104>
 800969e:	4252      	negs	r2, r2
 80096a0:	f043 0302 	orr.w	r3, r3, #2
 80096a4:	9207      	str	r2, [sp, #28]
 80096a6:	9304      	str	r3, [sp, #16]
 80096a8:	783b      	ldrb	r3, [r7, #0]
 80096aa:	2b2e      	cmp	r3, #46	; 0x2e
 80096ac:	d10c      	bne.n	80096c8 <_svfiprintf_r+0x124>
 80096ae:	787b      	ldrb	r3, [r7, #1]
 80096b0:	2b2a      	cmp	r3, #42	; 0x2a
 80096b2:	d133      	bne.n	800971c <_svfiprintf_r+0x178>
 80096b4:	9b03      	ldr	r3, [sp, #12]
 80096b6:	3702      	adds	r7, #2
 80096b8:	1d1a      	adds	r2, r3, #4
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	9203      	str	r2, [sp, #12]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	bfb8      	it	lt
 80096c2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80096c6:	9305      	str	r3, [sp, #20]
 80096c8:	4d2e      	ldr	r5, [pc, #184]	; (8009784 <_svfiprintf_r+0x1e0>)
 80096ca:	2203      	movs	r2, #3
 80096cc:	7839      	ldrb	r1, [r7, #0]
 80096ce:	4628      	mov	r0, r5
 80096d0:	f000 fe06 	bl	800a2e0 <memchr>
 80096d4:	b138      	cbz	r0, 80096e6 <_svfiprintf_r+0x142>
 80096d6:	2340      	movs	r3, #64	; 0x40
 80096d8:	1b40      	subs	r0, r0, r5
 80096da:	fa03 f000 	lsl.w	r0, r3, r0
 80096de:	9b04      	ldr	r3, [sp, #16]
 80096e0:	3701      	adds	r7, #1
 80096e2:	4303      	orrs	r3, r0
 80096e4:	9304      	str	r3, [sp, #16]
 80096e6:	7839      	ldrb	r1, [r7, #0]
 80096e8:	2206      	movs	r2, #6
 80096ea:	4827      	ldr	r0, [pc, #156]	; (8009788 <_svfiprintf_r+0x1e4>)
 80096ec:	1c7e      	adds	r6, r7, #1
 80096ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80096f2:	f000 fdf5 	bl	800a2e0 <memchr>
 80096f6:	2800      	cmp	r0, #0
 80096f8:	d038      	beq.n	800976c <_svfiprintf_r+0x1c8>
 80096fa:	4b24      	ldr	r3, [pc, #144]	; (800978c <_svfiprintf_r+0x1e8>)
 80096fc:	bb13      	cbnz	r3, 8009744 <_svfiprintf_r+0x1a0>
 80096fe:	9b03      	ldr	r3, [sp, #12]
 8009700:	3307      	adds	r3, #7
 8009702:	f023 0307 	bic.w	r3, r3, #7
 8009706:	3308      	adds	r3, #8
 8009708:	9303      	str	r3, [sp, #12]
 800970a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800970c:	444b      	add	r3, r9
 800970e:	9309      	str	r3, [sp, #36]	; 0x24
 8009710:	e76d      	b.n	80095ee <_svfiprintf_r+0x4a>
 8009712:	fb05 3202 	mla	r2, r5, r2, r3
 8009716:	2001      	movs	r0, #1
 8009718:	460f      	mov	r7, r1
 800971a:	e7a6      	b.n	800966a <_svfiprintf_r+0xc6>
 800971c:	2300      	movs	r3, #0
 800971e:	250a      	movs	r5, #10
 8009720:	4619      	mov	r1, r3
 8009722:	3701      	adds	r7, #1
 8009724:	9305      	str	r3, [sp, #20]
 8009726:	4638      	mov	r0, r7
 8009728:	f810 2b01 	ldrb.w	r2, [r0], #1
 800972c:	3a30      	subs	r2, #48	; 0x30
 800972e:	2a09      	cmp	r2, #9
 8009730:	d903      	bls.n	800973a <_svfiprintf_r+0x196>
 8009732:	2b00      	cmp	r3, #0
 8009734:	d0c8      	beq.n	80096c8 <_svfiprintf_r+0x124>
 8009736:	9105      	str	r1, [sp, #20]
 8009738:	e7c6      	b.n	80096c8 <_svfiprintf_r+0x124>
 800973a:	fb05 2101 	mla	r1, r5, r1, r2
 800973e:	2301      	movs	r3, #1
 8009740:	4607      	mov	r7, r0
 8009742:	e7f0      	b.n	8009726 <_svfiprintf_r+0x182>
 8009744:	ab03      	add	r3, sp, #12
 8009746:	9300      	str	r3, [sp, #0]
 8009748:	4622      	mov	r2, r4
 800974a:	4b11      	ldr	r3, [pc, #68]	; (8009790 <_svfiprintf_r+0x1ec>)
 800974c:	a904      	add	r1, sp, #16
 800974e:	4640      	mov	r0, r8
 8009750:	f3af 8000 	nop.w
 8009754:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009758:	4681      	mov	r9, r0
 800975a:	d1d6      	bne.n	800970a <_svfiprintf_r+0x166>
 800975c:	89a3      	ldrh	r3, [r4, #12]
 800975e:	065b      	lsls	r3, r3, #25
 8009760:	f53f af35 	bmi.w	80095ce <_svfiprintf_r+0x2a>
 8009764:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009766:	b01d      	add	sp, #116	; 0x74
 8009768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800976c:	ab03      	add	r3, sp, #12
 800976e:	9300      	str	r3, [sp, #0]
 8009770:	4622      	mov	r2, r4
 8009772:	4b07      	ldr	r3, [pc, #28]	; (8009790 <_svfiprintf_r+0x1ec>)
 8009774:	a904      	add	r1, sp, #16
 8009776:	4640      	mov	r0, r8
 8009778:	f000 fa2c 	bl	8009bd4 <_printf_i>
 800977c:	e7ea      	b.n	8009754 <_svfiprintf_r+0x1b0>
 800977e:	bf00      	nop
 8009780:	0800a744 	.word	0x0800a744
 8009784:	0800a74a 	.word	0x0800a74a
 8009788:	0800a74e 	.word	0x0800a74e
 800978c:	00000000 	.word	0x00000000
 8009790:	080094f1 	.word	0x080094f1

08009794 <_sungetc_r>:
 8009794:	b538      	push	{r3, r4, r5, lr}
 8009796:	1c4b      	adds	r3, r1, #1
 8009798:	4614      	mov	r4, r2
 800979a:	d103      	bne.n	80097a4 <_sungetc_r+0x10>
 800979c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80097a0:	4628      	mov	r0, r5
 80097a2:	bd38      	pop	{r3, r4, r5, pc}
 80097a4:	8993      	ldrh	r3, [r2, #12]
 80097a6:	b2cd      	uxtb	r5, r1
 80097a8:	f023 0320 	bic.w	r3, r3, #32
 80097ac:	8193      	strh	r3, [r2, #12]
 80097ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80097b0:	6852      	ldr	r2, [r2, #4]
 80097b2:	b18b      	cbz	r3, 80097d8 <_sungetc_r+0x44>
 80097b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80097b6:	4293      	cmp	r3, r2
 80097b8:	dd08      	ble.n	80097cc <_sungetc_r+0x38>
 80097ba:	6823      	ldr	r3, [r4, #0]
 80097bc:	1e5a      	subs	r2, r3, #1
 80097be:	6022      	str	r2, [r4, #0]
 80097c0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80097c4:	6863      	ldr	r3, [r4, #4]
 80097c6:	3301      	adds	r3, #1
 80097c8:	6063      	str	r3, [r4, #4]
 80097ca:	e7e9      	b.n	80097a0 <_sungetc_r+0xc>
 80097cc:	4621      	mov	r1, r4
 80097ce:	f000 fd39 	bl	800a244 <__submore>
 80097d2:	2800      	cmp	r0, #0
 80097d4:	d0f1      	beq.n	80097ba <_sungetc_r+0x26>
 80097d6:	e7e1      	b.n	800979c <_sungetc_r+0x8>
 80097d8:	6921      	ldr	r1, [r4, #16]
 80097da:	6823      	ldr	r3, [r4, #0]
 80097dc:	b151      	cbz	r1, 80097f4 <_sungetc_r+0x60>
 80097de:	4299      	cmp	r1, r3
 80097e0:	d208      	bcs.n	80097f4 <_sungetc_r+0x60>
 80097e2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80097e6:	42a9      	cmp	r1, r5
 80097e8:	d104      	bne.n	80097f4 <_sungetc_r+0x60>
 80097ea:	3b01      	subs	r3, #1
 80097ec:	3201      	adds	r2, #1
 80097ee:	6023      	str	r3, [r4, #0]
 80097f0:	6062      	str	r2, [r4, #4]
 80097f2:	e7d5      	b.n	80097a0 <_sungetc_r+0xc>
 80097f4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80097f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80097fc:	6363      	str	r3, [r4, #52]	; 0x34
 80097fe:	2303      	movs	r3, #3
 8009800:	63a3      	str	r3, [r4, #56]	; 0x38
 8009802:	4623      	mov	r3, r4
 8009804:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009808:	6023      	str	r3, [r4, #0]
 800980a:	2301      	movs	r3, #1
 800980c:	e7dc      	b.n	80097c8 <_sungetc_r+0x34>

0800980e <__ssrefill_r>:
 800980e:	b510      	push	{r4, lr}
 8009810:	460c      	mov	r4, r1
 8009812:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009814:	b169      	cbz	r1, 8009832 <__ssrefill_r+0x24>
 8009816:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800981a:	4299      	cmp	r1, r3
 800981c:	d001      	beq.n	8009822 <__ssrefill_r+0x14>
 800981e:	f000 fd89 	bl	800a334 <_free_r>
 8009822:	2000      	movs	r0, #0
 8009824:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009826:	6360      	str	r0, [r4, #52]	; 0x34
 8009828:	6063      	str	r3, [r4, #4]
 800982a:	b113      	cbz	r3, 8009832 <__ssrefill_r+0x24>
 800982c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800982e:	6023      	str	r3, [r4, #0]
 8009830:	bd10      	pop	{r4, pc}
 8009832:	6923      	ldr	r3, [r4, #16]
 8009834:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009838:	6023      	str	r3, [r4, #0]
 800983a:	2300      	movs	r3, #0
 800983c:	6063      	str	r3, [r4, #4]
 800983e:	89a3      	ldrh	r3, [r4, #12]
 8009840:	f043 0320 	orr.w	r3, r3, #32
 8009844:	81a3      	strh	r3, [r4, #12]
 8009846:	e7f3      	b.n	8009830 <__ssrefill_r+0x22>

08009848 <__ssvfiscanf_r>:
 8009848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800984c:	460c      	mov	r4, r1
 800984e:	2100      	movs	r1, #0
 8009850:	4606      	mov	r6, r0
 8009852:	4692      	mov	sl, r2
 8009854:	270a      	movs	r7, #10
 8009856:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800985a:	9144      	str	r1, [sp, #272]	; 0x110
 800985c:	9145      	str	r1, [sp, #276]	; 0x114
 800985e:	499e      	ldr	r1, [pc, #632]	; (8009ad8 <__ssvfiscanf_r+0x290>)
 8009860:	f10d 0804 	add.w	r8, sp, #4
 8009864:	91a0      	str	r1, [sp, #640]	; 0x280
 8009866:	499d      	ldr	r1, [pc, #628]	; (8009adc <__ssvfiscanf_r+0x294>)
 8009868:	f8df 9274 	ldr.w	r9, [pc, #628]	; 8009ae0 <__ssvfiscanf_r+0x298>
 800986c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8009870:	91a1      	str	r1, [sp, #644]	; 0x284
 8009872:	9300      	str	r3, [sp, #0]
 8009874:	f89a 3000 	ldrb.w	r3, [sl]
 8009878:	2b00      	cmp	r3, #0
 800987a:	f000 812a 	beq.w	8009ad2 <__ssvfiscanf_r+0x28a>
 800987e:	4655      	mov	r5, sl
 8009880:	f7ff f9a8 	bl	8008bd4 <__locale_ctype_ptr>
 8009884:	f815 bb01 	ldrb.w	fp, [r5], #1
 8009888:	4458      	add	r0, fp
 800988a:	7843      	ldrb	r3, [r0, #1]
 800988c:	f013 0308 	ands.w	r3, r3, #8
 8009890:	d01c      	beq.n	80098cc <__ssvfiscanf_r+0x84>
 8009892:	6863      	ldr	r3, [r4, #4]
 8009894:	2b00      	cmp	r3, #0
 8009896:	dd12      	ble.n	80098be <__ssvfiscanf_r+0x76>
 8009898:	f7ff f99c 	bl	8008bd4 <__locale_ctype_ptr>
 800989c:	6823      	ldr	r3, [r4, #0]
 800989e:	781a      	ldrb	r2, [r3, #0]
 80098a0:	4410      	add	r0, r2
 80098a2:	7842      	ldrb	r2, [r0, #1]
 80098a4:	0712      	lsls	r2, r2, #28
 80098a6:	d401      	bmi.n	80098ac <__ssvfiscanf_r+0x64>
 80098a8:	46aa      	mov	sl, r5
 80098aa:	e7e3      	b.n	8009874 <__ssvfiscanf_r+0x2c>
 80098ac:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80098ae:	3301      	adds	r3, #1
 80098b0:	3201      	adds	r2, #1
 80098b2:	9245      	str	r2, [sp, #276]	; 0x114
 80098b4:	6862      	ldr	r2, [r4, #4]
 80098b6:	6023      	str	r3, [r4, #0]
 80098b8:	3a01      	subs	r2, #1
 80098ba:	6062      	str	r2, [r4, #4]
 80098bc:	e7e9      	b.n	8009892 <__ssvfiscanf_r+0x4a>
 80098be:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80098c0:	4621      	mov	r1, r4
 80098c2:	4630      	mov	r0, r6
 80098c4:	4798      	blx	r3
 80098c6:	2800      	cmp	r0, #0
 80098c8:	d0e6      	beq.n	8009898 <__ssvfiscanf_r+0x50>
 80098ca:	e7ed      	b.n	80098a8 <__ssvfiscanf_r+0x60>
 80098cc:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80098d0:	f040 8082 	bne.w	80099d8 <__ssvfiscanf_r+0x190>
 80098d4:	9343      	str	r3, [sp, #268]	; 0x10c
 80098d6:	9341      	str	r3, [sp, #260]	; 0x104
 80098d8:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80098dc:	2b2a      	cmp	r3, #42	; 0x2a
 80098de:	d103      	bne.n	80098e8 <__ssvfiscanf_r+0xa0>
 80098e0:	2310      	movs	r3, #16
 80098e2:	f10a 0502 	add.w	r5, sl, #2
 80098e6:	9341      	str	r3, [sp, #260]	; 0x104
 80098e8:	46aa      	mov	sl, r5
 80098ea:	f815 1b01 	ldrb.w	r1, [r5], #1
 80098ee:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80098f2:	2a09      	cmp	r2, #9
 80098f4:	d922      	bls.n	800993c <__ssvfiscanf_r+0xf4>
 80098f6:	2203      	movs	r2, #3
 80098f8:	4879      	ldr	r0, [pc, #484]	; (8009ae0 <__ssvfiscanf_r+0x298>)
 80098fa:	f000 fcf1 	bl	800a2e0 <memchr>
 80098fe:	b138      	cbz	r0, 8009910 <__ssvfiscanf_r+0xc8>
 8009900:	eba0 0309 	sub.w	r3, r0, r9
 8009904:	2001      	movs	r0, #1
 8009906:	46aa      	mov	sl, r5
 8009908:	4098      	lsls	r0, r3
 800990a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800990c:	4318      	orrs	r0, r3
 800990e:	9041      	str	r0, [sp, #260]	; 0x104
 8009910:	f89a 3000 	ldrb.w	r3, [sl]
 8009914:	f10a 0501 	add.w	r5, sl, #1
 8009918:	2b67      	cmp	r3, #103	; 0x67
 800991a:	d82b      	bhi.n	8009974 <__ssvfiscanf_r+0x12c>
 800991c:	2b65      	cmp	r3, #101	; 0x65
 800991e:	f080 809f 	bcs.w	8009a60 <__ssvfiscanf_r+0x218>
 8009922:	2b47      	cmp	r3, #71	; 0x47
 8009924:	d810      	bhi.n	8009948 <__ssvfiscanf_r+0x100>
 8009926:	2b45      	cmp	r3, #69	; 0x45
 8009928:	f080 809a 	bcs.w	8009a60 <__ssvfiscanf_r+0x218>
 800992c:	2b00      	cmp	r3, #0
 800992e:	d06c      	beq.n	8009a0a <__ssvfiscanf_r+0x1c2>
 8009930:	2b25      	cmp	r3, #37	; 0x25
 8009932:	d051      	beq.n	80099d8 <__ssvfiscanf_r+0x190>
 8009934:	2303      	movs	r3, #3
 8009936:	9742      	str	r7, [sp, #264]	; 0x108
 8009938:	9347      	str	r3, [sp, #284]	; 0x11c
 800993a:	e027      	b.n	800998c <__ssvfiscanf_r+0x144>
 800993c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800993e:	fb07 1303 	mla	r3, r7, r3, r1
 8009942:	3b30      	subs	r3, #48	; 0x30
 8009944:	9343      	str	r3, [sp, #268]	; 0x10c
 8009946:	e7cf      	b.n	80098e8 <__ssvfiscanf_r+0xa0>
 8009948:	2b5b      	cmp	r3, #91	; 0x5b
 800994a:	d06a      	beq.n	8009a22 <__ssvfiscanf_r+0x1da>
 800994c:	d80c      	bhi.n	8009968 <__ssvfiscanf_r+0x120>
 800994e:	2b58      	cmp	r3, #88	; 0x58
 8009950:	d1f0      	bne.n	8009934 <__ssvfiscanf_r+0xec>
 8009952:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009954:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009958:	9241      	str	r2, [sp, #260]	; 0x104
 800995a:	2210      	movs	r2, #16
 800995c:	9242      	str	r2, [sp, #264]	; 0x108
 800995e:	2b6e      	cmp	r3, #110	; 0x6e
 8009960:	bf8c      	ite	hi
 8009962:	2304      	movhi	r3, #4
 8009964:	2303      	movls	r3, #3
 8009966:	e010      	b.n	800998a <__ssvfiscanf_r+0x142>
 8009968:	2b63      	cmp	r3, #99	; 0x63
 800996a:	d065      	beq.n	8009a38 <__ssvfiscanf_r+0x1f0>
 800996c:	2b64      	cmp	r3, #100	; 0x64
 800996e:	d1e1      	bne.n	8009934 <__ssvfiscanf_r+0xec>
 8009970:	9742      	str	r7, [sp, #264]	; 0x108
 8009972:	e7f4      	b.n	800995e <__ssvfiscanf_r+0x116>
 8009974:	2b70      	cmp	r3, #112	; 0x70
 8009976:	d04b      	beq.n	8009a10 <__ssvfiscanf_r+0x1c8>
 8009978:	d826      	bhi.n	80099c8 <__ssvfiscanf_r+0x180>
 800997a:	2b6e      	cmp	r3, #110	; 0x6e
 800997c:	d062      	beq.n	8009a44 <__ssvfiscanf_r+0x1fc>
 800997e:	d84c      	bhi.n	8009a1a <__ssvfiscanf_r+0x1d2>
 8009980:	2b69      	cmp	r3, #105	; 0x69
 8009982:	d1d7      	bne.n	8009934 <__ssvfiscanf_r+0xec>
 8009984:	2300      	movs	r3, #0
 8009986:	9342      	str	r3, [sp, #264]	; 0x108
 8009988:	2303      	movs	r3, #3
 800998a:	9347      	str	r3, [sp, #284]	; 0x11c
 800998c:	6863      	ldr	r3, [r4, #4]
 800998e:	2b00      	cmp	r3, #0
 8009990:	dd68      	ble.n	8009a64 <__ssvfiscanf_r+0x21c>
 8009992:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009994:	0659      	lsls	r1, r3, #25
 8009996:	d407      	bmi.n	80099a8 <__ssvfiscanf_r+0x160>
 8009998:	f7ff f91c 	bl	8008bd4 <__locale_ctype_ptr>
 800999c:	6823      	ldr	r3, [r4, #0]
 800999e:	781a      	ldrb	r2, [r3, #0]
 80099a0:	4410      	add	r0, r2
 80099a2:	7842      	ldrb	r2, [r0, #1]
 80099a4:	0712      	lsls	r2, r2, #28
 80099a6:	d464      	bmi.n	8009a72 <__ssvfiscanf_r+0x22a>
 80099a8:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80099aa:	2b02      	cmp	r3, #2
 80099ac:	dc73      	bgt.n	8009a96 <__ssvfiscanf_r+0x24e>
 80099ae:	466b      	mov	r3, sp
 80099b0:	4622      	mov	r2, r4
 80099b2:	a941      	add	r1, sp, #260	; 0x104
 80099b4:	4630      	mov	r0, r6
 80099b6:	f000 fa1f 	bl	8009df8 <_scanf_chars>
 80099ba:	2801      	cmp	r0, #1
 80099bc:	f000 8089 	beq.w	8009ad2 <__ssvfiscanf_r+0x28a>
 80099c0:	2802      	cmp	r0, #2
 80099c2:	f47f af71 	bne.w	80098a8 <__ssvfiscanf_r+0x60>
 80099c6:	e01d      	b.n	8009a04 <__ssvfiscanf_r+0x1bc>
 80099c8:	2b75      	cmp	r3, #117	; 0x75
 80099ca:	d0d1      	beq.n	8009970 <__ssvfiscanf_r+0x128>
 80099cc:	2b78      	cmp	r3, #120	; 0x78
 80099ce:	d0c0      	beq.n	8009952 <__ssvfiscanf_r+0x10a>
 80099d0:	2b73      	cmp	r3, #115	; 0x73
 80099d2:	d1af      	bne.n	8009934 <__ssvfiscanf_r+0xec>
 80099d4:	2302      	movs	r3, #2
 80099d6:	e7d8      	b.n	800998a <__ssvfiscanf_r+0x142>
 80099d8:	6863      	ldr	r3, [r4, #4]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	dd0c      	ble.n	80099f8 <__ssvfiscanf_r+0x1b0>
 80099de:	6823      	ldr	r3, [r4, #0]
 80099e0:	781a      	ldrb	r2, [r3, #0]
 80099e2:	455a      	cmp	r2, fp
 80099e4:	d175      	bne.n	8009ad2 <__ssvfiscanf_r+0x28a>
 80099e6:	3301      	adds	r3, #1
 80099e8:	6862      	ldr	r2, [r4, #4]
 80099ea:	6023      	str	r3, [r4, #0]
 80099ec:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80099ee:	3a01      	subs	r2, #1
 80099f0:	3301      	adds	r3, #1
 80099f2:	6062      	str	r2, [r4, #4]
 80099f4:	9345      	str	r3, [sp, #276]	; 0x114
 80099f6:	e757      	b.n	80098a8 <__ssvfiscanf_r+0x60>
 80099f8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80099fa:	4621      	mov	r1, r4
 80099fc:	4630      	mov	r0, r6
 80099fe:	4798      	blx	r3
 8009a00:	2800      	cmp	r0, #0
 8009a02:	d0ec      	beq.n	80099de <__ssvfiscanf_r+0x196>
 8009a04:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009a06:	2800      	cmp	r0, #0
 8009a08:	d159      	bne.n	8009abe <__ssvfiscanf_r+0x276>
 8009a0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a0e:	e05c      	b.n	8009aca <__ssvfiscanf_r+0x282>
 8009a10:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009a12:	f042 0220 	orr.w	r2, r2, #32
 8009a16:	9241      	str	r2, [sp, #260]	; 0x104
 8009a18:	e79b      	b.n	8009952 <__ssvfiscanf_r+0x10a>
 8009a1a:	2308      	movs	r3, #8
 8009a1c:	9342      	str	r3, [sp, #264]	; 0x108
 8009a1e:	2304      	movs	r3, #4
 8009a20:	e7b3      	b.n	800998a <__ssvfiscanf_r+0x142>
 8009a22:	4629      	mov	r1, r5
 8009a24:	4640      	mov	r0, r8
 8009a26:	f000 fb4f 	bl	800a0c8 <__sccl>
 8009a2a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009a2c:	4605      	mov	r5, r0
 8009a2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a32:	9341      	str	r3, [sp, #260]	; 0x104
 8009a34:	2301      	movs	r3, #1
 8009a36:	e7a8      	b.n	800998a <__ssvfiscanf_r+0x142>
 8009a38:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009a3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a3e:	9341      	str	r3, [sp, #260]	; 0x104
 8009a40:	2300      	movs	r3, #0
 8009a42:	e7a2      	b.n	800998a <__ssvfiscanf_r+0x142>
 8009a44:	9841      	ldr	r0, [sp, #260]	; 0x104
 8009a46:	06c3      	lsls	r3, r0, #27
 8009a48:	f53f af2e 	bmi.w	80098a8 <__ssvfiscanf_r+0x60>
 8009a4c:	9b00      	ldr	r3, [sp, #0]
 8009a4e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009a50:	1d19      	adds	r1, r3, #4
 8009a52:	9100      	str	r1, [sp, #0]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	07c0      	lsls	r0, r0, #31
 8009a58:	bf4c      	ite	mi
 8009a5a:	801a      	strhmi	r2, [r3, #0]
 8009a5c:	601a      	strpl	r2, [r3, #0]
 8009a5e:	e723      	b.n	80098a8 <__ssvfiscanf_r+0x60>
 8009a60:	2305      	movs	r3, #5
 8009a62:	e792      	b.n	800998a <__ssvfiscanf_r+0x142>
 8009a64:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009a66:	4621      	mov	r1, r4
 8009a68:	4630      	mov	r0, r6
 8009a6a:	4798      	blx	r3
 8009a6c:	2800      	cmp	r0, #0
 8009a6e:	d090      	beq.n	8009992 <__ssvfiscanf_r+0x14a>
 8009a70:	e7c8      	b.n	8009a04 <__ssvfiscanf_r+0x1bc>
 8009a72:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009a74:	3201      	adds	r2, #1
 8009a76:	9245      	str	r2, [sp, #276]	; 0x114
 8009a78:	6862      	ldr	r2, [r4, #4]
 8009a7a:	3a01      	subs	r2, #1
 8009a7c:	2a00      	cmp	r2, #0
 8009a7e:	6062      	str	r2, [r4, #4]
 8009a80:	dd02      	ble.n	8009a88 <__ssvfiscanf_r+0x240>
 8009a82:	3301      	adds	r3, #1
 8009a84:	6023      	str	r3, [r4, #0]
 8009a86:	e787      	b.n	8009998 <__ssvfiscanf_r+0x150>
 8009a88:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009a8a:	4621      	mov	r1, r4
 8009a8c:	4630      	mov	r0, r6
 8009a8e:	4798      	blx	r3
 8009a90:	2800      	cmp	r0, #0
 8009a92:	d081      	beq.n	8009998 <__ssvfiscanf_r+0x150>
 8009a94:	e7b6      	b.n	8009a04 <__ssvfiscanf_r+0x1bc>
 8009a96:	2b04      	cmp	r3, #4
 8009a98:	dc06      	bgt.n	8009aa8 <__ssvfiscanf_r+0x260>
 8009a9a:	466b      	mov	r3, sp
 8009a9c:	4622      	mov	r2, r4
 8009a9e:	a941      	add	r1, sp, #260	; 0x104
 8009aa0:	4630      	mov	r0, r6
 8009aa2:	f000 fa0b 	bl	8009ebc <_scanf_i>
 8009aa6:	e788      	b.n	80099ba <__ssvfiscanf_r+0x172>
 8009aa8:	4b0e      	ldr	r3, [pc, #56]	; (8009ae4 <__ssvfiscanf_r+0x29c>)
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	f43f aefc 	beq.w	80098a8 <__ssvfiscanf_r+0x60>
 8009ab0:	466b      	mov	r3, sp
 8009ab2:	4622      	mov	r2, r4
 8009ab4:	a941      	add	r1, sp, #260	; 0x104
 8009ab6:	4630      	mov	r0, r6
 8009ab8:	f7fd fc5c 	bl	8007374 <_scanf_float>
 8009abc:	e77d      	b.n	80099ba <__ssvfiscanf_r+0x172>
 8009abe:	89a3      	ldrh	r3, [r4, #12]
 8009ac0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009ac4:	bf18      	it	ne
 8009ac6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8009aca:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8009ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ad2:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009ad4:	e7f9      	b.n	8009aca <__ssvfiscanf_r+0x282>
 8009ad6:	bf00      	nop
 8009ad8:	08009795 	.word	0x08009795
 8009adc:	0800980f 	.word	0x0800980f
 8009ae0:	0800a74a 	.word	0x0800a74a
 8009ae4:	08007375 	.word	0x08007375

08009ae8 <_printf_common>:
 8009ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009aec:	4691      	mov	r9, r2
 8009aee:	461f      	mov	r7, r3
 8009af0:	688a      	ldr	r2, [r1, #8]
 8009af2:	690b      	ldr	r3, [r1, #16]
 8009af4:	4606      	mov	r6, r0
 8009af6:	4293      	cmp	r3, r2
 8009af8:	bfb8      	it	lt
 8009afa:	4613      	movlt	r3, r2
 8009afc:	f8c9 3000 	str.w	r3, [r9]
 8009b00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009b04:	460c      	mov	r4, r1
 8009b06:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009b0a:	b112      	cbz	r2, 8009b12 <_printf_common+0x2a>
 8009b0c:	3301      	adds	r3, #1
 8009b0e:	f8c9 3000 	str.w	r3, [r9]
 8009b12:	6823      	ldr	r3, [r4, #0]
 8009b14:	0699      	lsls	r1, r3, #26
 8009b16:	bf42      	ittt	mi
 8009b18:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009b1c:	3302      	addmi	r3, #2
 8009b1e:	f8c9 3000 	strmi.w	r3, [r9]
 8009b22:	6825      	ldr	r5, [r4, #0]
 8009b24:	f015 0506 	ands.w	r5, r5, #6
 8009b28:	d107      	bne.n	8009b3a <_printf_common+0x52>
 8009b2a:	f104 0a19 	add.w	sl, r4, #25
 8009b2e:	68e3      	ldr	r3, [r4, #12]
 8009b30:	f8d9 2000 	ldr.w	r2, [r9]
 8009b34:	1a9b      	subs	r3, r3, r2
 8009b36:	42ab      	cmp	r3, r5
 8009b38:	dc29      	bgt.n	8009b8e <_printf_common+0xa6>
 8009b3a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009b3e:	6822      	ldr	r2, [r4, #0]
 8009b40:	3300      	adds	r3, #0
 8009b42:	bf18      	it	ne
 8009b44:	2301      	movne	r3, #1
 8009b46:	0692      	lsls	r2, r2, #26
 8009b48:	d42e      	bmi.n	8009ba8 <_printf_common+0xc0>
 8009b4a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b4e:	4639      	mov	r1, r7
 8009b50:	4630      	mov	r0, r6
 8009b52:	47c0      	blx	r8
 8009b54:	3001      	adds	r0, #1
 8009b56:	d021      	beq.n	8009b9c <_printf_common+0xb4>
 8009b58:	6823      	ldr	r3, [r4, #0]
 8009b5a:	68e5      	ldr	r5, [r4, #12]
 8009b5c:	f003 0306 	and.w	r3, r3, #6
 8009b60:	2b04      	cmp	r3, #4
 8009b62:	bf18      	it	ne
 8009b64:	2500      	movne	r5, #0
 8009b66:	f8d9 2000 	ldr.w	r2, [r9]
 8009b6a:	f04f 0900 	mov.w	r9, #0
 8009b6e:	bf08      	it	eq
 8009b70:	1aad      	subeq	r5, r5, r2
 8009b72:	68a3      	ldr	r3, [r4, #8]
 8009b74:	6922      	ldr	r2, [r4, #16]
 8009b76:	bf08      	it	eq
 8009b78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	bfc4      	itt	gt
 8009b80:	1a9b      	subgt	r3, r3, r2
 8009b82:	18ed      	addgt	r5, r5, r3
 8009b84:	341a      	adds	r4, #26
 8009b86:	454d      	cmp	r5, r9
 8009b88:	d11a      	bne.n	8009bc0 <_printf_common+0xd8>
 8009b8a:	2000      	movs	r0, #0
 8009b8c:	e008      	b.n	8009ba0 <_printf_common+0xb8>
 8009b8e:	2301      	movs	r3, #1
 8009b90:	4652      	mov	r2, sl
 8009b92:	4639      	mov	r1, r7
 8009b94:	4630      	mov	r0, r6
 8009b96:	47c0      	blx	r8
 8009b98:	3001      	adds	r0, #1
 8009b9a:	d103      	bne.n	8009ba4 <_printf_common+0xbc>
 8009b9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ba4:	3501      	adds	r5, #1
 8009ba6:	e7c2      	b.n	8009b2e <_printf_common+0x46>
 8009ba8:	2030      	movs	r0, #48	; 0x30
 8009baa:	18e1      	adds	r1, r4, r3
 8009bac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009bb0:	1c5a      	adds	r2, r3, #1
 8009bb2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009bb6:	4422      	add	r2, r4
 8009bb8:	3302      	adds	r3, #2
 8009bba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009bbe:	e7c4      	b.n	8009b4a <_printf_common+0x62>
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	4622      	mov	r2, r4
 8009bc4:	4639      	mov	r1, r7
 8009bc6:	4630      	mov	r0, r6
 8009bc8:	47c0      	blx	r8
 8009bca:	3001      	adds	r0, #1
 8009bcc:	d0e6      	beq.n	8009b9c <_printf_common+0xb4>
 8009bce:	f109 0901 	add.w	r9, r9, #1
 8009bd2:	e7d8      	b.n	8009b86 <_printf_common+0x9e>

08009bd4 <_printf_i>:
 8009bd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009bd8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009bdc:	460c      	mov	r4, r1
 8009bde:	7e09      	ldrb	r1, [r1, #24]
 8009be0:	b085      	sub	sp, #20
 8009be2:	296e      	cmp	r1, #110	; 0x6e
 8009be4:	4617      	mov	r7, r2
 8009be6:	4606      	mov	r6, r0
 8009be8:	4698      	mov	r8, r3
 8009bea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009bec:	f000 80b3 	beq.w	8009d56 <_printf_i+0x182>
 8009bf0:	d822      	bhi.n	8009c38 <_printf_i+0x64>
 8009bf2:	2963      	cmp	r1, #99	; 0x63
 8009bf4:	d036      	beq.n	8009c64 <_printf_i+0x90>
 8009bf6:	d80a      	bhi.n	8009c0e <_printf_i+0x3a>
 8009bf8:	2900      	cmp	r1, #0
 8009bfa:	f000 80b9 	beq.w	8009d70 <_printf_i+0x19c>
 8009bfe:	2958      	cmp	r1, #88	; 0x58
 8009c00:	f000 8083 	beq.w	8009d0a <_printf_i+0x136>
 8009c04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c08:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009c0c:	e032      	b.n	8009c74 <_printf_i+0xa0>
 8009c0e:	2964      	cmp	r1, #100	; 0x64
 8009c10:	d001      	beq.n	8009c16 <_printf_i+0x42>
 8009c12:	2969      	cmp	r1, #105	; 0x69
 8009c14:	d1f6      	bne.n	8009c04 <_printf_i+0x30>
 8009c16:	6820      	ldr	r0, [r4, #0]
 8009c18:	6813      	ldr	r3, [r2, #0]
 8009c1a:	0605      	lsls	r5, r0, #24
 8009c1c:	f103 0104 	add.w	r1, r3, #4
 8009c20:	d52a      	bpl.n	8009c78 <_printf_i+0xa4>
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	6011      	str	r1, [r2, #0]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	da03      	bge.n	8009c32 <_printf_i+0x5e>
 8009c2a:	222d      	movs	r2, #45	; 0x2d
 8009c2c:	425b      	negs	r3, r3
 8009c2e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009c32:	486f      	ldr	r0, [pc, #444]	; (8009df0 <_printf_i+0x21c>)
 8009c34:	220a      	movs	r2, #10
 8009c36:	e039      	b.n	8009cac <_printf_i+0xd8>
 8009c38:	2973      	cmp	r1, #115	; 0x73
 8009c3a:	f000 809d 	beq.w	8009d78 <_printf_i+0x1a4>
 8009c3e:	d808      	bhi.n	8009c52 <_printf_i+0x7e>
 8009c40:	296f      	cmp	r1, #111	; 0x6f
 8009c42:	d020      	beq.n	8009c86 <_printf_i+0xb2>
 8009c44:	2970      	cmp	r1, #112	; 0x70
 8009c46:	d1dd      	bne.n	8009c04 <_printf_i+0x30>
 8009c48:	6823      	ldr	r3, [r4, #0]
 8009c4a:	f043 0320 	orr.w	r3, r3, #32
 8009c4e:	6023      	str	r3, [r4, #0]
 8009c50:	e003      	b.n	8009c5a <_printf_i+0x86>
 8009c52:	2975      	cmp	r1, #117	; 0x75
 8009c54:	d017      	beq.n	8009c86 <_printf_i+0xb2>
 8009c56:	2978      	cmp	r1, #120	; 0x78
 8009c58:	d1d4      	bne.n	8009c04 <_printf_i+0x30>
 8009c5a:	2378      	movs	r3, #120	; 0x78
 8009c5c:	4865      	ldr	r0, [pc, #404]	; (8009df4 <_printf_i+0x220>)
 8009c5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009c62:	e055      	b.n	8009d10 <_printf_i+0x13c>
 8009c64:	6813      	ldr	r3, [r2, #0]
 8009c66:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c6a:	1d19      	adds	r1, r3, #4
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	6011      	str	r1, [r2, #0]
 8009c70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c74:	2301      	movs	r3, #1
 8009c76:	e08c      	b.n	8009d92 <_printf_i+0x1be>
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009c7e:	6011      	str	r1, [r2, #0]
 8009c80:	bf18      	it	ne
 8009c82:	b21b      	sxthne	r3, r3
 8009c84:	e7cf      	b.n	8009c26 <_printf_i+0x52>
 8009c86:	6813      	ldr	r3, [r2, #0]
 8009c88:	6825      	ldr	r5, [r4, #0]
 8009c8a:	1d18      	adds	r0, r3, #4
 8009c8c:	6010      	str	r0, [r2, #0]
 8009c8e:	0628      	lsls	r0, r5, #24
 8009c90:	d501      	bpl.n	8009c96 <_printf_i+0xc2>
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	e002      	b.n	8009c9c <_printf_i+0xc8>
 8009c96:	0668      	lsls	r0, r5, #25
 8009c98:	d5fb      	bpl.n	8009c92 <_printf_i+0xbe>
 8009c9a:	881b      	ldrh	r3, [r3, #0]
 8009c9c:	296f      	cmp	r1, #111	; 0x6f
 8009c9e:	bf14      	ite	ne
 8009ca0:	220a      	movne	r2, #10
 8009ca2:	2208      	moveq	r2, #8
 8009ca4:	4852      	ldr	r0, [pc, #328]	; (8009df0 <_printf_i+0x21c>)
 8009ca6:	2100      	movs	r1, #0
 8009ca8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009cac:	6865      	ldr	r5, [r4, #4]
 8009cae:	2d00      	cmp	r5, #0
 8009cb0:	60a5      	str	r5, [r4, #8]
 8009cb2:	f2c0 8095 	blt.w	8009de0 <_printf_i+0x20c>
 8009cb6:	6821      	ldr	r1, [r4, #0]
 8009cb8:	f021 0104 	bic.w	r1, r1, #4
 8009cbc:	6021      	str	r1, [r4, #0]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d13d      	bne.n	8009d3e <_printf_i+0x16a>
 8009cc2:	2d00      	cmp	r5, #0
 8009cc4:	f040 808e 	bne.w	8009de4 <_printf_i+0x210>
 8009cc8:	4665      	mov	r5, ip
 8009cca:	2a08      	cmp	r2, #8
 8009ccc:	d10b      	bne.n	8009ce6 <_printf_i+0x112>
 8009cce:	6823      	ldr	r3, [r4, #0]
 8009cd0:	07db      	lsls	r3, r3, #31
 8009cd2:	d508      	bpl.n	8009ce6 <_printf_i+0x112>
 8009cd4:	6923      	ldr	r3, [r4, #16]
 8009cd6:	6862      	ldr	r2, [r4, #4]
 8009cd8:	429a      	cmp	r2, r3
 8009cda:	bfde      	ittt	le
 8009cdc:	2330      	movle	r3, #48	; 0x30
 8009cde:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009ce2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009ce6:	ebac 0305 	sub.w	r3, ip, r5
 8009cea:	6123      	str	r3, [r4, #16]
 8009cec:	f8cd 8000 	str.w	r8, [sp]
 8009cf0:	463b      	mov	r3, r7
 8009cf2:	aa03      	add	r2, sp, #12
 8009cf4:	4621      	mov	r1, r4
 8009cf6:	4630      	mov	r0, r6
 8009cf8:	f7ff fef6 	bl	8009ae8 <_printf_common>
 8009cfc:	3001      	adds	r0, #1
 8009cfe:	d14d      	bne.n	8009d9c <_printf_i+0x1c8>
 8009d00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d04:	b005      	add	sp, #20
 8009d06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d0a:	4839      	ldr	r0, [pc, #228]	; (8009df0 <_printf_i+0x21c>)
 8009d0c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009d10:	6813      	ldr	r3, [r2, #0]
 8009d12:	6821      	ldr	r1, [r4, #0]
 8009d14:	1d1d      	adds	r5, r3, #4
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	6015      	str	r5, [r2, #0]
 8009d1a:	060a      	lsls	r2, r1, #24
 8009d1c:	d50b      	bpl.n	8009d36 <_printf_i+0x162>
 8009d1e:	07ca      	lsls	r2, r1, #31
 8009d20:	bf44      	itt	mi
 8009d22:	f041 0120 	orrmi.w	r1, r1, #32
 8009d26:	6021      	strmi	r1, [r4, #0]
 8009d28:	b91b      	cbnz	r3, 8009d32 <_printf_i+0x15e>
 8009d2a:	6822      	ldr	r2, [r4, #0]
 8009d2c:	f022 0220 	bic.w	r2, r2, #32
 8009d30:	6022      	str	r2, [r4, #0]
 8009d32:	2210      	movs	r2, #16
 8009d34:	e7b7      	b.n	8009ca6 <_printf_i+0xd2>
 8009d36:	064d      	lsls	r5, r1, #25
 8009d38:	bf48      	it	mi
 8009d3a:	b29b      	uxthmi	r3, r3
 8009d3c:	e7ef      	b.n	8009d1e <_printf_i+0x14a>
 8009d3e:	4665      	mov	r5, ip
 8009d40:	fbb3 f1f2 	udiv	r1, r3, r2
 8009d44:	fb02 3311 	mls	r3, r2, r1, r3
 8009d48:	5cc3      	ldrb	r3, [r0, r3]
 8009d4a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009d4e:	460b      	mov	r3, r1
 8009d50:	2900      	cmp	r1, #0
 8009d52:	d1f5      	bne.n	8009d40 <_printf_i+0x16c>
 8009d54:	e7b9      	b.n	8009cca <_printf_i+0xf6>
 8009d56:	6813      	ldr	r3, [r2, #0]
 8009d58:	6825      	ldr	r5, [r4, #0]
 8009d5a:	1d18      	adds	r0, r3, #4
 8009d5c:	6961      	ldr	r1, [r4, #20]
 8009d5e:	6010      	str	r0, [r2, #0]
 8009d60:	0628      	lsls	r0, r5, #24
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	d501      	bpl.n	8009d6a <_printf_i+0x196>
 8009d66:	6019      	str	r1, [r3, #0]
 8009d68:	e002      	b.n	8009d70 <_printf_i+0x19c>
 8009d6a:	066a      	lsls	r2, r5, #25
 8009d6c:	d5fb      	bpl.n	8009d66 <_printf_i+0x192>
 8009d6e:	8019      	strh	r1, [r3, #0]
 8009d70:	2300      	movs	r3, #0
 8009d72:	4665      	mov	r5, ip
 8009d74:	6123      	str	r3, [r4, #16]
 8009d76:	e7b9      	b.n	8009cec <_printf_i+0x118>
 8009d78:	6813      	ldr	r3, [r2, #0]
 8009d7a:	1d19      	adds	r1, r3, #4
 8009d7c:	6011      	str	r1, [r2, #0]
 8009d7e:	681d      	ldr	r5, [r3, #0]
 8009d80:	6862      	ldr	r2, [r4, #4]
 8009d82:	2100      	movs	r1, #0
 8009d84:	4628      	mov	r0, r5
 8009d86:	f000 faab 	bl	800a2e0 <memchr>
 8009d8a:	b108      	cbz	r0, 8009d90 <_printf_i+0x1bc>
 8009d8c:	1b40      	subs	r0, r0, r5
 8009d8e:	6060      	str	r0, [r4, #4]
 8009d90:	6863      	ldr	r3, [r4, #4]
 8009d92:	6123      	str	r3, [r4, #16]
 8009d94:	2300      	movs	r3, #0
 8009d96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d9a:	e7a7      	b.n	8009cec <_printf_i+0x118>
 8009d9c:	6923      	ldr	r3, [r4, #16]
 8009d9e:	462a      	mov	r2, r5
 8009da0:	4639      	mov	r1, r7
 8009da2:	4630      	mov	r0, r6
 8009da4:	47c0      	blx	r8
 8009da6:	3001      	adds	r0, #1
 8009da8:	d0aa      	beq.n	8009d00 <_printf_i+0x12c>
 8009daa:	6823      	ldr	r3, [r4, #0]
 8009dac:	079b      	lsls	r3, r3, #30
 8009dae:	d413      	bmi.n	8009dd8 <_printf_i+0x204>
 8009db0:	68e0      	ldr	r0, [r4, #12]
 8009db2:	9b03      	ldr	r3, [sp, #12]
 8009db4:	4298      	cmp	r0, r3
 8009db6:	bfb8      	it	lt
 8009db8:	4618      	movlt	r0, r3
 8009dba:	e7a3      	b.n	8009d04 <_printf_i+0x130>
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	464a      	mov	r2, r9
 8009dc0:	4639      	mov	r1, r7
 8009dc2:	4630      	mov	r0, r6
 8009dc4:	47c0      	blx	r8
 8009dc6:	3001      	adds	r0, #1
 8009dc8:	d09a      	beq.n	8009d00 <_printf_i+0x12c>
 8009dca:	3501      	adds	r5, #1
 8009dcc:	68e3      	ldr	r3, [r4, #12]
 8009dce:	9a03      	ldr	r2, [sp, #12]
 8009dd0:	1a9b      	subs	r3, r3, r2
 8009dd2:	42ab      	cmp	r3, r5
 8009dd4:	dcf2      	bgt.n	8009dbc <_printf_i+0x1e8>
 8009dd6:	e7eb      	b.n	8009db0 <_printf_i+0x1dc>
 8009dd8:	2500      	movs	r5, #0
 8009dda:	f104 0919 	add.w	r9, r4, #25
 8009dde:	e7f5      	b.n	8009dcc <_printf_i+0x1f8>
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d1ac      	bne.n	8009d3e <_printf_i+0x16a>
 8009de4:	7803      	ldrb	r3, [r0, #0]
 8009de6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009dea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009dee:	e76c      	b.n	8009cca <_printf_i+0xf6>
 8009df0:	0800a755 	.word	0x0800a755
 8009df4:	0800a766 	.word	0x0800a766

08009df8 <_scanf_chars>:
 8009df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dfc:	4615      	mov	r5, r2
 8009dfe:	688a      	ldr	r2, [r1, #8]
 8009e00:	4680      	mov	r8, r0
 8009e02:	460c      	mov	r4, r1
 8009e04:	b932      	cbnz	r2, 8009e14 <_scanf_chars+0x1c>
 8009e06:	698a      	ldr	r2, [r1, #24]
 8009e08:	2a00      	cmp	r2, #0
 8009e0a:	bf14      	ite	ne
 8009e0c:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8009e10:	2201      	moveq	r2, #1
 8009e12:	608a      	str	r2, [r1, #8]
 8009e14:	2600      	movs	r6, #0
 8009e16:	6822      	ldr	r2, [r4, #0]
 8009e18:	06d1      	lsls	r1, r2, #27
 8009e1a:	bf5f      	itttt	pl
 8009e1c:	681a      	ldrpl	r2, [r3, #0]
 8009e1e:	1d11      	addpl	r1, r2, #4
 8009e20:	6019      	strpl	r1, [r3, #0]
 8009e22:	6817      	ldrpl	r7, [r2, #0]
 8009e24:	69a3      	ldr	r3, [r4, #24]
 8009e26:	b1db      	cbz	r3, 8009e60 <_scanf_chars+0x68>
 8009e28:	2b01      	cmp	r3, #1
 8009e2a:	d107      	bne.n	8009e3c <_scanf_chars+0x44>
 8009e2c:	682b      	ldr	r3, [r5, #0]
 8009e2e:	6962      	ldr	r2, [r4, #20]
 8009e30:	781b      	ldrb	r3, [r3, #0]
 8009e32:	5cd3      	ldrb	r3, [r2, r3]
 8009e34:	b9a3      	cbnz	r3, 8009e60 <_scanf_chars+0x68>
 8009e36:	2e00      	cmp	r6, #0
 8009e38:	d131      	bne.n	8009e9e <_scanf_chars+0xa6>
 8009e3a:	e006      	b.n	8009e4a <_scanf_chars+0x52>
 8009e3c:	2b02      	cmp	r3, #2
 8009e3e:	d007      	beq.n	8009e50 <_scanf_chars+0x58>
 8009e40:	2e00      	cmp	r6, #0
 8009e42:	d12c      	bne.n	8009e9e <_scanf_chars+0xa6>
 8009e44:	69a3      	ldr	r3, [r4, #24]
 8009e46:	2b01      	cmp	r3, #1
 8009e48:	d129      	bne.n	8009e9e <_scanf_chars+0xa6>
 8009e4a:	2001      	movs	r0, #1
 8009e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e50:	f7fe fec0 	bl	8008bd4 <__locale_ctype_ptr>
 8009e54:	682b      	ldr	r3, [r5, #0]
 8009e56:	781b      	ldrb	r3, [r3, #0]
 8009e58:	4418      	add	r0, r3
 8009e5a:	7843      	ldrb	r3, [r0, #1]
 8009e5c:	071b      	lsls	r3, r3, #28
 8009e5e:	d4ef      	bmi.n	8009e40 <_scanf_chars+0x48>
 8009e60:	6823      	ldr	r3, [r4, #0]
 8009e62:	3601      	adds	r6, #1
 8009e64:	06da      	lsls	r2, r3, #27
 8009e66:	bf5e      	ittt	pl
 8009e68:	682b      	ldrpl	r3, [r5, #0]
 8009e6a:	781b      	ldrbpl	r3, [r3, #0]
 8009e6c:	703b      	strbpl	r3, [r7, #0]
 8009e6e:	682a      	ldr	r2, [r5, #0]
 8009e70:	686b      	ldr	r3, [r5, #4]
 8009e72:	f102 0201 	add.w	r2, r2, #1
 8009e76:	602a      	str	r2, [r5, #0]
 8009e78:	68a2      	ldr	r2, [r4, #8]
 8009e7a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8009e7e:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8009e82:	606b      	str	r3, [r5, #4]
 8009e84:	bf58      	it	pl
 8009e86:	3701      	addpl	r7, #1
 8009e88:	60a2      	str	r2, [r4, #8]
 8009e8a:	b142      	cbz	r2, 8009e9e <_scanf_chars+0xa6>
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	dcc9      	bgt.n	8009e24 <_scanf_chars+0x2c>
 8009e90:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009e94:	4629      	mov	r1, r5
 8009e96:	4640      	mov	r0, r8
 8009e98:	4798      	blx	r3
 8009e9a:	2800      	cmp	r0, #0
 8009e9c:	d0c2      	beq.n	8009e24 <_scanf_chars+0x2c>
 8009e9e:	6823      	ldr	r3, [r4, #0]
 8009ea0:	f013 0310 	ands.w	r3, r3, #16
 8009ea4:	d105      	bne.n	8009eb2 <_scanf_chars+0xba>
 8009ea6:	68e2      	ldr	r2, [r4, #12]
 8009ea8:	3201      	adds	r2, #1
 8009eaa:	60e2      	str	r2, [r4, #12]
 8009eac:	69a2      	ldr	r2, [r4, #24]
 8009eae:	b102      	cbz	r2, 8009eb2 <_scanf_chars+0xba>
 8009eb0:	703b      	strb	r3, [r7, #0]
 8009eb2:	6923      	ldr	r3, [r4, #16]
 8009eb4:	2000      	movs	r0, #0
 8009eb6:	441e      	add	r6, r3
 8009eb8:	6126      	str	r6, [r4, #16]
 8009eba:	e7c7      	b.n	8009e4c <_scanf_chars+0x54>

08009ebc <_scanf_i>:
 8009ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ec0:	460c      	mov	r4, r1
 8009ec2:	469a      	mov	sl, r3
 8009ec4:	4b74      	ldr	r3, [pc, #464]	; (800a098 <_scanf_i+0x1dc>)
 8009ec6:	b087      	sub	sp, #28
 8009ec8:	4683      	mov	fp, r0
 8009eca:	4616      	mov	r6, r2
 8009ecc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009ed0:	ab03      	add	r3, sp, #12
 8009ed2:	68a7      	ldr	r7, [r4, #8]
 8009ed4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009ed8:	4b70      	ldr	r3, [pc, #448]	; (800a09c <_scanf_i+0x1e0>)
 8009eda:	69a1      	ldr	r1, [r4, #24]
 8009edc:	4a70      	ldr	r2, [pc, #448]	; (800a0a0 <_scanf_i+0x1e4>)
 8009ede:	f104 091c 	add.w	r9, r4, #28
 8009ee2:	2903      	cmp	r1, #3
 8009ee4:	bf08      	it	eq
 8009ee6:	461a      	moveq	r2, r3
 8009ee8:	1e7b      	subs	r3, r7, #1
 8009eea:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8009eee:	bf84      	itt	hi
 8009ef0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009ef4:	60a3      	strhi	r3, [r4, #8]
 8009ef6:	6823      	ldr	r3, [r4, #0]
 8009ef8:	bf88      	it	hi
 8009efa:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009efe:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8009f02:	6023      	str	r3, [r4, #0]
 8009f04:	bf98      	it	ls
 8009f06:	2700      	movls	r7, #0
 8009f08:	464b      	mov	r3, r9
 8009f0a:	f04f 0800 	mov.w	r8, #0
 8009f0e:	9200      	str	r2, [sp, #0]
 8009f10:	bf88      	it	hi
 8009f12:	197f      	addhi	r7, r7, r5
 8009f14:	6831      	ldr	r1, [r6, #0]
 8009f16:	9301      	str	r3, [sp, #4]
 8009f18:	ab03      	add	r3, sp, #12
 8009f1a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8009f1e:	2202      	movs	r2, #2
 8009f20:	7809      	ldrb	r1, [r1, #0]
 8009f22:	f000 f9dd 	bl	800a2e0 <memchr>
 8009f26:	9b01      	ldr	r3, [sp, #4]
 8009f28:	b330      	cbz	r0, 8009f78 <_scanf_i+0xbc>
 8009f2a:	f1b8 0f01 	cmp.w	r8, #1
 8009f2e:	d15a      	bne.n	8009fe6 <_scanf_i+0x12a>
 8009f30:	6862      	ldr	r2, [r4, #4]
 8009f32:	b92a      	cbnz	r2, 8009f40 <_scanf_i+0x84>
 8009f34:	2108      	movs	r1, #8
 8009f36:	6822      	ldr	r2, [r4, #0]
 8009f38:	6061      	str	r1, [r4, #4]
 8009f3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009f3e:	6022      	str	r2, [r4, #0]
 8009f40:	6822      	ldr	r2, [r4, #0]
 8009f42:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8009f46:	6022      	str	r2, [r4, #0]
 8009f48:	68a2      	ldr	r2, [r4, #8]
 8009f4a:	1e51      	subs	r1, r2, #1
 8009f4c:	60a1      	str	r1, [r4, #8]
 8009f4e:	b19a      	cbz	r2, 8009f78 <_scanf_i+0xbc>
 8009f50:	6832      	ldr	r2, [r6, #0]
 8009f52:	1c5d      	adds	r5, r3, #1
 8009f54:	1c51      	adds	r1, r2, #1
 8009f56:	6031      	str	r1, [r6, #0]
 8009f58:	7812      	ldrb	r2, [r2, #0]
 8009f5a:	701a      	strb	r2, [r3, #0]
 8009f5c:	6873      	ldr	r3, [r6, #4]
 8009f5e:	3b01      	subs	r3, #1
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	6073      	str	r3, [r6, #4]
 8009f64:	dc07      	bgt.n	8009f76 <_scanf_i+0xba>
 8009f66:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009f6a:	4631      	mov	r1, r6
 8009f6c:	4658      	mov	r0, fp
 8009f6e:	4798      	blx	r3
 8009f70:	2800      	cmp	r0, #0
 8009f72:	f040 8087 	bne.w	800a084 <_scanf_i+0x1c8>
 8009f76:	462b      	mov	r3, r5
 8009f78:	f108 0801 	add.w	r8, r8, #1
 8009f7c:	f1b8 0f03 	cmp.w	r8, #3
 8009f80:	d1c8      	bne.n	8009f14 <_scanf_i+0x58>
 8009f82:	6862      	ldr	r2, [r4, #4]
 8009f84:	b90a      	cbnz	r2, 8009f8a <_scanf_i+0xce>
 8009f86:	220a      	movs	r2, #10
 8009f88:	6062      	str	r2, [r4, #4]
 8009f8a:	6862      	ldr	r2, [r4, #4]
 8009f8c:	4945      	ldr	r1, [pc, #276]	; (800a0a4 <_scanf_i+0x1e8>)
 8009f8e:	6960      	ldr	r0, [r4, #20]
 8009f90:	1a89      	subs	r1, r1, r2
 8009f92:	9301      	str	r3, [sp, #4]
 8009f94:	f000 f898 	bl	800a0c8 <__sccl>
 8009f98:	9b01      	ldr	r3, [sp, #4]
 8009f9a:	f04f 0800 	mov.w	r8, #0
 8009f9e:	461d      	mov	r5, r3
 8009fa0:	68a3      	ldr	r3, [r4, #8]
 8009fa2:	6822      	ldr	r2, [r4, #0]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d03b      	beq.n	800a020 <_scanf_i+0x164>
 8009fa8:	6831      	ldr	r1, [r6, #0]
 8009faa:	6960      	ldr	r0, [r4, #20]
 8009fac:	f891 c000 	ldrb.w	ip, [r1]
 8009fb0:	f810 000c 	ldrb.w	r0, [r0, ip]
 8009fb4:	2800      	cmp	r0, #0
 8009fb6:	d033      	beq.n	800a020 <_scanf_i+0x164>
 8009fb8:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8009fbc:	d121      	bne.n	800a002 <_scanf_i+0x146>
 8009fbe:	0510      	lsls	r0, r2, #20
 8009fc0:	d51f      	bpl.n	800a002 <_scanf_i+0x146>
 8009fc2:	f108 0801 	add.w	r8, r8, #1
 8009fc6:	b117      	cbz	r7, 8009fce <_scanf_i+0x112>
 8009fc8:	3301      	adds	r3, #1
 8009fca:	3f01      	subs	r7, #1
 8009fcc:	60a3      	str	r3, [r4, #8]
 8009fce:	6873      	ldr	r3, [r6, #4]
 8009fd0:	3b01      	subs	r3, #1
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	6073      	str	r3, [r6, #4]
 8009fd6:	dd1c      	ble.n	800a012 <_scanf_i+0x156>
 8009fd8:	6833      	ldr	r3, [r6, #0]
 8009fda:	3301      	adds	r3, #1
 8009fdc:	6033      	str	r3, [r6, #0]
 8009fde:	68a3      	ldr	r3, [r4, #8]
 8009fe0:	3b01      	subs	r3, #1
 8009fe2:	60a3      	str	r3, [r4, #8]
 8009fe4:	e7dc      	b.n	8009fa0 <_scanf_i+0xe4>
 8009fe6:	f1b8 0f02 	cmp.w	r8, #2
 8009fea:	d1ad      	bne.n	8009f48 <_scanf_i+0x8c>
 8009fec:	6822      	ldr	r2, [r4, #0]
 8009fee:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8009ff2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009ff6:	d1bf      	bne.n	8009f78 <_scanf_i+0xbc>
 8009ff8:	2110      	movs	r1, #16
 8009ffa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009ffe:	6061      	str	r1, [r4, #4]
 800a000:	e7a1      	b.n	8009f46 <_scanf_i+0x8a>
 800a002:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800a006:	6022      	str	r2, [r4, #0]
 800a008:	780b      	ldrb	r3, [r1, #0]
 800a00a:	3501      	adds	r5, #1
 800a00c:	f805 3c01 	strb.w	r3, [r5, #-1]
 800a010:	e7dd      	b.n	8009fce <_scanf_i+0x112>
 800a012:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a016:	4631      	mov	r1, r6
 800a018:	4658      	mov	r0, fp
 800a01a:	4798      	blx	r3
 800a01c:	2800      	cmp	r0, #0
 800a01e:	d0de      	beq.n	8009fde <_scanf_i+0x122>
 800a020:	6823      	ldr	r3, [r4, #0]
 800a022:	05d9      	lsls	r1, r3, #23
 800a024:	d50c      	bpl.n	800a040 <_scanf_i+0x184>
 800a026:	454d      	cmp	r5, r9
 800a028:	d908      	bls.n	800a03c <_scanf_i+0x180>
 800a02a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a02e:	1e6f      	subs	r7, r5, #1
 800a030:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a034:	4632      	mov	r2, r6
 800a036:	4658      	mov	r0, fp
 800a038:	4798      	blx	r3
 800a03a:	463d      	mov	r5, r7
 800a03c:	454d      	cmp	r5, r9
 800a03e:	d029      	beq.n	800a094 <_scanf_i+0x1d8>
 800a040:	6822      	ldr	r2, [r4, #0]
 800a042:	f012 0210 	ands.w	r2, r2, #16
 800a046:	d113      	bne.n	800a070 <_scanf_i+0x1b4>
 800a048:	702a      	strb	r2, [r5, #0]
 800a04a:	6863      	ldr	r3, [r4, #4]
 800a04c:	4649      	mov	r1, r9
 800a04e:	4658      	mov	r0, fp
 800a050:	9e00      	ldr	r6, [sp, #0]
 800a052:	47b0      	blx	r6
 800a054:	f8da 3000 	ldr.w	r3, [sl]
 800a058:	6821      	ldr	r1, [r4, #0]
 800a05a:	1d1a      	adds	r2, r3, #4
 800a05c:	f8ca 2000 	str.w	r2, [sl]
 800a060:	f011 0f20 	tst.w	r1, #32
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	d010      	beq.n	800a08a <_scanf_i+0x1ce>
 800a068:	6018      	str	r0, [r3, #0]
 800a06a:	68e3      	ldr	r3, [r4, #12]
 800a06c:	3301      	adds	r3, #1
 800a06e:	60e3      	str	r3, [r4, #12]
 800a070:	2000      	movs	r0, #0
 800a072:	eba5 0509 	sub.w	r5, r5, r9
 800a076:	44a8      	add	r8, r5
 800a078:	6925      	ldr	r5, [r4, #16]
 800a07a:	4445      	add	r5, r8
 800a07c:	6125      	str	r5, [r4, #16]
 800a07e:	b007      	add	sp, #28
 800a080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a084:	f04f 0800 	mov.w	r8, #0
 800a088:	e7ca      	b.n	800a020 <_scanf_i+0x164>
 800a08a:	07ca      	lsls	r2, r1, #31
 800a08c:	bf4c      	ite	mi
 800a08e:	8018      	strhmi	r0, [r3, #0]
 800a090:	6018      	strpl	r0, [r3, #0]
 800a092:	e7ea      	b.n	800a06a <_scanf_i+0x1ae>
 800a094:	2001      	movs	r0, #1
 800a096:	e7f2      	b.n	800a07e <_scanf_i+0x1c2>
 800a098:	0800a5a4 	.word	0x0800a5a4
 800a09c:	08008559 	.word	0x08008559
 800a0a0:	0800a221 	.word	0x0800a221
 800a0a4:	0800a787 	.word	0x0800a787

0800a0a8 <_sbrk_r>:
 800a0a8:	b538      	push	{r3, r4, r5, lr}
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	4c05      	ldr	r4, [pc, #20]	; (800a0c4 <_sbrk_r+0x1c>)
 800a0ae:	4605      	mov	r5, r0
 800a0b0:	4608      	mov	r0, r1
 800a0b2:	6023      	str	r3, [r4, #0]
 800a0b4:	f7f8 fdf8 	bl	8002ca8 <_sbrk>
 800a0b8:	1c43      	adds	r3, r0, #1
 800a0ba:	d102      	bne.n	800a0c2 <_sbrk_r+0x1a>
 800a0bc:	6823      	ldr	r3, [r4, #0]
 800a0be:	b103      	cbz	r3, 800a0c2 <_sbrk_r+0x1a>
 800a0c0:	602b      	str	r3, [r5, #0]
 800a0c2:	bd38      	pop	{r3, r4, r5, pc}
 800a0c4:	200004d8 	.word	0x200004d8

0800a0c8 <__sccl>:
 800a0c8:	b570      	push	{r4, r5, r6, lr}
 800a0ca:	780b      	ldrb	r3, [r1, #0]
 800a0cc:	1e44      	subs	r4, r0, #1
 800a0ce:	2b5e      	cmp	r3, #94	; 0x5e
 800a0d0:	bf13      	iteet	ne
 800a0d2:	1c4a      	addne	r2, r1, #1
 800a0d4:	1c8a      	addeq	r2, r1, #2
 800a0d6:	784b      	ldrbeq	r3, [r1, #1]
 800a0d8:	2100      	movne	r1, #0
 800a0da:	bf08      	it	eq
 800a0dc:	2101      	moveq	r1, #1
 800a0de:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800a0e2:	f804 1f01 	strb.w	r1, [r4, #1]!
 800a0e6:	42ac      	cmp	r4, r5
 800a0e8:	d1fb      	bne.n	800a0e2 <__sccl+0x1a>
 800a0ea:	b913      	cbnz	r3, 800a0f2 <__sccl+0x2a>
 800a0ec:	3a01      	subs	r2, #1
 800a0ee:	4610      	mov	r0, r2
 800a0f0:	bd70      	pop	{r4, r5, r6, pc}
 800a0f2:	f081 0401 	eor.w	r4, r1, #1
 800a0f6:	54c4      	strb	r4, [r0, r3]
 800a0f8:	1c51      	adds	r1, r2, #1
 800a0fa:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 800a0fe:	1e4e      	subs	r6, r1, #1
 800a100:	2d2d      	cmp	r5, #45	; 0x2d
 800a102:	460a      	mov	r2, r1
 800a104:	d006      	beq.n	800a114 <__sccl+0x4c>
 800a106:	2d5d      	cmp	r5, #93	; 0x5d
 800a108:	d0f1      	beq.n	800a0ee <__sccl+0x26>
 800a10a:	b90d      	cbnz	r5, 800a110 <__sccl+0x48>
 800a10c:	4632      	mov	r2, r6
 800a10e:	e7ee      	b.n	800a0ee <__sccl+0x26>
 800a110:	462b      	mov	r3, r5
 800a112:	e7f0      	b.n	800a0f6 <__sccl+0x2e>
 800a114:	780e      	ldrb	r6, [r1, #0]
 800a116:	2e5d      	cmp	r6, #93	; 0x5d
 800a118:	d0fa      	beq.n	800a110 <__sccl+0x48>
 800a11a:	42b3      	cmp	r3, r6
 800a11c:	dcf8      	bgt.n	800a110 <__sccl+0x48>
 800a11e:	3301      	adds	r3, #1
 800a120:	429e      	cmp	r6, r3
 800a122:	54c4      	strb	r4, [r0, r3]
 800a124:	dcfb      	bgt.n	800a11e <__sccl+0x56>
 800a126:	3102      	adds	r1, #2
 800a128:	e7e7      	b.n	800a0fa <__sccl+0x32>

0800a12a <_strtoul_l.isra.0>:
 800a12a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a12e:	4680      	mov	r8, r0
 800a130:	4689      	mov	r9, r1
 800a132:	4692      	mov	sl, r2
 800a134:	461e      	mov	r6, r3
 800a136:	460f      	mov	r7, r1
 800a138:	463d      	mov	r5, r7
 800a13a:	9808      	ldr	r0, [sp, #32]
 800a13c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a140:	f7fe fd44 	bl	8008bcc <__locale_ctype_ptr_l>
 800a144:	4420      	add	r0, r4
 800a146:	7843      	ldrb	r3, [r0, #1]
 800a148:	f013 0308 	ands.w	r3, r3, #8
 800a14c:	d130      	bne.n	800a1b0 <_strtoul_l.isra.0+0x86>
 800a14e:	2c2d      	cmp	r4, #45	; 0x2d
 800a150:	d130      	bne.n	800a1b4 <_strtoul_l.isra.0+0x8a>
 800a152:	2101      	movs	r1, #1
 800a154:	787c      	ldrb	r4, [r7, #1]
 800a156:	1cbd      	adds	r5, r7, #2
 800a158:	2e00      	cmp	r6, #0
 800a15a:	d05c      	beq.n	800a216 <_strtoul_l.isra.0+0xec>
 800a15c:	2e10      	cmp	r6, #16
 800a15e:	d109      	bne.n	800a174 <_strtoul_l.isra.0+0x4a>
 800a160:	2c30      	cmp	r4, #48	; 0x30
 800a162:	d107      	bne.n	800a174 <_strtoul_l.isra.0+0x4a>
 800a164:	782b      	ldrb	r3, [r5, #0]
 800a166:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a16a:	2b58      	cmp	r3, #88	; 0x58
 800a16c:	d14e      	bne.n	800a20c <_strtoul_l.isra.0+0xe2>
 800a16e:	2610      	movs	r6, #16
 800a170:	786c      	ldrb	r4, [r5, #1]
 800a172:	3502      	adds	r5, #2
 800a174:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a178:	fbb2 f2f6 	udiv	r2, r2, r6
 800a17c:	2300      	movs	r3, #0
 800a17e:	fb06 fc02 	mul.w	ip, r6, r2
 800a182:	4618      	mov	r0, r3
 800a184:	ea6f 0c0c 	mvn.w	ip, ip
 800a188:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800a18c:	2f09      	cmp	r7, #9
 800a18e:	d817      	bhi.n	800a1c0 <_strtoul_l.isra.0+0x96>
 800a190:	463c      	mov	r4, r7
 800a192:	42a6      	cmp	r6, r4
 800a194:	dd23      	ble.n	800a1de <_strtoul_l.isra.0+0xb4>
 800a196:	2b00      	cmp	r3, #0
 800a198:	db1e      	blt.n	800a1d8 <_strtoul_l.isra.0+0xae>
 800a19a:	4282      	cmp	r2, r0
 800a19c:	d31c      	bcc.n	800a1d8 <_strtoul_l.isra.0+0xae>
 800a19e:	d101      	bne.n	800a1a4 <_strtoul_l.isra.0+0x7a>
 800a1a0:	45a4      	cmp	ip, r4
 800a1a2:	db19      	blt.n	800a1d8 <_strtoul_l.isra.0+0xae>
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	fb00 4006 	mla	r0, r0, r6, r4
 800a1aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a1ae:	e7eb      	b.n	800a188 <_strtoul_l.isra.0+0x5e>
 800a1b0:	462f      	mov	r7, r5
 800a1b2:	e7c1      	b.n	800a138 <_strtoul_l.isra.0+0xe>
 800a1b4:	2c2b      	cmp	r4, #43	; 0x2b
 800a1b6:	bf04      	itt	eq
 800a1b8:	1cbd      	addeq	r5, r7, #2
 800a1ba:	787c      	ldrbeq	r4, [r7, #1]
 800a1bc:	4619      	mov	r1, r3
 800a1be:	e7cb      	b.n	800a158 <_strtoul_l.isra.0+0x2e>
 800a1c0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800a1c4:	2f19      	cmp	r7, #25
 800a1c6:	d801      	bhi.n	800a1cc <_strtoul_l.isra.0+0xa2>
 800a1c8:	3c37      	subs	r4, #55	; 0x37
 800a1ca:	e7e2      	b.n	800a192 <_strtoul_l.isra.0+0x68>
 800a1cc:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800a1d0:	2f19      	cmp	r7, #25
 800a1d2:	d804      	bhi.n	800a1de <_strtoul_l.isra.0+0xb4>
 800a1d4:	3c57      	subs	r4, #87	; 0x57
 800a1d6:	e7dc      	b.n	800a192 <_strtoul_l.isra.0+0x68>
 800a1d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a1dc:	e7e5      	b.n	800a1aa <_strtoul_l.isra.0+0x80>
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	da09      	bge.n	800a1f6 <_strtoul_l.isra.0+0xcc>
 800a1e2:	2322      	movs	r3, #34	; 0x22
 800a1e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a1e8:	f8c8 3000 	str.w	r3, [r8]
 800a1ec:	f1ba 0f00 	cmp.w	sl, #0
 800a1f0:	d107      	bne.n	800a202 <_strtoul_l.isra.0+0xd8>
 800a1f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1f6:	b101      	cbz	r1, 800a1fa <_strtoul_l.isra.0+0xd0>
 800a1f8:	4240      	negs	r0, r0
 800a1fa:	f1ba 0f00 	cmp.w	sl, #0
 800a1fe:	d0f8      	beq.n	800a1f2 <_strtoul_l.isra.0+0xc8>
 800a200:	b10b      	cbz	r3, 800a206 <_strtoul_l.isra.0+0xdc>
 800a202:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800a206:	f8ca 9000 	str.w	r9, [sl]
 800a20a:	e7f2      	b.n	800a1f2 <_strtoul_l.isra.0+0xc8>
 800a20c:	2430      	movs	r4, #48	; 0x30
 800a20e:	2e00      	cmp	r6, #0
 800a210:	d1b0      	bne.n	800a174 <_strtoul_l.isra.0+0x4a>
 800a212:	2608      	movs	r6, #8
 800a214:	e7ae      	b.n	800a174 <_strtoul_l.isra.0+0x4a>
 800a216:	2c30      	cmp	r4, #48	; 0x30
 800a218:	d0a4      	beq.n	800a164 <_strtoul_l.isra.0+0x3a>
 800a21a:	260a      	movs	r6, #10
 800a21c:	e7aa      	b.n	800a174 <_strtoul_l.isra.0+0x4a>
	...

0800a220 <_strtoul_r>:
 800a220:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a222:	4c06      	ldr	r4, [pc, #24]	; (800a23c <_strtoul_r+0x1c>)
 800a224:	4d06      	ldr	r5, [pc, #24]	; (800a240 <_strtoul_r+0x20>)
 800a226:	6824      	ldr	r4, [r4, #0]
 800a228:	6a24      	ldr	r4, [r4, #32]
 800a22a:	2c00      	cmp	r4, #0
 800a22c:	bf08      	it	eq
 800a22e:	462c      	moveq	r4, r5
 800a230:	9400      	str	r4, [sp, #0]
 800a232:	f7ff ff7a 	bl	800a12a <_strtoul_l.isra.0>
 800a236:	b003      	add	sp, #12
 800a238:	bd30      	pop	{r4, r5, pc}
 800a23a:	bf00      	nop
 800a23c:	20000010 	.word	0x20000010
 800a240:	20000074 	.word	0x20000074

0800a244 <__submore>:
 800a244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a248:	460c      	mov	r4, r1
 800a24a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a24c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a250:	4299      	cmp	r1, r3
 800a252:	d11b      	bne.n	800a28c <__submore+0x48>
 800a254:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a258:	f7ff f8f0 	bl	800943c <_malloc_r>
 800a25c:	b918      	cbnz	r0, 800a266 <__submore+0x22>
 800a25e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a266:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a26a:	63a3      	str	r3, [r4, #56]	; 0x38
 800a26c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800a270:	6360      	str	r0, [r4, #52]	; 0x34
 800a272:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800a276:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a27a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800a27e:	7043      	strb	r3, [r0, #1]
 800a280:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a284:	7003      	strb	r3, [r0, #0]
 800a286:	6020      	str	r0, [r4, #0]
 800a288:	2000      	movs	r0, #0
 800a28a:	e7ea      	b.n	800a262 <__submore+0x1e>
 800a28c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800a28e:	0077      	lsls	r7, r6, #1
 800a290:	463a      	mov	r2, r7
 800a292:	f000 f89b 	bl	800a3cc <_realloc_r>
 800a296:	4605      	mov	r5, r0
 800a298:	2800      	cmp	r0, #0
 800a29a:	d0e0      	beq.n	800a25e <__submore+0x1a>
 800a29c:	eb00 0806 	add.w	r8, r0, r6
 800a2a0:	4601      	mov	r1, r0
 800a2a2:	4632      	mov	r2, r6
 800a2a4:	4640      	mov	r0, r8
 800a2a6:	f7fe fcb7 	bl	8008c18 <memcpy>
 800a2aa:	f8c4 8000 	str.w	r8, [r4]
 800a2ae:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800a2b2:	e7e9      	b.n	800a288 <__submore+0x44>

0800a2b4 <__ascii_wctomb>:
 800a2b4:	b149      	cbz	r1, 800a2ca <__ascii_wctomb+0x16>
 800a2b6:	2aff      	cmp	r2, #255	; 0xff
 800a2b8:	bf8b      	itete	hi
 800a2ba:	238a      	movhi	r3, #138	; 0x8a
 800a2bc:	700a      	strbls	r2, [r1, #0]
 800a2be:	6003      	strhi	r3, [r0, #0]
 800a2c0:	2001      	movls	r0, #1
 800a2c2:	bf88      	it	hi
 800a2c4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a2c8:	4770      	bx	lr
 800a2ca:	4608      	mov	r0, r1
 800a2cc:	4770      	bx	lr
	...

0800a2d0 <malloc>:
 800a2d0:	4b02      	ldr	r3, [pc, #8]	; (800a2dc <malloc+0xc>)
 800a2d2:	4601      	mov	r1, r0
 800a2d4:	6818      	ldr	r0, [r3, #0]
 800a2d6:	f7ff b8b1 	b.w	800943c <_malloc_r>
 800a2da:	bf00      	nop
 800a2dc:	20000010 	.word	0x20000010

0800a2e0 <memchr>:
 800a2e0:	b510      	push	{r4, lr}
 800a2e2:	b2c9      	uxtb	r1, r1
 800a2e4:	4402      	add	r2, r0
 800a2e6:	4290      	cmp	r0, r2
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	d101      	bne.n	800a2f0 <memchr+0x10>
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	e003      	b.n	800a2f8 <memchr+0x18>
 800a2f0:	781c      	ldrb	r4, [r3, #0]
 800a2f2:	3001      	adds	r0, #1
 800a2f4:	428c      	cmp	r4, r1
 800a2f6:	d1f6      	bne.n	800a2e6 <memchr+0x6>
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	bd10      	pop	{r4, pc}

0800a2fc <memmove>:
 800a2fc:	4288      	cmp	r0, r1
 800a2fe:	b510      	push	{r4, lr}
 800a300:	eb01 0302 	add.w	r3, r1, r2
 800a304:	d807      	bhi.n	800a316 <memmove+0x1a>
 800a306:	1e42      	subs	r2, r0, #1
 800a308:	4299      	cmp	r1, r3
 800a30a:	d00a      	beq.n	800a322 <memmove+0x26>
 800a30c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a310:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a314:	e7f8      	b.n	800a308 <memmove+0xc>
 800a316:	4283      	cmp	r3, r0
 800a318:	d9f5      	bls.n	800a306 <memmove+0xa>
 800a31a:	1881      	adds	r1, r0, r2
 800a31c:	1ad2      	subs	r2, r2, r3
 800a31e:	42d3      	cmn	r3, r2
 800a320:	d100      	bne.n	800a324 <memmove+0x28>
 800a322:	bd10      	pop	{r4, pc}
 800a324:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a328:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a32c:	e7f7      	b.n	800a31e <memmove+0x22>

0800a32e <__malloc_lock>:
 800a32e:	4770      	bx	lr

0800a330 <__malloc_unlock>:
 800a330:	4770      	bx	lr
	...

0800a334 <_free_r>:
 800a334:	b538      	push	{r3, r4, r5, lr}
 800a336:	4605      	mov	r5, r0
 800a338:	2900      	cmp	r1, #0
 800a33a:	d043      	beq.n	800a3c4 <_free_r+0x90>
 800a33c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a340:	1f0c      	subs	r4, r1, #4
 800a342:	2b00      	cmp	r3, #0
 800a344:	bfb8      	it	lt
 800a346:	18e4      	addlt	r4, r4, r3
 800a348:	f7ff fff1 	bl	800a32e <__malloc_lock>
 800a34c:	4a1e      	ldr	r2, [pc, #120]	; (800a3c8 <_free_r+0x94>)
 800a34e:	6813      	ldr	r3, [r2, #0]
 800a350:	4610      	mov	r0, r2
 800a352:	b933      	cbnz	r3, 800a362 <_free_r+0x2e>
 800a354:	6063      	str	r3, [r4, #4]
 800a356:	6014      	str	r4, [r2, #0]
 800a358:	4628      	mov	r0, r5
 800a35a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a35e:	f7ff bfe7 	b.w	800a330 <__malloc_unlock>
 800a362:	42a3      	cmp	r3, r4
 800a364:	d90b      	bls.n	800a37e <_free_r+0x4a>
 800a366:	6821      	ldr	r1, [r4, #0]
 800a368:	1862      	adds	r2, r4, r1
 800a36a:	4293      	cmp	r3, r2
 800a36c:	bf01      	itttt	eq
 800a36e:	681a      	ldreq	r2, [r3, #0]
 800a370:	685b      	ldreq	r3, [r3, #4]
 800a372:	1852      	addeq	r2, r2, r1
 800a374:	6022      	streq	r2, [r4, #0]
 800a376:	6063      	str	r3, [r4, #4]
 800a378:	6004      	str	r4, [r0, #0]
 800a37a:	e7ed      	b.n	800a358 <_free_r+0x24>
 800a37c:	4613      	mov	r3, r2
 800a37e:	685a      	ldr	r2, [r3, #4]
 800a380:	b10a      	cbz	r2, 800a386 <_free_r+0x52>
 800a382:	42a2      	cmp	r2, r4
 800a384:	d9fa      	bls.n	800a37c <_free_r+0x48>
 800a386:	6819      	ldr	r1, [r3, #0]
 800a388:	1858      	adds	r0, r3, r1
 800a38a:	42a0      	cmp	r0, r4
 800a38c:	d10b      	bne.n	800a3a6 <_free_r+0x72>
 800a38e:	6820      	ldr	r0, [r4, #0]
 800a390:	4401      	add	r1, r0
 800a392:	1858      	adds	r0, r3, r1
 800a394:	4282      	cmp	r2, r0
 800a396:	6019      	str	r1, [r3, #0]
 800a398:	d1de      	bne.n	800a358 <_free_r+0x24>
 800a39a:	6810      	ldr	r0, [r2, #0]
 800a39c:	6852      	ldr	r2, [r2, #4]
 800a39e:	4401      	add	r1, r0
 800a3a0:	6019      	str	r1, [r3, #0]
 800a3a2:	605a      	str	r2, [r3, #4]
 800a3a4:	e7d8      	b.n	800a358 <_free_r+0x24>
 800a3a6:	d902      	bls.n	800a3ae <_free_r+0x7a>
 800a3a8:	230c      	movs	r3, #12
 800a3aa:	602b      	str	r3, [r5, #0]
 800a3ac:	e7d4      	b.n	800a358 <_free_r+0x24>
 800a3ae:	6820      	ldr	r0, [r4, #0]
 800a3b0:	1821      	adds	r1, r4, r0
 800a3b2:	428a      	cmp	r2, r1
 800a3b4:	bf01      	itttt	eq
 800a3b6:	6811      	ldreq	r1, [r2, #0]
 800a3b8:	6852      	ldreq	r2, [r2, #4]
 800a3ba:	1809      	addeq	r1, r1, r0
 800a3bc:	6021      	streq	r1, [r4, #0]
 800a3be:	6062      	str	r2, [r4, #4]
 800a3c0:	605c      	str	r4, [r3, #4]
 800a3c2:	e7c9      	b.n	800a358 <_free_r+0x24>
 800a3c4:	bd38      	pop	{r3, r4, r5, pc}
 800a3c6:	bf00      	nop
 800a3c8:	20000264 	.word	0x20000264

0800a3cc <_realloc_r>:
 800a3cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3ce:	4607      	mov	r7, r0
 800a3d0:	4614      	mov	r4, r2
 800a3d2:	460e      	mov	r6, r1
 800a3d4:	b921      	cbnz	r1, 800a3e0 <_realloc_r+0x14>
 800a3d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a3da:	4611      	mov	r1, r2
 800a3dc:	f7ff b82e 	b.w	800943c <_malloc_r>
 800a3e0:	b922      	cbnz	r2, 800a3ec <_realloc_r+0x20>
 800a3e2:	f7ff ffa7 	bl	800a334 <_free_r>
 800a3e6:	4625      	mov	r5, r4
 800a3e8:	4628      	mov	r0, r5
 800a3ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3ec:	f000 f814 	bl	800a418 <_malloc_usable_size_r>
 800a3f0:	42a0      	cmp	r0, r4
 800a3f2:	d20f      	bcs.n	800a414 <_realloc_r+0x48>
 800a3f4:	4621      	mov	r1, r4
 800a3f6:	4638      	mov	r0, r7
 800a3f8:	f7ff f820 	bl	800943c <_malloc_r>
 800a3fc:	4605      	mov	r5, r0
 800a3fe:	2800      	cmp	r0, #0
 800a400:	d0f2      	beq.n	800a3e8 <_realloc_r+0x1c>
 800a402:	4631      	mov	r1, r6
 800a404:	4622      	mov	r2, r4
 800a406:	f7fe fc07 	bl	8008c18 <memcpy>
 800a40a:	4631      	mov	r1, r6
 800a40c:	4638      	mov	r0, r7
 800a40e:	f7ff ff91 	bl	800a334 <_free_r>
 800a412:	e7e9      	b.n	800a3e8 <_realloc_r+0x1c>
 800a414:	4635      	mov	r5, r6
 800a416:	e7e7      	b.n	800a3e8 <_realloc_r+0x1c>

0800a418 <_malloc_usable_size_r>:
 800a418:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a41c:	1f18      	subs	r0, r3, #4
 800a41e:	2b00      	cmp	r3, #0
 800a420:	bfbc      	itt	lt
 800a422:	580b      	ldrlt	r3, [r1, r0]
 800a424:	18c0      	addlt	r0, r0, r3
 800a426:	4770      	bx	lr

0800a428 <round>:
 800a428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a42a:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800a42e:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
 800a432:	2c13      	cmp	r4, #19
 800a434:	4606      	mov	r6, r0
 800a436:	460d      	mov	r5, r1
 800a438:	460b      	mov	r3, r1
 800a43a:	468c      	mov	ip, r1
 800a43c:	4602      	mov	r2, r0
 800a43e:	dc17      	bgt.n	800a470 <round+0x48>
 800a440:	2c00      	cmp	r4, #0
 800a442:	da09      	bge.n	800a458 <round+0x30>
 800a444:	3401      	adds	r4, #1
 800a446:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800a44a:	d103      	bne.n	800a454 <round+0x2c>
 800a44c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a450:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a454:	2200      	movs	r2, #0
 800a456:	e028      	b.n	800a4aa <round+0x82>
 800a458:	4915      	ldr	r1, [pc, #84]	; (800a4b0 <round+0x88>)
 800a45a:	4121      	asrs	r1, r4
 800a45c:	420d      	tst	r5, r1
 800a45e:	d100      	bne.n	800a462 <round+0x3a>
 800a460:	b178      	cbz	r0, 800a482 <round+0x5a>
 800a462:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a466:	4123      	asrs	r3, r4
 800a468:	4463      	add	r3, ip
 800a46a:	ea23 0301 	bic.w	r3, r3, r1
 800a46e:	e7f1      	b.n	800a454 <round+0x2c>
 800a470:	2c33      	cmp	r4, #51	; 0x33
 800a472:	dd09      	ble.n	800a488 <round+0x60>
 800a474:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800a478:	d103      	bne.n	800a482 <round+0x5a>
 800a47a:	f7f5 fe77 	bl	800016c <__adddf3>
 800a47e:	4606      	mov	r6, r0
 800a480:	460d      	mov	r5, r1
 800a482:	4630      	mov	r0, r6
 800a484:	4629      	mov	r1, r5
 800a486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a488:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a48c:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800a490:	40f8      	lsrs	r0, r7
 800a492:	4206      	tst	r6, r0
 800a494:	d0f5      	beq.n	800a482 <round+0x5a>
 800a496:	2101      	movs	r1, #1
 800a498:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800a49c:	fa01 f404 	lsl.w	r4, r1, r4
 800a4a0:	1932      	adds	r2, r6, r4
 800a4a2:	bf28      	it	cs
 800a4a4:	185b      	addcs	r3, r3, r1
 800a4a6:	ea22 0200 	bic.w	r2, r2, r0
 800a4aa:	4619      	mov	r1, r3
 800a4ac:	4610      	mov	r0, r2
 800a4ae:	e7e6      	b.n	800a47e <round+0x56>
 800a4b0:	000fffff 	.word	0x000fffff

0800a4b4 <_init>:
 800a4b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4b6:	bf00      	nop
 800a4b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4ba:	bc08      	pop	{r3}
 800a4bc:	469e      	mov	lr, r3
 800a4be:	4770      	bx	lr

0800a4c0 <_fini>:
 800a4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4c2:	bf00      	nop
 800a4c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4c6:	bc08      	pop	{r3}
 800a4c8:	469e      	mov	lr, r3
 800a4ca:	4770      	bx	lr
