
CarDrive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c3c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  08009d50  08009d50  00019d50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a174  0800a174  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800a174  0800a174  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a174  0800a174  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a174  0800a174  0001a174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a178  0800a178  0001a178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a17c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  200001e0  0800a35c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000043c  0800a35c  0002043c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f7cf  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a55  00000000  00000000  0002f9d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ca8  00000000  00000000  00032430  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b58  00000000  00000000  000330d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019958  00000000  00000000  00033c30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000db7a  00000000  00000000  0004d588  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008af02  00000000  00000000  0005b102  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e6004  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043a0  00000000  00000000  000e6080  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08009d34 	.word	0x08009d34

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08009d34 	.word	0x08009d34

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c24:	f1a2 0201 	sub.w	r2, r2, #1
 8000c28:	d1ed      	bne.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr

0800115c <__aeabi_f2uiz>:
 800115c:	0042      	lsls	r2, r0, #1
 800115e:	d20e      	bcs.n	800117e <__aeabi_f2uiz+0x22>
 8001160:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001164:	d30b      	bcc.n	800117e <__aeabi_f2uiz+0x22>
 8001166:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800116a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800116e:	d409      	bmi.n	8001184 <__aeabi_f2uiz+0x28>
 8001170:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001174:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001178:	fa23 f002 	lsr.w	r0, r3, r2
 800117c:	4770      	bx	lr
 800117e:	f04f 0000 	mov.w	r0, #0
 8001182:	4770      	bx	lr
 8001184:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001188:	d101      	bne.n	800118e <__aeabi_f2uiz+0x32>
 800118a:	0242      	lsls	r2, r0, #9
 800118c:	d102      	bne.n	8001194 <__aeabi_f2uiz+0x38>
 800118e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001192:	4770      	bx	lr
 8001194:	f04f 0000 	mov.w	r0, #0
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop

0800119c <BMP180_SetOversampling>:
const uint8_t BMP180_CMD_PRES[4] = { 0x34, 0x74, 0xb4, 0xf4 };
const uint8_t BMP180_DELAY_PRES[4] = { 5, 8, 14, 26 };


//设置超采样
void BMP180_SetOversampling(BMP180_OSS oss) {
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	71fb      	strb	r3, [r7, #7]
	_bmp180_oss = oss;
 80011a6:	4a04      	ldr	r2, [pc, #16]	; (80011b8 <BMP180_SetOversampling+0x1c>)
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	7013      	strb	r3, [r2, #0]
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bc80      	pop	{r7}
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	20000232 	.word	0x20000232

080011bc <BMP180_UpdateCalibrationData>:


//更新校正数据
void BMP180_UpdateCalibrationData(void) {
 80011bc:	b598      	push	{r3, r4, r7, lr}
 80011be:	af00      	add	r7, sp, #0
	_bmp180_eeprom.BMP180_AC1 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC1]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC1]);
 80011c0:	23aa      	movs	r3, #170	; 0xaa
 80011c2:	4618      	mov	r0, r3
 80011c4:	f000 f8da 	bl	800137c <BMP180_ReadReg>
 80011c8:	4603      	mov	r3, r0
 80011ca:	021b      	lsls	r3, r3, #8
 80011cc:	b21c      	sxth	r4, r3
 80011ce:	23ab      	movs	r3, #171	; 0xab
 80011d0:	4618      	mov	r0, r3
 80011d2:	f000 f8d3 	bl	800137c <BMP180_ReadReg>
 80011d6:	4603      	mov	r3, r0
 80011d8:	b21b      	sxth	r3, r3
 80011da:	4323      	orrs	r3, r4
 80011dc:	b21a      	sxth	r2, r3
 80011de:	4b58      	ldr	r3, [pc, #352]	; (8001340 <BMP180_UpdateCalibrationData+0x184>)
 80011e0:	801a      	strh	r2, [r3, #0]
	_bmp180_eeprom.BMP180_AC2 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC2]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC2]);
 80011e2:	23ac      	movs	r3, #172	; 0xac
 80011e4:	4618      	mov	r0, r3
 80011e6:	f000 f8c9 	bl	800137c <BMP180_ReadReg>
 80011ea:	4603      	mov	r3, r0
 80011ec:	021b      	lsls	r3, r3, #8
 80011ee:	b21c      	sxth	r4, r3
 80011f0:	23ad      	movs	r3, #173	; 0xad
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 f8c2 	bl	800137c <BMP180_ReadReg>
 80011f8:	4603      	mov	r3, r0
 80011fa:	b21b      	sxth	r3, r3
 80011fc:	4323      	orrs	r3, r4
 80011fe:	b21a      	sxth	r2, r3
 8001200:	4b4f      	ldr	r3, [pc, #316]	; (8001340 <BMP180_UpdateCalibrationData+0x184>)
 8001202:	805a      	strh	r2, [r3, #2]
	_bmp180_eeprom.BMP180_AC3 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC3]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC3]);
 8001204:	23ae      	movs	r3, #174	; 0xae
 8001206:	4618      	mov	r0, r3
 8001208:	f000 f8b8 	bl	800137c <BMP180_ReadReg>
 800120c:	4603      	mov	r3, r0
 800120e:	021b      	lsls	r3, r3, #8
 8001210:	b21c      	sxth	r4, r3
 8001212:	23af      	movs	r3, #175	; 0xaf
 8001214:	4618      	mov	r0, r3
 8001216:	f000 f8b1 	bl	800137c <BMP180_ReadReg>
 800121a:	4603      	mov	r3, r0
 800121c:	b21b      	sxth	r3, r3
 800121e:	4323      	orrs	r3, r4
 8001220:	b21a      	sxth	r2, r3
 8001222:	4b47      	ldr	r3, [pc, #284]	; (8001340 <BMP180_UpdateCalibrationData+0x184>)
 8001224:	809a      	strh	r2, [r3, #4]
	_bmp180_eeprom.BMP180_AC4 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC4]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC4]);
 8001226:	23b0      	movs	r3, #176	; 0xb0
 8001228:	4618      	mov	r0, r3
 800122a:	f000 f8a7 	bl	800137c <BMP180_ReadReg>
 800122e:	4603      	mov	r3, r0
 8001230:	021b      	lsls	r3, r3, #8
 8001232:	b21c      	sxth	r4, r3
 8001234:	23b1      	movs	r3, #177	; 0xb1
 8001236:	4618      	mov	r0, r3
 8001238:	f000 f8a0 	bl	800137c <BMP180_ReadReg>
 800123c:	4603      	mov	r3, r0
 800123e:	b21b      	sxth	r3, r3
 8001240:	4323      	orrs	r3, r4
 8001242:	b21b      	sxth	r3, r3
 8001244:	b29a      	uxth	r2, r3
 8001246:	4b3e      	ldr	r3, [pc, #248]	; (8001340 <BMP180_UpdateCalibrationData+0x184>)
 8001248:	80da      	strh	r2, [r3, #6]
	_bmp180_eeprom.BMP180_AC5 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC5]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC5]);
 800124a:	23b2      	movs	r3, #178	; 0xb2
 800124c:	4618      	mov	r0, r3
 800124e:	f000 f895 	bl	800137c <BMP180_ReadReg>
 8001252:	4603      	mov	r3, r0
 8001254:	021b      	lsls	r3, r3, #8
 8001256:	b21c      	sxth	r4, r3
 8001258:	23b3      	movs	r3, #179	; 0xb3
 800125a:	4618      	mov	r0, r3
 800125c:	f000 f88e 	bl	800137c <BMP180_ReadReg>
 8001260:	4603      	mov	r3, r0
 8001262:	b21b      	sxth	r3, r3
 8001264:	4323      	orrs	r3, r4
 8001266:	b21b      	sxth	r3, r3
 8001268:	b29a      	uxth	r2, r3
 800126a:	4b35      	ldr	r3, [pc, #212]	; (8001340 <BMP180_UpdateCalibrationData+0x184>)
 800126c:	811a      	strh	r2, [r3, #8]
	_bmp180_eeprom.BMP180_AC6 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC6]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC6]);
 800126e:	23b4      	movs	r3, #180	; 0xb4
 8001270:	4618      	mov	r0, r3
 8001272:	f000 f883 	bl	800137c <BMP180_ReadReg>
 8001276:	4603      	mov	r3, r0
 8001278:	021b      	lsls	r3, r3, #8
 800127a:	b21c      	sxth	r4, r3
 800127c:	23b5      	movs	r3, #181	; 0xb5
 800127e:	4618      	mov	r0, r3
 8001280:	f000 f87c 	bl	800137c <BMP180_ReadReg>
 8001284:	4603      	mov	r3, r0
 8001286:	b21b      	sxth	r3, r3
 8001288:	4323      	orrs	r3, r4
 800128a:	b21b      	sxth	r3, r3
 800128c:	b29a      	uxth	r2, r3
 800128e:	4b2c      	ldr	r3, [pc, #176]	; (8001340 <BMP180_UpdateCalibrationData+0x184>)
 8001290:	815a      	strh	r2, [r3, #10]
	_bmp180_eeprom.BMP180_B1 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_B1]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_B1]);
 8001292:	23b6      	movs	r3, #182	; 0xb6
 8001294:	4618      	mov	r0, r3
 8001296:	f000 f871 	bl	800137c <BMP180_ReadReg>
 800129a:	4603      	mov	r3, r0
 800129c:	021b      	lsls	r3, r3, #8
 800129e:	b21c      	sxth	r4, r3
 80012a0:	23b7      	movs	r3, #183	; 0xb7
 80012a2:	4618      	mov	r0, r3
 80012a4:	f000 f86a 	bl	800137c <BMP180_ReadReg>
 80012a8:	4603      	mov	r3, r0
 80012aa:	b21b      	sxth	r3, r3
 80012ac:	4323      	orrs	r3, r4
 80012ae:	b21a      	sxth	r2, r3
 80012b0:	4b23      	ldr	r3, [pc, #140]	; (8001340 <BMP180_UpdateCalibrationData+0x184>)
 80012b2:	819a      	strh	r2, [r3, #12]
	_bmp180_eeprom.BMP180_B2 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_B2]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_B2]);
 80012b4:	23b8      	movs	r3, #184	; 0xb8
 80012b6:	4618      	mov	r0, r3
 80012b8:	f000 f860 	bl	800137c <BMP180_ReadReg>
 80012bc:	4603      	mov	r3, r0
 80012be:	021b      	lsls	r3, r3, #8
 80012c0:	b21c      	sxth	r4, r3
 80012c2:	23b9      	movs	r3, #185	; 0xb9
 80012c4:	4618      	mov	r0, r3
 80012c6:	f000 f859 	bl	800137c <BMP180_ReadReg>
 80012ca:	4603      	mov	r3, r0
 80012cc:	b21b      	sxth	r3, r3
 80012ce:	4323      	orrs	r3, r4
 80012d0:	b21a      	sxth	r2, r3
 80012d2:	4b1b      	ldr	r3, [pc, #108]	; (8001340 <BMP180_UpdateCalibrationData+0x184>)
 80012d4:	81da      	strh	r2, [r3, #14]
	_bmp180_eeprom.BMP180_MB = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MB]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MB]);
 80012d6:	23ba      	movs	r3, #186	; 0xba
 80012d8:	4618      	mov	r0, r3
 80012da:	f000 f84f 	bl	800137c <BMP180_ReadReg>
 80012de:	4603      	mov	r3, r0
 80012e0:	021b      	lsls	r3, r3, #8
 80012e2:	b21c      	sxth	r4, r3
 80012e4:	23bb      	movs	r3, #187	; 0xbb
 80012e6:	4618      	mov	r0, r3
 80012e8:	f000 f848 	bl	800137c <BMP180_ReadReg>
 80012ec:	4603      	mov	r3, r0
 80012ee:	b21b      	sxth	r3, r3
 80012f0:	4323      	orrs	r3, r4
 80012f2:	b21a      	sxth	r2, r3
 80012f4:	4b12      	ldr	r3, [pc, #72]	; (8001340 <BMP180_UpdateCalibrationData+0x184>)
 80012f6:	821a      	strh	r2, [r3, #16]
	_bmp180_eeprom.BMP180_MC = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MC]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MC]);
 80012f8:	23bc      	movs	r3, #188	; 0xbc
 80012fa:	4618      	mov	r0, r3
 80012fc:	f000 f83e 	bl	800137c <BMP180_ReadReg>
 8001300:	4603      	mov	r3, r0
 8001302:	021b      	lsls	r3, r3, #8
 8001304:	b21c      	sxth	r4, r3
 8001306:	23bd      	movs	r3, #189	; 0xbd
 8001308:	4618      	mov	r0, r3
 800130a:	f000 f837 	bl	800137c <BMP180_ReadReg>
 800130e:	4603      	mov	r3, r0
 8001310:	b21b      	sxth	r3, r3
 8001312:	4323      	orrs	r3, r4
 8001314:	b21a      	sxth	r2, r3
 8001316:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <BMP180_UpdateCalibrationData+0x184>)
 8001318:	825a      	strh	r2, [r3, #18]
	_bmp180_eeprom.BMP180_MD = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MD]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MD]);
 800131a:	23be      	movs	r3, #190	; 0xbe
 800131c:	4618      	mov	r0, r3
 800131e:	f000 f82d 	bl	800137c <BMP180_ReadReg>
 8001322:	4603      	mov	r3, r0
 8001324:	021b      	lsls	r3, r3, #8
 8001326:	b21c      	sxth	r4, r3
 8001328:	23bf      	movs	r3, #191	; 0xbf
 800132a:	4618      	mov	r0, r3
 800132c:	f000 f826 	bl	800137c <BMP180_ReadReg>
 8001330:	4603      	mov	r3, r0
 8001332:	b21b      	sxth	r3, r3
 8001334:	4323      	orrs	r3, r4
 8001336:	b21a      	sxth	r2, r3
 8001338:	4b01      	ldr	r3, [pc, #4]	; (8001340 <BMP180_UpdateCalibrationData+0x184>)
 800133a:	829a      	strh	r2, [r3, #20]
}
 800133c:	bf00      	nop
 800133e:	bd98      	pop	{r3, r4, r7, pc}
 8001340:	2000021c 	.word	0x2000021c

08001344 <BMP180_WriteReg>:


//写入寄存器
void BMP180_WriteReg(uint8_t reg, uint8_t cmd) {
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af02      	add	r7, sp, #8
 800134a:	4603      	mov	r3, r0
 800134c:	460a      	mov	r2, r1
 800134e:	71fb      	strb	r3, [r7, #7]
 8001350:	4613      	mov	r3, r2
 8001352:	71bb      	strb	r3, [r7, #6]
	uint8_t arr[2] = { reg, cmd };
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	733b      	strb	r3, [r7, #12]
 8001358:	79bb      	ldrb	r3, [r7, #6]
 800135a:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, BMP180_I2C_ADDR << 1, arr, 2, BMP180_I2C_TIMEOUT);
 800135c:	f107 020c 	add.w	r2, r7, #12
 8001360:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001364:	9300      	str	r3, [sp, #0]
 8001366:	2302      	movs	r3, #2
 8001368:	21ee      	movs	r1, #238	; 0xee
 800136a:	4803      	ldr	r0, [pc, #12]	; (8001378 <BMP180_WriteReg+0x34>)
 800136c:	f002 feee 	bl	800414c <HAL_I2C_Master_Transmit>
}
 8001370:	bf00      	nop
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	2000033c 	.word	0x2000033c

0800137c <BMP180_ReadReg>:

//读取寄存器
uint8_t BMP180_ReadReg(uint8_t reg) {
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af02      	add	r7, sp, #8
 8001382:	4603      	mov	r3, r0
 8001384:	71fb      	strb	r3, [r7, #7]
	//使用HAL_I2C_Mem_Write等于先使用HAL_I2C_Master_Transmit传输第一个寄存器地址，
	//再用HAL_I2C_Master_Transmit传输写入第一个寄存器的数据。可以传输多个数据
	//以下先把要接受的寄存器地址传给从机
	//&reg 本来就要求传一个指向一个地址值的指针
	HAL_I2C_Master_Transmit(&hi2c1, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 8001386:	1dfa      	adds	r2, r7, #7
 8001388:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800138c:	9300      	str	r3, [sp, #0]
 800138e:	2301      	movs	r3, #1
 8001390:	21ee      	movs	r1, #238	; 0xee
 8001392:	4809      	ldr	r0, [pc, #36]	; (80013b8 <BMP180_ReadReg+0x3c>)
 8001394:	f002 feda 	bl	800414c <HAL_I2C_Master_Transmit>
	uint8_t result;
	HAL_I2C_Master_Receive(&hi2c1, BMP180_I2C_ADDR << 1, &result, 1, BMP180_I2C_TIMEOUT);
 8001398:	f107 020f 	add.w	r2, r7, #15
 800139c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	2301      	movs	r3, #1
 80013a4:	21ee      	movs	r1, #238	; 0xee
 80013a6:	4804      	ldr	r0, [pc, #16]	; (80013b8 <BMP180_ReadReg+0x3c>)
 80013a8:	f002 ffce 	bl	8004348 <HAL_I2C_Master_Receive>



	//HAL_I2C_Mem_Read(I2C1, BMP180_I2C_ADDR << 1, &reg, 1,result, 1, BMP180_I2C_TIMEOUT);
	return result;
 80013ac:	7bfb      	ldrb	r3, [r7, #15]


}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	2000033c 	.word	0x2000033c

080013bc <BMP180_GetRawTemperature>:

/**
 * @brief Measures and calculates temperature.
 * @return Temperature in 0.1 (1/10) degrees Celsius.
 */
int32_t BMP180_GetRawTemperature(void) {
 80013bc:	b590      	push	{r4, r7, lr}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
	//write 0x2E to reg 0xF4
	//设置温度4.5ms超采样
	BMP180_WriteReg(BMP180_CONTROL_REG, BMP180_CMD_TEMP);
 80013c2:	232e      	movs	r3, #46	; 0x2e
 80013c4:	4619      	mov	r1, r3
 80013c6:	20f4      	movs	r0, #244	; 0xf4
 80013c8:	f7ff ffbc 	bl	8001344 <BMP180_WriteReg>
	//等待4.5ms 以上
	HAL_Delay(BMP180_DELAY_TEMP);
 80013cc:	2305      	movs	r3, #5
 80013ce:	4618      	mov	r0, r3
 80013d0:	f001 fd70 	bl	8002eb4 <HAL_Delay>

	int32_t ut = (BMP180_ReadReg(BMP180_MSB_REG) << 8) | BMP180_ReadReg(BMP180_LSB_REG);
 80013d4:	20f6      	movs	r0, #246	; 0xf6
 80013d6:	f7ff ffd1 	bl	800137c <BMP180_ReadReg>
 80013da:	4603      	mov	r3, r0
 80013dc:	021c      	lsls	r4, r3, #8
 80013de:	20f7      	movs	r0, #247	; 0xf7
 80013e0:	f7ff ffcc 	bl	800137c <BMP180_ReadReg>
 80013e4:	4603      	mov	r3, r0
 80013e6:	4323      	orrs	r3, r4
 80013e8:	60fb      	str	r3, [r7, #12]
	int32_t x1 = (ut - _bmp180_eeprom.BMP180_AC6) * _bmp180_eeprom.BMP180_AC5 / (1 << 15);
 80013ea:	4b15      	ldr	r3, [pc, #84]	; (8001440 <BMP180_GetRawTemperature+0x84>)
 80013ec:	895b      	ldrh	r3, [r3, #10]
 80013ee:	461a      	mov	r2, r3
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	1a9b      	subs	r3, r3, r2
 80013f4:	4a12      	ldr	r2, [pc, #72]	; (8001440 <BMP180_GetRawTemperature+0x84>)
 80013f6:	8912      	ldrh	r2, [r2, #8]
 80013f8:	fb02 f303 	mul.w	r3, r2, r3
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	da02      	bge.n	8001406 <BMP180_GetRawTemperature+0x4a>
 8001400:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8001404:	337f      	adds	r3, #127	; 0x7f
 8001406:	13db      	asrs	r3, r3, #15
 8001408:	60bb      	str	r3, [r7, #8]
	int32_t x2 = (_bmp180_eeprom.BMP180_MC * (1 << 11)) / (x1 + _bmp180_eeprom.BMP180_MD);
 800140a:	4b0d      	ldr	r3, [pc, #52]	; (8001440 <BMP180_GetRawTemperature+0x84>)
 800140c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001410:	02da      	lsls	r2, r3, #11
 8001412:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <BMP180_GetRawTemperature+0x84>)
 8001414:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001418:	4619      	mov	r1, r3
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	440b      	add	r3, r1
 800141e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001422:	607b      	str	r3, [r7, #4]
	int32_t b5 = x1 + x2;
 8001424:	68ba      	ldr	r2, [r7, #8]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4413      	add	r3, r2
 800142a:	603b      	str	r3, [r7, #0]
	return (b5 + 8) / (1 << 4);
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	3308      	adds	r3, #8
 8001430:	2b00      	cmp	r3, #0
 8001432:	da00      	bge.n	8001436 <BMP180_GetRawTemperature+0x7a>
 8001434:	330f      	adds	r3, #15
 8001436:	111b      	asrs	r3, r3, #4
}
 8001438:	4618      	mov	r0, r3
 800143a:	3714      	adds	r7, #20
 800143c:	46bd      	mov	sp, r7
 800143e:	bd90      	pop	{r4, r7, pc}
 8001440:	2000021c 	.word	0x2000021c

08001444 <BMP180_GetPressure>:

/**
 * @brief Measures and calculates pressure.
 * @return Pressure in Pascal(Pa).
 */
int32_t BMP180_GetPressure(void) {
 8001444:	b580      	push	{r7, lr}
 8001446:	b08c      	sub	sp, #48	; 0x30
 8001448:	af00      	add	r7, sp, #0
	//往控制寄存器0xf4里写0x2e，设置温度超采样
	BMP180_WriteReg(BMP180_CONTROL_REG, BMP180_CMD_TEMP);
 800144a:	232e      	movs	r3, #46	; 0x2e
 800144c:	4619      	mov	r1, r3
 800144e:	20f4      	movs	r0, #244	; 0xf4
 8001450:	f7ff ff78 	bl	8001344 <BMP180_WriteReg>
	//等待转换时间
	HAL_Delay(BMP180_DELAY_TEMP);
 8001454:	2305      	movs	r3, #5
 8001456:	4618      	mov	r0, r3
 8001458:	f001 fd2c 	bl	8002eb4 <HAL_Delay>
	int32_t ut = BMP180_GetUT();
 800145c:	f000 f904 	bl	8001668 <BMP180_GetUT>
 8001460:	62b8      	str	r0, [r7, #40]	; 0x28
	BMP180_WriteReg(BMP180_CONTROL_REG, BMP180_CMD_PRES[_bmp180_oss]);
 8001462:	4b7c      	ldr	r3, [pc, #496]	; (8001654 <BMP180_GetPressure+0x210>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	461a      	mov	r2, r3
 8001468:	4b7b      	ldr	r3, [pc, #492]	; (8001658 <BMP180_GetPressure+0x214>)
 800146a:	5c9b      	ldrb	r3, [r3, r2]
 800146c:	4619      	mov	r1, r3
 800146e:	20f4      	movs	r0, #244	; 0xf4
 8001470:	f7ff ff68 	bl	8001344 <BMP180_WriteReg>
	HAL_Delay(BMP180_DELAY_PRES[_bmp180_oss]);
 8001474:	4b77      	ldr	r3, [pc, #476]	; (8001654 <BMP180_GetPressure+0x210>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	461a      	mov	r2, r3
 800147a:	4b78      	ldr	r3, [pc, #480]	; (800165c <BMP180_GetPressure+0x218>)
 800147c:	5c9b      	ldrb	r3, [r3, r2]
 800147e:	4618      	mov	r0, r3
 8001480:	f001 fd18 	bl	8002eb4 <HAL_Delay>
	int32_t up = BMP180_GetUP();
 8001484:	f000 f8fe 	bl	8001684 <BMP180_GetUP>
 8001488:	6278      	str	r0, [r7, #36]	; 0x24
	int32_t x1 = (ut - _bmp180_eeprom.BMP180_AC6) * _bmp180_eeprom.BMP180_AC5 / (1 << 15);
 800148a:	4b75      	ldr	r3, [pc, #468]	; (8001660 <BMP180_GetPressure+0x21c>)
 800148c:	895b      	ldrh	r3, [r3, #10]
 800148e:	461a      	mov	r2, r3
 8001490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001492:	1a9b      	subs	r3, r3, r2
 8001494:	4a72      	ldr	r2, [pc, #456]	; (8001660 <BMP180_GetPressure+0x21c>)
 8001496:	8912      	ldrh	r2, [r2, #8]
 8001498:	fb02 f303 	mul.w	r3, r2, r3
 800149c:	2b00      	cmp	r3, #0
 800149e:	da02      	bge.n	80014a6 <BMP180_GetPressure+0x62>
 80014a0:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80014a4:	337f      	adds	r3, #127	; 0x7f
 80014a6:	13db      	asrs	r3, r3, #15
 80014a8:	623b      	str	r3, [r7, #32]
	int32_t x2 = (_bmp180_eeprom.BMP180_MC * (1 << 11)) / (x1 + _bmp180_eeprom.BMP180_MD);
 80014aa:	4b6d      	ldr	r3, [pc, #436]	; (8001660 <BMP180_GetPressure+0x21c>)
 80014ac:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80014b0:	02da      	lsls	r2, r3, #11
 80014b2:	4b6b      	ldr	r3, [pc, #428]	; (8001660 <BMP180_GetPressure+0x21c>)
 80014b4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80014b8:	4619      	mov	r1, r3
 80014ba:	6a3b      	ldr	r3, [r7, #32]
 80014bc:	440b      	add	r3, r1
 80014be:	fb92 f3f3 	sdiv	r3, r2, r3
 80014c2:	61fb      	str	r3, [r7, #28]
	int32_t b5 = x1 + x2;
 80014c4:	6a3a      	ldr	r2, [r7, #32]
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	4413      	add	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
	int32_t b6 = b5 - 4000;
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 80014d2:	617b      	str	r3, [r7, #20]
	x1 = (_bmp180_eeprom.BMP180_B2 * (b6 * b6 / (1 << 12))) / (1 << 11);
 80014d4:	4b62      	ldr	r3, [pc, #392]	; (8001660 <BMP180_GetPressure+0x21c>)
 80014d6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80014da:	4619      	mov	r1, r3
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	697a      	ldr	r2, [r7, #20]
 80014e0:	fb02 f303 	mul.w	r3, r2, r3
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	da01      	bge.n	80014ec <BMP180_GetPressure+0xa8>
 80014e8:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80014ec:	131b      	asrs	r3, r3, #12
 80014ee:	fb03 f301 	mul.w	r3, r3, r1
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	da01      	bge.n	80014fa <BMP180_GetPressure+0xb6>
 80014f6:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80014fa:	12db      	asrs	r3, r3, #11
 80014fc:	623b      	str	r3, [r7, #32]
	x2 = _bmp180_eeprom.BMP180_AC2 * b6 / (1 << 11);
 80014fe:	4b58      	ldr	r3, [pc, #352]	; (8001660 <BMP180_GetPressure+0x21c>)
 8001500:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001504:	461a      	mov	r2, r3
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	fb03 f302 	mul.w	r3, r3, r2
 800150c:	2b00      	cmp	r3, #0
 800150e:	da01      	bge.n	8001514 <BMP180_GetPressure+0xd0>
 8001510:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001514:	12db      	asrs	r3, r3, #11
 8001516:	61fb      	str	r3, [r7, #28]
	int32_t x3 = x1 + x2;
 8001518:	6a3a      	ldr	r2, [r7, #32]
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	4413      	add	r3, r2
 800151e:	613b      	str	r3, [r7, #16]
	int32_t b3 = (((_bmp180_eeprom.BMP180_AC1 * 4 + x3) << _bmp180_oss) + 2) / 4;
 8001520:	4b4f      	ldr	r3, [pc, #316]	; (8001660 <BMP180_GetPressure+0x21c>)
 8001522:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001526:	009a      	lsls	r2, r3, #2
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	4413      	add	r3, r2
 800152c:	4a49      	ldr	r2, [pc, #292]	; (8001654 <BMP180_GetPressure+0x210>)
 800152e:	7812      	ldrb	r2, [r2, #0]
 8001530:	4093      	lsls	r3, r2
 8001532:	3302      	adds	r3, #2
 8001534:	2b00      	cmp	r3, #0
 8001536:	da00      	bge.n	800153a <BMP180_GetPressure+0xf6>
 8001538:	3303      	adds	r3, #3
 800153a:	109b      	asrs	r3, r3, #2
 800153c:	60fb      	str	r3, [r7, #12]
	x1 = _bmp180_eeprom.BMP180_AC3 * b6 / (1 << 13);
 800153e:	4b48      	ldr	r3, [pc, #288]	; (8001660 <BMP180_GetPressure+0x21c>)
 8001540:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001544:	461a      	mov	r2, r3
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	fb03 f302 	mul.w	r3, r3, r2
 800154c:	2b00      	cmp	r3, #0
 800154e:	da02      	bge.n	8001556 <BMP180_GetPressure+0x112>
 8001550:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 8001554:	331f      	adds	r3, #31
 8001556:	135b      	asrs	r3, r3, #13
 8001558:	623b      	str	r3, [r7, #32]
	x2 = (_bmp180_eeprom.BMP180_B1 * (b6 * b6 / (1 << 12))) / (1 << 16);
 800155a:	4b41      	ldr	r3, [pc, #260]	; (8001660 <BMP180_GetPressure+0x21c>)
 800155c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001560:	4619      	mov	r1, r3
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	697a      	ldr	r2, [r7, #20]
 8001566:	fb02 f303 	mul.w	r3, r2, r3
 800156a:	2b00      	cmp	r3, #0
 800156c:	da01      	bge.n	8001572 <BMP180_GetPressure+0x12e>
 800156e:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001572:	131b      	asrs	r3, r3, #12
 8001574:	fb03 f301 	mul.w	r3, r3, r1
 8001578:	2b00      	cmp	r3, #0
 800157a:	da02      	bge.n	8001582 <BMP180_GetPressure+0x13e>
 800157c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001580:	33ff      	adds	r3, #255	; 0xff
 8001582:	141b      	asrs	r3, r3, #16
 8001584:	61fb      	str	r3, [r7, #28]
	x3 = ((x1 + x2) + 2) / 4;
 8001586:	6a3a      	ldr	r2, [r7, #32]
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	4413      	add	r3, r2
 800158c:	3302      	adds	r3, #2
 800158e:	2b00      	cmp	r3, #0
 8001590:	da00      	bge.n	8001594 <BMP180_GetPressure+0x150>
 8001592:	3303      	adds	r3, #3
 8001594:	109b      	asrs	r3, r3, #2
 8001596:	613b      	str	r3, [r7, #16]
	uint32_t b4 = _bmp180_eeprom.BMP180_AC4 * (uint32_t) (x3 + 32768) / (1 << 15);
 8001598:	4b31      	ldr	r3, [pc, #196]	; (8001660 <BMP180_GetPressure+0x21c>)
 800159a:	88db      	ldrh	r3, [r3, #6]
 800159c:	461a      	mov	r2, r3
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80015a4:	fb03 f302 	mul.w	r3, r3, r2
 80015a8:	0bdb      	lsrs	r3, r3, #15
 80015aa:	60bb      	str	r3, [r7, #8]
	uint32_t b7 = ((uint32_t) up - b3) * (50000 >> _bmp180_oss);
 80015ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	4a28      	ldr	r2, [pc, #160]	; (8001654 <BMP180_GetPressure+0x210>)
 80015b4:	7812      	ldrb	r2, [r2, #0]
 80015b6:	4611      	mov	r1, r2
 80015b8:	f24c 3250 	movw	r2, #50000	; 0xc350
 80015bc:	410a      	asrs	r2, r1
 80015be:	fb02 f303 	mul.w	r3, r2, r3
 80015c2:	607b      	str	r3, [r7, #4]
	int32_t p;
	if (b7 < 0x80000000)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	db06      	blt.n	80015d8 <BMP180_GetPressure+0x194>
		p = (b7 * 2) / b4;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	005a      	lsls	r2, r3, #1
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80015d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015d6:	e005      	b.n	80015e4 <BMP180_GetPressure+0x1a0>
	else
		p = (b7 / b4) * 2;
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	x1 = (p / (1 << 8)) * (p / (1 << 8));
 80015e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	da00      	bge.n	80015ec <BMP180_GetPressure+0x1a8>
 80015ea:	33ff      	adds	r3, #255	; 0xff
 80015ec:	121b      	asrs	r3, r3, #8
 80015ee:	461a      	mov	r2, r3
 80015f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	da00      	bge.n	80015f8 <BMP180_GetPressure+0x1b4>
 80015f6:	33ff      	adds	r3, #255	; 0xff
 80015f8:	121b      	asrs	r3, r3, #8
 80015fa:	fb03 f302 	mul.w	r3, r3, r2
 80015fe:	623b      	str	r3, [r7, #32]
	x1 = (x1 * 3038) / (1 << 16);
 8001600:	6a3b      	ldr	r3, [r7, #32]
 8001602:	f640 32de 	movw	r2, #3038	; 0xbde
 8001606:	fb02 f303 	mul.w	r3, r2, r3
 800160a:	2b00      	cmp	r3, #0
 800160c:	da02      	bge.n	8001614 <BMP180_GetPressure+0x1d0>
 800160e:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001612:	33ff      	adds	r3, #255	; 0xff
 8001614:	141b      	asrs	r3, r3, #16
 8001616:	623b      	str	r3, [r7, #32]
	x2 = (-7357 * p) / (1 << 16);
 8001618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800161a:	4a12      	ldr	r2, [pc, #72]	; (8001664 <BMP180_GetPressure+0x220>)
 800161c:	fb02 f303 	mul.w	r3, r2, r3
 8001620:	2b00      	cmp	r3, #0
 8001622:	da02      	bge.n	800162a <BMP180_GetPressure+0x1e6>
 8001624:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001628:	33ff      	adds	r3, #255	; 0xff
 800162a:	141b      	asrs	r3, r3, #16
 800162c:	61fb      	str	r3, [r7, #28]
	p = p + (x1 + x2 + 3791) / (1 << 4);
 800162e:	6a3a      	ldr	r2, [r7, #32]
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	4413      	add	r3, r2
 8001634:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8001638:	2b00      	cmp	r3, #0
 800163a:	da00      	bge.n	800163e <BMP180_GetPressure+0x1fa>
 800163c:	330f      	adds	r3, #15
 800163e:	111b      	asrs	r3, r3, #4
 8001640:	461a      	mov	r2, r3
 8001642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001644:	4413      	add	r3, r2
 8001646:	62fb      	str	r3, [r7, #44]	; 0x2c
	return p;
 8001648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800164a:	4618      	mov	r0, r3
 800164c:	3730      	adds	r7, #48	; 0x30
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20000232 	.word	0x20000232
 8001658:	08009e30 	.word	0x08009e30
 800165c:	08009e34 	.word	0x08009e34
 8001660:	2000021c 	.word	0x2000021c
 8001664:	ffffe343 	.word	0xffffe343

08001668 <BMP180_GetUT>:

//温度原始数据
int32_t BMP180_GetUT(void){
 8001668:	b598      	push	{r3, r4, r7, lr}
 800166a:	af00      	add	r7, sp, #0
	return (BMP180_ReadReg(BMP180_MSB_REG) << 8) | BMP180_ReadReg(BMP180_LSB_REG);
 800166c:	20f6      	movs	r0, #246	; 0xf6
 800166e:	f7ff fe85 	bl	800137c <BMP180_ReadReg>
 8001672:	4603      	mov	r3, r0
 8001674:	021c      	lsls	r4, r3, #8
 8001676:	20f7      	movs	r0, #247	; 0xf7
 8001678:	f7ff fe80 	bl	800137c <BMP180_ReadReg>
 800167c:	4603      	mov	r3, r0
 800167e:	4323      	orrs	r3, r4
}
 8001680:	4618      	mov	r0, r3
 8001682:	bd98      	pop	{r3, r4, r7, pc}

08001684 <BMP180_GetUP>:
//压力原始数据
int32_t BMP180_GetUP(void){
 8001684:	b598      	push	{r3, r4, r7, lr}
 8001686:	af00      	add	r7, sp, #0
	return ((BMP180_ReadReg(BMP180_MSB_REG) << 16) | (BMP180_ReadReg(BMP180_LSB_REG) << 8) | BMP180_ReadReg(BMP180_XLSB_REG)) >> (8 - _bmp180_oss);
 8001688:	20f6      	movs	r0, #246	; 0xf6
 800168a:	f7ff fe77 	bl	800137c <BMP180_ReadReg>
 800168e:	4603      	mov	r3, r0
 8001690:	041c      	lsls	r4, r3, #16
 8001692:	20f7      	movs	r0, #247	; 0xf7
 8001694:	f7ff fe72 	bl	800137c <BMP180_ReadReg>
 8001698:	4603      	mov	r3, r0
 800169a:	021b      	lsls	r3, r3, #8
 800169c:	431c      	orrs	r4, r3
 800169e:	20f8      	movs	r0, #248	; 0xf8
 80016a0:	f7ff fe6c 	bl	800137c <BMP180_ReadReg>
 80016a4:	4603      	mov	r3, r0
 80016a6:	ea44 0203 	orr.w	r2, r4, r3
 80016aa:	4b04      	ldr	r3, [pc, #16]	; (80016bc <BMP180_GetUP+0x38>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	f1c3 0308 	rsb	r3, r3, #8
 80016b2:	fa42 f303 	asr.w	r3, r2, r3
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	bd98      	pop	{r3, r4, r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20000232 	.word	0x20000232

080016c0 <goToOutput>:
#define lineDown() 	HAL_GPIO_WritePin(DHT_Port, DHT_Pin, GPIO_PIN_RESET)
#define lineUp()		HAL_GPIO_WritePin(DHT_Port, DHT_Pin, GPIO_PIN_SET)
#define getLine()		(HAL_GPIO_ReadPin(DHT_Port, DHT_Pin) == GPIO_PIN_SET)
#define Delay(d)		HAL_Delay(d)

static void goToOutput(void) {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c6:	463b      	mov	r3, r7
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]

  //По умолчанию на линии высокий уровень
  HAL_GPIO_WritePin(DHT_Port, DHT_Pin, GPIO_PIN_SET);
 80016d2:	2201      	movs	r2, #1
 80016d4:	2110      	movs	r1, #16
 80016d6:	480a      	ldr	r0, [pc, #40]	; (8001700 <goToOutput+0x40>)
 80016d8:	f002 fbe7 	bl	8003eaa <HAL_GPIO_WritePin>

  //Настройка порта на выход 
  GPIO_InitStruct.Pin = DHT_Pin;
 80016dc:	2310      	movs	r3, #16
 80016de:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; 	//Открытый сток
 80016e0:	2311      	movs	r3, #17
 80016e2:	607b      	str	r3, [r7, #4]
	#if DHT_PullUp == 1
  GPIO_InitStruct.Pull = GPIO_PULLUP;						//Подтяжка к питанию
	#else 
  GPIO_InitStruct.Pull = GPIO_NOPULL;						//Без подтяжки
 80016e4:	2300      	movs	r3, #0
 80016e6:	60bb      	str	r3, [r7, #8]
	#endif
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; //Высокая скорость работы порта
 80016e8:	2303      	movs	r3, #3
 80016ea:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DHT_Port, &GPIO_InitStruct);
 80016ec:	463b      	mov	r3, r7
 80016ee:	4619      	mov	r1, r3
 80016f0:	4803      	ldr	r0, [pc, #12]	; (8001700 <goToOutput+0x40>)
 80016f2:	f002 fa69 	bl	8003bc8 <HAL_GPIO_Init>
}
 80016f6:	bf00      	nop
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40010800 	.word	0x40010800

08001704 <goToInput>:

static void goToInput(void) {
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170a:	463b      	mov	r3, r7
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]

  //Настройка порта на вход 
  GPIO_InitStruct.Pin = DHT_Pin;
 8001716:	2310      	movs	r3, #16
 8001718:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800171a:	2300      	movs	r3, #0
 800171c:	607b      	str	r3, [r7, #4]
	#if DHT_PullUp == 1
  GPIO_InitStruct.Pull = GPIO_PULLUP;						//Подтяжка к питанию
	#else 
  GPIO_InitStruct.Pull = GPIO_NOPULL;						//Без подтяжки
 800171e:	2300      	movs	r3, #0
 8001720:	60bb      	str	r3, [r7, #8]
	#endif
  HAL_GPIO_Init(DHT_Port, &GPIO_InitStruct);
 8001722:	463b      	mov	r3, r7
 8001724:	4619      	mov	r1, r3
 8001726:	4803      	ldr	r0, [pc, #12]	; (8001734 <goToInput+0x30>)
 8001728:	f002 fa4e 	bl	8003bc8 <HAL_GPIO_Init>
}
 800172c:	bf00      	nop
 800172e:	3710      	adds	r7, #16
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40010800 	.word	0x40010800

08001738 <DHT_getData>:

DHT_data DHT_getData(DHT_type t) {
 8001738:	b580      	push	{r7, lr}
 800173a:	b08a      	sub	sp, #40	; 0x28
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	460b      	mov	r3, r1
 8001742:	70fb      	strb	r3, [r7, #3]
	DHT_data data = {0.0f, 0.0f};
 8001744:	f04f 0300 	mov.w	r3, #0
 8001748:	617b      	str	r3, [r7, #20]
 800174a:	f04f 0300 	mov.w	r3, #0
 800174e:	61bb      	str	r3, [r7, #24]
	
	/* Запрос данных у датчика */
	//Перевод пина "на выход"
	goToOutput();
 8001750:	f7ff ffb6 	bl	80016c0 <goToOutput>
	//Опускание линии данных на 15 мс
	lineDown();
 8001754:	2200      	movs	r2, #0
 8001756:	2110      	movs	r1, #16
 8001758:	4888      	ldr	r0, [pc, #544]	; (800197c <DHT_getData+0x244>)
 800175a:	f002 fba6 	bl	8003eaa <HAL_GPIO_WritePin>
	Delay(15);
 800175e:	200f      	movs	r0, #15
 8001760:	f001 fba8 	bl	8002eb4 <HAL_Delay>
	//Подъём линии, перевод порта "на вход"
	lineUp();
 8001764:	2201      	movs	r2, #1
 8001766:	2110      	movs	r1, #16
 8001768:	4884      	ldr	r0, [pc, #528]	; (800197c <DHT_getData+0x244>)
 800176a:	f002 fb9e 	bl	8003eaa <HAL_GPIO_WritePin>
	goToInput();
 800176e:	f7ff ffc9 	bl	8001704 <goToInput>
	
	/* Ожидание ответа от датчика */
	uint16_t timeout = 0;
 8001772:	2300      	movs	r3, #0
 8001774:	84fb      	strh	r3, [r7, #38]	; 0x26
	//Ожидание спада
	while(getLine()) {
 8001776:	e010      	b.n	800179a <DHT_getData+0x62>
		timeout++;
 8001778:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800177a:	3301      	adds	r3, #1
 800177c:	84fb      	strh	r3, [r7, #38]	; 0x26
		if (timeout > DHT_timeout) return data;
 800177e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001780:	f242 7210 	movw	r2, #10000	; 0x2710
 8001784:	4293      	cmp	r3, r2
 8001786:	d908      	bls.n	800179a <DHT_getData+0x62>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	461a      	mov	r2, r3
 800178c:	f107 0314 	add.w	r3, r7, #20
 8001790:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001794:	e882 0003 	stmia.w	r2, {r0, r1}
 8001798:	e0ec      	b.n	8001974 <DHT_getData+0x23c>
	while(getLine()) {
 800179a:	2110      	movs	r1, #16
 800179c:	4877      	ldr	r0, [pc, #476]	; (800197c <DHT_getData+0x244>)
 800179e:	f002 fb6d 	bl	8003e7c <HAL_GPIO_ReadPin>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d0e7      	beq.n	8001778 <DHT_getData+0x40>
	}
	timeout = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	84fb      	strh	r3, [r7, #38]	; 0x26
	//Ожидание подъёма
	while(!getLine()) {
 80017ac:	e010      	b.n	80017d0 <DHT_getData+0x98>
		timeout++;
 80017ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017b0:	3301      	adds	r3, #1
 80017b2:	84fb      	strh	r3, [r7, #38]	; 0x26
		if (timeout > DHT_timeout) return data;
 80017b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017b6:	f242 7210 	movw	r2, #10000	; 0x2710
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d908      	bls.n	80017d0 <DHT_getData+0x98>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	461a      	mov	r2, r3
 80017c2:	f107 0314 	add.w	r3, r7, #20
 80017c6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80017ca:	e882 0003 	stmia.w	r2, {r0, r1}
 80017ce:	e0d1      	b.n	8001974 <DHT_getData+0x23c>
	while(!getLine()) {
 80017d0:	2110      	movs	r1, #16
 80017d2:	486a      	ldr	r0, [pc, #424]	; (800197c <DHT_getData+0x244>)
 80017d4:	f002 fb52 	bl	8003e7c <HAL_GPIO_ReadPin>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d1e7      	bne.n	80017ae <DHT_getData+0x76>
	}
	timeout = 0;
 80017de:	2300      	movs	r3, #0
 80017e0:	84fb      	strh	r3, [r7, #38]	; 0x26
	//Ожидание спада
	while(getLine()) {
 80017e2:	e010      	b.n	8001806 <DHT_getData+0xce>
		timeout++;
 80017e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017e6:	3301      	adds	r3, #1
 80017e8:	84fb      	strh	r3, [r7, #38]	; 0x26
		if (timeout > DHT_timeout) return data;
 80017ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017ec:	f242 7210 	movw	r2, #10000	; 0x2710
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d908      	bls.n	8001806 <DHT_getData+0xce>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	461a      	mov	r2, r3
 80017f8:	f107 0314 	add.w	r3, r7, #20
 80017fc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001800:	e882 0003 	stmia.w	r2, {r0, r1}
 8001804:	e0b6      	b.n	8001974 <DHT_getData+0x23c>
	while(getLine()) {
 8001806:	2110      	movs	r1, #16
 8001808:	485c      	ldr	r0, [pc, #368]	; (800197c <DHT_getData+0x244>)
 800180a:	f002 fb37 	bl	8003e7c <HAL_GPIO_ReadPin>
 800180e:	4603      	mov	r3, r0
 8001810:	2b01      	cmp	r3, #1
 8001812:	d0e7      	beq.n	80017e4 <DHT_getData+0xac>
	}
	
	/* Чтение ответа от датчика */
	uint8_t rawData[5] = {0,0,0,0,0};
 8001814:	f107 030c 	add.w	r3, r7, #12
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	711a      	strb	r2, [r3, #4]
	for(uint8_t a = 0; a < 5; a++) {
 800181e:	2300      	movs	r3, #0
 8001820:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001824:	e047      	b.n	80018b6 <DHT_getData+0x17e>
		for(uint8_t b = 7; b != 255; b--) {
 8001826:	2307      	movs	r3, #7
 8001828:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800182c:	e03a      	b.n	80018a4 <DHT_getData+0x16c>
			uint32_t hT = 0, lT = 0;
 800182e:	2300      	movs	r3, #0
 8001830:	623b      	str	r3, [r7, #32]
 8001832:	2300      	movs	r3, #0
 8001834:	61fb      	str	r3, [r7, #28]
			//Пока линия в низком уровне, инкремент переменной lT
			while(!getLine()) lT++;
 8001836:	e002      	b.n	800183e <DHT_getData+0x106>
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	3301      	adds	r3, #1
 800183c:	61fb      	str	r3, [r7, #28]
 800183e:	2110      	movs	r1, #16
 8001840:	484e      	ldr	r0, [pc, #312]	; (800197c <DHT_getData+0x244>)
 8001842:	f002 fb1b 	bl	8003e7c <HAL_GPIO_ReadPin>
 8001846:	4603      	mov	r3, r0
 8001848:	2b01      	cmp	r3, #1
 800184a:	d1f5      	bne.n	8001838 <DHT_getData+0x100>
			//Пока линия в высоком уровне, инкремент переменной hT
			while(getLine()) hT++;
 800184c:	e002      	b.n	8001854 <DHT_getData+0x11c>
 800184e:	6a3b      	ldr	r3, [r7, #32]
 8001850:	3301      	adds	r3, #1
 8001852:	623b      	str	r3, [r7, #32]
 8001854:	2110      	movs	r1, #16
 8001856:	4849      	ldr	r0, [pc, #292]	; (800197c <DHT_getData+0x244>)
 8001858:	f002 fb10 	bl	8003e7c <HAL_GPIO_ReadPin>
 800185c:	4603      	mov	r3, r0
 800185e:	2b01      	cmp	r3, #1
 8001860:	d0f5      	beq.n	800184e <DHT_getData+0x116>
			//Если hT больше lT, то пришла единица
			if(hT > lT) rawData[a] |= (1<<b);
 8001862:	6a3a      	ldr	r2, [r7, #32]
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	429a      	cmp	r2, r3
 8001868:	d917      	bls.n	800189a <DHT_getData+0x162>
 800186a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800186e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001872:	4413      	add	r3, r2
 8001874:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001878:	b25a      	sxtb	r2, r3
 800187a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800187e:	2101      	movs	r1, #1
 8001880:	fa01 f303 	lsl.w	r3, r1, r3
 8001884:	b25b      	sxtb	r3, r3
 8001886:	4313      	orrs	r3, r2
 8001888:	b25a      	sxtb	r2, r3
 800188a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800188e:	b2d2      	uxtb	r2, r2
 8001890:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001894:	440b      	add	r3, r1
 8001896:	f803 2c1c 	strb.w	r2, [r3, #-28]
		for(uint8_t b = 7; b != 255; b--) {
 800189a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800189e:	3b01      	subs	r3, #1
 80018a0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80018a4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80018a8:	2bff      	cmp	r3, #255	; 0xff
 80018aa:	d1c0      	bne.n	800182e <DHT_getData+0xf6>
	for(uint8_t a = 0; a < 5; a++) {
 80018ac:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80018b0:	3301      	adds	r3, #1
 80018b2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80018b6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80018ba:	2b04      	cmp	r3, #4
 80018bc:	d9b3      	bls.n	8001826 <DHT_getData+0xee>
		}
	}
	/* Проверка целостности данных */
	if((uint8_t)(rawData[0] + rawData[1] + rawData[2] + rawData[3]) == rawData[4]) {
 80018be:	7b3a      	ldrb	r2, [r7, #12]
 80018c0:	7b7b      	ldrb	r3, [r7, #13]
 80018c2:	4413      	add	r3, r2
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	7bbb      	ldrb	r3, [r7, #14]
 80018c8:	4413      	add	r3, r2
 80018ca:	b2da      	uxtb	r2, r3
 80018cc:	7bfb      	ldrb	r3, [r7, #15]
 80018ce:	4413      	add	r3, r2
 80018d0:	b2da      	uxtb	r2, r3
 80018d2:	7c3b      	ldrb	r3, [r7, #16]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d145      	bne.n	8001964 <DHT_getData+0x22c>
		//Если контрольная сумма совпадает, то конвертация и возврат полученных значений
		if (t == DHT22) {
 80018d8:	78fb      	ldrb	r3, [r7, #3]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d133      	bne.n	8001946 <DHT_getData+0x20e>
			data.hum = (float)(((uint16_t)rawData[0]<<8) | rawData[1])*0.1f;
 80018de:	7b3b      	ldrb	r3, [r7, #12]
 80018e0:	021b      	lsls	r3, r3, #8
 80018e2:	7b7a      	ldrb	r2, [r7, #13]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff f9f8 	bl	8000cdc <__aeabi_i2f>
 80018ec:	4603      	mov	r3, r0
 80018ee:	4924      	ldr	r1, [pc, #144]	; (8001980 <DHT_getData+0x248>)
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff fa47 	bl	8000d84 <__aeabi_fmul>
 80018f6:	4603      	mov	r3, r0
 80018f8:	617b      	str	r3, [r7, #20]
			//Проверка на отрицательность температуры
			if(!(rawData[2] & (1<<7))) {
 80018fa:	7bbb      	ldrb	r3, [r7, #14]
 80018fc:	b25b      	sxtb	r3, r3
 80018fe:	2b00      	cmp	r3, #0
 8001900:	db0e      	blt.n	8001920 <DHT_getData+0x1e8>
				data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*0.1f;
 8001902:	7bbb      	ldrb	r3, [r7, #14]
 8001904:	021b      	lsls	r3, r3, #8
 8001906:	7bfa      	ldrb	r2, [r7, #15]
 8001908:	4313      	orrs	r3, r2
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff f9e6 	bl	8000cdc <__aeabi_i2f>
 8001910:	4603      	mov	r3, r0
 8001912:	491b      	ldr	r1, [pc, #108]	; (8001980 <DHT_getData+0x248>)
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff fa35 	bl	8000d84 <__aeabi_fmul>
 800191a:	4603      	mov	r3, r0
 800191c:	61bb      	str	r3, [r7, #24]
 800191e:	e012      	b.n	8001946 <DHT_getData+0x20e>
			}	else {
				rawData[2] &= ~(1<<7);
 8001920:	7bbb      	ldrb	r3, [r7, #14]
 8001922:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001926:	b2db      	uxtb	r3, r3
 8001928:	73bb      	strb	r3, [r7, #14]
				data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*-0.1f;
 800192a:	7bbb      	ldrb	r3, [r7, #14]
 800192c:	021b      	lsls	r3, r3, #8
 800192e:	7bfa      	ldrb	r2, [r7, #15]
 8001930:	4313      	orrs	r3, r2
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff f9d2 	bl	8000cdc <__aeabi_i2f>
 8001938:	4603      	mov	r3, r0
 800193a:	4912      	ldr	r1, [pc, #72]	; (8001984 <DHT_getData+0x24c>)
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff fa21 	bl	8000d84 <__aeabi_fmul>
 8001942:	4603      	mov	r3, r0
 8001944:	61bb      	str	r3, [r7, #24]
			}
		}
		if (t == DHT11) {
 8001946:	78fb      	ldrb	r3, [r7, #3]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d10b      	bne.n	8001964 <DHT_getData+0x22c>
			data.hum = (float)rawData[0];
 800194c:	7b3b      	ldrb	r3, [r7, #12]
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff f9c0 	bl	8000cd4 <__aeabi_ui2f>
 8001954:	4603      	mov	r3, r0
 8001956:	617b      	str	r3, [r7, #20]
			data.temp = (float)rawData[2];;
 8001958:	7bbb      	ldrb	r3, [r7, #14]
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff f9ba 	bl	8000cd4 <__aeabi_ui2f>
 8001960:	4603      	mov	r3, r0
 8001962:	61bb      	str	r3, [r7, #24]
		}
	}
	
	return data;	
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	461a      	mov	r2, r3
 8001968:	f107 0314 	add.w	r3, r7, #20
 800196c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001970:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	3728      	adds	r7, #40	; 0x28
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	40010800 	.word	0x40010800
 8001980:	3dcccccd 	.word	0x3dcccccd
 8001984:	bdcccccd 	.word	0xbdcccccd

08001988 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800198e:	1d3b      	adds	r3, r7, #4
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001998:	4b18      	ldr	r3, [pc, #96]	; (80019fc <MX_ADC1_Init+0x74>)
 800199a:	4a19      	ldr	r2, [pc, #100]	; (8001a00 <MX_ADC1_Init+0x78>)
 800199c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800199e:	4b17      	ldr	r3, [pc, #92]	; (80019fc <MX_ADC1_Init+0x74>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80019a4:	4b15      	ldr	r3, [pc, #84]	; (80019fc <MX_ADC1_Init+0x74>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019aa:	4b14      	ldr	r3, [pc, #80]	; (80019fc <MX_ADC1_Init+0x74>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019b0:	4b12      	ldr	r3, [pc, #72]	; (80019fc <MX_ADC1_Init+0x74>)
 80019b2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80019b6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019b8:	4b10      	ldr	r3, [pc, #64]	; (80019fc <MX_ADC1_Init+0x74>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80019be:	4b0f      	ldr	r3, [pc, #60]	; (80019fc <MX_ADC1_Init+0x74>)
 80019c0:	2201      	movs	r2, #1
 80019c2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019c4:	480d      	ldr	r0, [pc, #52]	; (80019fc <MX_ADC1_Init+0x74>)
 80019c6:	f001 fa97 	bl	8002ef8 <HAL_ADC_Init>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80019d0:	f000 fe08 	bl	80025e4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80019d4:	2301      	movs	r3, #1
 80019d6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80019d8:	2301      	movs	r3, #1
 80019da:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80019dc:	2300      	movs	r3, #0
 80019de:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019e0:	1d3b      	adds	r3, r7, #4
 80019e2:	4619      	mov	r1, r3
 80019e4:	4805      	ldr	r0, [pc, #20]	; (80019fc <MX_ADC1_Init+0x74>)
 80019e6:	f001 fd3f 	bl	8003468 <HAL_ADC_ConfigChannel>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80019f0:	f000 fdf8 	bl	80025e4 <Error_Handler>
  }

}
 80019f4:	bf00      	nop
 80019f6:	3710      	adds	r7, #16
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	20000234 	.word	0x20000234
 8001a00:	40012400 	.word	0x40012400

08001a04 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b088      	sub	sp, #32
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a0c:	f107 0310 	add.w	r3, r7, #16
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	605a      	str	r2, [r3, #4]
 8001a16:	609a      	str	r2, [r3, #8]
 8001a18:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a14      	ldr	r2, [pc, #80]	; (8001a70 <HAL_ADC_MspInit+0x6c>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d121      	bne.n	8001a68 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a24:	4b13      	ldr	r3, [pc, #76]	; (8001a74 <HAL_ADC_MspInit+0x70>)
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	4a12      	ldr	r2, [pc, #72]	; (8001a74 <HAL_ADC_MspInit+0x70>)
 8001a2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a2e:	6193      	str	r3, [r2, #24]
 8001a30:	4b10      	ldr	r3, [pc, #64]	; (8001a74 <HAL_ADC_MspInit+0x70>)
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3c:	4b0d      	ldr	r3, [pc, #52]	; (8001a74 <HAL_ADC_MspInit+0x70>)
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	4a0c      	ldr	r2, [pc, #48]	; (8001a74 <HAL_ADC_MspInit+0x70>)
 8001a42:	f043 0304 	orr.w	r3, r3, #4
 8001a46:	6193      	str	r3, [r2, #24]
 8001a48:	4b0a      	ldr	r3, [pc, #40]	; (8001a74 <HAL_ADC_MspInit+0x70>)
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	f003 0304 	and.w	r3, r3, #4
 8001a50:	60bb      	str	r3, [r7, #8]
 8001a52:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001a54:	2302      	movs	r3, #2
 8001a56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a5c:	f107 0310 	add.w	r3, r7, #16
 8001a60:	4619      	mov	r1, r3
 8001a62:	4805      	ldr	r0, [pc, #20]	; (8001a78 <HAL_ADC_MspInit+0x74>)
 8001a64:	f002 f8b0 	bl	8003bc8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001a68:	bf00      	nop
 8001a6a:	3720      	adds	r7, #32
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40012400 	.word	0x40012400
 8001a74:	40021000 	.word	0x40021000
 8001a78:	40010800 	.word	0x40010800

08001a7c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b088      	sub	sp, #32
 8001a80:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a82:	f107 0310 	add.w	r3, r7, #16
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	605a      	str	r2, [r3, #4]
 8001a8c:	609a      	str	r2, [r3, #8]
 8001a8e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a90:	4b45      	ldr	r3, [pc, #276]	; (8001ba8 <MX_GPIO_Init+0x12c>)
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	4a44      	ldr	r2, [pc, #272]	; (8001ba8 <MX_GPIO_Init+0x12c>)
 8001a96:	f043 0310 	orr.w	r3, r3, #16
 8001a9a:	6193      	str	r3, [r2, #24]
 8001a9c:	4b42      	ldr	r3, [pc, #264]	; (8001ba8 <MX_GPIO_Init+0x12c>)
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	f003 0310 	and.w	r3, r3, #16
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aa8:	4b3f      	ldr	r3, [pc, #252]	; (8001ba8 <MX_GPIO_Init+0x12c>)
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	4a3e      	ldr	r2, [pc, #248]	; (8001ba8 <MX_GPIO_Init+0x12c>)
 8001aae:	f043 0320 	orr.w	r3, r3, #32
 8001ab2:	6193      	str	r3, [r2, #24]
 8001ab4:	4b3c      	ldr	r3, [pc, #240]	; (8001ba8 <MX_GPIO_Init+0x12c>)
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	f003 0320 	and.w	r3, r3, #32
 8001abc:	60bb      	str	r3, [r7, #8]
 8001abe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac0:	4b39      	ldr	r3, [pc, #228]	; (8001ba8 <MX_GPIO_Init+0x12c>)
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	4a38      	ldr	r2, [pc, #224]	; (8001ba8 <MX_GPIO_Init+0x12c>)
 8001ac6:	f043 0304 	orr.w	r3, r3, #4
 8001aca:	6193      	str	r3, [r2, #24]
 8001acc:	4b36      	ldr	r3, [pc, #216]	; (8001ba8 <MX_GPIO_Init+0x12c>)
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	f003 0304 	and.w	r3, r3, #4
 8001ad4:	607b      	str	r3, [r7, #4]
 8001ad6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ad8:	4b33      	ldr	r3, [pc, #204]	; (8001ba8 <MX_GPIO_Init+0x12c>)
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	4a32      	ldr	r2, [pc, #200]	; (8001ba8 <MX_GPIO_Init+0x12c>)
 8001ade:	f043 0308 	orr.w	r3, r3, #8
 8001ae2:	6193      	str	r3, [r2, #24]
 8001ae4:	4b30      	ldr	r3, [pc, #192]	; (8001ba8 <MX_GPIO_Init+0x12c>)
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	f003 0308 	and.w	r3, r3, #8
 8001aec:	603b      	str	r3, [r7, #0]
 8001aee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001af0:	2200      	movs	r2, #0
 8001af2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001af6:	482d      	ldr	r0, [pc, #180]	; (8001bac <MX_GPIO_Init+0x130>)
 8001af8:	f002 f9d7 	bl	8003eaa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001afc:	2200      	movs	r2, #0
 8001afe:	2103      	movs	r1, #3
 8001b00:	482b      	ldr	r0, [pc, #172]	; (8001bb0 <MX_GPIO_Init+0x134>)
 8001b02:	f002 f9d2 	bl	8003eaa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8001b06:	2200      	movs	r2, #0
 8001b08:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8001b0c:	4829      	ldr	r0, [pc, #164]	; (8001bb4 <MX_GPIO_Init+0x138>)
 8001b0e:	f002 f9cc 	bl	8003eaa <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001b12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b20:	2302      	movs	r3, #2
 8001b22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b24:	f107 0310 	add.w	r3, r7, #16
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4820      	ldr	r0, [pc, #128]	; (8001bac <MX_GPIO_Init+0x130>)
 8001b2c:	f002 f84c 	bl	8003bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA12 */
  GPIO_InitStruct.Pin = DHT11_Pin|GPIO_PIN_12;
 8001b30:	f241 0310 	movw	r3, #4112	; 0x1010
 8001b34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b36:	2300      	movs	r3, #0
 8001b38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3e:	f107 0310 	add.w	r3, r7, #16
 8001b42:	4619      	mov	r1, r3
 8001b44:	481b      	ldr	r0, [pc, #108]	; (8001bb4 <MX_GPIO_Init+0x138>)
 8001b46:	f002 f83f 	bl	8003bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b52:	2300      	movs	r3, #0
 8001b54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b56:	2302      	movs	r3, #2
 8001b58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b5a:	f107 0310 	add.w	r3, r7, #16
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4813      	ldr	r0, [pc, #76]	; (8001bb0 <MX_GPIO_Init+0x134>)
 8001b62:	f002 f831 	bl	8003bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001b66:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b70:	2302      	movs	r3, #2
 8001b72:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b74:	f107 0310 	add.w	r3, r7, #16
 8001b78:	4619      	mov	r1, r3
 8001b7a:	480d      	ldr	r0, [pc, #52]	; (8001bb0 <MX_GPIO_Init+0x134>)
 8001b7c:	f002 f824 	bl	8003bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001b80:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001b84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b86:	2301      	movs	r3, #1
 8001b88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b92:	f107 0310 	add.w	r3, r7, #16
 8001b96:	4619      	mov	r1, r3
 8001b98:	4806      	ldr	r0, [pc, #24]	; (8001bb4 <MX_GPIO_Init+0x138>)
 8001b9a:	f002 f815 	bl	8003bc8 <HAL_GPIO_Init>

}
 8001b9e:	bf00      	nop
 8001ba0:	3720      	adds	r7, #32
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	40011000 	.word	0x40011000
 8001bb0:	40010c00 	.word	0x40010c00
 8001bb4:	40010800 	.word	0x40010800

08001bb8 <GPS_Init>:
	CDC_Transmit_FS((unsigned char *) buf, (uint16_t) strlen(buf));
}
#endif

void GPS_Init()
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	4903      	ldr	r1, [pc, #12]	; (8001bcc <GPS_Init+0x14>)
 8001bc0:	4803      	ldr	r0, [pc, #12]	; (8001bd0 <GPS_Init+0x18>)
 8001bc2:	f004 fc8e 	bl	80064e2 <HAL_UART_Receive_IT>
}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	200001fc 	.word	0x200001fc
 8001bd0:	200003f4 	.word	0x200003f4

08001bd4 <GPS_UART_CallBack>:


void GPS_UART_CallBack(){
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
	if (rx_data != '\n' && rx_index < sizeof(rx_buffer)) {
 8001bd8:	4b16      	ldr	r3, [pc, #88]	; (8001c34 <GPS_UART_CallBack+0x60>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	2b0a      	cmp	r3, #10
 8001bde:	d010      	beq.n	8001c02 <GPS_UART_CallBack+0x2e>
 8001be0:	4b15      	ldr	r3, [pc, #84]	; (8001c38 <GPS_UART_CallBack+0x64>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	b25b      	sxtb	r3, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	db0b      	blt.n	8001c02 <GPS_UART_CallBack+0x2e>
		rx_buffer[rx_index++] = rx_data;
 8001bea:	4b13      	ldr	r3, [pc, #76]	; (8001c38 <GPS_UART_CallBack+0x64>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	1c5a      	adds	r2, r3, #1
 8001bf0:	b2d1      	uxtb	r1, r2
 8001bf2:	4a11      	ldr	r2, [pc, #68]	; (8001c38 <GPS_UART_CallBack+0x64>)
 8001bf4:	7011      	strb	r1, [r2, #0]
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	4b0e      	ldr	r3, [pc, #56]	; (8001c34 <GPS_UART_CallBack+0x60>)
 8001bfa:	7819      	ldrb	r1, [r3, #0]
 8001bfc:	4b0f      	ldr	r3, [pc, #60]	; (8001c3c <GPS_UART_CallBack+0x68>)
 8001bfe:	5499      	strb	r1, [r3, r2]
 8001c00:	e010      	b.n	8001c24 <GPS_UART_CallBack+0x50>

		#if (GPS_DEBUG == 1)
		GPS_print((char*)rx_buffer);
		#endif

		if(GPS_validate((char*) rx_buffer))
 8001c02:	480e      	ldr	r0, [pc, #56]	; (8001c3c <GPS_UART_CallBack+0x68>)
 8001c04:	f000 f81e 	bl	8001c44 <GPS_validate>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d002      	beq.n	8001c14 <GPS_UART_CallBack+0x40>
			GPS_parse((char*) rx_buffer);
 8001c0e:	480b      	ldr	r0, [pc, #44]	; (8001c3c <GPS_UART_CallBack+0x68>)
 8001c10:	f000 f87a 	bl	8001d08 <GPS_parse>
		rx_index = 0;
 8001c14:	4b08      	ldr	r3, [pc, #32]	; (8001c38 <GPS_UART_CallBack+0x64>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	701a      	strb	r2, [r3, #0]
		memset(rx_buffer, 0, sizeof(rx_buffer));
 8001c1a:	2280      	movs	r2, #128	; 0x80
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	4807      	ldr	r0, [pc, #28]	; (8001c3c <GPS_UART_CallBack+0x68>)
 8001c20:	f004 ffe0 	bl	8006be4 <memset>
	}
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 8001c24:	2201      	movs	r2, #1
 8001c26:	4903      	ldr	r1, [pc, #12]	; (8001c34 <GPS_UART_CallBack+0x60>)
 8001c28:	4805      	ldr	r0, [pc, #20]	; (8001c40 <GPS_UART_CallBack+0x6c>)
 8001c2a:	f004 fc5a 	bl	80064e2 <HAL_UART_Receive_IT>
}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	200001fc 	.word	0x200001fc
 8001c38:	200001fd 	.word	0x200001fd
 8001c3c:	200002bc 	.word	0x200002bc
 8001c40:	200003f4 	.word	0x200003f4

08001c44 <GPS_validate>:


int GPS_validate(char *nmeastr){
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 8001c50:	2300      	movs	r3, #0
 8001c52:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	4413      	add	r3, r2
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	2b24      	cmp	r3, #36	; 0x24
 8001c5e:	d103      	bne.n	8001c68 <GPS_validate+0x24>
        i++;
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	3301      	adds	r3, #1
 8001c64:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8001c66:	e00c      	b.n	8001c82 <GPS_validate+0x3e>
        return 0;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	e047      	b.n	8001cfc <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	4413      	add	r3, r2
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	461a      	mov	r2, r3
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	4053      	eors	r3, r2
 8001c7a:	613b      	str	r3, [r7, #16]
        i++;
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	4413      	add	r3, r2
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d008      	beq.n	8001ca0 <GPS_validate+0x5c>
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	4413      	add	r3, r2
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	2b2a      	cmp	r3, #42	; 0x2a
 8001c98:	d002      	beq.n	8001ca0 <GPS_validate+0x5c>
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	2b4a      	cmp	r3, #74	; 0x4a
 8001c9e:	dde5      	ble.n	8001c6c <GPS_validate+0x28>
    }

    if(i >= 75){
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	2b4a      	cmp	r3, #74	; 0x4a
 8001ca4:	dd01      	ble.n	8001caa <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	e028      	b.n	8001cfc <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	4413      	add	r3, r2
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	2b2a      	cmp	r3, #42	; 0x2a
 8001cb4:	d119      	bne.n	8001cea <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	3302      	adds	r3, #2
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	4413      	add	r3, r2
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 8001cd2:	f107 0308 	add.w	r3, r7, #8
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	490a      	ldr	r1, [pc, #40]	; (8001d04 <GPS_validate+0xc0>)
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f005 f96e 	bl	8006fbc <siprintf>
    return((checkcalcstr[0] == check[0])
 8001ce0:	7a3a      	ldrb	r2, [r7, #8]
 8001ce2:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d108      	bne.n	8001cfa <GPS_validate+0xb6>
 8001ce8:	e001      	b.n	8001cee <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 8001cea:	2300      	movs	r3, #0
 8001cec:	e006      	b.n	8001cfc <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8001cee:	7a7a      	ldrb	r2, [r7, #9]
 8001cf0:	7b7b      	ldrb	r3, [r7, #13]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d101      	bne.n	8001cfa <GPS_validate+0xb6>
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e000      	b.n	8001cfc <GPS_validate+0xb8>
 8001cfa:	2300      	movs	r3, #0
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3718      	adds	r7, #24
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	08009d50 	.word	0x08009d50

08001d08 <GPS_parse>:

void GPS_parse(char *GPSstrParse){
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b08a      	sub	sp, #40	; 0x28
 8001d0c:	af08      	add	r7, sp, #32
 8001d0e:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GPGGA", 6)){
 8001d10:	2206      	movs	r2, #6
 8001d12:	4946      	ldr	r1, [pc, #280]	; (8001e2c <GPS_parse+0x124>)
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f005 f99d 	bl	8007054 <strncmp>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d12f      	bne.n	8001d80 <GPS_parse+0x78>
    	if (sscanf(GPSstrParse, "$GPGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 8001d20:	4b43      	ldr	r3, [pc, #268]	; (8001e30 <GPS_parse+0x128>)
 8001d22:	9307      	str	r3, [sp, #28]
 8001d24:	4b43      	ldr	r3, [pc, #268]	; (8001e34 <GPS_parse+0x12c>)
 8001d26:	9306      	str	r3, [sp, #24]
 8001d28:	4b43      	ldr	r3, [pc, #268]	; (8001e38 <GPS_parse+0x130>)
 8001d2a:	9305      	str	r3, [sp, #20]
 8001d2c:	4b43      	ldr	r3, [pc, #268]	; (8001e3c <GPS_parse+0x134>)
 8001d2e:	9304      	str	r3, [sp, #16]
 8001d30:	4b43      	ldr	r3, [pc, #268]	; (8001e40 <GPS_parse+0x138>)
 8001d32:	9303      	str	r3, [sp, #12]
 8001d34:	4b43      	ldr	r3, [pc, #268]	; (8001e44 <GPS_parse+0x13c>)
 8001d36:	9302      	str	r3, [sp, #8]
 8001d38:	4b43      	ldr	r3, [pc, #268]	; (8001e48 <GPS_parse+0x140>)
 8001d3a:	9301      	str	r3, [sp, #4]
 8001d3c:	4b43      	ldr	r3, [pc, #268]	; (8001e4c <GPS_parse+0x144>)
 8001d3e:	9300      	str	r3, [sp, #0]
 8001d40:	4b43      	ldr	r3, [pc, #268]	; (8001e50 <GPS_parse+0x148>)
 8001d42:	4a44      	ldr	r2, [pc, #272]	; (8001e54 <GPS_parse+0x14c>)
 8001d44:	4944      	ldr	r1, [pc, #272]	; (8001e58 <GPS_parse+0x150>)
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f005 f958 	bl	8006ffc <siscanf>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	dd68      	ble.n	8001e24 <GPS_parse+0x11c>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8001d52:	4b42      	ldr	r3, [pc, #264]	; (8001e5c <GPS_parse+0x154>)
 8001d54:	691a      	ldr	r2, [r3, #16]
 8001d56:	4b41      	ldr	r3, [pc, #260]	; (8001e5c <GPS_parse+0x154>)
 8001d58:	7e1b      	ldrb	r3, [r3, #24]
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4610      	mov	r0, r2
 8001d5e:	f000 f8a1 	bl	8001ea4 <GPS_nmea_to_dec>
 8001d62:	4602      	mov	r2, r0
 8001d64:	4b3d      	ldr	r3, [pc, #244]	; (8001e5c <GPS_parse+0x154>)
 8001d66:	605a      	str	r2, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8001d68:	4b3c      	ldr	r3, [pc, #240]	; (8001e5c <GPS_parse+0x154>)
 8001d6a:	68da      	ldr	r2, [r3, #12]
 8001d6c:	4b3b      	ldr	r3, [pc, #236]	; (8001e5c <GPS_parse+0x154>)
 8001d6e:	7e5b      	ldrb	r3, [r3, #25]
 8001d70:	4619      	mov	r1, r3
 8001d72:	4610      	mov	r0, r2
 8001d74:	f000 f896 	bl	8001ea4 <GPS_nmea_to_dec>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	4b38      	ldr	r3, [pc, #224]	; (8001e5c <GPS_parse+0x154>)
 8001d7c:	601a      	str	r2, [r3, #0]
    		return;
 8001d7e:	e051      	b.n	8001e24 <GPS_parse+0x11c>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GPRMC", 6)){
 8001d80:	2206      	movs	r2, #6
 8001d82:	4937      	ldr	r1, [pc, #220]	; (8001e60 <GPS_parse+0x158>)
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f005 f965 	bl	8007054 <strncmp>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d114      	bne.n	8001dba <GPS_parse+0xb2>
    	if(sscanf(GPSstrParse, "$GPRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1)
 8001d90:	4b34      	ldr	r3, [pc, #208]	; (8001e64 <GPS_parse+0x15c>)
 8001d92:	9305      	str	r3, [sp, #20]
 8001d94:	4b34      	ldr	r3, [pc, #208]	; (8001e68 <GPS_parse+0x160>)
 8001d96:	9304      	str	r3, [sp, #16]
 8001d98:	4b34      	ldr	r3, [pc, #208]	; (8001e6c <GPS_parse+0x164>)
 8001d9a:	9303      	str	r3, [sp, #12]
 8001d9c:	4b29      	ldr	r3, [pc, #164]	; (8001e44 <GPS_parse+0x13c>)
 8001d9e:	9302      	str	r3, [sp, #8]
 8001da0:	4b29      	ldr	r3, [pc, #164]	; (8001e48 <GPS_parse+0x140>)
 8001da2:	9301      	str	r3, [sp, #4]
 8001da4:	4b29      	ldr	r3, [pc, #164]	; (8001e4c <GPS_parse+0x144>)
 8001da6:	9300      	str	r3, [sp, #0]
 8001da8:	4b29      	ldr	r3, [pc, #164]	; (8001e50 <GPS_parse+0x148>)
 8001daa:	4a2a      	ldr	r2, [pc, #168]	; (8001e54 <GPS_parse+0x14c>)
 8001dac:	4930      	ldr	r1, [pc, #192]	; (8001e70 <GPS_parse+0x168>)
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f005 f924 	bl	8006ffc <siscanf>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	e034      	b.n	8001e24 <GPS_parse+0x11c>
    		return;

    }
    else if (!strncmp(GPSstrParse, "$GPGLL", 6)){
 8001dba:	2206      	movs	r2, #6
 8001dbc:	492d      	ldr	r1, [pc, #180]	; (8001e74 <GPS_parse+0x16c>)
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f005 f948 	bl	8007054 <strncmp>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d110      	bne.n	8001dec <GPS_parse+0xe4>
        if(sscanf(GPSstrParse, "$GPGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1)
 8001dca:	4b2b      	ldr	r3, [pc, #172]	; (8001e78 <GPS_parse+0x170>)
 8001dcc:	9303      	str	r3, [sp, #12]
 8001dce:	4b21      	ldr	r3, [pc, #132]	; (8001e54 <GPS_parse+0x14c>)
 8001dd0:	9302      	str	r3, [sp, #8]
 8001dd2:	4b1c      	ldr	r3, [pc, #112]	; (8001e44 <GPS_parse+0x13c>)
 8001dd4:	9301      	str	r3, [sp, #4]
 8001dd6:	4b1c      	ldr	r3, [pc, #112]	; (8001e48 <GPS_parse+0x140>)
 8001dd8:	9300      	str	r3, [sp, #0]
 8001dda:	4b1c      	ldr	r3, [pc, #112]	; (8001e4c <GPS_parse+0x144>)
 8001ddc:	4a1c      	ldr	r2, [pc, #112]	; (8001e50 <GPS_parse+0x148>)
 8001dde:	4927      	ldr	r1, [pc, #156]	; (8001e7c <GPS_parse+0x174>)
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f005 f90b 	bl	8006ffc <siscanf>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	e01b      	b.n	8001e24 <GPS_parse+0x11c>
            return;
    }
    else if (!strncmp(GPSstrParse, "$GPVTG", 6)){
 8001dec:	2206      	movs	r2, #6
 8001dee:	4924      	ldr	r1, [pc, #144]	; (8001e80 <GPS_parse+0x178>)
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f005 f92f 	bl	8007054 <strncmp>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d113      	bne.n	8001e24 <GPS_parse+0x11c>
        if(sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 8001dfc:	4b21      	ldr	r3, [pc, #132]	; (8001e84 <GPS_parse+0x17c>)
 8001dfe:	9305      	str	r3, [sp, #20]
 8001e00:	4b21      	ldr	r3, [pc, #132]	; (8001e88 <GPS_parse+0x180>)
 8001e02:	9304      	str	r3, [sp, #16]
 8001e04:	4b21      	ldr	r3, [pc, #132]	; (8001e8c <GPS_parse+0x184>)
 8001e06:	9303      	str	r3, [sp, #12]
 8001e08:	4b18      	ldr	r3, [pc, #96]	; (8001e6c <GPS_parse+0x164>)
 8001e0a:	9302      	str	r3, [sp, #8]
 8001e0c:	4b20      	ldr	r3, [pc, #128]	; (8001e90 <GPS_parse+0x188>)
 8001e0e:	9301      	str	r3, [sp, #4]
 8001e10:	4b20      	ldr	r3, [pc, #128]	; (8001e94 <GPS_parse+0x18c>)
 8001e12:	9300      	str	r3, [sp, #0]
 8001e14:	4b20      	ldr	r3, [pc, #128]	; (8001e98 <GPS_parse+0x190>)
 8001e16:	4a21      	ldr	r2, [pc, #132]	; (8001e9c <GPS_parse+0x194>)
 8001e18:	4921      	ldr	r1, [pc, #132]	; (8001ea0 <GPS_parse+0x198>)
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f005 f8ee 	bl	8006ffc <siscanf>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
            return;
    }
}
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	08009d58 	.word	0x08009d58
 8001e30:	20000290 	.word	0x20000290
 8001e34:	2000028c 	.word	0x2000028c
 8001e38:	20000288 	.word	0x20000288
 8001e3c:	20000284 	.word	0x20000284
 8001e40:	20000280 	.word	0x20000280
 8001e44:	2000027d 	.word	0x2000027d
 8001e48:	20000270 	.word	0x20000270
 8001e4c:	2000027c 	.word	0x2000027c
 8001e50:	20000274 	.word	0x20000274
 8001e54:	20000278 	.word	0x20000278
 8001e58:	08009d60 	.word	0x08009d60
 8001e5c:	20000264 	.word	0x20000264
 8001e60:	08009d88 	.word	0x08009d88
 8001e64:	2000029c 	.word	0x2000029c
 8001e68:	20000298 	.word	0x20000298
 8001e6c:	20000294 	.word	0x20000294
 8001e70:	08009d90 	.word	0x08009d90
 8001e74:	08009db0 	.word	0x08009db0
 8001e78:	200002a0 	.word	0x200002a0
 8001e7c:	08009db8 	.word	0x08009db8
 8001e80:	08009dd4 	.word	0x08009dd4
 8001e84:	200002b8 	.word	0x200002b8
 8001e88:	200002b4 	.word	0x200002b4
 8001e8c:	200002b1 	.word	0x200002b1
 8001e90:	200002b0 	.word	0x200002b0
 8001e94:	200002ac 	.word	0x200002ac
 8001e98:	200002a8 	.word	0x200002a8
 8001e9c:	200002a4 	.word	0x200002a4
 8001ea0:	08009ddc 	.word	0x08009ddc

08001ea4 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	460b      	mov	r3, r1
 8001eae:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 8001eb0:	491b      	ldr	r1, [pc, #108]	; (8001f20 <GPS_nmea_to_dec+0x7c>)
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f7ff f81a 	bl	8000eec <__aeabi_fdiv>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff f928 	bl	8001110 <__aeabi_f2iz>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	2264      	movs	r2, #100	; 0x64
 8001ec8:	fb02 f303 	mul.w	r3, r2, r3
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7fe ff05 	bl	8000cdc <__aeabi_i2f>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f7fe fe4a 	bl	8000b70 <__aeabi_fsub>
 8001edc:	4603      	mov	r3, r0
 8001ede:	60fb      	str	r3, [r7, #12]
    float dec_deg = minutes / 60;
 8001ee0:	4910      	ldr	r1, [pc, #64]	; (8001f24 <GPS_nmea_to_dec+0x80>)
 8001ee2:	68f8      	ldr	r0, [r7, #12]
 8001ee4:	f7ff f802 	bl	8000eec <__aeabi_fdiv>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	60bb      	str	r3, [r7, #8]
    float decimal = degree + dec_deg;
 8001eec:	6938      	ldr	r0, [r7, #16]
 8001eee:	f7fe fef5 	bl	8000cdc <__aeabi_i2f>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	68b8      	ldr	r0, [r7, #8]
 8001ef8:	f7fe fe3c 	bl	8000b74 <__addsf3>
 8001efc:	4603      	mov	r3, r0
 8001efe:	617b      	str	r3, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 8001f00:	78fb      	ldrb	r3, [r7, #3]
 8001f02:	2b53      	cmp	r3, #83	; 0x53
 8001f04:	d002      	beq.n	8001f0c <GPS_nmea_to_dec+0x68>
 8001f06:	78fb      	ldrb	r3, [r7, #3]
 8001f08:	2b57      	cmp	r3, #87	; 0x57
 8001f0a:	d103      	bne.n	8001f14 <GPS_nmea_to_dec+0x70>
        decimal *= -1;
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001f12:	617b      	str	r3, [r7, #20]
    }
    return decimal;
 8001f14:	697b      	ldr	r3, [r7, #20]
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3718      	adds	r7, #24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	42c80000 	.word	0x42c80000
 8001f24:	42700000 	.word	0x42700000

08001f28 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001f2c:	4b12      	ldr	r3, [pc, #72]	; (8001f78 <MX_I2C1_Init+0x50>)
 8001f2e:	4a13      	ldr	r2, [pc, #76]	; (8001f7c <MX_I2C1_Init+0x54>)
 8001f30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001f32:	4b11      	ldr	r3, [pc, #68]	; (8001f78 <MX_I2C1_Init+0x50>)
 8001f34:	4a12      	ldr	r2, [pc, #72]	; (8001f80 <MX_I2C1_Init+0x58>)
 8001f36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f38:	4b0f      	ldr	r3, [pc, #60]	; (8001f78 <MX_I2C1_Init+0x50>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f3e:	4b0e      	ldr	r3, [pc, #56]	; (8001f78 <MX_I2C1_Init+0x50>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f44:	4b0c      	ldr	r3, [pc, #48]	; (8001f78 <MX_I2C1_Init+0x50>)
 8001f46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f4a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f4c:	4b0a      	ldr	r3, [pc, #40]	; (8001f78 <MX_I2C1_Init+0x50>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f52:	4b09      	ldr	r3, [pc, #36]	; (8001f78 <MX_I2C1_Init+0x50>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f58:	4b07      	ldr	r3, [pc, #28]	; (8001f78 <MX_I2C1_Init+0x50>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f5e:	4b06      	ldr	r3, [pc, #24]	; (8001f78 <MX_I2C1_Init+0x50>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f64:	4804      	ldr	r0, [pc, #16]	; (8001f78 <MX_I2C1_Init+0x50>)
 8001f66:	f001 ffb9 	bl	8003edc <HAL_I2C_Init>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f70:	f000 fb38 	bl	80025e4 <Error_Handler>
  }

}
 8001f74:	bf00      	nop
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	2000033c 	.word	0x2000033c
 8001f7c:	40005400 	.word	0x40005400
 8001f80:	000186a0 	.word	0x000186a0

08001f84 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b088      	sub	sp, #32
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f8c:	f107 0310 	add.w	r3, r7, #16
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	609a      	str	r2, [r3, #8]
 8001f98:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a15      	ldr	r2, [pc, #84]	; (8001ff4 <HAL_I2C_MspInit+0x70>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d123      	bne.n	8001fec <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fa4:	4b14      	ldr	r3, [pc, #80]	; (8001ff8 <HAL_I2C_MspInit+0x74>)
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	4a13      	ldr	r2, [pc, #76]	; (8001ff8 <HAL_I2C_MspInit+0x74>)
 8001faa:	f043 0308 	orr.w	r3, r3, #8
 8001fae:	6193      	str	r3, [r2, #24]
 8001fb0:	4b11      	ldr	r3, [pc, #68]	; (8001ff8 <HAL_I2C_MspInit+0x74>)
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	f003 0308 	and.w	r3, r3, #8
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001fbc:	23c0      	movs	r3, #192	; 0xc0
 8001fbe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fc0:	2312      	movs	r3, #18
 8001fc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc8:	f107 0310 	add.w	r3, r7, #16
 8001fcc:	4619      	mov	r1, r3
 8001fce:	480b      	ldr	r0, [pc, #44]	; (8001ffc <HAL_I2C_MspInit+0x78>)
 8001fd0:	f001 fdfa 	bl	8003bc8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fd4:	4b08      	ldr	r3, [pc, #32]	; (8001ff8 <HAL_I2C_MspInit+0x74>)
 8001fd6:	69db      	ldr	r3, [r3, #28]
 8001fd8:	4a07      	ldr	r2, [pc, #28]	; (8001ff8 <HAL_I2C_MspInit+0x74>)
 8001fda:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fde:	61d3      	str	r3, [r2, #28]
 8001fe0:	4b05      	ldr	r3, [pc, #20]	; (8001ff8 <HAL_I2C_MspInit+0x74>)
 8001fe2:	69db      	ldr	r3, [r3, #28]
 8001fe4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fe8:	60bb      	str	r3, [r7, #8]
 8001fea:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001fec:	bf00      	nop
 8001fee:	3720      	adds	r7, #32
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40005400 	.word	0x40005400
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	40010c00 	.word	0x40010c00

08002000 <airQuality>:





float airQuality(){
 8002000:	b590      	push	{r4, r7, lr}
 8002002:	b09d      	sub	sp, #116	; 0x74
 8002004:	af00      	add	r7, sp, #0
float Value[22];////取22个值做滤波用
	  float AD_Value;
	  HAL_ADCEx_Calibration_Start(&hadc1);
 8002006:	4858      	ldr	r0, [pc, #352]	; (8002168 <airQuality+0x168>)
 8002008:	f001 fbbe 	bl	8003788 <HAL_ADCEx_Calibration_Start>
     for(char n=0;n<22;n++)
 800200c:	2300      	movs	r3, #0
 800200e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8002012:	e031      	b.n	8002078 <airQuality+0x78>

     {
         HAL_ADC_Start(&hadc1);
 8002014:	4854      	ldr	r0, [pc, #336]	; (8002168 <airQuality+0x168>)
 8002016:	f001 f847 	bl	80030a8 <HAL_ADC_Start>
         HAL_ADC_PollForConversion(&hadc1, 10);    //等待转换完成，第二个参数表示超时时间，单位ms
 800201a:	210a      	movs	r1, #10
 800201c:	4852      	ldr	r0, [pc, #328]	; (8002168 <airQuality+0x168>)
 800201e:	f001 f91d 	bl	800325c <HAL_ADC_PollForConversion>
         if(HAL_IS_BIT_SET(HAL_ADC_GetState(&hadc1), HAL_ADC_STATE_REG_EOC))
 8002022:	4851      	ldr	r0, [pc, #324]	; (8002168 <airQuality+0x168>)
 8002024:	f001 fb18 	bl	8003658 <HAL_ADC_GetState>
 8002028:	4603      	mov	r3, r0
 800202a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800202e:	2b00      	cmp	r3, #0
 8002030:	d01d      	beq.n	800206e <airQuality+0x6e>
         {
             Value[n]=HAL_ADC_GetValue(&hadc1);
 8002032:	484d      	ldr	r0, [pc, #308]	; (8002168 <airQuality+0x168>)
 8002034:	f001 fa0c 	bl	8003450 <HAL_ADC_GetValue>
 8002038:	4603      	mov	r3, r0
 800203a:	f897 406b 	ldrb.w	r4, [r7, #107]	; 0x6b
 800203e:	4618      	mov	r0, r3
 8002040:	f7fe fe48 	bl	8000cd4 <__aeabi_ui2f>
 8002044:	4602      	mov	r2, r0
 8002046:	00a3      	lsls	r3, r4, #2
 8002048:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800204c:	440b      	add	r3, r1
 800204e:	f843 2c70 	str.w	r2, [r3, #-112]
             AD_Value += Value[n];
 8002052:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800205c:	4413      	add	r3, r2
 800205e:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8002062:	4619      	mov	r1, r3
 8002064:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002066:	f7fe fd85 	bl	8000b74 <__addsf3>
 800206a:	4603      	mov	r3, r0
 800206c:	66fb      	str	r3, [r7, #108]	; 0x6c
     for(char n=0;n<22;n++)
 800206e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8002072:	3301      	adds	r3, #1
 8002074:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8002078:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800207c:	2b15      	cmp	r3, #21
 800207e:	d9c9      	bls.n	8002014 <airQuality+0x14>
         }
     }
     HAL_ADC_Stop(&hadc1);
 8002080:	4839      	ldr	r0, [pc, #228]	; (8002168 <airQuality+0x168>)
 8002082:	f001 f8bf 	bl	8003204 <HAL_ADC_Stop>

     float max = Value[0];
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	667b      	str	r3, [r7, #100]	; 0x64
     float min = Value[0];
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	663b      	str	r3, [r7, #96]	; 0x60
     for(char n=0;n<22;n++)//取最大值、最小值
 800208e:	2300      	movs	r3, #0
 8002090:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002094:	e038      	b.n	8002108 <airQuality+0x108>
     {
         max = (Value[n]<max)?max:Value[n];
 8002096:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80020a0:	4413      	add	r3, r2
 80020a2:	f853 3c70 	ldr.w	r3, [r3, #-112]
 80020a6:	4619      	mov	r1, r3
 80020a8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80020aa:	f7ff f827 	bl	80010fc <__aeabi_fcmpgt>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <airQuality+0xb8>
 80020b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80020b6:	e007      	b.n	80020c8 <airQuality+0xc8>
 80020b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80020c2:	4413      	add	r3, r2
 80020c4:	f853 3c70 	ldr.w	r3, [r3, #-112]
 80020c8:	667b      	str	r3, [r7, #100]	; 0x64
         min = (min<Value[n])?min:Value[n];
 80020ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80020d4:	4413      	add	r3, r2
 80020d6:	f853 3c70 	ldr.w	r3, [r3, #-112]
 80020da:	4619      	mov	r1, r3
 80020dc:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80020de:	f7fe ffef 	bl	80010c0 <__aeabi_fcmplt>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <airQuality+0xec>
 80020e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020ea:	e007      	b.n	80020fc <airQuality+0xfc>
 80020ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80020f6:	4413      	add	r3, r2
 80020f8:	f853 3c70 	ldr.w	r3, [r3, #-112]
 80020fc:	663b      	str	r3, [r7, #96]	; 0x60
     for(char n=0;n<22;n++)//取最大值、最小值
 80020fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002102:	3301      	adds	r3, #1
 8002104:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002108:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800210c:	2b15      	cmp	r3, #21
 800210e:	d9c2      	bls.n	8002096 <airQuality+0x96>
     }

     float result = (float)((AD_Value - max - min) / 20) * (3.311 / 4096);
 8002110:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002112:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002114:	f7fe fd2c 	bl	8000b70 <__aeabi_fsub>
 8002118:	4603      	mov	r3, r0
 800211a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800211c:	4618      	mov	r0, r3
 800211e:	f7fe fd27 	bl	8000b70 <__aeabi_fsub>
 8002122:	4603      	mov	r3, r0
 8002124:	4911      	ldr	r1, [pc, #68]	; (800216c <airQuality+0x16c>)
 8002126:	4618      	mov	r0, r3
 8002128:	f7fe fee0 	bl	8000eec <__aeabi_fdiv>
 800212c:	4603      	mov	r3, r0
 800212e:	4618      	mov	r0, r3
 8002130:	f7fe f97a 	bl	8000428 <__aeabi_f2d>
 8002134:	a30a      	add	r3, pc, #40	; (adr r3, 8002160 <airQuality+0x160>)
 8002136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800213a:	f7fe f9cd 	bl	80004d8 <__aeabi_dmul>
 800213e:	4603      	mov	r3, r0
 8002140:	460c      	mov	r4, r1
 8002142:	4618      	mov	r0, r3
 8002144:	4621      	mov	r1, r4
 8002146:	f7fe fcbf 	bl	8000ac8 <__aeabi_d2f>
 800214a:	4603      	mov	r3, r0
 800214c:	65bb      	str	r3, [r7, #88]	; 0x58

     return result * 1000;
 800214e:	4908      	ldr	r1, [pc, #32]	; (8002170 <airQuality+0x170>)
 8002150:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002152:	f7fe fe17 	bl	8000d84 <__aeabi_fmul>
 8002156:	4603      	mov	r3, r0
}
 8002158:	4618      	mov	r0, r3
 800215a:	3774      	adds	r7, #116	; 0x74
 800215c:	46bd      	mov	sp, r7
 800215e:	bd90      	pop	{r4, r7, pc}
 8002160:	916872b0 	.word	0x916872b0
 8002164:	3f4a7ced 	.word	0x3f4a7ced
 8002168:	20000234 	.word	0x20000234
 800216c:	41a00000 	.word	0x41a00000
 8002170:	447a0000 	.word	0x447a0000

08002174 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002174:	b590      	push	{r4, r7, lr}
 8002176:	b093      	sub	sp, #76	; 0x4c
 8002178:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800217a:	f000 fe39 	bl	8002df0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800217e:	f000 f8d5 	bl	800232c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002182:	f7ff fc7b 	bl	8001a7c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002186:	f000 fd23 	bl	8002bd0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800218a:	f000 fd4b 	bl	8002c24 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 800218e:	f7ff fecb 	bl	8001f28 <MX_I2C1_Init>
  MX_ADC1_Init();
 8002192:	f7ff fbf9 	bl	8001988 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */


  HAL_UART_Receive_IT(&huart3, uart3_rxbuf, 1);
 8002196:	2201      	movs	r2, #1
 8002198:	4955      	ldr	r1, [pc, #340]	; (80022f0 <main+0x17c>)
 800219a:	4856      	ldr	r0, [pc, #344]	; (80022f4 <main+0x180>)
 800219c:	f004 f9a1 	bl	80064e2 <HAL_UART_Receive_IT>
  BMP180_SetOversampling(BMP180_ULTRA);
 80021a0:	2003      	movs	r0, #3
 80021a2:	f7fe fffb 	bl	800119c <BMP180_SetOversampling>
  BMP180_UpdateCalibrationData();
 80021a6:	f7ff f809 	bl	80011bc <BMP180_UpdateCalibrationData>
  MLX90614_Init(&hi2c1);
 80021aa:	4853      	ldr	r0, [pc, #332]	; (80022f8 <main+0x184>)
 80021ac:	f000 fc54 	bl	8002a58 <MLX90614_Init>
  MLX90614_SetEmissivity(0.985);
 80021b0:	4852      	ldr	r0, [pc, #328]	; (80022fc <main+0x188>)
 80021b2:	f000 fbcd 	bl	8002950 <MLX90614_SetEmissivity>
  GPS_Init();
 80021b6:	f7ff fcff 	bl	8001bb8 <GPS_Init>

HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13, GPIO_PIN_SET);
 80021ba:	2201      	movs	r2, #1
 80021bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021c0:	484f      	ldr	r0, [pc, #316]	; (8002300 <main+0x18c>)
 80021c2:	f001 fe72 	bl	8003eaa <HAL_GPIO_WritePin>


//	  HAL_Delay(1000);
//	  {

	  temperature = BMP180_GetRawTemperature();
 80021c6:	f7ff f8f9 	bl	80013bc <BMP180_GetRawTemperature>
 80021ca:	4603      	mov	r3, r0
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7fe fd85 	bl	8000cdc <__aeabi_i2f>
 80021d2:	4602      	mov	r2, r0
 80021d4:	4b4b      	ldr	r3, [pc, #300]	; (8002304 <main+0x190>)
 80021d6:	601a      	str	r2, [r3, #0]
	  pressure = BMP180_GetPressure();
 80021d8:	f7ff f934 	bl	8001444 <BMP180_GetPressure>
 80021dc:	4603      	mov	r3, r0
 80021de:	461a      	mov	r2, r3
 80021e0:	4b49      	ldr	r3, [pc, #292]	; (8002308 <main+0x194>)
 80021e2:	601a      	str	r2, [r3, #0]
	  MLX90614_ReadAmbientTemperature(&AmbientTemperature);
 80021e4:	4849      	ldr	r0, [pc, #292]	; (800230c <main+0x198>)
 80021e6:	f000 fb57 	bl	8002898 <MLX90614_ReadAmbientTemperature>
	  sound = HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_12);
 80021ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021ee:	4848      	ldr	r0, [pc, #288]	; (8002310 <main+0x19c>)
 80021f0:	f001 fe44 	bl	8003e7c <HAL_GPIO_ReadPin>
 80021f4:	4603      	mov	r3, r0
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7fe fd6c 	bl	8000cd4 <__aeabi_ui2f>
 80021fc:	4602      	mov	r2, r0
 80021fe:	4b45      	ldr	r3, [pc, #276]	; (8002314 <main+0x1a0>)
 8002200:	601a      	str	r2, [r3, #0]
	  MLX90614_ReadObjectTemperature(&ObjectTemperature);
 8002202:	4845      	ldr	r0, [pc, #276]	; (8002318 <main+0x1a4>)
 8002204:	f000 fb63 	bl	80028ce <MLX90614_ReadObjectTemperature>
	  MLX90614_GetEmissivity(&Emissivity);
 8002208:	4844      	ldr	r0, [pc, #272]	; (800231c <main+0x1a8>)
 800220a:	f000 fb7b 	bl	8002904 <MLX90614_GetEmissivity>
	  AirQuality = airQuality();
 800220e:	f7ff fef7 	bl	8002000 <airQuality>
 8002212:	4602      	mov	r2, r0
 8002214:	4b42      	ldr	r3, [pc, #264]	; (8002320 <main+0x1ac>)
 8002216:	601a      	str	r2, [r3, #0]
	  DHT11data = DHT_getData (DHT11);
 8002218:	4c42      	ldr	r4, [pc, #264]	; (8002324 <main+0x1b0>)
 800221a:	463b      	mov	r3, r7
 800221c:	2100      	movs	r1, #0
 800221e:	4618      	mov	r0, r3
 8002220:	f7ff fa8a 	bl	8001738 <DHT_getData>
 8002224:	4622      	mov	r2, r4
 8002226:	463b      	mov	r3, r7
 8002228:	e893 0003 	ldmia.w	r3, {r0, r1}
 800222c:	e882 0003 	stmia.w	r2, {r0, r1}

 	  uint32_t package1[5] = {0,0,0,0,0};
 8002230:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	605a      	str	r2, [r3, #4]
 800223a:	609a      	str	r2, [r3, #8]
 800223c:	60da      	str	r2, [r3, #12]
 800223e:	611a      	str	r2, [r3, #16]
	  uint32_t package2[5] = {0,0,0,0,0};
 8002240:	f107 0320 	add.w	r3, r7, #32
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	605a      	str	r2, [r3, #4]
 800224a:	609a      	str	r2, [r3, #8]
 800224c:	60da      	str	r2, [r3, #12]
 800224e:	611a      	str	r2, [r3, #16]
	  uint32_t package3[5] = {0,0,0,0,0};
 8002250:	f107 030c 	add.w	r3, r7, #12
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	605a      	str	r2, [r3, #4]
 800225a:	609a      	str	r2, [r3, #8]
 800225c:	60da      	str	r2, [r3, #12]
 800225e:	611a      	str	r2, [r3, #16]
//确定包头
	  package1[0] = 0;
 8002260:	2300      	movs	r3, #0
 8002262:	637b      	str	r3, [r7, #52]	; 0x34
	  package2[0] = 1;
 8002264:	2301      	movs	r3, #1
 8002266:	623b      	str	r3, [r7, #32]
	  package3[0] = 2;
 8002268:	2302      	movs	r3, #2
 800226a:	60fb      	str	r3, [r7, #12]
//包1
	  package1[1] = pressure;
 800226c:	4b26      	ldr	r3, [pc, #152]	; (8002308 <main+0x194>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	63bb      	str	r3, [r7, #56]	; 0x38
	  package1[2] = temperature;
 8002272:	4b24      	ldr	r3, [pc, #144]	; (8002304 <main+0x190>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4618      	mov	r0, r3
 8002278:	f7fe ff70 	bl	800115c <__aeabi_f2uiz>
 800227c:	4603      	mov	r3, r0
 800227e:	63fb      	str	r3, [r7, #60]	; 0x3c
	  memcpy(&package1[3],&AmbientTemperature,4);
 8002280:	4b22      	ldr	r3, [pc, #136]	; (800230c <main+0x198>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	643b      	str	r3, [r7, #64]	; 0x40
	  memcpy(&package1[4],&ObjectTemperature,4);
 8002286:	4b24      	ldr	r3, [pc, #144]	; (8002318 <main+0x1a4>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	647b      	str	r3, [r7, #68]	; 0x44

//包2
	  memcpy(&package2[1],&AirQuality,4);
 800228c:	4b24      	ldr	r3, [pc, #144]	; (8002320 <main+0x1ac>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	627b      	str	r3, [r7, #36]	; 0x24
	  memcpy(&package2[2],&sound,4);
 8002292:	4b20      	ldr	r3, [pc, #128]	; (8002314 <main+0x1a0>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	62bb      	str	r3, [r7, #40]	; 0x28

	  //直接把GPS经度（float类型） memcpy到数据包内
	  memcpy(&package2[3],&GPS.dec_longitude,4);
 8002298:	4b23      	ldr	r3, [pc, #140]	; (8002328 <main+0x1b4>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	62fb      	str	r3, [r7, #44]	; 0x2c
	  memcpy(&package2[4],&GPS.dec_latitude,4);
 800229e:	4b22      	ldr	r3, [pc, #136]	; (8002328 <main+0x1b4>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	633b      	str	r3, [r7, #48]	; 0x30
//包3
	  memcpy(&package3[1],&GPS.msl_altitude,4);
 80022a4:	4b20      	ldr	r3, [pc, #128]	; (8002328 <main+0x1b4>)
 80022a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a8:	613b      	str	r3, [r7, #16]
	  memcpy(&package3[2],&GPS.speed_km,4);
 80022aa:	4b1f      	ldr	r3, [pc, #124]	; (8002328 <main+0x1b4>)
 80022ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022ae:	617b      	str	r3, [r7, #20]
	  package3[3] = GPS.satelites;
 80022b0:	4b1d      	ldr	r3, [pc, #116]	; (8002328 <main+0x1b4>)
 80022b2:	6a1b      	ldr	r3, [r3, #32]
 80022b4:	61bb      	str	r3, [r7, #24]
	  memcpy(&package3[4],&DHT11data.hum,4);
 80022b6:	4b1b      	ldr	r3, [pc, #108]	; (8002324 <main+0x1b0>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	61fb      	str	r3, [r7, #28]

	  HAL_UART_Transmit(&huart3,package1,20,0xFFFF);
 80022bc:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80022c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022c4:	2214      	movs	r2, #20
 80022c6:	480b      	ldr	r0, [pc, #44]	; (80022f4 <main+0x180>)
 80022c8:	f004 f879 	bl	80063be <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart3,package2,20,0xFFFF);
 80022cc:	f107 0120 	add.w	r1, r7, #32
 80022d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022d4:	2214      	movs	r2, #20
 80022d6:	4807      	ldr	r0, [pc, #28]	; (80022f4 <main+0x180>)
 80022d8:	f004 f871 	bl	80063be <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart3,package3,24,0xFFFF);
 80022dc:	f107 010c 	add.w	r1, r7, #12
 80022e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022e4:	2218      	movs	r2, #24
 80022e6:	4803      	ldr	r0, [pc, #12]	; (80022f4 <main+0x180>)
 80022e8:	f004 f869 	bl	80063be <HAL_UART_Transmit>
  {
 80022ec:	e76b      	b.n	80021c6 <main+0x52>
 80022ee:	bf00      	nop
 80022f0:	200003a4 	.word	0x200003a4
 80022f4:	200003b4 	.word	0x200003b4
 80022f8:	2000033c 	.word	0x2000033c
 80022fc:	3f7c28f6 	.word	0x3f7c28f6
 8002300:	40011000 	.word	0x40011000
 8002304:	20000204 	.word	0x20000204
 8002308:	2000020c 	.word	0x2000020c
 800230c:	200003a0 	.word	0x200003a0
 8002310:	40010800 	.word	0x40010800
 8002314:	20000200 	.word	0x20000200
 8002318:	20000390 	.word	0x20000390
 800231c:	20000398 	.word	0x20000398
 8002320:	20000208 	.word	0x20000208
 8002324:	200003a8 	.word	0x200003a8
 8002328:	20000264 	.word	0x20000264

0800232c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b094      	sub	sp, #80	; 0x50
 8002330:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002332:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002336:	2228      	movs	r2, #40	; 0x28
 8002338:	2100      	movs	r1, #0
 800233a:	4618      	mov	r0, r3
 800233c:	f004 fc52 	bl	8006be4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002340:	f107 0314 	add.w	r3, r7, #20
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	605a      	str	r2, [r3, #4]
 800234a:	609a      	str	r2, [r3, #8]
 800234c:	60da      	str	r2, [r3, #12]
 800234e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002350:	1d3b      	adds	r3, r7, #4
 8002352:	2200      	movs	r2, #0
 8002354:	601a      	str	r2, [r3, #0]
 8002356:	605a      	str	r2, [r3, #4]
 8002358:	609a      	str	r2, [r3, #8]
 800235a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800235c:	2301      	movs	r3, #1
 800235e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002360:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002364:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002366:	2300      	movs	r3, #0
 8002368:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800236a:	2301      	movs	r3, #1
 800236c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800236e:	2302      	movs	r3, #2
 8002370:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002372:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002376:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002378:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800237c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800237e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002382:	4618      	mov	r0, r3
 8002384:	f003 fa40 	bl	8005808 <HAL_RCC_OscConfig>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800238e:	f000 f929 	bl	80025e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002392:	230f      	movs	r3, #15
 8002394:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002396:	2302      	movs	r3, #2
 8002398:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800239a:	2300      	movs	r3, #0
 800239c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800239e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023a2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023a4:	2300      	movs	r3, #0
 80023a6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80023a8:	f107 0314 	add.w	r3, r7, #20
 80023ac:	2102      	movs	r1, #2
 80023ae:	4618      	mov	r0, r3
 80023b0:	f003 fcaa 	bl	8005d08 <HAL_RCC_ClockConfig>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <SystemClock_Config+0x92>
  {
    Error_Handler();
 80023ba:	f000 f913 	bl	80025e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80023be:	2302      	movs	r3, #2
 80023c0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80023c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023c6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023c8:	1d3b      	adds	r3, r7, #4
 80023ca:	4618      	mov	r0, r3
 80023cc:	f003 fe38 	bl	8006040 <HAL_RCCEx_PeriphCLKConfig>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <SystemClock_Config+0xae>
  {
    Error_Handler();
 80023d6:	f000 f905 	bl	80025e4 <Error_Handler>
  }
}
 80023da:	bf00      	nop
 80023dc:	3750      	adds	r7, #80	; 0x50
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
	...

080023e4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
//串口3连接了蓝牙
	 if(huart->Instance == USART2)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a75      	ldr	r2, [pc, #468]	; (80025c8 <HAL_UART_RxCpltCallback+0x1e4>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d101      	bne.n	80023fa <HAL_UART_RxCpltCallback+0x16>
	      {


		 	GPS_UART_CallBack();
 80023f6:	f7ff fbed 	bl	8001bd4 <GPS_UART_CallBack>

			    // 重新注册一次，要不然下次收不到了（上个函数内部已经注册）
	      }
	 if(huart->Instance == USART3)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a73      	ldr	r2, [pc, #460]	; (80025cc <HAL_UART_RxCpltCallback+0x1e8>)
 8002400:	4293      	cmp	r3, r2
 8002402:	f040 80dc 	bne.w	80025be <HAL_UART_RxCpltCallback+0x1da>
	      {
			//收到前驱信息
					if (uart3_rxbuf[0] == 0x03) {
 8002406:	4b72      	ldr	r3, [pc, #456]	; (80025d0 <HAL_UART_RxCpltCallback+0x1ec>)
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	2b03      	cmp	r3, #3
 800240c:	d102      	bne.n	8002414 <HAL_UART_RxCpltCallback+0x30>
						WheelDrive = 0x03;
 800240e:	4b71      	ldr	r3, [pc, #452]	; (80025d4 <HAL_UART_RxCpltCallback+0x1f0>)
 8002410:	2203      	movs	r2, #3
 8002412:	701a      	strb	r2, [r3, #0]
					}
			//收到四驱信息
					if (uart3_rxbuf[0] == 0x04) {
 8002414:	4b6e      	ldr	r3, [pc, #440]	; (80025d0 <HAL_UART_RxCpltCallback+0x1ec>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	2b04      	cmp	r3, #4
 800241a:	d102      	bne.n	8002422 <HAL_UART_RxCpltCallback+0x3e>
						WheelDrive = 0x04;
 800241c:	4b6d      	ldr	r3, [pc, #436]	; (80025d4 <HAL_UART_RxCpltCallback+0x1f0>)
 800241e:	2204      	movs	r2, #4
 8002420:	701a      	strb	r2, [r3, #0]
					}
			//收到后驱信息
					if (uart3_rxbuf[0] == 0x05) {
 8002422:	4b6b      	ldr	r3, [pc, #428]	; (80025d0 <HAL_UART_RxCpltCallback+0x1ec>)
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	2b05      	cmp	r3, #5
 8002428:	d102      	bne.n	8002430 <HAL_UART_RxCpltCallback+0x4c>
						WheelDrive = 0x05;
 800242a:	4b6a      	ldr	r3, [pc, #424]	; (80025d4 <HAL_UART_RxCpltCallback+0x1f0>)
 800242c:	2205      	movs	r2, #5
 800242e:	701a      	strb	r2, [r3, #0]




			//收到前进信息
			if (uart3_rxbuf[0] == 0xAA) {
 8002430:	4b67      	ldr	r3, [pc, #412]	; (80025d0 <HAL_UART_RxCpltCallback+0x1ec>)
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	2baa      	cmp	r3, #170	; 0xaa
 8002436:	d139      	bne.n	80024ac <HAL_UART_RxCpltCallback+0xc8>

				if(WheelDrive == 0x03)
 8002438:	4b66      	ldr	r3, [pc, #408]	; (80025d4 <HAL_UART_RxCpltCallback+0x1f0>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	2b03      	cmp	r3, #3
 800243e:	d10c      	bne.n	800245a <HAL_UART_RxCpltCallback+0x76>
				{
				  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8, GPIO_PIN_RESET);
 8002440:	2200      	movs	r2, #0
 8002442:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002446:	4864      	ldr	r0, [pc, #400]	; (80025d8 <HAL_UART_RxCpltCallback+0x1f4>)
 8002448:	f001 fd2f 	bl	8003eaa <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9, GPIO_PIN_SET);
 800244c:	2201      	movs	r2, #1
 800244e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002452:	4861      	ldr	r0, [pc, #388]	; (80025d8 <HAL_UART_RxCpltCallback+0x1f4>)
 8002454:	f001 fd29 	bl	8003eaa <HAL_GPIO_WritePin>
 8002458:	e028      	b.n	80024ac <HAL_UART_RxCpltCallback+0xc8>
				}
				else if (WheelDrive == 0x05)
 800245a:	4b5e      	ldr	r3, [pc, #376]	; (80025d4 <HAL_UART_RxCpltCallback+0x1f0>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	2b05      	cmp	r3, #5
 8002460:	d10c      	bne.n	800247c <HAL_UART_RxCpltCallback+0x98>
				{
				  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10, GPIO_PIN_SET);
 8002462:	2201      	movs	r2, #1
 8002464:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002468:	485b      	ldr	r0, [pc, #364]	; (80025d8 <HAL_UART_RxCpltCallback+0x1f4>)
 800246a:	f001 fd1e 	bl	8003eaa <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11, GPIO_PIN_RESET);
 800246e:	2200      	movs	r2, #0
 8002470:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002474:	4858      	ldr	r0, [pc, #352]	; (80025d8 <HAL_UART_RxCpltCallback+0x1f4>)
 8002476:	f001 fd18 	bl	8003eaa <HAL_GPIO_WritePin>
 800247a:	e017      	b.n	80024ac <HAL_UART_RxCpltCallback+0xc8>
				}
				else {
				  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8, GPIO_PIN_RESET);
 800247c:	2200      	movs	r2, #0
 800247e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002482:	4855      	ldr	r0, [pc, #340]	; (80025d8 <HAL_UART_RxCpltCallback+0x1f4>)
 8002484:	f001 fd11 	bl	8003eaa <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9, GPIO_PIN_SET);
 8002488:	2201      	movs	r2, #1
 800248a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800248e:	4852      	ldr	r0, [pc, #328]	; (80025d8 <HAL_UART_RxCpltCallback+0x1f4>)
 8002490:	f001 fd0b 	bl	8003eaa <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10, GPIO_PIN_SET);
 8002494:	2201      	movs	r2, #1
 8002496:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800249a:	484f      	ldr	r0, [pc, #316]	; (80025d8 <HAL_UART_RxCpltCallback+0x1f4>)
 800249c:	f001 fd05 	bl	8003eaa <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11, GPIO_PIN_RESET);
 80024a0:	2200      	movs	r2, #0
 80024a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024a6:	484c      	ldr	r0, [pc, #304]	; (80025d8 <HAL_UART_RxCpltCallback+0x1f4>)
 80024a8:	f001 fcff 	bl	8003eaa <HAL_GPIO_WritePin>
				}
			}
			//收到后退信息
			if (uart3_rxbuf[0] == 0xBB) {
 80024ac:	4b48      	ldr	r3, [pc, #288]	; (80025d0 <HAL_UART_RxCpltCallback+0x1ec>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	2bbb      	cmp	r3, #187	; 0xbb
 80024b2:	d139      	bne.n	8002528 <HAL_UART_RxCpltCallback+0x144>

				if(WheelDrive == 0x03)
 80024b4:	4b47      	ldr	r3, [pc, #284]	; (80025d4 <HAL_UART_RxCpltCallback+0x1f0>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	2b03      	cmp	r3, #3
 80024ba:	d10c      	bne.n	80024d6 <HAL_UART_RxCpltCallback+0xf2>
				{
				  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8, GPIO_PIN_SET);
 80024bc:	2201      	movs	r2, #1
 80024be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024c2:	4845      	ldr	r0, [pc, #276]	; (80025d8 <HAL_UART_RxCpltCallback+0x1f4>)
 80024c4:	f001 fcf1 	bl	8003eaa <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9, GPIO_PIN_RESET);
 80024c8:	2200      	movs	r2, #0
 80024ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024ce:	4842      	ldr	r0, [pc, #264]	; (80025d8 <HAL_UART_RxCpltCallback+0x1f4>)
 80024d0:	f001 fceb 	bl	8003eaa <HAL_GPIO_WritePin>
 80024d4:	e028      	b.n	8002528 <HAL_UART_RxCpltCallback+0x144>
				}
				else if (WheelDrive == 0x05)
 80024d6:	4b3f      	ldr	r3, [pc, #252]	; (80025d4 <HAL_UART_RxCpltCallback+0x1f0>)
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	2b05      	cmp	r3, #5
 80024dc:	d10c      	bne.n	80024f8 <HAL_UART_RxCpltCallback+0x114>
				{
				  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10, GPIO_PIN_RESET);
 80024de:	2200      	movs	r2, #0
 80024e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80024e4:	483c      	ldr	r0, [pc, #240]	; (80025d8 <HAL_UART_RxCpltCallback+0x1f4>)
 80024e6:	f001 fce0 	bl	8003eaa <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11, GPIO_PIN_SET);
 80024ea:	2201      	movs	r2, #1
 80024ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024f0:	4839      	ldr	r0, [pc, #228]	; (80025d8 <HAL_UART_RxCpltCallback+0x1f4>)
 80024f2:	f001 fcda 	bl	8003eaa <HAL_GPIO_WritePin>
 80024f6:	e017      	b.n	8002528 <HAL_UART_RxCpltCallback+0x144>
				}
				else {
				  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8, GPIO_PIN_SET);
 80024f8:	2201      	movs	r2, #1
 80024fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024fe:	4836      	ldr	r0, [pc, #216]	; (80025d8 <HAL_UART_RxCpltCallback+0x1f4>)
 8002500:	f001 fcd3 	bl	8003eaa <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9, GPIO_PIN_RESET);
 8002504:	2200      	movs	r2, #0
 8002506:	f44f 7100 	mov.w	r1, #512	; 0x200
 800250a:	4833      	ldr	r0, [pc, #204]	; (80025d8 <HAL_UART_RxCpltCallback+0x1f4>)
 800250c:	f001 fccd 	bl	8003eaa <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10, GPIO_PIN_RESET);
 8002510:	2200      	movs	r2, #0
 8002512:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002516:	4830      	ldr	r0, [pc, #192]	; (80025d8 <HAL_UART_RxCpltCallback+0x1f4>)
 8002518:	f001 fcc7 	bl	8003eaa <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11, GPIO_PIN_SET);
 800251c:	2201      	movs	r2, #1
 800251e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002522:	482d      	ldr	r0, [pc, #180]	; (80025d8 <HAL_UART_RxCpltCallback+0x1f4>)
 8002524:	f001 fcc1 	bl	8003eaa <HAL_GPIO_WritePin>
				}

			}

			//收到左转信息
					if (uart3_rxbuf[0] == 0xCC) {
 8002528:	4b29      	ldr	r3, [pc, #164]	; (80025d0 <HAL_UART_RxCpltCallback+0x1ec>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	2bcc      	cmp	r3, #204	; 0xcc
 800252e:	d109      	bne.n	8002544 <HAL_UART_RxCpltCallback+0x160>

						  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0, GPIO_PIN_RESET);
 8002530:	2200      	movs	r2, #0
 8002532:	2101      	movs	r1, #1
 8002534:	4829      	ldr	r0, [pc, #164]	; (80025dc <HAL_UART_RxCpltCallback+0x1f8>)
 8002536:	f001 fcb8 	bl	8003eaa <HAL_GPIO_WritePin>
						  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1, GPIO_PIN_SET);
 800253a:	2201      	movs	r2, #1
 800253c:	2102      	movs	r1, #2
 800253e:	4827      	ldr	r0, [pc, #156]	; (80025dc <HAL_UART_RxCpltCallback+0x1f8>)
 8002540:	f001 fcb3 	bl	8003eaa <HAL_GPIO_WritePin>
					}



			//收到右转信息
					if (uart3_rxbuf[0] == 0xDD) {
 8002544:	4b22      	ldr	r3, [pc, #136]	; (80025d0 <HAL_UART_RxCpltCallback+0x1ec>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	2bdd      	cmp	r3, #221	; 0xdd
 800254a:	d109      	bne.n	8002560 <HAL_UART_RxCpltCallback+0x17c>

						  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0, GPIO_PIN_SET);
 800254c:	2201      	movs	r2, #1
 800254e:	2101      	movs	r1, #1
 8002550:	4822      	ldr	r0, [pc, #136]	; (80025dc <HAL_UART_RxCpltCallback+0x1f8>)
 8002552:	f001 fcaa 	bl	8003eaa <HAL_GPIO_WritePin>
						  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1, GPIO_PIN_RESET);
 8002556:	2200      	movs	r2, #0
 8002558:	2102      	movs	r1, #2
 800255a:	4820      	ldr	r0, [pc, #128]	; (80025dc <HAL_UART_RxCpltCallback+0x1f8>)
 800255c:	f001 fca5 	bl	8003eaa <HAL_GPIO_WritePin>

					}
			//收到右转信息
			if (uart3_rxbuf[0] == 0x02) {
 8002560:	4b1b      	ldr	r3, [pc, #108]	; (80025d0 <HAL_UART_RxCpltCallback+0x1ec>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	2b02      	cmp	r3, #2
 8002566:	d109      	bne.n	800257c <HAL_UART_RxCpltCallback+0x198>

				  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0, GPIO_PIN_RESET);
 8002568:	2200      	movs	r2, #0
 800256a:	2101      	movs	r1, #1
 800256c:	481b      	ldr	r0, [pc, #108]	; (80025dc <HAL_UART_RxCpltCallback+0x1f8>)
 800256e:	f001 fc9c 	bl	8003eaa <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1, GPIO_PIN_RESET);
 8002572:	2200      	movs	r2, #0
 8002574:	2102      	movs	r1, #2
 8002576:	4819      	ldr	r0, [pc, #100]	; (80025dc <HAL_UART_RxCpltCallback+0x1f8>)
 8002578:	f001 fc97 	bl	8003eaa <HAL_GPIO_WritePin>




			//停止信息（待机 00 ）
			if (uart3_rxbuf[0] == 0x01) {
 800257c:	4b14      	ldr	r3, [pc, #80]	; (80025d0 <HAL_UART_RxCpltCallback+0x1ec>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d117      	bne.n	80025b4 <HAL_UART_RxCpltCallback+0x1d0>

				  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8, GPIO_PIN_RESET);
 8002584:	2200      	movs	r2, #0
 8002586:	f44f 7180 	mov.w	r1, #256	; 0x100
 800258a:	4813      	ldr	r0, [pc, #76]	; (80025d8 <HAL_UART_RxCpltCallback+0x1f4>)
 800258c:	f001 fc8d 	bl	8003eaa <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9, GPIO_PIN_RESET);
 8002590:	2200      	movs	r2, #0
 8002592:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002596:	4810      	ldr	r0, [pc, #64]	; (80025d8 <HAL_UART_RxCpltCallback+0x1f4>)
 8002598:	f001 fc87 	bl	8003eaa <HAL_GPIO_WritePin>
				  	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10, GPIO_PIN_RESET);
 800259c:	2200      	movs	r2, #0
 800259e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80025a2:	480d      	ldr	r0, [pc, #52]	; (80025d8 <HAL_UART_RxCpltCallback+0x1f4>)
 80025a4:	f001 fc81 	bl	8003eaa <HAL_GPIO_WritePin>
				  	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11, GPIO_PIN_RESET);
 80025a8:	2200      	movs	r2, #0
 80025aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025ae:	480a      	ldr	r0, [pc, #40]	; (80025d8 <HAL_UART_RxCpltCallback+0x1f4>)
 80025b0:	f001 fc7b 	bl	8003eaa <HAL_GPIO_WritePin>

			}

			HAL_UART_Receive_IT(&huart3, uart3_rxbuf, 1);       // 重新注册一次，要不然下次收不到了
 80025b4:	2201      	movs	r2, #1
 80025b6:	4906      	ldr	r1, [pc, #24]	; (80025d0 <HAL_UART_RxCpltCallback+0x1ec>)
 80025b8:	4809      	ldr	r0, [pc, #36]	; (80025e0 <HAL_UART_RxCpltCallback+0x1fc>)
 80025ba:	f003 ff92 	bl	80064e2 <HAL_UART_Receive_IT>
	      }



}
 80025be:	bf00      	nop
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	40004400 	.word	0x40004400
 80025cc:	40004800 	.word	0x40004800
 80025d0:	200003a4 	.word	0x200003a4
 80025d4:	20000000 	.word	0x20000000
 80025d8:	40010800 	.word	0x40010800
 80025dc:	40010c00 	.word	0x40010c00
 80025e0:	200003b4 	.word	0x200003b4

080025e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80025e8:	bf00      	nop
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bc80      	pop	{r7}
 80025ee:	4770      	bx	lr

080025f0 <MLX90614_Read16>:

uint8_t ObjectTemperature;
uint8_t AmbientTemperature;

MLX90614_STATUS MLX90614_Read16(uint8_t Register, uint16_t *Result)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b088      	sub	sp, #32
 80025f4:	af04      	add	r7, sp, #16
 80025f6:	4603      	mov	r3, r0
 80025f8:	6039      	str	r1, [r7, #0]
 80025fa:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp[2];

	if(HAL_OK != HAL_I2C_Mem_Read(mlx90614_i2c, MLX90614_DEFAULT_ADDRESS, Register, 1, tmp, 2, 10))
 80025fc:	4b11      	ldr	r3, [pc, #68]	; (8002644 <MLX90614_Read16+0x54>)
 80025fe:	6818      	ldr	r0, [r3, #0]
 8002600:	79fb      	ldrb	r3, [r7, #7]
 8002602:	b29a      	uxth	r2, r3
 8002604:	230a      	movs	r3, #10
 8002606:	9302      	str	r3, [sp, #8]
 8002608:	2302      	movs	r3, #2
 800260a:	9301      	str	r3, [sp, #4]
 800260c:	f107 030c 	add.w	r3, r7, #12
 8002610:	9300      	str	r3, [sp, #0]
 8002612:	2301      	movs	r3, #1
 8002614:	21b4      	movs	r1, #180	; 0xb4
 8002616:	f002 f9eb 	bl	80049f0 <HAL_I2C_Mem_Read>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <MLX90614_Read16+0x34>
	{
		return MLX90614_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e00a      	b.n	800263a <MLX90614_Read16+0x4a>
	}

	*Result = (uint16_t)tmp[1]<<8 | tmp[0];
 8002624:	7b7b      	ldrb	r3, [r7, #13]
 8002626:	021b      	lsls	r3, r3, #8
 8002628:	b21a      	sxth	r2, r3
 800262a:	7b3b      	ldrb	r3, [r7, #12]
 800262c:	b21b      	sxth	r3, r3
 800262e:	4313      	orrs	r3, r2
 8002630:	b21b      	sxth	r3, r3
 8002632:	b29a      	uxth	r2, r3
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	801a      	strh	r2, [r3, #0]

	return MLX90614_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	200003b0 	.word	0x200003b0

08002648 <MLX90614_Read16Eeprom>:

MLX90614_STATUS MLX90614_Read16Eeprom(uint8_t Address, uint16_t *Result)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b088      	sub	sp, #32
 800264c:	af04      	add	r7, sp, #16
 800264e:	4603      	mov	r3, r0
 8002650:	6039      	str	r1, [r7, #0]
 8002652:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp[2];

	Address &= 0x1F;
 8002654:	79fb      	ldrb	r3, [r7, #7]
 8002656:	f003 031f 	and.w	r3, r3, #31
 800265a:	71fb      	strb	r3, [r7, #7]
	Address |= 0x20;
 800265c:	79fb      	ldrb	r3, [r7, #7]
 800265e:	f043 0320 	orr.w	r3, r3, #32
 8002662:	71fb      	strb	r3, [r7, #7]

	if(HAL_OK != HAL_I2C_Mem_Read(mlx90614_i2c, MLX90614_DEFAULT_ADDRESS, Address, 1, tmp, 2, 10))
 8002664:	4b11      	ldr	r3, [pc, #68]	; (80026ac <MLX90614_Read16Eeprom+0x64>)
 8002666:	6818      	ldr	r0, [r3, #0]
 8002668:	79fb      	ldrb	r3, [r7, #7]
 800266a:	b29a      	uxth	r2, r3
 800266c:	230a      	movs	r3, #10
 800266e:	9302      	str	r3, [sp, #8]
 8002670:	2302      	movs	r3, #2
 8002672:	9301      	str	r3, [sp, #4]
 8002674:	f107 030c 	add.w	r3, r7, #12
 8002678:	9300      	str	r3, [sp, #0]
 800267a:	2301      	movs	r3, #1
 800267c:	21b4      	movs	r1, #180	; 0xb4
 800267e:	f002 f9b7 	bl	80049f0 <HAL_I2C_Mem_Read>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <MLX90614_Read16Eeprom+0x44>
	{
		return MLX90614_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e00a      	b.n	80026a2 <MLX90614_Read16Eeprom+0x5a>
	}

	*Result = (uint16_t)tmp[1]<<8 | tmp[0];
 800268c:	7b7b      	ldrb	r3, [r7, #13]
 800268e:	021b      	lsls	r3, r3, #8
 8002690:	b21a      	sxth	r2, r3
 8002692:	7b3b      	ldrb	r3, [r7, #12]
 8002694:	b21b      	sxth	r3, r3
 8002696:	4313      	orrs	r3, r2
 8002698:	b21b      	sxth	r3, r3
 800269a:	b29a      	uxth	r2, r3
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	801a      	strh	r2, [r3, #0]

	return MLX90614_OK;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3710      	adds	r7, #16
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	200003b0 	.word	0x200003b0

080026b0 <crc8>:


uint8_t crc8(uint8_t InCrc, uint8_t InData)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	4603      	mov	r3, r0
 80026b8:	460a      	mov	r2, r1
 80026ba:	71fb      	strb	r3, [r7, #7]
 80026bc:	4613      	mov	r3, r2
 80026be:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	uint8_t Data;
	Data = InCrc ^= InData;
 80026c0:	79fa      	ldrb	r2, [r7, #7]
 80026c2:	79bb      	ldrb	r3, [r7, #6]
 80026c4:	4053      	eors	r3, r2
 80026c6:	71fb      	strb	r3, [r7, #7]
 80026c8:	79fb      	ldrb	r3, [r7, #7]
 80026ca:	73bb      	strb	r3, [r7, #14]
	for ( i = 0; i < 8; i++ )
 80026cc:	2300      	movs	r3, #0
 80026ce:	73fb      	strb	r3, [r7, #15]
 80026d0:	e011      	b.n	80026f6 <crc8+0x46>
	{
		if (( Data & 0x80 ) != 0 )
 80026d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	da07      	bge.n	80026ea <crc8+0x3a>
		{
			Data <<= 1;
 80026da:	7bbb      	ldrb	r3, [r7, #14]
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	73bb      	strb	r3, [r7, #14]
			Data ^= 0x07;
 80026e0:	7bbb      	ldrb	r3, [r7, #14]
 80026e2:	f083 0307 	eor.w	r3, r3, #7
 80026e6:	73bb      	strb	r3, [r7, #14]
 80026e8:	e002      	b.n	80026f0 <crc8+0x40>
		}
		else
		{
			Data <<= 1;
 80026ea:	7bbb      	ldrb	r3, [r7, #14]
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	73bb      	strb	r3, [r7, #14]
	for ( i = 0; i < 8; i++ )
 80026f0:	7bfb      	ldrb	r3, [r7, #15]
 80026f2:	3301      	adds	r3, #1
 80026f4:	73fb      	strb	r3, [r7, #15]
 80026f6:	7bfb      	ldrb	r3, [r7, #15]
 80026f8:	2b07      	cmp	r3, #7
 80026fa:	d9ea      	bls.n	80026d2 <crc8+0x22>
		}
	}
	return Data;
 80026fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3714      	adds	r7, #20
 8002702:	46bd      	mov	sp, r7
 8002704:	bc80      	pop	{r7}
 8002706:	4770      	bx	lr

08002708 <MLX90614_Write16Crc>:

MLX90614_STATUS MLX90614_Write16Crc(uint8_t Address, uint16_t Value)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b088      	sub	sp, #32
 800270c:	af04      	add	r7, sp, #16
 800270e:	4603      	mov	r3, r0
 8002710:	460a      	mov	r2, r1
 8002712:	71fb      	strb	r3, [r7, #7]
 8002714:	4613      	mov	r3, r2
 8002716:	80bb      	strh	r3, [r7, #4]
	uint8_t Crc;
	uint8_t tmp[3];

	Address &= 0x1F;
 8002718:	79fb      	ldrb	r3, [r7, #7]
 800271a:	f003 031f 	and.w	r3, r3, #31
 800271e:	71fb      	strb	r3, [r7, #7]
	Address |= 0x20;
 8002720:	79fb      	ldrb	r3, [r7, #7]
 8002722:	f043 0320 	orr.w	r3, r3, #32
 8002726:	71fb      	strb	r3, [r7, #7]

	Crc = crc8(0, MLX90614_DEFAULT_ADDRESS);
 8002728:	21b4      	movs	r1, #180	; 0xb4
 800272a:	2000      	movs	r0, #0
 800272c:	f7ff ffc0 	bl	80026b0 <crc8>
 8002730:	4603      	mov	r3, r0
 8002732:	73fb      	strb	r3, [r7, #15]
	Crc = crc8(Crc, Address);
 8002734:	79fa      	ldrb	r2, [r7, #7]
 8002736:	7bfb      	ldrb	r3, [r7, #15]
 8002738:	4611      	mov	r1, r2
 800273a:	4618      	mov	r0, r3
 800273c:	f7ff ffb8 	bl	80026b0 <crc8>
 8002740:	4603      	mov	r3, r0
 8002742:	73fb      	strb	r3, [r7, #15]
	Crc = crc8(Crc, Value & 0xFF);
 8002744:	88bb      	ldrh	r3, [r7, #4]
 8002746:	b2da      	uxtb	r2, r3
 8002748:	7bfb      	ldrb	r3, [r7, #15]
 800274a:	4611      	mov	r1, r2
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff ffaf 	bl	80026b0 <crc8>
 8002752:	4603      	mov	r3, r0
 8002754:	73fb      	strb	r3, [r7, #15]
	Crc = crc8(Crc, Value>>8);
 8002756:	88bb      	ldrh	r3, [r7, #4]
 8002758:	0a1b      	lsrs	r3, r3, #8
 800275a:	b29b      	uxth	r3, r3
 800275c:	b2da      	uxtb	r2, r3
 800275e:	7bfb      	ldrb	r3, [r7, #15]
 8002760:	4611      	mov	r1, r2
 8002762:	4618      	mov	r0, r3
 8002764:	f7ff ffa4 	bl	80026b0 <crc8>
 8002768:	4603      	mov	r3, r0
 800276a:	73fb      	strb	r3, [r7, #15]

	tmp[0] = Value & 0xFF;
 800276c:	88bb      	ldrh	r3, [r7, #4]
 800276e:	b2db      	uxtb	r3, r3
 8002770:	733b      	strb	r3, [r7, #12]
	tmp[1] = Value>>8;
 8002772:	88bb      	ldrh	r3, [r7, #4]
 8002774:	0a1b      	lsrs	r3, r3, #8
 8002776:	b29b      	uxth	r3, r3
 8002778:	b2db      	uxtb	r3, r3
 800277a:	737b      	strb	r3, [r7, #13]
	tmp[2] = Crc;
 800277c:	7bfb      	ldrb	r3, [r7, #15]
 800277e:	73bb      	strb	r3, [r7, #14]

	if(HAL_OK != HAL_I2C_Mem_Write(mlx90614_i2c, MLX90614_DEFAULT_ADDRESS, Address, 1, tmp, 3, 10))
 8002780:	4b0c      	ldr	r3, [pc, #48]	; (80027b4 <MLX90614_Write16Crc+0xac>)
 8002782:	6818      	ldr	r0, [r3, #0]
 8002784:	79fb      	ldrb	r3, [r7, #7]
 8002786:	b29a      	uxth	r2, r3
 8002788:	230a      	movs	r3, #10
 800278a:	9302      	str	r3, [sp, #8]
 800278c:	2303      	movs	r3, #3
 800278e:	9301      	str	r3, [sp, #4]
 8002790:	f107 030c 	add.w	r3, r7, #12
 8002794:	9300      	str	r3, [sp, #0]
 8002796:	2301      	movs	r3, #1
 8002798:	21b4      	movs	r1, #180	; 0xb4
 800279a:	f002 f82f 	bl	80047fc <HAL_I2C_Mem_Write>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <MLX90614_Write16Crc+0xa0>
	{
		return MLX90614_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e000      	b.n	80027aa <MLX90614_Write16Crc+0xa2>
	}

	return MLX90614_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	200003b0 	.word	0x200003b0

080027b8 <MLX90614_Write16Eeprom>:

MLX90614_STATUS MLX90614_Write16Eeprom(uint8_t Address, uint16_t Value)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	4603      	mov	r3, r0
 80027c0:	460a      	mov	r2, r1
 80027c2:	71fb      	strb	r3, [r7, #7]
 80027c4:	4613      	mov	r3, r2
 80027c6:	80bb      	strh	r3, [r7, #4]

	uint16_t Verify;

	if(MLX90614_OK != MLX90614_Write16Crc(Address, 0))
 80027c8:	79fb      	ldrb	r3, [r7, #7]
 80027ca:	2100      	movs	r1, #0
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff ff9b 	bl	8002708 <MLX90614_Write16Crc>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <MLX90614_Write16Eeprom+0x24>
	{
		return MLX90614_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e01e      	b.n	800281a <MLX90614_Write16Eeprom+0x62>
	}

	HAL_Delay(10); // Erasing time ~5ms;
 80027dc:	200a      	movs	r0, #10
 80027de:	f000 fb69 	bl	8002eb4 <HAL_Delay>

	if(MLX90614_OK != MLX90614_Write16Crc(Address, Value))
 80027e2:	88ba      	ldrh	r2, [r7, #4]
 80027e4:	79fb      	ldrb	r3, [r7, #7]
 80027e6:	4611      	mov	r1, r2
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7ff ff8d 	bl	8002708 <MLX90614_Write16Crc>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <MLX90614_Write16Eeprom+0x40>
	{
		return MLX90614_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e010      	b.n	800281a <MLX90614_Write16Eeprom+0x62>
	}

	HAL_Delay(10); // Writing time ~5ms;
 80027f8:	200a      	movs	r0, #10
 80027fa:	f000 fb5b 	bl	8002eb4 <HAL_Delay>

	MLX90614_Read16Eeprom(Address, &Verify);
 80027fe:	f107 020e 	add.w	r2, r7, #14
 8002802:	79fb      	ldrb	r3, [r7, #7]
 8002804:	4611      	mov	r1, r2
 8002806:	4618      	mov	r0, r3
 8002808:	f7ff ff1e 	bl	8002648 <MLX90614_Read16Eeprom>
	if(Verify != Value)
 800280c:	89fb      	ldrh	r3, [r7, #14]
 800280e:	88ba      	ldrh	r2, [r7, #4]
 8002810:	429a      	cmp	r2, r3
 8002812:	d001      	beq.n	8002818 <MLX90614_Write16Eeprom+0x60>
	{
		return MLX90614_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e000      	b.n	800281a <MLX90614_Write16Eeprom+0x62>
	}

	return MLX90614_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	0000      	movs	r0, r0
 8002824:	0000      	movs	r0, r0
	...

08002828 <MLX90614_KelvinToCelsius>:

float MLX90614_KelvinToCelsius(uint16_t Temperature)
{
 8002828:	b590      	push	{r4, r7, lr}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	4603      	mov	r3, r0
 8002830:	80fb      	strh	r3, [r7, #6]
	float Result;

	Result = (float)Temperature * 0.02;
 8002832:	88fb      	ldrh	r3, [r7, #6]
 8002834:	4618      	mov	r0, r3
 8002836:	f7fe fa4d 	bl	8000cd4 <__aeabi_ui2f>
 800283a:	4603      	mov	r3, r0
 800283c:	4618      	mov	r0, r3
 800283e:	f7fd fdf3 	bl	8000428 <__aeabi_f2d>
 8002842:	a311      	add	r3, pc, #68	; (adr r3, 8002888 <MLX90614_KelvinToCelsius+0x60>)
 8002844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002848:	f7fd fe46 	bl	80004d8 <__aeabi_dmul>
 800284c:	4603      	mov	r3, r0
 800284e:	460c      	mov	r4, r1
 8002850:	4618      	mov	r0, r3
 8002852:	4621      	mov	r1, r4
 8002854:	f7fe f938 	bl	8000ac8 <__aeabi_d2f>
 8002858:	4603      	mov	r3, r0
 800285a:	60fb      	str	r3, [r7, #12]
	Result = Result - 273.15;
 800285c:	68f8      	ldr	r0, [r7, #12]
 800285e:	f7fd fde3 	bl	8000428 <__aeabi_f2d>
 8002862:	a30b      	add	r3, pc, #44	; (adr r3, 8002890 <MLX90614_KelvinToCelsius+0x68>)
 8002864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002868:	f7fd fc7e 	bl	8000168 <__aeabi_dsub>
 800286c:	4603      	mov	r3, r0
 800286e:	460c      	mov	r4, r1
 8002870:	4618      	mov	r0, r3
 8002872:	4621      	mov	r1, r4
 8002874:	f7fe f928 	bl	8000ac8 <__aeabi_d2f>
 8002878:	4603      	mov	r3, r0
 800287a:	60fb      	str	r3, [r7, #12]

	return Result;
 800287c:	68fb      	ldr	r3, [r7, #12]
}
 800287e:	4618      	mov	r0, r3
 8002880:	3714      	adds	r7, #20
 8002882:	46bd      	mov	sp, r7
 8002884:	bd90      	pop	{r4, r7, pc}
 8002886:	bf00      	nop
 8002888:	47ae147b 	.word	0x47ae147b
 800288c:	3f947ae1 	.word	0x3f947ae1
 8002890:	66666666 	.word	0x66666666
 8002894:	40711266 	.word	0x40711266

08002898 <MLX90614_ReadAmbientTemperature>:

MLX90614_STATUS MLX90614_ReadAmbientTemperature(float *Temperature)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
	uint16_t tmp;

	if(MLX90614_OK != MLX90614_Read16(MLX90614_TA, &tmp))
 80028a0:	f107 030e 	add.w	r3, r7, #14
 80028a4:	4619      	mov	r1, r3
 80028a6:	2006      	movs	r0, #6
 80028a8:	f7ff fea2 	bl	80025f0 <MLX90614_Read16>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <MLX90614_ReadAmbientTemperature+0x1e>
	{
		return MLX90614_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e007      	b.n	80028c6 <MLX90614_ReadAmbientTemperature+0x2e>
	}

	*Temperature = MLX90614_KelvinToCelsius(tmp);
 80028b6:	89fb      	ldrh	r3, [r7, #14]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7ff ffb5 	bl	8002828 <MLX90614_KelvinToCelsius>
 80028be:	4602      	mov	r2, r0
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	601a      	str	r2, [r3, #0]

	return MLX90614_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <MLX90614_ReadObjectTemperature>:

MLX90614_STATUS MLX90614_ReadObjectTemperature(float *Temperature)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b084      	sub	sp, #16
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
	uint16_t tmp;

	if(MLX90614_OK != MLX90614_Read16(MLX90614_TOBJ1, &tmp))
 80028d6:	f107 030e 	add.w	r3, r7, #14
 80028da:	4619      	mov	r1, r3
 80028dc:	2007      	movs	r0, #7
 80028de:	f7ff fe87 	bl	80025f0 <MLX90614_Read16>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <MLX90614_ReadObjectTemperature+0x1e>
	{
		return MLX90614_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e007      	b.n	80028fc <MLX90614_ReadObjectTemperature+0x2e>
	}

	*Temperature = MLX90614_KelvinToCelsius(tmp);
 80028ec:	89fb      	ldrh	r3, [r7, #14]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7ff ff9a 	bl	8002828 <MLX90614_KelvinToCelsius>
 80028f4:	4602      	mov	r2, r0
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	601a      	str	r2, [r3, #0]

	return MLX90614_OK;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3710      	adds	r7, #16
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <MLX90614_GetEmissivity>:
	return MLX90614_OK;
}


MLX90614_STATUS MLX90614_GetEmissivity(float *Emissivity)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
	uint16_t tmp;

	if(MLX90614_OK != MLX90614_Read16Eeprom(MLX90614_EMISS, &tmp))
 800290c:	f107 030e 	add.w	r3, r7, #14
 8002910:	4619      	mov	r1, r3
 8002912:	2004      	movs	r0, #4
 8002914:	f7ff fe98 	bl	8002648 <MLX90614_Read16Eeprom>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <MLX90614_GetEmissivity+0x1e>
	{
		return MLX90614_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e00d      	b.n	800293e <MLX90614_GetEmissivity+0x3a>
	}

	*Emissivity = (float)tmp/65535.0;
 8002922:	89fb      	ldrh	r3, [r7, #14]
 8002924:	4618      	mov	r0, r3
 8002926:	f7fe f9d5 	bl	8000cd4 <__aeabi_ui2f>
 800292a:	4603      	mov	r3, r0
 800292c:	4906      	ldr	r1, [pc, #24]	; (8002948 <MLX90614_GetEmissivity+0x44>)
 800292e:	4618      	mov	r0, r3
 8002930:	f7fe fadc 	bl	8000eec <__aeabi_fdiv>
 8002934:	4603      	mov	r3, r0
 8002936:	461a      	mov	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	601a      	str	r2, [r3, #0]

	return MLX90614_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	477fff00 	.word	0x477fff00
 800294c:	00000000 	.word	0x00000000

08002950 <MLX90614_SetEmissivity>:


MLX90614_STATUS MLX90614_SetEmissivity(float Emissivity)
{
 8002950:	b590      	push	{r4, r7, lr}
 8002952:	b085      	sub	sp, #20
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
	if (Emissivity < 0.1 || Emissivity > 1)
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f7fd fd65 	bl	8000428 <__aeabi_f2d>
 800295e:	a33a      	add	r3, pc, #232	; (adr r3, 8002a48 <MLX90614_SetEmissivity+0xf8>)
 8002960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002964:	f7fe f82a 	bl	80009bc <__aeabi_dcmplt>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d107      	bne.n	800297e <MLX90614_SetEmissivity+0x2e>
 800296e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f7fe fbc2 	bl	80010fc <__aeabi_fcmpgt>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <MLX90614_SetEmissivity+0x32>
		return MLX90614_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e05b      	b.n	8002a3a <MLX90614_SetEmissivity+0xea>
	uint16_t current_emissivity;
	uint16_t current_calibration;
	uint16_t new_emissivity;
	uint16_t new_calibration;

	MLX90614_Read16Eeprom(MLX90614_EMISS, &current_emissivity);
 8002982:	f107 030a 	add.w	r3, r7, #10
 8002986:	4619      	mov	r1, r3
 8002988:	2004      	movs	r0, #4
 800298a:	f7ff fe5d 	bl	8002648 <MLX90614_Read16Eeprom>
	MLX90614_Read16Eeprom(MLX90614_EMISS_CALIBRATION, &current_calibration);
 800298e:	f107 0308 	add.w	r3, r7, #8
 8002992:	4619      	mov	r1, r3
 8002994:	200f      	movs	r0, #15
 8002996:	f7ff fe57 	bl	8002648 <MLX90614_Read16Eeprom>

	new_emissivity = (uint16_t)round(65535.0 * Emissivity);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f7fd fd44 	bl	8000428 <__aeabi_f2d>
 80029a0:	a32b      	add	r3, pc, #172	; (adr r3, 8002a50 <MLX90614_SetEmissivity+0x100>)
 80029a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a6:	f7fd fd97 	bl	80004d8 <__aeabi_dmul>
 80029aa:	4603      	mov	r3, r0
 80029ac:	460c      	mov	r4, r1
 80029ae:	4618      	mov	r0, r3
 80029b0:	4621      	mov	r1, r4
 80029b2:	f007 f979 	bl	8009ca8 <round>
 80029b6:	4603      	mov	r3, r0
 80029b8:	460c      	mov	r4, r1
 80029ba:	4618      	mov	r0, r3
 80029bc:	4621      	mov	r1, r4
 80029be:	f7fe f863 	bl	8000a88 <__aeabi_d2uiz>
 80029c2:	4603      	mov	r3, r0
 80029c4:	81fb      	strh	r3, [r7, #14]

	if(new_emissivity == current_emissivity)
 80029c6:	897b      	ldrh	r3, [r7, #10]
 80029c8:	89fa      	ldrh	r2, [r7, #14]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d101      	bne.n	80029d2 <MLX90614_SetEmissivity+0x82>
	{
		return MLX90614_OK;
 80029ce:	2300      	movs	r3, #0
 80029d0:	e033      	b.n	8002a3a <MLX90614_SetEmissivity+0xea>
	}

	new_calibration = (uint16_t)(((float)current_emissivity / new_emissivity) * current_calibration);
 80029d2:	897b      	ldrh	r3, [r7, #10]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7fe f97d 	bl	8000cd4 <__aeabi_ui2f>
 80029da:	4604      	mov	r4, r0
 80029dc:	89fb      	ldrh	r3, [r7, #14]
 80029de:	4618      	mov	r0, r3
 80029e0:	f7fe f97c 	bl	8000cdc <__aeabi_i2f>
 80029e4:	4603      	mov	r3, r0
 80029e6:	4619      	mov	r1, r3
 80029e8:	4620      	mov	r0, r4
 80029ea:	f7fe fa7f 	bl	8000eec <__aeabi_fdiv>
 80029ee:	4603      	mov	r3, r0
 80029f0:	461c      	mov	r4, r3
 80029f2:	893b      	ldrh	r3, [r7, #8]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7fe f971 	bl	8000cdc <__aeabi_i2f>
 80029fa:	4603      	mov	r3, r0
 80029fc:	4619      	mov	r1, r3
 80029fe:	4620      	mov	r0, r4
 8002a00:	f7fe f9c0 	bl	8000d84 <__aeabi_fmul>
 8002a04:	4603      	mov	r3, r0
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7fe fba8 	bl	800115c <__aeabi_f2uiz>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	81bb      	strh	r3, [r7, #12]

	if(MLX90614_OK != MLX90614_Write16Eeprom(MLX90614_EMISS, new_emissivity))
 8002a10:	89fb      	ldrh	r3, [r7, #14]
 8002a12:	4619      	mov	r1, r3
 8002a14:	2004      	movs	r0, #4
 8002a16:	f7ff fecf 	bl	80027b8 <MLX90614_Write16Eeprom>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <MLX90614_SetEmissivity+0xd4>
	{
		return MLX90614_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e00a      	b.n	8002a3a <MLX90614_SetEmissivity+0xea>
	}

	if(MLX90614_OK != MLX90614_Write16Eeprom(MLX90614_EMISS_CALIBRATION, new_calibration))
 8002a24:	89bb      	ldrh	r3, [r7, #12]
 8002a26:	4619      	mov	r1, r3
 8002a28:	200f      	movs	r0, #15
 8002a2a:	f7ff fec5 	bl	80027b8 <MLX90614_Write16Eeprom>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <MLX90614_SetEmissivity+0xe8>
	{
		return MLX90614_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e000      	b.n	8002a3a <MLX90614_SetEmissivity+0xea>
	}

	return MLX90614_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3714      	adds	r7, #20
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd90      	pop	{r4, r7, pc}
 8002a42:	bf00      	nop
 8002a44:	f3af 8000 	nop.w
 8002a48:	9999999a 	.word	0x9999999a
 8002a4c:	3fb99999 	.word	0x3fb99999
 8002a50:	00000000 	.word	0x00000000
 8002a54:	40efffe0 	.word	0x40efffe0

08002a58 <MLX90614_Init>:
}



MLX90614_STATUS MLX90614_Init(I2C_HandleTypeDef *hi2c)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
	mlx90614_i2c = hi2c;
 8002a60:	4a04      	ldr	r2, [pc, #16]	; (8002a74 <MLX90614_Init+0x1c>)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6013      	str	r3, [r2, #0]

	return MLX90614_OK;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bc80      	pop	{r7}
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	200003b0 	.word	0x200003b0

08002a78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002a7e:	4b15      	ldr	r3, [pc, #84]	; (8002ad4 <HAL_MspInit+0x5c>)
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	4a14      	ldr	r2, [pc, #80]	; (8002ad4 <HAL_MspInit+0x5c>)
 8002a84:	f043 0301 	orr.w	r3, r3, #1
 8002a88:	6193      	str	r3, [r2, #24]
 8002a8a:	4b12      	ldr	r3, [pc, #72]	; (8002ad4 <HAL_MspInit+0x5c>)
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	60bb      	str	r3, [r7, #8]
 8002a94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a96:	4b0f      	ldr	r3, [pc, #60]	; (8002ad4 <HAL_MspInit+0x5c>)
 8002a98:	69db      	ldr	r3, [r3, #28]
 8002a9a:	4a0e      	ldr	r2, [pc, #56]	; (8002ad4 <HAL_MspInit+0x5c>)
 8002a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aa0:	61d3      	str	r3, [r2, #28]
 8002aa2:	4b0c      	ldr	r3, [pc, #48]	; (8002ad4 <HAL_MspInit+0x5c>)
 8002aa4:	69db      	ldr	r3, [r3, #28]
 8002aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aaa:	607b      	str	r3, [r7, #4]
 8002aac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002aae:	4b0a      	ldr	r3, [pc, #40]	; (8002ad8 <HAL_MspInit+0x60>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	60fb      	str	r3, [r7, #12]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002aba:	60fb      	str	r3, [r7, #12]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ac2:	60fb      	str	r3, [r7, #12]
 8002ac4:	4a04      	ldr	r2, [pc, #16]	; (8002ad8 <HAL_MspInit+0x60>)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002aca:	bf00      	nop
 8002acc:	3714      	adds	r7, #20
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bc80      	pop	{r7}
 8002ad2:	4770      	bx	lr
 8002ad4:	40021000 	.word	0x40021000
 8002ad8:	40010000 	.word	0x40010000

08002adc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002ae0:	bf00      	nop
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bc80      	pop	{r7}
 8002ae6:	4770      	bx	lr

08002ae8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002aec:	e7fe      	b.n	8002aec <HardFault_Handler+0x4>

08002aee <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002aee:	b480      	push	{r7}
 8002af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002af2:	e7fe      	b.n	8002af2 <MemManage_Handler+0x4>

08002af4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002af8:	e7fe      	b.n	8002af8 <BusFault_Handler+0x4>

08002afa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002afa:	b480      	push	{r7}
 8002afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002afe:	e7fe      	b.n	8002afe <UsageFault_Handler+0x4>

08002b00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b04:	bf00      	nop
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bc80      	pop	{r7}
 8002b0a:	4770      	bx	lr

08002b0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b10:	bf00      	nop
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bc80      	pop	{r7}
 8002b16:	4770      	bx	lr

08002b18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b1c:	bf00      	nop
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bc80      	pop	{r7}
 8002b22:	4770      	bx	lr

08002b24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b28:	f000 f9a8 	bl	8002e7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b2c:	bf00      	nop
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002b34:	4802      	ldr	r0, [pc, #8]	; (8002b40 <USART2_IRQHandler+0x10>)
 8002b36:	f003 fd29 	bl	800658c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002b3a:	bf00      	nop
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	200003f4 	.word	0x200003f4

08002b44 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002b48:	4802      	ldr	r0, [pc, #8]	; (8002b54 <USART3_IRQHandler+0x10>)
 8002b4a:	f003 fd1f 	bl	800658c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002b4e:	bf00      	nop
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	200003b4 	.word	0x200003b4

08002b58 <_sbrk>:
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	4a14      	ldr	r2, [pc, #80]	; (8002bb4 <_sbrk+0x5c>)
 8002b62:	4b15      	ldr	r3, [pc, #84]	; (8002bb8 <_sbrk+0x60>)
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	617b      	str	r3, [r7, #20]
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	613b      	str	r3, [r7, #16]
 8002b6c:	4b13      	ldr	r3, [pc, #76]	; (8002bbc <_sbrk+0x64>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d102      	bne.n	8002b7a <_sbrk+0x22>
 8002b74:	4b11      	ldr	r3, [pc, #68]	; (8002bbc <_sbrk+0x64>)
 8002b76:	4a12      	ldr	r2, [pc, #72]	; (8002bc0 <_sbrk+0x68>)
 8002b78:	601a      	str	r2, [r3, #0]
 8002b7a:	4b10      	ldr	r3, [pc, #64]	; (8002bbc <_sbrk+0x64>)
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4413      	add	r3, r2
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d207      	bcs.n	8002b98 <_sbrk+0x40>
 8002b88:	f004 f802 	bl	8006b90 <__errno>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	230c      	movs	r3, #12
 8002b90:	6013      	str	r3, [r2, #0]
 8002b92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b96:	e009      	b.n	8002bac <_sbrk+0x54>
 8002b98:	4b08      	ldr	r3, [pc, #32]	; (8002bbc <_sbrk+0x64>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	60fb      	str	r3, [r7, #12]
 8002b9e:	4b07      	ldr	r3, [pc, #28]	; (8002bbc <_sbrk+0x64>)
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	4a05      	ldr	r2, [pc, #20]	; (8002bbc <_sbrk+0x64>)
 8002ba8:	6013      	str	r3, [r2, #0]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	4618      	mov	r0, r3
 8002bae:	3718      	adds	r7, #24
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	20005000 	.word	0x20005000
 8002bb8:	00000400 	.word	0x00000400
 8002bbc:	20000210 	.word	0x20000210
 8002bc0:	20000440 	.word	0x20000440

08002bc4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bc8:	bf00      	nop
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bc80      	pop	{r7}
 8002bce:	4770      	bx	lr

08002bd0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002bd4:	4b11      	ldr	r3, [pc, #68]	; (8002c1c <MX_USART2_UART_Init+0x4c>)
 8002bd6:	4a12      	ldr	r2, [pc, #72]	; (8002c20 <MX_USART2_UART_Init+0x50>)
 8002bd8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002bda:	4b10      	ldr	r3, [pc, #64]	; (8002c1c <MX_USART2_UART_Init+0x4c>)
 8002bdc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002be0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002be2:	4b0e      	ldr	r3, [pc, #56]	; (8002c1c <MX_USART2_UART_Init+0x4c>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002be8:	4b0c      	ldr	r3, [pc, #48]	; (8002c1c <MX_USART2_UART_Init+0x4c>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002bee:	4b0b      	ldr	r3, [pc, #44]	; (8002c1c <MX_USART2_UART_Init+0x4c>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002bf4:	4b09      	ldr	r3, [pc, #36]	; (8002c1c <MX_USART2_UART_Init+0x4c>)
 8002bf6:	220c      	movs	r2, #12
 8002bf8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bfa:	4b08      	ldr	r3, [pc, #32]	; (8002c1c <MX_USART2_UART_Init+0x4c>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c00:	4b06      	ldr	r3, [pc, #24]	; (8002c1c <MX_USART2_UART_Init+0x4c>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c06:	4805      	ldr	r0, [pc, #20]	; (8002c1c <MX_USART2_UART_Init+0x4c>)
 8002c08:	f003 fb8c 	bl	8006324 <HAL_UART_Init>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002c12:	f7ff fce7 	bl	80025e4 <Error_Handler>
  }

}
 8002c16:	bf00      	nop
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	200003f4 	.word	0x200003f4
 8002c20:	40004400 	.word	0x40004400

08002c24 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8002c28:	4b11      	ldr	r3, [pc, #68]	; (8002c70 <MX_USART3_UART_Init+0x4c>)
 8002c2a:	4a12      	ldr	r2, [pc, #72]	; (8002c74 <MX_USART3_UART_Init+0x50>)
 8002c2c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002c2e:	4b10      	ldr	r3, [pc, #64]	; (8002c70 <MX_USART3_UART_Init+0x4c>)
 8002c30:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002c34:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002c36:	4b0e      	ldr	r3, [pc, #56]	; (8002c70 <MX_USART3_UART_Init+0x4c>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002c3c:	4b0c      	ldr	r3, [pc, #48]	; (8002c70 <MX_USART3_UART_Init+0x4c>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002c42:	4b0b      	ldr	r3, [pc, #44]	; (8002c70 <MX_USART3_UART_Init+0x4c>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002c48:	4b09      	ldr	r3, [pc, #36]	; (8002c70 <MX_USART3_UART_Init+0x4c>)
 8002c4a:	220c      	movs	r2, #12
 8002c4c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c4e:	4b08      	ldr	r3, [pc, #32]	; (8002c70 <MX_USART3_UART_Init+0x4c>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c54:	4b06      	ldr	r3, [pc, #24]	; (8002c70 <MX_USART3_UART_Init+0x4c>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002c5a:	4805      	ldr	r0, [pc, #20]	; (8002c70 <MX_USART3_UART_Init+0x4c>)
 8002c5c:	f003 fb62 	bl	8006324 <HAL_UART_Init>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002c66:	f7ff fcbd 	bl	80025e4 <Error_Handler>
  }

}
 8002c6a:	bf00      	nop
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	200003b4 	.word	0x200003b4
 8002c74:	40004800 	.word	0x40004800

08002c78 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b08a      	sub	sp, #40	; 0x28
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c80:	f107 0318 	add.w	r3, r7, #24
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	605a      	str	r2, [r3, #4]
 8002c8a:	609a      	str	r2, [r3, #8]
 8002c8c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a3f      	ldr	r2, [pc, #252]	; (8002d90 <HAL_UART_MspInit+0x118>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d138      	bne.n	8002d0a <HAL_UART_MspInit+0x92>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c98:	4b3e      	ldr	r3, [pc, #248]	; (8002d94 <HAL_UART_MspInit+0x11c>)
 8002c9a:	69db      	ldr	r3, [r3, #28]
 8002c9c:	4a3d      	ldr	r2, [pc, #244]	; (8002d94 <HAL_UART_MspInit+0x11c>)
 8002c9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ca2:	61d3      	str	r3, [r2, #28]
 8002ca4:	4b3b      	ldr	r3, [pc, #236]	; (8002d94 <HAL_UART_MspInit+0x11c>)
 8002ca6:	69db      	ldr	r3, [r3, #28]
 8002ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cac:	617b      	str	r3, [r7, #20]
 8002cae:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cb0:	4b38      	ldr	r3, [pc, #224]	; (8002d94 <HAL_UART_MspInit+0x11c>)
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	4a37      	ldr	r2, [pc, #220]	; (8002d94 <HAL_UART_MspInit+0x11c>)
 8002cb6:	f043 0304 	orr.w	r3, r3, #4
 8002cba:	6193      	str	r3, [r2, #24]
 8002cbc:	4b35      	ldr	r3, [pc, #212]	; (8002d94 <HAL_UART_MspInit+0x11c>)
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	f003 0304 	and.w	r3, r3, #4
 8002cc4:	613b      	str	r3, [r7, #16]
 8002cc6:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002cc8:	2304      	movs	r3, #4
 8002cca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ccc:	2302      	movs	r3, #2
 8002cce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cd4:	f107 0318 	add.w	r3, r7, #24
 8002cd8:	4619      	mov	r1, r3
 8002cda:	482f      	ldr	r0, [pc, #188]	; (8002d98 <HAL_UART_MspInit+0x120>)
 8002cdc:	f000 ff74 	bl	8003bc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002ce0:	2308      	movs	r3, #8
 8002ce2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cec:	f107 0318 	add.w	r3, r7, #24
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	4829      	ldr	r0, [pc, #164]	; (8002d98 <HAL_UART_MspInit+0x120>)
 8002cf4:	f000 ff68 	bl	8003bc8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	2026      	movs	r0, #38	; 0x26
 8002cfe:	f000 feb6 	bl	8003a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002d02:	2026      	movs	r0, #38	; 0x26
 8002d04:	f000 fecf 	bl	8003aa6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002d08:	e03e      	b.n	8002d88 <HAL_UART_MspInit+0x110>
  else if(uartHandle->Instance==USART3)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a23      	ldr	r2, [pc, #140]	; (8002d9c <HAL_UART_MspInit+0x124>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d139      	bne.n	8002d88 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002d14:	4b1f      	ldr	r3, [pc, #124]	; (8002d94 <HAL_UART_MspInit+0x11c>)
 8002d16:	69db      	ldr	r3, [r3, #28]
 8002d18:	4a1e      	ldr	r2, [pc, #120]	; (8002d94 <HAL_UART_MspInit+0x11c>)
 8002d1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d1e:	61d3      	str	r3, [r2, #28]
 8002d20:	4b1c      	ldr	r3, [pc, #112]	; (8002d94 <HAL_UART_MspInit+0x11c>)
 8002d22:	69db      	ldr	r3, [r3, #28]
 8002d24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d28:	60fb      	str	r3, [r7, #12]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d2c:	4b19      	ldr	r3, [pc, #100]	; (8002d94 <HAL_UART_MspInit+0x11c>)
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	4a18      	ldr	r2, [pc, #96]	; (8002d94 <HAL_UART_MspInit+0x11c>)
 8002d32:	f043 0308 	orr.w	r3, r3, #8
 8002d36:	6193      	str	r3, [r2, #24]
 8002d38:	4b16      	ldr	r3, [pc, #88]	; (8002d94 <HAL_UART_MspInit+0x11c>)
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	f003 0308 	and.w	r3, r3, #8
 8002d40:	60bb      	str	r3, [r7, #8]
 8002d42:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002d44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d52:	f107 0318 	add.w	r3, r7, #24
 8002d56:	4619      	mov	r1, r3
 8002d58:	4811      	ldr	r0, [pc, #68]	; (8002da0 <HAL_UART_MspInit+0x128>)
 8002d5a:	f000 ff35 	bl	8003bc8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002d5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d64:	2300      	movs	r3, #0
 8002d66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d6c:	f107 0318 	add.w	r3, r7, #24
 8002d70:	4619      	mov	r1, r3
 8002d72:	480b      	ldr	r0, [pc, #44]	; (8002da0 <HAL_UART_MspInit+0x128>)
 8002d74:	f000 ff28 	bl	8003bc8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002d78:	2200      	movs	r2, #0
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	2027      	movs	r0, #39	; 0x27
 8002d7e:	f000 fe76 	bl	8003a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002d82:	2027      	movs	r0, #39	; 0x27
 8002d84:	f000 fe8f 	bl	8003aa6 <HAL_NVIC_EnableIRQ>
}
 8002d88:	bf00      	nop
 8002d8a:	3728      	adds	r7, #40	; 0x28
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	40004400 	.word	0x40004400
 8002d94:	40021000 	.word	0x40021000
 8002d98:	40010800 	.word	0x40010800
 8002d9c:	40004800 	.word	0x40004800
 8002da0:	40010c00 	.word	0x40010c00

08002da4 <Reset_Handler>:
 8002da4:	2100      	movs	r1, #0
 8002da6:	e003      	b.n	8002db0 <LoopCopyDataInit>

08002da8 <CopyDataInit>:
 8002da8:	4b0b      	ldr	r3, [pc, #44]	; (8002dd8 <LoopFillZerobss+0x14>)
 8002daa:	585b      	ldr	r3, [r3, r1]
 8002dac:	5043      	str	r3, [r0, r1]
 8002dae:	3104      	adds	r1, #4

08002db0 <LoopCopyDataInit>:
 8002db0:	480a      	ldr	r0, [pc, #40]	; (8002ddc <LoopFillZerobss+0x18>)
 8002db2:	4b0b      	ldr	r3, [pc, #44]	; (8002de0 <LoopFillZerobss+0x1c>)
 8002db4:	1842      	adds	r2, r0, r1
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d3f6      	bcc.n	8002da8 <CopyDataInit>
 8002dba:	4a0a      	ldr	r2, [pc, #40]	; (8002de4 <LoopFillZerobss+0x20>)
 8002dbc:	e002      	b.n	8002dc4 <LoopFillZerobss>

08002dbe <FillZerobss>:
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	f842 3b04 	str.w	r3, [r2], #4

08002dc4 <LoopFillZerobss>:
 8002dc4:	4b08      	ldr	r3, [pc, #32]	; (8002de8 <LoopFillZerobss+0x24>)
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d3f9      	bcc.n	8002dbe <FillZerobss>
 8002dca:	f7ff fefb 	bl	8002bc4 <SystemInit>
 8002dce:	f003 fee5 	bl	8006b9c <__libc_init_array>
 8002dd2:	f7ff f9cf 	bl	8002174 <main>
 8002dd6:	4770      	bx	lr
 8002dd8:	0800a17c 	.word	0x0800a17c
 8002ddc:	20000000 	.word	0x20000000
 8002de0:	200001e0 	.word	0x200001e0
 8002de4:	200001e0 	.word	0x200001e0
 8002de8:	2000043c 	.word	0x2000043c

08002dec <ADC1_2_IRQHandler>:
 8002dec:	e7fe      	b.n	8002dec <ADC1_2_IRQHandler>
	...

08002df0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002df4:	4b08      	ldr	r3, [pc, #32]	; (8002e18 <HAL_Init+0x28>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a07      	ldr	r2, [pc, #28]	; (8002e18 <HAL_Init+0x28>)
 8002dfa:	f043 0310 	orr.w	r3, r3, #16
 8002dfe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e00:	2003      	movs	r0, #3
 8002e02:	f000 fe29 	bl	8003a58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e06:	2000      	movs	r0, #0
 8002e08:	f000 f808 	bl	8002e1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e0c:	f7ff fe34 	bl	8002a78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	40022000 	.word	0x40022000

08002e1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e24:	4b12      	ldr	r3, [pc, #72]	; (8002e70 <HAL_InitTick+0x54>)
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	4b12      	ldr	r3, [pc, #72]	; (8002e74 <HAL_InitTick+0x58>)
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e32:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f000 fe41 	bl	8003ac2 <HAL_SYSTICK_Config>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e00e      	b.n	8002e68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2b0f      	cmp	r3, #15
 8002e4e:	d80a      	bhi.n	8002e66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e50:	2200      	movs	r2, #0
 8002e52:	6879      	ldr	r1, [r7, #4]
 8002e54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e58:	f000 fe09 	bl	8003a6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e5c:	4a06      	ldr	r2, [pc, #24]	; (8002e78 <HAL_InitTick+0x5c>)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e62:	2300      	movs	r3, #0
 8002e64:	e000      	b.n	8002e68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3708      	adds	r7, #8
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	20000004 	.word	0x20000004
 8002e74:	2000000c 	.word	0x2000000c
 8002e78:	20000008 	.word	0x20000008

08002e7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e80:	4b05      	ldr	r3, [pc, #20]	; (8002e98 <HAL_IncTick+0x1c>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	461a      	mov	r2, r3
 8002e86:	4b05      	ldr	r3, [pc, #20]	; (8002e9c <HAL_IncTick+0x20>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	4a03      	ldr	r2, [pc, #12]	; (8002e9c <HAL_IncTick+0x20>)
 8002e8e:	6013      	str	r3, [r2, #0]
}
 8002e90:	bf00      	nop
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bc80      	pop	{r7}
 8002e96:	4770      	bx	lr
 8002e98:	2000000c 	.word	0x2000000c
 8002e9c:	20000434 	.word	0x20000434

08002ea0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ea4:	4b02      	ldr	r3, [pc, #8]	; (8002eb0 <HAL_GetTick+0x10>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bc80      	pop	{r7}
 8002eae:	4770      	bx	lr
 8002eb0:	20000434 	.word	0x20000434

08002eb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ebc:	f7ff fff0 	bl	8002ea0 <HAL_GetTick>
 8002ec0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ecc:	d005      	beq.n	8002eda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ece:	4b09      	ldr	r3, [pc, #36]	; (8002ef4 <HAL_Delay+0x40>)
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002eda:	bf00      	nop
 8002edc:	f7ff ffe0 	bl	8002ea0 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	68fa      	ldr	r2, [r7, #12]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d8f7      	bhi.n	8002edc <HAL_Delay+0x28>
  {
  }
}
 8002eec:	bf00      	nop
 8002eee:	3710      	adds	r7, #16
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	2000000c 	.word	0x2000000c

08002ef8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f00:	2300      	movs	r3, #0
 8002f02:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002f04:	2300      	movs	r3, #0
 8002f06:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e0be      	b.n	8003098 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d109      	bne.n	8002f3c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f7fe fd64 	bl	8001a04 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f000 fbe9 	bl	8003714 <ADC_ConversionStop_Disable>
 8002f42:	4603      	mov	r3, r0
 8002f44:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f4a:	f003 0310 	and.w	r3, r3, #16
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	f040 8099 	bne.w	8003086 <HAL_ADC_Init+0x18e>
 8002f54:	7dfb      	ldrb	r3, [r7, #23]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f040 8095 	bne.w	8003086 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f60:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f64:	f023 0302 	bic.w	r3, r3, #2
 8002f68:	f043 0202 	orr.w	r2, r3, #2
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f78:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	7b1b      	ldrb	r3, [r3, #12]
 8002f7e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002f80:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f82:	68ba      	ldr	r2, [r7, #8]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f90:	d003      	beq.n	8002f9a <HAL_ADC_Init+0xa2>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d102      	bne.n	8002fa0 <HAL_ADC_Init+0xa8>
 8002f9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f9e:	e000      	b.n	8002fa2 <HAL_ADC_Init+0xaa>
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	7d1b      	ldrb	r3, [r3, #20]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d119      	bne.n	8002fe4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	7b1b      	ldrb	r3, [r3, #12]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d109      	bne.n	8002fcc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	035a      	lsls	r2, r3, #13
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002fc8:	613b      	str	r3, [r7, #16]
 8002fca:	e00b      	b.n	8002fe4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd0:	f043 0220 	orr.w	r2, r3, #32
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fdc:	f043 0201 	orr.w	r2, r3, #1
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	693a      	ldr	r2, [r7, #16]
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	689a      	ldr	r2, [r3, #8]
 8002ffe:	4b28      	ldr	r3, [pc, #160]	; (80030a0 <HAL_ADC_Init+0x1a8>)
 8003000:	4013      	ands	r3, r2
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	6812      	ldr	r2, [r2, #0]
 8003006:	68b9      	ldr	r1, [r7, #8]
 8003008:	430b      	orrs	r3, r1
 800300a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003014:	d003      	beq.n	800301e <HAL_ADC_Init+0x126>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d104      	bne.n	8003028 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	3b01      	subs	r3, #1
 8003024:	051b      	lsls	r3, r3, #20
 8003026:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68fa      	ldr	r2, [r7, #12]
 8003038:	430a      	orrs	r2, r1
 800303a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	689a      	ldr	r2, [r3, #8]
 8003042:	4b18      	ldr	r3, [pc, #96]	; (80030a4 <HAL_ADC_Init+0x1ac>)
 8003044:	4013      	ands	r3, r2
 8003046:	68ba      	ldr	r2, [r7, #8]
 8003048:	429a      	cmp	r2, r3
 800304a:	d10b      	bne.n	8003064 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003056:	f023 0303 	bic.w	r3, r3, #3
 800305a:	f043 0201 	orr.w	r2, r3, #1
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003062:	e018      	b.n	8003096 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003068:	f023 0312 	bic.w	r3, r3, #18
 800306c:	f043 0210 	orr.w	r2, r3, #16
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003078:	f043 0201 	orr.w	r2, r3, #1
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003084:	e007      	b.n	8003096 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308a:	f043 0210 	orr.w	r2, r3, #16
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003096:	7dfb      	ldrb	r3, [r7, #23]
}
 8003098:	4618      	mov	r0, r3
 800309a:	3718      	adds	r7, #24
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	ffe1f7fd 	.word	0xffe1f7fd
 80030a4:	ff1f0efe 	.word	0xff1f0efe

080030a8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030b0:	2300      	movs	r3, #0
 80030b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d101      	bne.n	80030c2 <HAL_ADC_Start+0x1a>
 80030be:	2302      	movs	r3, #2
 80030c0:	e098      	b.n	80031f4 <HAL_ADC_Start+0x14c>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2201      	movs	r2, #1
 80030c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 fad0 	bl	8003670 <ADC_Enable>
 80030d0:	4603      	mov	r3, r0
 80030d2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80030d4:	7bfb      	ldrb	r3, [r7, #15]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f040 8087 	bne.w	80031ea <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030e4:	f023 0301 	bic.w	r3, r3, #1
 80030e8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a41      	ldr	r2, [pc, #260]	; (80031fc <HAL_ADC_Start+0x154>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d105      	bne.n	8003106 <HAL_ADC_Start+0x5e>
 80030fa:	4b41      	ldr	r3, [pc, #260]	; (8003200 <HAL_ADC_Start+0x158>)
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d115      	bne.n	8003132 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800311c:	2b00      	cmp	r3, #0
 800311e:	d026      	beq.n	800316e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003124:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003128:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003130:	e01d      	b.n	800316e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003136:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a2f      	ldr	r2, [pc, #188]	; (8003200 <HAL_ADC_Start+0x158>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d004      	beq.n	8003152 <HAL_ADC_Start+0xaa>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a2b      	ldr	r2, [pc, #172]	; (80031fc <HAL_ADC_Start+0x154>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d10d      	bne.n	800316e <HAL_ADC_Start+0xc6>
 8003152:	4b2b      	ldr	r3, [pc, #172]	; (8003200 <HAL_ADC_Start+0x158>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800315a:	2b00      	cmp	r3, #0
 800315c:	d007      	beq.n	800316e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003162:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003166:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003172:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d006      	beq.n	8003188 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800317e:	f023 0206 	bic.w	r2, r3, #6
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	62da      	str	r2, [r3, #44]	; 0x2c
 8003186:	e002      	b.n	800318e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f06f 0202 	mvn.w	r2, #2
 800319e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80031aa:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80031ae:	d113      	bne.n	80031d8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80031b4:	4a11      	ldr	r2, [pc, #68]	; (80031fc <HAL_ADC_Start+0x154>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d105      	bne.n	80031c6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80031ba:	4b11      	ldr	r3, [pc, #68]	; (8003200 <HAL_ADC_Start+0x158>)
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d108      	bne.n	80031d8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80031d4:	609a      	str	r2, [r3, #8]
 80031d6:	e00c      	b.n	80031f2 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	689a      	ldr	r2, [r3, #8]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80031e6:	609a      	str	r2, [r3, #8]
 80031e8:	e003      	b.n	80031f2 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80031f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3710      	adds	r7, #16
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	40012800 	.word	0x40012800
 8003200:	40012400 	.word	0x40012400

08003204 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800320c:	2300      	movs	r3, #0
 800320e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003216:	2b01      	cmp	r3, #1
 8003218:	d101      	bne.n	800321e <HAL_ADC_Stop+0x1a>
 800321a:	2302      	movs	r3, #2
 800321c:	e01a      	b.n	8003254 <HAL_ADC_Stop+0x50>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 fa74 	bl	8003714 <ADC_ConversionStop_Disable>
 800322c:	4603      	mov	r3, r0
 800322e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003230:	7bfb      	ldrb	r3, [r7, #15]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d109      	bne.n	800324a <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800323e:	f023 0301 	bic.w	r3, r3, #1
 8003242:	f043 0201 	orr.w	r2, r3, #1
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003252:	7bfb      	ldrb	r3, [r7, #15]
}
 8003254:	4618      	mov	r0, r3
 8003256:	3710      	adds	r7, #16
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800325c:	b590      	push	{r4, r7, lr}
 800325e:	b087      	sub	sp, #28
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003266:	2300      	movs	r3, #0
 8003268:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800326a:	2300      	movs	r3, #0
 800326c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800326e:	2300      	movs	r3, #0
 8003270:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8003272:	f7ff fe15 	bl	8002ea0 <HAL_GetTick>
 8003276:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00b      	beq.n	800329e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328a:	f043 0220 	orr.w	r2, r3, #32
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e0c8      	b.n	8003430 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d12a      	bne.n	8003302 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d123      	bne.n	8003302 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80032ba:	e01a      	b.n	80032f2 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032c2:	d016      	beq.n	80032f2 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d007      	beq.n	80032da <HAL_ADC_PollForConversion+0x7e>
 80032ca:	f7ff fde9 	bl	8002ea0 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	683a      	ldr	r2, [r7, #0]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d20b      	bcs.n	80032f2 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032de:	f043 0204 	orr.w	r2, r3, #4
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e09e      	b.n	8003430 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d0dd      	beq.n	80032bc <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003300:	e06c      	b.n	80033dc <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003302:	4b4d      	ldr	r3, [pc, #308]	; (8003438 <HAL_ADC_PollForConversion+0x1dc>)
 8003304:	681c      	ldr	r4, [r3, #0]
 8003306:	2002      	movs	r0, #2
 8003308:	f002 ff50 	bl	80061ac <HAL_RCCEx_GetPeriphCLKFreq>
 800330c:	4603      	mov	r3, r0
 800330e:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	6919      	ldr	r1, [r3, #16]
 8003318:	4b48      	ldr	r3, [pc, #288]	; (800343c <HAL_ADC_PollForConversion+0x1e0>)
 800331a:	400b      	ands	r3, r1
 800331c:	2b00      	cmp	r3, #0
 800331e:	d118      	bne.n	8003352 <HAL_ADC_PollForConversion+0xf6>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68d9      	ldr	r1, [r3, #12]
 8003326:	4b46      	ldr	r3, [pc, #280]	; (8003440 <HAL_ADC_PollForConversion+0x1e4>)
 8003328:	400b      	ands	r3, r1
 800332a:	2b00      	cmp	r3, #0
 800332c:	d111      	bne.n	8003352 <HAL_ADC_PollForConversion+0xf6>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	6919      	ldr	r1, [r3, #16]
 8003334:	4b43      	ldr	r3, [pc, #268]	; (8003444 <HAL_ADC_PollForConversion+0x1e8>)
 8003336:	400b      	ands	r3, r1
 8003338:	2b00      	cmp	r3, #0
 800333a:	d108      	bne.n	800334e <HAL_ADC_PollForConversion+0xf2>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68d9      	ldr	r1, [r3, #12]
 8003342:	4b41      	ldr	r3, [pc, #260]	; (8003448 <HAL_ADC_PollForConversion+0x1ec>)
 8003344:	400b      	ands	r3, r1
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <HAL_ADC_PollForConversion+0xf2>
 800334a:	2314      	movs	r3, #20
 800334c:	e020      	b.n	8003390 <HAL_ADC_PollForConversion+0x134>
 800334e:	2329      	movs	r3, #41	; 0x29
 8003350:	e01e      	b.n	8003390 <HAL_ADC_PollForConversion+0x134>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	6919      	ldr	r1, [r3, #16]
 8003358:	4b3a      	ldr	r3, [pc, #232]	; (8003444 <HAL_ADC_PollForConversion+0x1e8>)
 800335a:	400b      	ands	r3, r1
 800335c:	2b00      	cmp	r3, #0
 800335e:	d106      	bne.n	800336e <HAL_ADC_PollForConversion+0x112>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68d9      	ldr	r1, [r3, #12]
 8003366:	4b38      	ldr	r3, [pc, #224]	; (8003448 <HAL_ADC_PollForConversion+0x1ec>)
 8003368:	400b      	ands	r3, r1
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00d      	beq.n	800338a <HAL_ADC_PollForConversion+0x12e>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	6919      	ldr	r1, [r3, #16]
 8003374:	4b35      	ldr	r3, [pc, #212]	; (800344c <HAL_ADC_PollForConversion+0x1f0>)
 8003376:	400b      	ands	r3, r1
 8003378:	2b00      	cmp	r3, #0
 800337a:	d108      	bne.n	800338e <HAL_ADC_PollForConversion+0x132>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68d9      	ldr	r1, [r3, #12]
 8003382:	4b32      	ldr	r3, [pc, #200]	; (800344c <HAL_ADC_PollForConversion+0x1f0>)
 8003384:	400b      	ands	r3, r1
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_ADC_PollForConversion+0x132>
 800338a:	2354      	movs	r3, #84	; 0x54
 800338c:	e000      	b.n	8003390 <HAL_ADC_PollForConversion+0x134>
 800338e:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8003390:	fb02 f303 	mul.w	r3, r2, r3
 8003394:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003396:	e01d      	b.n	80033d4 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800339e:	d016      	beq.n	80033ce <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d007      	beq.n	80033b6 <HAL_ADC_PollForConversion+0x15a>
 80033a6:	f7ff fd7b 	bl	8002ea0 <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d20b      	bcs.n	80033ce <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ba:	f043 0204 	orr.w	r2, r3, #4
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e030      	b.n	8003430 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	3301      	adds	r3, #1
 80033d2:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d8dd      	bhi.n	8003398 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f06f 0212 	mvn.w	r2, #18
 80033e4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80033fc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003400:	d115      	bne.n	800342e <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003406:	2b00      	cmp	r3, #0
 8003408:	d111      	bne.n	800342e <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800340e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800341a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d105      	bne.n	800342e <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003426:	f043 0201 	orr.w	r2, r3, #1
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	371c      	adds	r7, #28
 8003434:	46bd      	mov	sp, r7
 8003436:	bd90      	pop	{r4, r7, pc}
 8003438:	20000004 	.word	0x20000004
 800343c:	24924924 	.word	0x24924924
 8003440:	00924924 	.word	0x00924924
 8003444:	12492492 	.word	0x12492492
 8003448:	00492492 	.word	0x00492492
 800344c:	00249249 	.word	0x00249249

08003450 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800345e:	4618      	mov	r0, r3
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	bc80      	pop	{r7}
 8003466:	4770      	bx	lr

08003468 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003472:	2300      	movs	r3, #0
 8003474:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003476:	2300      	movs	r3, #0
 8003478:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003480:	2b01      	cmp	r3, #1
 8003482:	d101      	bne.n	8003488 <HAL_ADC_ConfigChannel+0x20>
 8003484:	2302      	movs	r3, #2
 8003486:	e0dc      	b.n	8003642 <HAL_ADC_ConfigChannel+0x1da>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	2b06      	cmp	r3, #6
 8003496:	d81c      	bhi.n	80034d2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	685a      	ldr	r2, [r3, #4]
 80034a2:	4613      	mov	r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	4413      	add	r3, r2
 80034a8:	3b05      	subs	r3, #5
 80034aa:	221f      	movs	r2, #31
 80034ac:	fa02 f303 	lsl.w	r3, r2, r3
 80034b0:	43db      	mvns	r3, r3
 80034b2:	4019      	ands	r1, r3
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	6818      	ldr	r0, [r3, #0]
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	685a      	ldr	r2, [r3, #4]
 80034bc:	4613      	mov	r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	4413      	add	r3, r2
 80034c2:	3b05      	subs	r3, #5
 80034c4:	fa00 f203 	lsl.w	r2, r0, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	430a      	orrs	r2, r1
 80034ce:	635a      	str	r2, [r3, #52]	; 0x34
 80034d0:	e03c      	b.n	800354c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	2b0c      	cmp	r3, #12
 80034d8:	d81c      	bhi.n	8003514 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	685a      	ldr	r2, [r3, #4]
 80034e4:	4613      	mov	r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	4413      	add	r3, r2
 80034ea:	3b23      	subs	r3, #35	; 0x23
 80034ec:	221f      	movs	r2, #31
 80034ee:	fa02 f303 	lsl.w	r3, r2, r3
 80034f2:	43db      	mvns	r3, r3
 80034f4:	4019      	ands	r1, r3
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	6818      	ldr	r0, [r3, #0]
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	685a      	ldr	r2, [r3, #4]
 80034fe:	4613      	mov	r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	4413      	add	r3, r2
 8003504:	3b23      	subs	r3, #35	; 0x23
 8003506:	fa00 f203 	lsl.w	r2, r0, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	430a      	orrs	r2, r1
 8003510:	631a      	str	r2, [r3, #48]	; 0x30
 8003512:	e01b      	b.n	800354c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685a      	ldr	r2, [r3, #4]
 800351e:	4613      	mov	r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	4413      	add	r3, r2
 8003524:	3b41      	subs	r3, #65	; 0x41
 8003526:	221f      	movs	r2, #31
 8003528:	fa02 f303 	lsl.w	r3, r2, r3
 800352c:	43db      	mvns	r3, r3
 800352e:	4019      	ands	r1, r3
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	6818      	ldr	r0, [r3, #0]
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	685a      	ldr	r2, [r3, #4]
 8003538:	4613      	mov	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	4413      	add	r3, r2
 800353e:	3b41      	subs	r3, #65	; 0x41
 8003540:	fa00 f203 	lsl.w	r2, r0, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	430a      	orrs	r2, r1
 800354a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2b09      	cmp	r3, #9
 8003552:	d91c      	bls.n	800358e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68d9      	ldr	r1, [r3, #12]
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	4613      	mov	r3, r2
 8003560:	005b      	lsls	r3, r3, #1
 8003562:	4413      	add	r3, r2
 8003564:	3b1e      	subs	r3, #30
 8003566:	2207      	movs	r2, #7
 8003568:	fa02 f303 	lsl.w	r3, r2, r3
 800356c:	43db      	mvns	r3, r3
 800356e:	4019      	ands	r1, r3
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	6898      	ldr	r0, [r3, #8]
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	4613      	mov	r3, r2
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	4413      	add	r3, r2
 800357e:	3b1e      	subs	r3, #30
 8003580:	fa00 f203 	lsl.w	r2, r0, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	430a      	orrs	r2, r1
 800358a:	60da      	str	r2, [r3, #12]
 800358c:	e019      	b.n	80035c2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	6919      	ldr	r1, [r3, #16]
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	4613      	mov	r3, r2
 800359a:	005b      	lsls	r3, r3, #1
 800359c:	4413      	add	r3, r2
 800359e:	2207      	movs	r2, #7
 80035a0:	fa02 f303 	lsl.w	r3, r2, r3
 80035a4:	43db      	mvns	r3, r3
 80035a6:	4019      	ands	r1, r3
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	6898      	ldr	r0, [r3, #8]
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	4613      	mov	r3, r2
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	4413      	add	r3, r2
 80035b6:	fa00 f203 	lsl.w	r2, r0, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	430a      	orrs	r2, r1
 80035c0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2b10      	cmp	r3, #16
 80035c8:	d003      	beq.n	80035d2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80035ce:	2b11      	cmp	r3, #17
 80035d0:	d132      	bne.n	8003638 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a1d      	ldr	r2, [pc, #116]	; (800364c <HAL_ADC_ConfigChannel+0x1e4>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d125      	bne.n	8003628 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d126      	bne.n	8003638 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	689a      	ldr	r2, [r3, #8]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80035f8:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2b10      	cmp	r3, #16
 8003600:	d11a      	bne.n	8003638 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003602:	4b13      	ldr	r3, [pc, #76]	; (8003650 <HAL_ADC_ConfigChannel+0x1e8>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a13      	ldr	r2, [pc, #76]	; (8003654 <HAL_ADC_ConfigChannel+0x1ec>)
 8003608:	fba2 2303 	umull	r2, r3, r2, r3
 800360c:	0c9a      	lsrs	r2, r3, #18
 800360e:	4613      	mov	r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	4413      	add	r3, r2
 8003614:	005b      	lsls	r3, r3, #1
 8003616:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003618:	e002      	b.n	8003620 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	3b01      	subs	r3, #1
 800361e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1f9      	bne.n	800361a <HAL_ADC_ConfigChannel+0x1b2>
 8003626:	e007      	b.n	8003638 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800362c:	f043 0220 	orr.w	r2, r3, #32
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003640:	7bfb      	ldrb	r3, [r7, #15]
}
 8003642:	4618      	mov	r0, r3
 8003644:	3714      	adds	r7, #20
 8003646:	46bd      	mov	sp, r7
 8003648:	bc80      	pop	{r7}
 800364a:	4770      	bx	lr
 800364c:	40012400 	.word	0x40012400
 8003650:	20000004 	.word	0x20000004
 8003654:	431bde83 	.word	0x431bde83

08003658 <HAL_ADC_GetState>:
  * @brief  return the ADC state
  * @param  hadc: ADC handle
  * @retval HAL state
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  /* Return ADC state */
  return hadc->State;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8003664:	4618      	mov	r0, r3
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	bc80      	pop	{r7}
 800366c:	4770      	bx	lr
	...

08003670 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003678:	2300      	movs	r3, #0
 800367a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800367c:	2300      	movs	r3, #0
 800367e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	2b01      	cmp	r3, #1
 800368c:	d039      	beq.n	8003702 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	689a      	ldr	r2, [r3, #8]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f042 0201 	orr.w	r2, r2, #1
 800369c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800369e:	4b1b      	ldr	r3, [pc, #108]	; (800370c <ADC_Enable+0x9c>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a1b      	ldr	r2, [pc, #108]	; (8003710 <ADC_Enable+0xa0>)
 80036a4:	fba2 2303 	umull	r2, r3, r2, r3
 80036a8:	0c9b      	lsrs	r3, r3, #18
 80036aa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80036ac:	e002      	b.n	80036b4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	3b01      	subs	r3, #1
 80036b2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1f9      	bne.n	80036ae <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80036ba:	f7ff fbf1 	bl	8002ea0 <HAL_GetTick>
 80036be:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80036c0:	e018      	b.n	80036f4 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80036c2:	f7ff fbed 	bl	8002ea0 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d911      	bls.n	80036f4 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d4:	f043 0210 	orr.w	r2, r3, #16
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e0:	f043 0201 	orr.w	r2, r3, #1
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e007      	b.n	8003704 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d1df      	bne.n	80036c2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003702:	2300      	movs	r3, #0
}
 8003704:	4618      	mov	r0, r3
 8003706:	3710      	adds	r7, #16
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	20000004 	.word	0x20000004
 8003710:	431bde83 	.word	0x431bde83

08003714 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800371c:	2300      	movs	r3, #0
 800371e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	2b01      	cmp	r3, #1
 800372c:	d127      	bne.n	800377e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	689a      	ldr	r2, [r3, #8]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f022 0201 	bic.w	r2, r2, #1
 800373c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800373e:	f7ff fbaf 	bl	8002ea0 <HAL_GetTick>
 8003742:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003744:	e014      	b.n	8003770 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003746:	f7ff fbab 	bl	8002ea0 <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	2b02      	cmp	r3, #2
 8003752:	d90d      	bls.n	8003770 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003758:	f043 0210 	orr.w	r2, r3, #16
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003764:	f043 0201 	orr.w	r2, r3, #1
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e007      	b.n	8003780 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b01      	cmp	r3, #1
 800377c:	d0e3      	beq.n	8003746 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	3710      	adds	r7, #16
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003788:	b590      	push	{r4, r7, lr}
 800378a:	b087      	sub	sp, #28
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003790:	2300      	movs	r3, #0
 8003792:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8003794:	2300      	movs	r3, #0
 8003796:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d101      	bne.n	80037a6 <HAL_ADCEx_Calibration_Start+0x1e>
 80037a2:	2302      	movs	r3, #2
 80037a4:	e086      	b.n	80038b4 <HAL_ADCEx_Calibration_Start+0x12c>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f7ff ffb0 	bl	8003714 <ADC_ConversionStop_Disable>
 80037b4:	4603      	mov	r3, r0
 80037b6:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80037b8:	7dfb      	ldrb	r3, [r7, #23]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d175      	bne.n	80038aa <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80037c6:	f023 0302 	bic.w	r3, r3, #2
 80037ca:	f043 0202 	orr.w	r2, r3, #2
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80037d2:	4b3a      	ldr	r3, [pc, #232]	; (80038bc <HAL_ADCEx_Calibration_Start+0x134>)
 80037d4:	681c      	ldr	r4, [r3, #0]
 80037d6:	2002      	movs	r0, #2
 80037d8:	f002 fce8 	bl	80061ac <HAL_RCCEx_GetPeriphCLKFreq>
 80037dc:	4603      	mov	r3, r0
 80037de:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80037e2:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80037e4:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80037e6:	e002      	b.n	80037ee <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	3b01      	subs	r3, #1
 80037ec:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d1f9      	bne.n	80037e8 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f7ff ff3b 	bl	8003670 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	689a      	ldr	r2, [r3, #8]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f042 0208 	orr.w	r2, r2, #8
 8003808:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800380a:	f7ff fb49 	bl	8002ea0 <HAL_GetTick>
 800380e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003810:	e014      	b.n	800383c <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003812:	f7ff fb45 	bl	8002ea0 <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	2b0a      	cmp	r3, #10
 800381e:	d90d      	bls.n	800383c <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003824:	f023 0312 	bic.w	r3, r3, #18
 8003828:	f043 0210 	orr.w	r2, r3, #16
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e03b      	b.n	80038b4 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f003 0308 	and.w	r3, r3, #8
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1e3      	bne.n	8003812 <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	689a      	ldr	r2, [r3, #8]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f042 0204 	orr.w	r2, r2, #4
 8003858:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800385a:	f7ff fb21 	bl	8002ea0 <HAL_GetTick>
 800385e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003860:	e014      	b.n	800388c <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003862:	f7ff fb1d 	bl	8002ea0 <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	2b0a      	cmp	r3, #10
 800386e:	d90d      	bls.n	800388c <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003874:	f023 0312 	bic.w	r3, r3, #18
 8003878:	f043 0210 	orr.w	r2, r3, #16
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e013      	b.n	80038b4 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f003 0304 	and.w	r3, r3, #4
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1e3      	bne.n	8003862 <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800389e:	f023 0303 	bic.w	r3, r3, #3
 80038a2:	f043 0201 	orr.w	r2, r3, #1
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80038b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	371c      	adds	r7, #28
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd90      	pop	{r4, r7, pc}
 80038bc:	20000004 	.word	0x20000004

080038c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b085      	sub	sp, #20
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f003 0307 	and.w	r3, r3, #7
 80038ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038d0:	4b0c      	ldr	r3, [pc, #48]	; (8003904 <__NVIC_SetPriorityGrouping+0x44>)
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038d6:	68ba      	ldr	r2, [r7, #8]
 80038d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038dc:	4013      	ands	r3, r2
 80038de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80038ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038f2:	4a04      	ldr	r2, [pc, #16]	; (8003904 <__NVIC_SetPriorityGrouping+0x44>)
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	60d3      	str	r3, [r2, #12]
}
 80038f8:	bf00      	nop
 80038fa:	3714      	adds	r7, #20
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bc80      	pop	{r7}
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	e000ed00 	.word	0xe000ed00

08003908 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003908:	b480      	push	{r7}
 800390a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800390c:	4b04      	ldr	r3, [pc, #16]	; (8003920 <__NVIC_GetPriorityGrouping+0x18>)
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	0a1b      	lsrs	r3, r3, #8
 8003912:	f003 0307 	and.w	r3, r3, #7
}
 8003916:	4618      	mov	r0, r3
 8003918:	46bd      	mov	sp, r7
 800391a:	bc80      	pop	{r7}
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	e000ed00 	.word	0xe000ed00

08003924 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	4603      	mov	r3, r0
 800392c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800392e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003932:	2b00      	cmp	r3, #0
 8003934:	db0b      	blt.n	800394e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003936:	79fb      	ldrb	r3, [r7, #7]
 8003938:	f003 021f 	and.w	r2, r3, #31
 800393c:	4906      	ldr	r1, [pc, #24]	; (8003958 <__NVIC_EnableIRQ+0x34>)
 800393e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003942:	095b      	lsrs	r3, r3, #5
 8003944:	2001      	movs	r0, #1
 8003946:	fa00 f202 	lsl.w	r2, r0, r2
 800394a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800394e:	bf00      	nop
 8003950:	370c      	adds	r7, #12
 8003952:	46bd      	mov	sp, r7
 8003954:	bc80      	pop	{r7}
 8003956:	4770      	bx	lr
 8003958:	e000e100 	.word	0xe000e100

0800395c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	4603      	mov	r3, r0
 8003964:	6039      	str	r1, [r7, #0]
 8003966:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800396c:	2b00      	cmp	r3, #0
 800396e:	db0a      	blt.n	8003986 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	b2da      	uxtb	r2, r3
 8003974:	490c      	ldr	r1, [pc, #48]	; (80039a8 <__NVIC_SetPriority+0x4c>)
 8003976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800397a:	0112      	lsls	r2, r2, #4
 800397c:	b2d2      	uxtb	r2, r2
 800397e:	440b      	add	r3, r1
 8003980:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003984:	e00a      	b.n	800399c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	b2da      	uxtb	r2, r3
 800398a:	4908      	ldr	r1, [pc, #32]	; (80039ac <__NVIC_SetPriority+0x50>)
 800398c:	79fb      	ldrb	r3, [r7, #7]
 800398e:	f003 030f 	and.w	r3, r3, #15
 8003992:	3b04      	subs	r3, #4
 8003994:	0112      	lsls	r2, r2, #4
 8003996:	b2d2      	uxtb	r2, r2
 8003998:	440b      	add	r3, r1
 800399a:	761a      	strb	r2, [r3, #24]
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bc80      	pop	{r7}
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	e000e100 	.word	0xe000e100
 80039ac:	e000ed00 	.word	0xe000ed00

080039b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b089      	sub	sp, #36	; 0x24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f003 0307 	and.w	r3, r3, #7
 80039c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	f1c3 0307 	rsb	r3, r3, #7
 80039ca:	2b04      	cmp	r3, #4
 80039cc:	bf28      	it	cs
 80039ce:	2304      	movcs	r3, #4
 80039d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	3304      	adds	r3, #4
 80039d6:	2b06      	cmp	r3, #6
 80039d8:	d902      	bls.n	80039e0 <NVIC_EncodePriority+0x30>
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	3b03      	subs	r3, #3
 80039de:	e000      	b.n	80039e2 <NVIC_EncodePriority+0x32>
 80039e0:	2300      	movs	r3, #0
 80039e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	fa02 f303 	lsl.w	r3, r2, r3
 80039ee:	43da      	mvns	r2, r3
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	401a      	ands	r2, r3
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003a02:	43d9      	mvns	r1, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a08:	4313      	orrs	r3, r2
         );
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3724      	adds	r7, #36	; 0x24
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bc80      	pop	{r7}
 8003a12:	4770      	bx	lr

08003a14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a24:	d301      	bcc.n	8003a2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a26:	2301      	movs	r3, #1
 8003a28:	e00f      	b.n	8003a4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a2a:	4a0a      	ldr	r2, [pc, #40]	; (8003a54 <SysTick_Config+0x40>)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a32:	210f      	movs	r1, #15
 8003a34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a38:	f7ff ff90 	bl	800395c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a3c:	4b05      	ldr	r3, [pc, #20]	; (8003a54 <SysTick_Config+0x40>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a42:	4b04      	ldr	r3, [pc, #16]	; (8003a54 <SysTick_Config+0x40>)
 8003a44:	2207      	movs	r2, #7
 8003a46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3708      	adds	r7, #8
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	e000e010 	.word	0xe000e010

08003a58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f7ff ff2d 	bl	80038c0 <__NVIC_SetPriorityGrouping>
}
 8003a66:	bf00      	nop
 8003a68:	3708      	adds	r7, #8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b086      	sub	sp, #24
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	4603      	mov	r3, r0
 8003a76:	60b9      	str	r1, [r7, #8]
 8003a78:	607a      	str	r2, [r7, #4]
 8003a7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a80:	f7ff ff42 	bl	8003908 <__NVIC_GetPriorityGrouping>
 8003a84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	68b9      	ldr	r1, [r7, #8]
 8003a8a:	6978      	ldr	r0, [r7, #20]
 8003a8c:	f7ff ff90 	bl	80039b0 <NVIC_EncodePriority>
 8003a90:	4602      	mov	r2, r0
 8003a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a96:	4611      	mov	r1, r2
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7ff ff5f 	bl	800395c <__NVIC_SetPriority>
}
 8003a9e:	bf00      	nop
 8003aa0:	3718      	adds	r7, #24
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b082      	sub	sp, #8
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	4603      	mov	r3, r0
 8003aae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7ff ff35 	bl	8003924 <__NVIC_EnableIRQ>
}
 8003aba:	bf00      	nop
 8003abc:	3708      	adds	r7, #8
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}

08003ac2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b082      	sub	sp, #8
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f7ff ffa2 	bl	8003a14 <SysTick_Config>
 8003ad0:	4603      	mov	r3, r0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3708      	adds	r7, #8
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
	...

08003adc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d005      	beq.n	8003afe <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2204      	movs	r2, #4
 8003af6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	73fb      	strb	r3, [r7, #15]
 8003afc:	e051      	b.n	8003ba2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f022 020e 	bic.w	r2, r2, #14
 8003b0c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f022 0201 	bic.w	r2, r2, #1
 8003b1c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a22      	ldr	r2, [pc, #136]	; (8003bac <HAL_DMA_Abort_IT+0xd0>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d029      	beq.n	8003b7c <HAL_DMA_Abort_IT+0xa0>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a20      	ldr	r2, [pc, #128]	; (8003bb0 <HAL_DMA_Abort_IT+0xd4>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d022      	beq.n	8003b78 <HAL_DMA_Abort_IT+0x9c>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a1f      	ldr	r2, [pc, #124]	; (8003bb4 <HAL_DMA_Abort_IT+0xd8>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d01a      	beq.n	8003b72 <HAL_DMA_Abort_IT+0x96>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a1d      	ldr	r2, [pc, #116]	; (8003bb8 <HAL_DMA_Abort_IT+0xdc>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d012      	beq.n	8003b6c <HAL_DMA_Abort_IT+0x90>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a1c      	ldr	r2, [pc, #112]	; (8003bbc <HAL_DMA_Abort_IT+0xe0>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d00a      	beq.n	8003b66 <HAL_DMA_Abort_IT+0x8a>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a1a      	ldr	r2, [pc, #104]	; (8003bc0 <HAL_DMA_Abort_IT+0xe4>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d102      	bne.n	8003b60 <HAL_DMA_Abort_IT+0x84>
 8003b5a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003b5e:	e00e      	b.n	8003b7e <HAL_DMA_Abort_IT+0xa2>
 8003b60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b64:	e00b      	b.n	8003b7e <HAL_DMA_Abort_IT+0xa2>
 8003b66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b6a:	e008      	b.n	8003b7e <HAL_DMA_Abort_IT+0xa2>
 8003b6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b70:	e005      	b.n	8003b7e <HAL_DMA_Abort_IT+0xa2>
 8003b72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b76:	e002      	b.n	8003b7e <HAL_DMA_Abort_IT+0xa2>
 8003b78:	2310      	movs	r3, #16
 8003b7a:	e000      	b.n	8003b7e <HAL_DMA_Abort_IT+0xa2>
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	4a11      	ldr	r2, [pc, #68]	; (8003bc4 <HAL_DMA_Abort_IT+0xe8>)
 8003b80:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d003      	beq.n	8003ba2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	4798      	blx	r3
    } 
  }
  return status;
 8003ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3710      	adds	r7, #16
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	40020008 	.word	0x40020008
 8003bb0:	4002001c 	.word	0x4002001c
 8003bb4:	40020030 	.word	0x40020030
 8003bb8:	40020044 	.word	0x40020044
 8003bbc:	40020058 	.word	0x40020058
 8003bc0:	4002006c 	.word	0x4002006c
 8003bc4:	40020000 	.word	0x40020000

08003bc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b08b      	sub	sp, #44	; 0x2c
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bda:	e127      	b.n	8003e2c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003bdc:	2201      	movs	r2, #1
 8003bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be0:	fa02 f303 	lsl.w	r3, r2, r3
 8003be4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	69fa      	ldr	r2, [r7, #28]
 8003bec:	4013      	ands	r3, r2
 8003bee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003bf0:	69ba      	ldr	r2, [r7, #24]
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	f040 8116 	bne.w	8003e26 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	2b12      	cmp	r3, #18
 8003c00:	d034      	beq.n	8003c6c <HAL_GPIO_Init+0xa4>
 8003c02:	2b12      	cmp	r3, #18
 8003c04:	d80d      	bhi.n	8003c22 <HAL_GPIO_Init+0x5a>
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d02b      	beq.n	8003c62 <HAL_GPIO_Init+0x9a>
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d804      	bhi.n	8003c18 <HAL_GPIO_Init+0x50>
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d031      	beq.n	8003c76 <HAL_GPIO_Init+0xae>
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d01c      	beq.n	8003c50 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003c16:	e048      	b.n	8003caa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003c18:	2b03      	cmp	r3, #3
 8003c1a:	d043      	beq.n	8003ca4 <HAL_GPIO_Init+0xdc>
 8003c1c:	2b11      	cmp	r3, #17
 8003c1e:	d01b      	beq.n	8003c58 <HAL_GPIO_Init+0x90>
          break;
 8003c20:	e043      	b.n	8003caa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003c22:	4a89      	ldr	r2, [pc, #548]	; (8003e48 <HAL_GPIO_Init+0x280>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d026      	beq.n	8003c76 <HAL_GPIO_Init+0xae>
 8003c28:	4a87      	ldr	r2, [pc, #540]	; (8003e48 <HAL_GPIO_Init+0x280>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d806      	bhi.n	8003c3c <HAL_GPIO_Init+0x74>
 8003c2e:	4a87      	ldr	r2, [pc, #540]	; (8003e4c <HAL_GPIO_Init+0x284>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d020      	beq.n	8003c76 <HAL_GPIO_Init+0xae>
 8003c34:	4a86      	ldr	r2, [pc, #536]	; (8003e50 <HAL_GPIO_Init+0x288>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d01d      	beq.n	8003c76 <HAL_GPIO_Init+0xae>
          break;
 8003c3a:	e036      	b.n	8003caa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003c3c:	4a85      	ldr	r2, [pc, #532]	; (8003e54 <HAL_GPIO_Init+0x28c>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d019      	beq.n	8003c76 <HAL_GPIO_Init+0xae>
 8003c42:	4a85      	ldr	r2, [pc, #532]	; (8003e58 <HAL_GPIO_Init+0x290>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d016      	beq.n	8003c76 <HAL_GPIO_Init+0xae>
 8003c48:	4a84      	ldr	r2, [pc, #528]	; (8003e5c <HAL_GPIO_Init+0x294>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d013      	beq.n	8003c76 <HAL_GPIO_Init+0xae>
          break;
 8003c4e:	e02c      	b.n	8003caa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	623b      	str	r3, [r7, #32]
          break;
 8003c56:	e028      	b.n	8003caa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	3304      	adds	r3, #4
 8003c5e:	623b      	str	r3, [r7, #32]
          break;
 8003c60:	e023      	b.n	8003caa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	3308      	adds	r3, #8
 8003c68:	623b      	str	r3, [r7, #32]
          break;
 8003c6a:	e01e      	b.n	8003caa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	330c      	adds	r3, #12
 8003c72:	623b      	str	r3, [r7, #32]
          break;
 8003c74:	e019      	b.n	8003caa <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d102      	bne.n	8003c84 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003c7e:	2304      	movs	r3, #4
 8003c80:	623b      	str	r3, [r7, #32]
          break;
 8003c82:	e012      	b.n	8003caa <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d105      	bne.n	8003c98 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003c8c:	2308      	movs	r3, #8
 8003c8e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	69fa      	ldr	r2, [r7, #28]
 8003c94:	611a      	str	r2, [r3, #16]
          break;
 8003c96:	e008      	b.n	8003caa <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003c98:	2308      	movs	r3, #8
 8003c9a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	69fa      	ldr	r2, [r7, #28]
 8003ca0:	615a      	str	r2, [r3, #20]
          break;
 8003ca2:	e002      	b.n	8003caa <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	623b      	str	r3, [r7, #32]
          break;
 8003ca8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	2bff      	cmp	r3, #255	; 0xff
 8003cae:	d801      	bhi.n	8003cb4 <HAL_GPIO_Init+0xec>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	e001      	b.n	8003cb8 <HAL_GPIO_Init+0xf0>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	3304      	adds	r3, #4
 8003cb8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	2bff      	cmp	r3, #255	; 0xff
 8003cbe:	d802      	bhi.n	8003cc6 <HAL_GPIO_Init+0xfe>
 8003cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	e002      	b.n	8003ccc <HAL_GPIO_Init+0x104>
 8003cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc8:	3b08      	subs	r3, #8
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	210f      	movs	r1, #15
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cda:	43db      	mvns	r3, r3
 8003cdc:	401a      	ands	r2, r3
 8003cde:	6a39      	ldr	r1, [r7, #32]
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ce6:	431a      	orrs	r2, r3
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	f000 8096 	beq.w	8003e26 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003cfa:	4b59      	ldr	r3, [pc, #356]	; (8003e60 <HAL_GPIO_Init+0x298>)
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	4a58      	ldr	r2, [pc, #352]	; (8003e60 <HAL_GPIO_Init+0x298>)
 8003d00:	f043 0301 	orr.w	r3, r3, #1
 8003d04:	6193      	str	r3, [r2, #24]
 8003d06:	4b56      	ldr	r3, [pc, #344]	; (8003e60 <HAL_GPIO_Init+0x298>)
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	60bb      	str	r3, [r7, #8]
 8003d10:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003d12:	4a54      	ldr	r2, [pc, #336]	; (8003e64 <HAL_GPIO_Init+0x29c>)
 8003d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d16:	089b      	lsrs	r3, r3, #2
 8003d18:	3302      	adds	r3, #2
 8003d1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d1e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d22:	f003 0303 	and.w	r3, r3, #3
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	220f      	movs	r2, #15
 8003d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2e:	43db      	mvns	r3, r3
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	4013      	ands	r3, r2
 8003d34:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a4b      	ldr	r2, [pc, #300]	; (8003e68 <HAL_GPIO_Init+0x2a0>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d013      	beq.n	8003d66 <HAL_GPIO_Init+0x19e>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a4a      	ldr	r2, [pc, #296]	; (8003e6c <HAL_GPIO_Init+0x2a4>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d00d      	beq.n	8003d62 <HAL_GPIO_Init+0x19a>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a49      	ldr	r2, [pc, #292]	; (8003e70 <HAL_GPIO_Init+0x2a8>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d007      	beq.n	8003d5e <HAL_GPIO_Init+0x196>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a48      	ldr	r2, [pc, #288]	; (8003e74 <HAL_GPIO_Init+0x2ac>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d101      	bne.n	8003d5a <HAL_GPIO_Init+0x192>
 8003d56:	2303      	movs	r3, #3
 8003d58:	e006      	b.n	8003d68 <HAL_GPIO_Init+0x1a0>
 8003d5a:	2304      	movs	r3, #4
 8003d5c:	e004      	b.n	8003d68 <HAL_GPIO_Init+0x1a0>
 8003d5e:	2302      	movs	r3, #2
 8003d60:	e002      	b.n	8003d68 <HAL_GPIO_Init+0x1a0>
 8003d62:	2301      	movs	r3, #1
 8003d64:	e000      	b.n	8003d68 <HAL_GPIO_Init+0x1a0>
 8003d66:	2300      	movs	r3, #0
 8003d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d6a:	f002 0203 	and.w	r2, r2, #3
 8003d6e:	0092      	lsls	r2, r2, #2
 8003d70:	4093      	lsls	r3, r2
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003d78:	493a      	ldr	r1, [pc, #232]	; (8003e64 <HAL_GPIO_Init+0x29c>)
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7c:	089b      	lsrs	r3, r3, #2
 8003d7e:	3302      	adds	r3, #2
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d006      	beq.n	8003da0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003d92:	4b39      	ldr	r3, [pc, #228]	; (8003e78 <HAL_GPIO_Init+0x2b0>)
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	4938      	ldr	r1, [pc, #224]	; (8003e78 <HAL_GPIO_Init+0x2b0>)
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	600b      	str	r3, [r1, #0]
 8003d9e:	e006      	b.n	8003dae <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003da0:	4b35      	ldr	r3, [pc, #212]	; (8003e78 <HAL_GPIO_Init+0x2b0>)
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	43db      	mvns	r3, r3
 8003da8:	4933      	ldr	r1, [pc, #204]	; (8003e78 <HAL_GPIO_Init+0x2b0>)
 8003daa:	4013      	ands	r3, r2
 8003dac:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d006      	beq.n	8003dc8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003dba:	4b2f      	ldr	r3, [pc, #188]	; (8003e78 <HAL_GPIO_Init+0x2b0>)
 8003dbc:	685a      	ldr	r2, [r3, #4]
 8003dbe:	492e      	ldr	r1, [pc, #184]	; (8003e78 <HAL_GPIO_Init+0x2b0>)
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	604b      	str	r3, [r1, #4]
 8003dc6:	e006      	b.n	8003dd6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003dc8:	4b2b      	ldr	r3, [pc, #172]	; (8003e78 <HAL_GPIO_Init+0x2b0>)
 8003dca:	685a      	ldr	r2, [r3, #4]
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	43db      	mvns	r3, r3
 8003dd0:	4929      	ldr	r1, [pc, #164]	; (8003e78 <HAL_GPIO_Init+0x2b0>)
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d006      	beq.n	8003df0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003de2:	4b25      	ldr	r3, [pc, #148]	; (8003e78 <HAL_GPIO_Init+0x2b0>)
 8003de4:	689a      	ldr	r2, [r3, #8]
 8003de6:	4924      	ldr	r1, [pc, #144]	; (8003e78 <HAL_GPIO_Init+0x2b0>)
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	608b      	str	r3, [r1, #8]
 8003dee:	e006      	b.n	8003dfe <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003df0:	4b21      	ldr	r3, [pc, #132]	; (8003e78 <HAL_GPIO_Init+0x2b0>)
 8003df2:	689a      	ldr	r2, [r3, #8]
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	43db      	mvns	r3, r3
 8003df8:	491f      	ldr	r1, [pc, #124]	; (8003e78 <HAL_GPIO_Init+0x2b0>)
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d006      	beq.n	8003e18 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003e0a:	4b1b      	ldr	r3, [pc, #108]	; (8003e78 <HAL_GPIO_Init+0x2b0>)
 8003e0c:	68da      	ldr	r2, [r3, #12]
 8003e0e:	491a      	ldr	r1, [pc, #104]	; (8003e78 <HAL_GPIO_Init+0x2b0>)
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	60cb      	str	r3, [r1, #12]
 8003e16:	e006      	b.n	8003e26 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003e18:	4b17      	ldr	r3, [pc, #92]	; (8003e78 <HAL_GPIO_Init+0x2b0>)
 8003e1a:	68da      	ldr	r2, [r3, #12]
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	43db      	mvns	r3, r3
 8003e20:	4915      	ldr	r1, [pc, #84]	; (8003e78 <HAL_GPIO_Init+0x2b0>)
 8003e22:	4013      	ands	r3, r2
 8003e24:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e28:	3301      	adds	r3, #1
 8003e2a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e32:	fa22 f303 	lsr.w	r3, r2, r3
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	f47f aed0 	bne.w	8003bdc <HAL_GPIO_Init+0x14>
  }
}
 8003e3c:	bf00      	nop
 8003e3e:	372c      	adds	r7, #44	; 0x2c
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bc80      	pop	{r7}
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	10210000 	.word	0x10210000
 8003e4c:	10110000 	.word	0x10110000
 8003e50:	10120000 	.word	0x10120000
 8003e54:	10310000 	.word	0x10310000
 8003e58:	10320000 	.word	0x10320000
 8003e5c:	10220000 	.word	0x10220000
 8003e60:	40021000 	.word	0x40021000
 8003e64:	40010000 	.word	0x40010000
 8003e68:	40010800 	.word	0x40010800
 8003e6c:	40010c00 	.word	0x40010c00
 8003e70:	40011000 	.word	0x40011000
 8003e74:	40011400 	.word	0x40011400
 8003e78:	40010400 	.word	0x40010400

08003e7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b085      	sub	sp, #20
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	460b      	mov	r3, r1
 8003e86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	689a      	ldr	r2, [r3, #8]
 8003e8c:	887b      	ldrh	r3, [r7, #2]
 8003e8e:	4013      	ands	r3, r2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d002      	beq.n	8003e9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e94:	2301      	movs	r3, #1
 8003e96:	73fb      	strb	r3, [r7, #15]
 8003e98:	e001      	b.n	8003e9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3714      	adds	r7, #20
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bc80      	pop	{r7}
 8003ea8:	4770      	bx	lr

08003eaa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003eaa:	b480      	push	{r7}
 8003eac:	b083      	sub	sp, #12
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	807b      	strh	r3, [r7, #2]
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003eba:	787b      	ldrb	r3, [r7, #1]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d003      	beq.n	8003ec8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ec0:	887a      	ldrh	r2, [r7, #2]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003ec6:	e003      	b.n	8003ed0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003ec8:	887b      	ldrh	r3, [r7, #2]
 8003eca:	041a      	lsls	r2, r3, #16
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	611a      	str	r2, [r3, #16]
}
 8003ed0:	bf00      	nop
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bc80      	pop	{r7}
 8003ed8:	4770      	bx	lr
	...

08003edc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d101      	bne.n	8003eee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e11f      	b.n	800412e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d106      	bne.n	8003f08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f7fe f83e 	bl	8001f84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2224      	movs	r2, #36	; 0x24
 8003f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f022 0201 	bic.w	r2, r2, #1
 8003f1e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f2e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f3e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f40:	f002 f838 	bl	8005fb4 <HAL_RCC_GetPCLK1Freq>
 8003f44:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	4a7b      	ldr	r2, [pc, #492]	; (8004138 <HAL_I2C_Init+0x25c>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d807      	bhi.n	8003f60 <HAL_I2C_Init+0x84>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	4a7a      	ldr	r2, [pc, #488]	; (800413c <HAL_I2C_Init+0x260>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	bf94      	ite	ls
 8003f58:	2301      	movls	r3, #1
 8003f5a:	2300      	movhi	r3, #0
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	e006      	b.n	8003f6e <HAL_I2C_Init+0x92>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	4a77      	ldr	r2, [pc, #476]	; (8004140 <HAL_I2C_Init+0x264>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	bf94      	ite	ls
 8003f68:	2301      	movls	r3, #1
 8003f6a:	2300      	movhi	r3, #0
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d001      	beq.n	8003f76 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e0db      	b.n	800412e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	4a72      	ldr	r2, [pc, #456]	; (8004144 <HAL_I2C_Init+0x268>)
 8003f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7e:	0c9b      	lsrs	r3, r3, #18
 8003f80:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68ba      	ldr	r2, [r7, #8]
 8003f92:	430a      	orrs	r2, r1
 8003f94:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	6a1b      	ldr	r3, [r3, #32]
 8003f9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	4a64      	ldr	r2, [pc, #400]	; (8004138 <HAL_I2C_Init+0x25c>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d802      	bhi.n	8003fb0 <HAL_I2C_Init+0xd4>
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	3301      	adds	r3, #1
 8003fae:	e009      	b.n	8003fc4 <HAL_I2C_Init+0xe8>
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003fb6:	fb02 f303 	mul.w	r3, r2, r3
 8003fba:	4a63      	ldr	r2, [pc, #396]	; (8004148 <HAL_I2C_Init+0x26c>)
 8003fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc0:	099b      	lsrs	r3, r3, #6
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	6812      	ldr	r2, [r2, #0]
 8003fc8:	430b      	orrs	r3, r1
 8003fca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	69db      	ldr	r3, [r3, #28]
 8003fd2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003fd6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	4956      	ldr	r1, [pc, #344]	; (8004138 <HAL_I2C_Init+0x25c>)
 8003fe0:	428b      	cmp	r3, r1
 8003fe2:	d80d      	bhi.n	8004000 <HAL_I2C_Init+0x124>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	1e59      	subs	r1, r3, #1
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	005b      	lsls	r3, r3, #1
 8003fee:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ff8:	2b04      	cmp	r3, #4
 8003ffa:	bf38      	it	cc
 8003ffc:	2304      	movcc	r3, #4
 8003ffe:	e04f      	b.n	80040a0 <HAL_I2C_Init+0x1c4>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d111      	bne.n	800402c <HAL_I2C_Init+0x150>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	1e58      	subs	r0, r3, #1
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6859      	ldr	r1, [r3, #4]
 8004010:	460b      	mov	r3, r1
 8004012:	005b      	lsls	r3, r3, #1
 8004014:	440b      	add	r3, r1
 8004016:	fbb0 f3f3 	udiv	r3, r0, r3
 800401a:	3301      	adds	r3, #1
 800401c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004020:	2b00      	cmp	r3, #0
 8004022:	bf0c      	ite	eq
 8004024:	2301      	moveq	r3, #1
 8004026:	2300      	movne	r3, #0
 8004028:	b2db      	uxtb	r3, r3
 800402a:	e012      	b.n	8004052 <HAL_I2C_Init+0x176>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	1e58      	subs	r0, r3, #1
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6859      	ldr	r1, [r3, #4]
 8004034:	460b      	mov	r3, r1
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	440b      	add	r3, r1
 800403a:	0099      	lsls	r1, r3, #2
 800403c:	440b      	add	r3, r1
 800403e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004042:	3301      	adds	r3, #1
 8004044:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004048:	2b00      	cmp	r3, #0
 800404a:	bf0c      	ite	eq
 800404c:	2301      	moveq	r3, #1
 800404e:	2300      	movne	r3, #0
 8004050:	b2db      	uxtb	r3, r3
 8004052:	2b00      	cmp	r3, #0
 8004054:	d001      	beq.n	800405a <HAL_I2C_Init+0x17e>
 8004056:	2301      	movs	r3, #1
 8004058:	e022      	b.n	80040a0 <HAL_I2C_Init+0x1c4>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10e      	bne.n	8004080 <HAL_I2C_Init+0x1a4>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	1e58      	subs	r0, r3, #1
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6859      	ldr	r1, [r3, #4]
 800406a:	460b      	mov	r3, r1
 800406c:	005b      	lsls	r3, r3, #1
 800406e:	440b      	add	r3, r1
 8004070:	fbb0 f3f3 	udiv	r3, r0, r3
 8004074:	3301      	adds	r3, #1
 8004076:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800407a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800407e:	e00f      	b.n	80040a0 <HAL_I2C_Init+0x1c4>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	1e58      	subs	r0, r3, #1
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6859      	ldr	r1, [r3, #4]
 8004088:	460b      	mov	r3, r1
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	440b      	add	r3, r1
 800408e:	0099      	lsls	r1, r3, #2
 8004090:	440b      	add	r3, r1
 8004092:	fbb0 f3f3 	udiv	r3, r0, r3
 8004096:	3301      	adds	r3, #1
 8004098:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800409c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040a0:	6879      	ldr	r1, [r7, #4]
 80040a2:	6809      	ldr	r1, [r1, #0]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	69da      	ldr	r2, [r3, #28]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a1b      	ldr	r3, [r3, #32]
 80040ba:	431a      	orrs	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	430a      	orrs	r2, r1
 80040c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80040ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	6911      	ldr	r1, [r2, #16]
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	68d2      	ldr	r2, [r2, #12]
 80040da:	4311      	orrs	r1, r2
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	6812      	ldr	r2, [r2, #0]
 80040e0:	430b      	orrs	r3, r1
 80040e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	695a      	ldr	r2, [r3, #20]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	699b      	ldr	r3, [r3, #24]
 80040f6:	431a      	orrs	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	430a      	orrs	r2, r1
 80040fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f042 0201 	orr.w	r2, r2, #1
 800410e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2220      	movs	r2, #32
 800411a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	3710      	adds	r7, #16
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	000186a0 	.word	0x000186a0
 800413c:	001e847f 	.word	0x001e847f
 8004140:	003d08ff 	.word	0x003d08ff
 8004144:	431bde83 	.word	0x431bde83
 8004148:	10624dd3 	.word	0x10624dd3

0800414c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b088      	sub	sp, #32
 8004150:	af02      	add	r7, sp, #8
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	607a      	str	r2, [r7, #4]
 8004156:	461a      	mov	r2, r3
 8004158:	460b      	mov	r3, r1
 800415a:	817b      	strh	r3, [r7, #10]
 800415c:	4613      	mov	r3, r2
 800415e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004160:	f7fe fe9e 	bl	8002ea0 <HAL_GetTick>
 8004164:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b20      	cmp	r3, #32
 8004170:	f040 80e0 	bne.w	8004334 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	9300      	str	r3, [sp, #0]
 8004178:	2319      	movs	r3, #25
 800417a:	2201      	movs	r2, #1
 800417c:	4970      	ldr	r1, [pc, #448]	; (8004340 <HAL_I2C_Master_Transmit+0x1f4>)
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	f001 f966 	bl	8005450 <I2C_WaitOnFlagUntilTimeout>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d001      	beq.n	800418e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800418a:	2302      	movs	r3, #2
 800418c:	e0d3      	b.n	8004336 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004194:	2b01      	cmp	r3, #1
 8004196:	d101      	bne.n	800419c <HAL_I2C_Master_Transmit+0x50>
 8004198:	2302      	movs	r3, #2
 800419a:	e0cc      	b.n	8004336 <HAL_I2C_Master_Transmit+0x1ea>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d007      	beq.n	80041c2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f042 0201 	orr.w	r2, r2, #1
 80041c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041d0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2221      	movs	r2, #33	; 0x21
 80041d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2210      	movs	r2, #16
 80041de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2200      	movs	r2, #0
 80041e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	893a      	ldrh	r2, [r7, #8]
 80041f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	4a50      	ldr	r2, [pc, #320]	; (8004344 <HAL_I2C_Master_Transmit+0x1f8>)
 8004202:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004204:	8979      	ldrh	r1, [r7, #10]
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	6a3a      	ldr	r2, [r7, #32]
 800420a:	68f8      	ldr	r0, [r7, #12]
 800420c:	f000 fe52 	bl	8004eb4 <I2C_MasterRequestWrite>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d001      	beq.n	800421a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e08d      	b.n	8004336 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800421a:	2300      	movs	r3, #0
 800421c:	613b      	str	r3, [r7, #16]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	695b      	ldr	r3, [r3, #20]
 8004224:	613b      	str	r3, [r7, #16]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	613b      	str	r3, [r7, #16]
 800422e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004230:	e066      	b.n	8004300 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004232:	697a      	ldr	r2, [r7, #20]
 8004234:	6a39      	ldr	r1, [r7, #32]
 8004236:	68f8      	ldr	r0, [r7, #12]
 8004238:	f001 f9e0 	bl	80055fc <I2C_WaitOnTXEFlagUntilTimeout>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d00d      	beq.n	800425e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004246:	2b04      	cmp	r3, #4
 8004248:	d107      	bne.n	800425a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004258:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e06b      	b.n	8004336 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004262:	781a      	ldrb	r2, [r3, #0]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426e:	1c5a      	adds	r2, r3, #1
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004278:	b29b      	uxth	r3, r3
 800427a:	3b01      	subs	r3, #1
 800427c:	b29a      	uxth	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004286:	3b01      	subs	r3, #1
 8004288:	b29a      	uxth	r2, r3
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	695b      	ldr	r3, [r3, #20]
 8004294:	f003 0304 	and.w	r3, r3, #4
 8004298:	2b04      	cmp	r3, #4
 800429a:	d11b      	bne.n	80042d4 <HAL_I2C_Master_Transmit+0x188>
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d017      	beq.n	80042d4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a8:	781a      	ldrb	r2, [r3, #0]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b4:	1c5a      	adds	r2, r3, #1
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042be:	b29b      	uxth	r3, r3
 80042c0:	3b01      	subs	r3, #1
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042cc:	3b01      	subs	r3, #1
 80042ce:	b29a      	uxth	r2, r3
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042d4:	697a      	ldr	r2, [r7, #20]
 80042d6:	6a39      	ldr	r1, [r7, #32]
 80042d8:	68f8      	ldr	r0, [r7, #12]
 80042da:	f001 f9d0 	bl	800567e <I2C_WaitOnBTFFlagUntilTimeout>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d00d      	beq.n	8004300 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e8:	2b04      	cmp	r3, #4
 80042ea:	d107      	bne.n	80042fc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042fa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e01a      	b.n	8004336 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004304:	2b00      	cmp	r3, #0
 8004306:	d194      	bne.n	8004232 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004316:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2220      	movs	r2, #32
 800431c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004330:	2300      	movs	r3, #0
 8004332:	e000      	b.n	8004336 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004334:	2302      	movs	r3, #2
  }
}
 8004336:	4618      	mov	r0, r3
 8004338:	3718      	adds	r7, #24
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	00100002 	.word	0x00100002
 8004344:	ffff0000 	.word	0xffff0000

08004348 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b08c      	sub	sp, #48	; 0x30
 800434c:	af02      	add	r7, sp, #8
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	607a      	str	r2, [r7, #4]
 8004352:	461a      	mov	r2, r3
 8004354:	460b      	mov	r3, r1
 8004356:	817b      	strh	r3, [r7, #10]
 8004358:	4613      	mov	r3, r2
 800435a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800435c:	2300      	movs	r3, #0
 800435e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004360:	f7fe fd9e 	bl	8002ea0 <HAL_GetTick>
 8004364:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800436c:	b2db      	uxtb	r3, r3
 800436e:	2b20      	cmp	r3, #32
 8004370:	f040 8238 	bne.w	80047e4 <HAL_I2C_Master_Receive+0x49c>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004376:	9300      	str	r3, [sp, #0]
 8004378:	2319      	movs	r3, #25
 800437a:	2201      	movs	r2, #1
 800437c:	497e      	ldr	r1, [pc, #504]	; (8004578 <HAL_I2C_Master_Receive+0x230>)
 800437e:	68f8      	ldr	r0, [r7, #12]
 8004380:	f001 f866 	bl	8005450 <I2C_WaitOnFlagUntilTimeout>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d001      	beq.n	800438e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800438a:	2302      	movs	r3, #2
 800438c:	e22b      	b.n	80047e6 <HAL_I2C_Master_Receive+0x49e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004394:	2b01      	cmp	r3, #1
 8004396:	d101      	bne.n	800439c <HAL_I2C_Master_Receive+0x54>
 8004398:	2302      	movs	r3, #2
 800439a:	e224      	b.n	80047e6 <HAL_I2C_Master_Receive+0x49e>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0301 	and.w	r3, r3, #1
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d007      	beq.n	80043c2 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f042 0201 	orr.w	r2, r2, #1
 80043c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043d0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2222      	movs	r2, #34	; 0x22
 80043d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2210      	movs	r2, #16
 80043de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	893a      	ldrh	r2, [r7, #8]
 80043f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f8:	b29a      	uxth	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	4a5e      	ldr	r2, [pc, #376]	; (800457c <HAL_I2C_Master_Receive+0x234>)
 8004402:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004404:	8979      	ldrh	r1, [r7, #10]
 8004406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004408:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	f000 fdd4 	bl	8004fb8 <I2C_MasterRequestRead>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d001      	beq.n	800441a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e1e5      	b.n	80047e6 <HAL_I2C_Master_Receive+0x49e>
    }

    if (hi2c->XferSize == 0U)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800441e:	2b00      	cmp	r3, #0
 8004420:	d113      	bne.n	800444a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004422:	2300      	movs	r3, #0
 8004424:	61fb      	str	r3, [r7, #28]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	695b      	ldr	r3, [r3, #20]
 800442c:	61fb      	str	r3, [r7, #28]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	61fb      	str	r3, [r7, #28]
 8004436:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004446:	601a      	str	r2, [r3, #0]
 8004448:	e1b9      	b.n	80047be <HAL_I2C_Master_Receive+0x476>
    }
    else if (hi2c->XferSize == 1U)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800444e:	2b01      	cmp	r3, #1
 8004450:	d11d      	bne.n	800448e <HAL_I2C_Master_Receive+0x146>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004460:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004462:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004464:	2300      	movs	r3, #0
 8004466:	61bb      	str	r3, [r7, #24]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	61bb      	str	r3, [r7, #24]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	61bb      	str	r3, [r7, #24]
 8004478:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004488:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800448a:	b662      	cpsie	i
 800448c:	e197      	b.n	80047be <HAL_I2C_Master_Receive+0x476>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004492:	2b02      	cmp	r3, #2
 8004494:	d11d      	bne.n	80044d2 <HAL_I2C_Master_Receive+0x18a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044a4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80044a6:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044a8:	2300      	movs	r3, #0
 80044aa:	617b      	str	r3, [r7, #20]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	695b      	ldr	r3, [r3, #20]
 80044b2:	617b      	str	r3, [r7, #20]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	617b      	str	r3, [r7, #20]
 80044bc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044cc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80044ce:	b662      	cpsie	i
 80044d0:	e175      	b.n	80047be <HAL_I2C_Master_Receive+0x476>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80044e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044e2:	2300      	movs	r3, #0
 80044e4:	613b      	str	r3, [r7, #16]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	695b      	ldr	r3, [r3, #20]
 80044ec:	613b      	str	r3, [r7, #16]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	613b      	str	r3, [r7, #16]
 80044f6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80044f8:	e161      	b.n	80047be <HAL_I2C_Master_Receive+0x476>
    {
      if (hi2c->XferSize <= 3U)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044fe:	2b03      	cmp	r3, #3
 8004500:	f200 811a 	bhi.w	8004738 <HAL_I2C_Master_Receive+0x3f0>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004508:	2b01      	cmp	r3, #1
 800450a:	d123      	bne.n	8004554 <HAL_I2C_Master_Receive+0x20c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800450c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800450e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004510:	68f8      	ldr	r0, [r7, #12]
 8004512:	f001 f8f5 	bl	8005700 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d001      	beq.n	8004520 <HAL_I2C_Master_Receive+0x1d8>
          {
            return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e162      	b.n	80047e6 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	691a      	ldr	r2, [r3, #16]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452a:	b2d2      	uxtb	r2, r2
 800452c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004532:	1c5a      	adds	r2, r3, #1
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800453c:	3b01      	subs	r3, #1
 800453e:	b29a      	uxth	r2, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004548:	b29b      	uxth	r3, r3
 800454a:	3b01      	subs	r3, #1
 800454c:	b29a      	uxth	r2, r3
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004552:	e134      	b.n	80047be <HAL_I2C_Master_Receive+0x476>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004558:	2b02      	cmp	r3, #2
 800455a:	d150      	bne.n	80045fe <HAL_I2C_Master_Receive+0x2b6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800455c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455e:	9300      	str	r3, [sp, #0]
 8004560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004562:	2200      	movs	r2, #0
 8004564:	4906      	ldr	r1, [pc, #24]	; (8004580 <HAL_I2C_Master_Receive+0x238>)
 8004566:	68f8      	ldr	r0, [r7, #12]
 8004568:	f000 ff72 	bl	8005450 <I2C_WaitOnFlagUntilTimeout>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d008      	beq.n	8004584 <HAL_I2C_Master_Receive+0x23c>
          {
            return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e137      	b.n	80047e6 <HAL_I2C_Master_Receive+0x49e>
 8004576:	bf00      	nop
 8004578:	00100002 	.word	0x00100002
 800457c:	ffff0000 	.word	0xffff0000
 8004580:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004584:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004594:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	691a      	ldr	r2, [r3, #16]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a0:	b2d2      	uxtb	r2, r2
 80045a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a8:	1c5a      	adds	r2, r3, #1
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045b2:	3b01      	subs	r3, #1
 80045b4:	b29a      	uxth	r2, r3
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045be:	b29b      	uxth	r3, r3
 80045c0:	3b01      	subs	r3, #1
 80045c2:	b29a      	uxth	r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80045c8:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	691a      	ldr	r2, [r3, #16]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d4:	b2d2      	uxtb	r2, r2
 80045d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045dc:	1c5a      	adds	r2, r3, #1
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045e6:	3b01      	subs	r3, #1
 80045e8:	b29a      	uxth	r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	3b01      	subs	r3, #1
 80045f6:	b29a      	uxth	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80045fc:	e0df      	b.n	80047be <HAL_I2C_Master_Receive+0x476>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004600:	9300      	str	r3, [sp, #0]
 8004602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004604:	2200      	movs	r2, #0
 8004606:	497a      	ldr	r1, [pc, #488]	; (80047f0 <HAL_I2C_Master_Receive+0x4a8>)
 8004608:	68f8      	ldr	r0, [r7, #12]
 800460a:	f000 ff21 	bl	8005450 <I2C_WaitOnFlagUntilTimeout>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d001      	beq.n	8004618 <HAL_I2C_Master_Receive+0x2d0>
          {
            return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e0e6      	b.n	80047e6 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004626:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004628:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	691a      	ldr	r2, [r3, #16]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004634:	b2d2      	uxtb	r2, r2
 8004636:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463c:	1c5a      	adds	r2, r3, #1
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004646:	3b01      	subs	r3, #1
 8004648:	b29a      	uxth	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004652:	b29b      	uxth	r3, r3
 8004654:	3b01      	subs	r3, #1
 8004656:	b29a      	uxth	r2, r3
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800465c:	4b65      	ldr	r3, [pc, #404]	; (80047f4 <HAL_I2C_Master_Receive+0x4ac>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	08db      	lsrs	r3, r3, #3
 8004662:	4a65      	ldr	r2, [pc, #404]	; (80047f8 <HAL_I2C_Master_Receive+0x4b0>)
 8004664:	fba2 2303 	umull	r2, r3, r2, r3
 8004668:	0a1a      	lsrs	r2, r3, #8
 800466a:	4613      	mov	r3, r2
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	4413      	add	r3, r2
 8004670:	00da      	lsls	r2, r3, #3
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004676:	6a3b      	ldr	r3, [r7, #32]
 8004678:	3b01      	subs	r3, #1
 800467a:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800467c:	6a3b      	ldr	r3, [r7, #32]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d117      	bne.n	80046b2 <HAL_I2C_Master_Receive+0x36a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2220      	movs	r2, #32
 800468c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469c:	f043 0220 	orr.w	r2, r3, #32
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80046a4:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e099      	b.n	80047e6 <HAL_I2C_Master_Receive+0x49e>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	695b      	ldr	r3, [r3, #20]
 80046b8:	f003 0304 	and.w	r3, r3, #4
 80046bc:	2b04      	cmp	r3, #4
 80046be:	d1da      	bne.n	8004676 <HAL_I2C_Master_Receive+0x32e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	691a      	ldr	r2, [r3, #16]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046da:	b2d2      	uxtb	r2, r2
 80046dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e2:	1c5a      	adds	r2, r3, #1
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ec:	3b01      	subs	r3, #1
 80046ee:	b29a      	uxth	r2, r3
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	3b01      	subs	r3, #1
 80046fc:	b29a      	uxth	r2, r3
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004702:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	691a      	ldr	r2, [r3, #16]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470e:	b2d2      	uxtb	r2, r2
 8004710:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004716:	1c5a      	adds	r2, r3, #1
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004720:	3b01      	subs	r3, #1
 8004722:	b29a      	uxth	r2, r3
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800472c:	b29b      	uxth	r3, r3
 800472e:	3b01      	subs	r3, #1
 8004730:	b29a      	uxth	r2, r3
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004736:	e042      	b.n	80047be <HAL_I2C_Master_Receive+0x476>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800473a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f000 ffdf 	bl	8005700 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d001      	beq.n	800474c <HAL_I2C_Master_Receive+0x404>
        {
          return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e04c      	b.n	80047e6 <HAL_I2C_Master_Receive+0x49e>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	691a      	ldr	r2, [r3, #16]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004756:	b2d2      	uxtb	r2, r2
 8004758:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475e:	1c5a      	adds	r2, r3, #1
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004768:	3b01      	subs	r3, #1
 800476a:	b29a      	uxth	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004774:	b29b      	uxth	r3, r3
 8004776:	3b01      	subs	r3, #1
 8004778:	b29a      	uxth	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	695b      	ldr	r3, [r3, #20]
 8004784:	f003 0304 	and.w	r3, r3, #4
 8004788:	2b04      	cmp	r3, #4
 800478a:	d118      	bne.n	80047be <HAL_I2C_Master_Receive+0x476>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	691a      	ldr	r2, [r3, #16]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004796:	b2d2      	uxtb	r2, r2
 8004798:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479e:	1c5a      	adds	r2, r3, #1
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047a8:	3b01      	subs	r3, #1
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	3b01      	subs	r3, #1
 80047b8:	b29a      	uxth	r2, r3
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	f47f ae99 	bne.w	80044fa <HAL_I2C_Master_Receive+0x1b2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2220      	movs	r2, #32
 80047cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80047e0:	2300      	movs	r3, #0
 80047e2:	e000      	b.n	80047e6 <HAL_I2C_Master_Receive+0x49e>
  }
  else
  {
    return HAL_BUSY;
 80047e4:	2302      	movs	r3, #2
  }
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3728      	adds	r7, #40	; 0x28
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	00010004 	.word	0x00010004
 80047f4:	20000004 	.word	0x20000004
 80047f8:	14f8b589 	.word	0x14f8b589

080047fc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b088      	sub	sp, #32
 8004800:	af02      	add	r7, sp, #8
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	4608      	mov	r0, r1
 8004806:	4611      	mov	r1, r2
 8004808:	461a      	mov	r2, r3
 800480a:	4603      	mov	r3, r0
 800480c:	817b      	strh	r3, [r7, #10]
 800480e:	460b      	mov	r3, r1
 8004810:	813b      	strh	r3, [r7, #8]
 8004812:	4613      	mov	r3, r2
 8004814:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004816:	f7fe fb43 	bl	8002ea0 <HAL_GetTick>
 800481a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004822:	b2db      	uxtb	r3, r3
 8004824:	2b20      	cmp	r3, #32
 8004826:	f040 80d9 	bne.w	80049dc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	9300      	str	r3, [sp, #0]
 800482e:	2319      	movs	r3, #25
 8004830:	2201      	movs	r2, #1
 8004832:	496d      	ldr	r1, [pc, #436]	; (80049e8 <HAL_I2C_Mem_Write+0x1ec>)
 8004834:	68f8      	ldr	r0, [r7, #12]
 8004836:	f000 fe0b 	bl	8005450 <I2C_WaitOnFlagUntilTimeout>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d001      	beq.n	8004844 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004840:	2302      	movs	r3, #2
 8004842:	e0cc      	b.n	80049de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800484a:	2b01      	cmp	r3, #1
 800484c:	d101      	bne.n	8004852 <HAL_I2C_Mem_Write+0x56>
 800484e:	2302      	movs	r3, #2
 8004850:	e0c5      	b.n	80049de <HAL_I2C_Mem_Write+0x1e2>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2201      	movs	r2, #1
 8004856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0301 	and.w	r3, r3, #1
 8004864:	2b01      	cmp	r3, #1
 8004866:	d007      	beq.n	8004878 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f042 0201 	orr.w	r2, r2, #1
 8004876:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004886:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2221      	movs	r2, #33	; 0x21
 800488c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2240      	movs	r2, #64	; 0x40
 8004894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2200      	movs	r2, #0
 800489c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6a3a      	ldr	r2, [r7, #32]
 80048a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80048a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ae:	b29a      	uxth	r2, r3
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	4a4d      	ldr	r2, [pc, #308]	; (80049ec <HAL_I2C_Mem_Write+0x1f0>)
 80048b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80048ba:	88f8      	ldrh	r0, [r7, #6]
 80048bc:	893a      	ldrh	r2, [r7, #8]
 80048be:	8979      	ldrh	r1, [r7, #10]
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	9301      	str	r3, [sp, #4]
 80048c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c6:	9300      	str	r3, [sp, #0]
 80048c8:	4603      	mov	r3, r0
 80048ca:	68f8      	ldr	r0, [r7, #12]
 80048cc:	f000 fc42 	bl	8005154 <I2C_RequestMemoryWrite>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d052      	beq.n	800497c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e081      	b.n	80049de <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048da:	697a      	ldr	r2, [r7, #20]
 80048dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048de:	68f8      	ldr	r0, [r7, #12]
 80048e0:	f000 fe8c 	bl	80055fc <I2C_WaitOnTXEFlagUntilTimeout>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00d      	beq.n	8004906 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ee:	2b04      	cmp	r3, #4
 80048f0:	d107      	bne.n	8004902 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004900:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e06b      	b.n	80049de <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490a:	781a      	ldrb	r2, [r3, #0]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004916:	1c5a      	adds	r2, r3, #1
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004920:	3b01      	subs	r3, #1
 8004922:	b29a      	uxth	r2, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800492c:	b29b      	uxth	r3, r3
 800492e:	3b01      	subs	r3, #1
 8004930:	b29a      	uxth	r2, r3
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	695b      	ldr	r3, [r3, #20]
 800493c:	f003 0304 	and.w	r3, r3, #4
 8004940:	2b04      	cmp	r3, #4
 8004942:	d11b      	bne.n	800497c <HAL_I2C_Mem_Write+0x180>
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004948:	2b00      	cmp	r3, #0
 800494a:	d017      	beq.n	800497c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004950:	781a      	ldrb	r2, [r3, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495c:	1c5a      	adds	r2, r3, #1
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004966:	3b01      	subs	r3, #1
 8004968:	b29a      	uxth	r2, r3
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004972:	b29b      	uxth	r3, r3
 8004974:	3b01      	subs	r3, #1
 8004976:	b29a      	uxth	r2, r3
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004980:	2b00      	cmp	r3, #0
 8004982:	d1aa      	bne.n	80048da <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004984:	697a      	ldr	r2, [r7, #20]
 8004986:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004988:	68f8      	ldr	r0, [r7, #12]
 800498a:	f000 fe78 	bl	800567e <I2C_WaitOnBTFFlagUntilTimeout>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d00d      	beq.n	80049b0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004998:	2b04      	cmp	r3, #4
 800499a:	d107      	bne.n	80049ac <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049aa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e016      	b.n	80049de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2220      	movs	r2, #32
 80049c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80049d8:	2300      	movs	r3, #0
 80049da:	e000      	b.n	80049de <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80049dc:	2302      	movs	r3, #2
  }
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3718      	adds	r7, #24
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	00100002 	.word	0x00100002
 80049ec:	ffff0000 	.word	0xffff0000

080049f0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b08c      	sub	sp, #48	; 0x30
 80049f4:	af02      	add	r7, sp, #8
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	4608      	mov	r0, r1
 80049fa:	4611      	mov	r1, r2
 80049fc:	461a      	mov	r2, r3
 80049fe:	4603      	mov	r3, r0
 8004a00:	817b      	strh	r3, [r7, #10]
 8004a02:	460b      	mov	r3, r1
 8004a04:	813b      	strh	r3, [r7, #8]
 8004a06:	4613      	mov	r3, r2
 8004a08:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a0e:	f7fe fa47 	bl	8002ea0 <HAL_GetTick>
 8004a12:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	2b20      	cmp	r3, #32
 8004a1e:	f040 823d 	bne.w	8004e9c <HAL_I2C_Mem_Read+0x4ac>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a24:	9300      	str	r3, [sp, #0]
 8004a26:	2319      	movs	r3, #25
 8004a28:	2201      	movs	r2, #1
 8004a2a:	4981      	ldr	r1, [pc, #516]	; (8004c30 <HAL_I2C_Mem_Read+0x240>)
 8004a2c:	68f8      	ldr	r0, [r7, #12]
 8004a2e:	f000 fd0f 	bl	8005450 <I2C_WaitOnFlagUntilTimeout>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d001      	beq.n	8004a3c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004a38:	2302      	movs	r3, #2
 8004a3a:	e230      	b.n	8004e9e <HAL_I2C_Mem_Read+0x4ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d101      	bne.n	8004a4a <HAL_I2C_Mem_Read+0x5a>
 8004a46:	2302      	movs	r3, #2
 8004a48:	e229      	b.n	8004e9e <HAL_I2C_Mem_Read+0x4ae>
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0301 	and.w	r3, r3, #1
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d007      	beq.n	8004a70 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f042 0201 	orr.w	r2, r2, #1
 8004a6e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a7e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2222      	movs	r2, #34	; 0x22
 8004a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2240      	movs	r2, #64	; 0x40
 8004a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2200      	movs	r2, #0
 8004a94:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004aa0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aa6:	b29a      	uxth	r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	4a61      	ldr	r2, [pc, #388]	; (8004c34 <HAL_I2C_Mem_Read+0x244>)
 8004ab0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004ab2:	88f8      	ldrh	r0, [r7, #6]
 8004ab4:	893a      	ldrh	r2, [r7, #8]
 8004ab6:	8979      	ldrh	r1, [r7, #10]
 8004ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aba:	9301      	str	r3, [sp, #4]
 8004abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004abe:	9300      	str	r3, [sp, #0]
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	68f8      	ldr	r0, [r7, #12]
 8004ac4:	f000 fbdc 	bl	8005280 <I2C_RequestMemoryRead>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d001      	beq.n	8004ad2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e1e5      	b.n	8004e9e <HAL_I2C_Mem_Read+0x4ae>
    }

    if (hi2c->XferSize == 0U)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d113      	bne.n	8004b02 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ada:	2300      	movs	r3, #0
 8004adc:	61fb      	str	r3, [r7, #28]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	695b      	ldr	r3, [r3, #20]
 8004ae4:	61fb      	str	r3, [r7, #28]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	699b      	ldr	r3, [r3, #24]
 8004aec:	61fb      	str	r3, [r7, #28]
 8004aee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004afe:	601a      	str	r2, [r3, #0]
 8004b00:	e1b9      	b.n	8004e76 <HAL_I2C_Mem_Read+0x486>
    }
    else if (hi2c->XferSize == 1U)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d11d      	bne.n	8004b46 <HAL_I2C_Mem_Read+0x156>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b18:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004b1a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	61bb      	str	r3, [r7, #24]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	61bb      	str	r3, [r7, #24]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	61bb      	str	r3, [r7, #24]
 8004b30:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b40:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004b42:	b662      	cpsie	i
 8004b44:	e197      	b.n	8004e76 <HAL_I2C_Mem_Read+0x486>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d11d      	bne.n	8004b8a <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b5c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004b5e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b60:	2300      	movs	r3, #0
 8004b62:	617b      	str	r3, [r7, #20]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	695b      	ldr	r3, [r3, #20]
 8004b6a:	617b      	str	r3, [r7, #20]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	617b      	str	r3, [r7, #20]
 8004b74:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b84:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004b86:	b662      	cpsie	i
 8004b88:	e175      	b.n	8004e76 <HAL_I2C_Mem_Read+0x486>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b98:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	613b      	str	r3, [r7, #16]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	695b      	ldr	r3, [r3, #20]
 8004ba4:	613b      	str	r3, [r7, #16]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	699b      	ldr	r3, [r3, #24]
 8004bac:	613b      	str	r3, [r7, #16]
 8004bae:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004bb0:	e161      	b.n	8004e76 <HAL_I2C_Mem_Read+0x486>
    {
      if (hi2c->XferSize <= 3U)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bb6:	2b03      	cmp	r3, #3
 8004bb8:	f200 811a 	bhi.w	8004df0 <HAL_I2C_Mem_Read+0x400>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d123      	bne.n	8004c0c <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bc6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004bc8:	68f8      	ldr	r0, [r7, #12]
 8004bca:	f000 fd99 	bl	8005700 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d001      	beq.n	8004bd8 <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e162      	b.n	8004e9e <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	691a      	ldr	r2, [r3, #16]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be2:	b2d2      	uxtb	r2, r2
 8004be4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bea:	1c5a      	adds	r2, r3, #1
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bf4:	3b01      	subs	r3, #1
 8004bf6:	b29a      	uxth	r2, r3
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	3b01      	subs	r3, #1
 8004c04:	b29a      	uxth	r2, r3
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c0a:	e134      	b.n	8004e76 <HAL_I2C_Mem_Read+0x486>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d150      	bne.n	8004cb6 <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c16:	9300      	str	r3, [sp, #0]
 8004c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	4906      	ldr	r1, [pc, #24]	; (8004c38 <HAL_I2C_Mem_Read+0x248>)
 8004c1e:	68f8      	ldr	r0, [r7, #12]
 8004c20:	f000 fc16 	bl	8005450 <I2C_WaitOnFlagUntilTimeout>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d008      	beq.n	8004c3c <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e137      	b.n	8004e9e <HAL_I2C_Mem_Read+0x4ae>
 8004c2e:	bf00      	nop
 8004c30:	00100002 	.word	0x00100002
 8004c34:	ffff0000 	.word	0xffff0000
 8004c38:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004c3c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c4c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	691a      	ldr	r2, [r3, #16]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c58:	b2d2      	uxtb	r2, r2
 8004c5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c60:	1c5a      	adds	r2, r3, #1
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	b29a      	uxth	r2, r3
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	3b01      	subs	r3, #1
 8004c7a:	b29a      	uxth	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004c80:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	691a      	ldr	r2, [r3, #16]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8c:	b2d2      	uxtb	r2, r2
 8004c8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c94:	1c5a      	adds	r2, r3, #1
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	b29a      	uxth	r2, r3
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	3b01      	subs	r3, #1
 8004cae:	b29a      	uxth	r2, r3
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004cb4:	e0df      	b.n	8004e76 <HAL_I2C_Mem_Read+0x486>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb8:	9300      	str	r3, [sp, #0]
 8004cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	497a      	ldr	r1, [pc, #488]	; (8004ea8 <HAL_I2C_Mem_Read+0x4b8>)
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f000 fbc5 	bl	8005450 <I2C_WaitOnFlagUntilTimeout>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d001      	beq.n	8004cd0 <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e0e6      	b.n	8004e9e <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cde:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004ce0:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	691a      	ldr	r2, [r3, #16]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cec:	b2d2      	uxtb	r2, r2
 8004cee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf4:	1c5a      	adds	r2, r3, #1
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	3b01      	subs	r3, #1
 8004d0e:	b29a      	uxth	r2, r3
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004d14:	4b65      	ldr	r3, [pc, #404]	; (8004eac <HAL_I2C_Mem_Read+0x4bc>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	08db      	lsrs	r3, r3, #3
 8004d1a:	4a65      	ldr	r2, [pc, #404]	; (8004eb0 <HAL_I2C_Mem_Read+0x4c0>)
 8004d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d20:	0a1a      	lsrs	r2, r3, #8
 8004d22:	4613      	mov	r3, r2
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	4413      	add	r3, r2
 8004d28:	00da      	lsls	r2, r3, #3
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004d2e:	6a3b      	ldr	r3, [r7, #32]
 8004d30:	3b01      	subs	r3, #1
 8004d32:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004d34:	6a3b      	ldr	r3, [r7, #32]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d117      	bne.n	8004d6a <HAL_I2C_Mem_Read+0x37a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2220      	movs	r2, #32
 8004d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d54:	f043 0220 	orr.w	r2, r3, #32
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004d5c:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e099      	b.n	8004e9e <HAL_I2C_Mem_Read+0x4ae>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	695b      	ldr	r3, [r3, #20]
 8004d70:	f003 0304 	and.w	r3, r3, #4
 8004d74:	2b04      	cmp	r3, #4
 8004d76:	d1da      	bne.n	8004d2e <HAL_I2C_Mem_Read+0x33e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	691a      	ldr	r2, [r3, #16]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d92:	b2d2      	uxtb	r2, r2
 8004d94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9a:	1c5a      	adds	r2, r3, #1
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004da4:	3b01      	subs	r3, #1
 8004da6:	b29a      	uxth	r2, r3
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	3b01      	subs	r3, #1
 8004db4:	b29a      	uxth	r2, r3
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004dba:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	691a      	ldr	r2, [r3, #16]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc6:	b2d2      	uxtb	r2, r2
 8004dc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dce:	1c5a      	adds	r2, r3, #1
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dd8:	3b01      	subs	r3, #1
 8004dda:	b29a      	uxth	r2, r3
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	3b01      	subs	r3, #1
 8004de8:	b29a      	uxth	r2, r3
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004dee:	e042      	b.n	8004e76 <HAL_I2C_Mem_Read+0x486>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004df0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004df2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004df4:	68f8      	ldr	r0, [r7, #12]
 8004df6:	f000 fc83 	bl	8005700 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d001      	beq.n	8004e04 <HAL_I2C_Mem_Read+0x414>
        {
          return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e04c      	b.n	8004e9e <HAL_I2C_Mem_Read+0x4ae>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	691a      	ldr	r2, [r3, #16]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0e:	b2d2      	uxtb	r2, r2
 8004e10:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e16:	1c5a      	adds	r2, r3, #1
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e20:	3b01      	subs	r3, #1
 8004e22:	b29a      	uxth	r2, r3
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	b29a      	uxth	r2, r3
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	695b      	ldr	r3, [r3, #20]
 8004e3c:	f003 0304 	and.w	r3, r3, #4
 8004e40:	2b04      	cmp	r3, #4
 8004e42:	d118      	bne.n	8004e76 <HAL_I2C_Mem_Read+0x486>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	691a      	ldr	r2, [r3, #16]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4e:	b2d2      	uxtb	r2, r2
 8004e50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e56:	1c5a      	adds	r2, r3, #1
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e60:	3b01      	subs	r3, #1
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	b29a      	uxth	r2, r3
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	f47f ae99 	bne.w	8004bb2 <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2220      	movs	r2, #32
 8004e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	e000      	b.n	8004e9e <HAL_I2C_Mem_Read+0x4ae>
  }
  else
  {
    return HAL_BUSY;
 8004e9c:	2302      	movs	r3, #2
  }
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3728      	adds	r7, #40	; 0x28
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	00010004 	.word	0x00010004
 8004eac:	20000004 	.word	0x20000004
 8004eb0:	14f8b589 	.word	0x14f8b589

08004eb4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b088      	sub	sp, #32
 8004eb8:	af02      	add	r7, sp, #8
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	607a      	str	r2, [r7, #4]
 8004ebe:	603b      	str	r3, [r7, #0]
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	2b08      	cmp	r3, #8
 8004ece:	d006      	beq.n	8004ede <I2C_MasterRequestWrite+0x2a>
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d003      	beq.n	8004ede <I2C_MasterRequestWrite+0x2a>
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004edc:	d108      	bne.n	8004ef0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004eec:	601a      	str	r2, [r3, #0]
 8004eee:	e00b      	b.n	8004f08 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef4:	2b12      	cmp	r3, #18
 8004ef6:	d107      	bne.n	8004f08 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f06:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	9300      	str	r3, [sp, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f14:	68f8      	ldr	r0, [r7, #12]
 8004f16:	f000 fa9b 	bl	8005450 <I2C_WaitOnFlagUntilTimeout>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00d      	beq.n	8004f3c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f2e:	d103      	bne.n	8004f38 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f36:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	e035      	b.n	8004fa8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f44:	d108      	bne.n	8004f58 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f46:	897b      	ldrh	r3, [r7, #10]
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f54:	611a      	str	r2, [r3, #16]
 8004f56:	e01b      	b.n	8004f90 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004f58:	897b      	ldrh	r3, [r7, #10]
 8004f5a:	11db      	asrs	r3, r3, #7
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	f003 0306 	and.w	r3, r3, #6
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	f063 030f 	orn	r3, r3, #15
 8004f68:	b2da      	uxtb	r2, r3
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	490e      	ldr	r1, [pc, #56]	; (8004fb0 <I2C_MasterRequestWrite+0xfc>)
 8004f76:	68f8      	ldr	r0, [r7, #12]
 8004f78:	f000 fac1 	bl	80054fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d001      	beq.n	8004f86 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e010      	b.n	8004fa8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004f86:	897b      	ldrh	r3, [r7, #10]
 8004f88:	b2da      	uxtb	r2, r3
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	4907      	ldr	r1, [pc, #28]	; (8004fb4 <I2C_MasterRequestWrite+0x100>)
 8004f96:	68f8      	ldr	r0, [r7, #12]
 8004f98:	f000 fab1 	bl	80054fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d001      	beq.n	8004fa6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e000      	b.n	8004fa8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004fa6:	2300      	movs	r3, #0
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3718      	adds	r7, #24
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	00010008 	.word	0x00010008
 8004fb4:	00010002 	.word	0x00010002

08004fb8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b088      	sub	sp, #32
 8004fbc:	af02      	add	r7, sp, #8
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	607a      	str	r2, [r7, #4]
 8004fc2:	603b      	str	r3, [r7, #0]
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fcc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004fdc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	2b08      	cmp	r3, #8
 8004fe2:	d006      	beq.n	8004ff2 <I2C_MasterRequestRead+0x3a>
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d003      	beq.n	8004ff2 <I2C_MasterRequestRead+0x3a>
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ff0:	d108      	bne.n	8005004 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005000:	601a      	str	r2, [r3, #0]
 8005002:	e00b      	b.n	800501c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005008:	2b11      	cmp	r3, #17
 800500a:	d107      	bne.n	800501c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800501a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	9300      	str	r3, [sp, #0]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005028:	68f8      	ldr	r0, [r7, #12]
 800502a:	f000 fa11 	bl	8005450 <I2C_WaitOnFlagUntilTimeout>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d00d      	beq.n	8005050 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800503e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005042:	d103      	bne.n	800504c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f44f 7200 	mov.w	r2, #512	; 0x200
 800504a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800504c:	2303      	movs	r3, #3
 800504e:	e079      	b.n	8005144 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	691b      	ldr	r3, [r3, #16]
 8005054:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005058:	d108      	bne.n	800506c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800505a:	897b      	ldrh	r3, [r7, #10]
 800505c:	b2db      	uxtb	r3, r3
 800505e:	f043 0301 	orr.w	r3, r3, #1
 8005062:	b2da      	uxtb	r2, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	611a      	str	r2, [r3, #16]
 800506a:	e05f      	b.n	800512c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800506c:	897b      	ldrh	r3, [r7, #10]
 800506e:	11db      	asrs	r3, r3, #7
 8005070:	b2db      	uxtb	r3, r3
 8005072:	f003 0306 	and.w	r3, r3, #6
 8005076:	b2db      	uxtb	r3, r3
 8005078:	f063 030f 	orn	r3, r3, #15
 800507c:	b2da      	uxtb	r2, r3
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	4930      	ldr	r1, [pc, #192]	; (800514c <I2C_MasterRequestRead+0x194>)
 800508a:	68f8      	ldr	r0, [r7, #12]
 800508c:	f000 fa37 	bl	80054fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d001      	beq.n	800509a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e054      	b.n	8005144 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800509a:	897b      	ldrh	r3, [r7, #10]
 800509c:	b2da      	uxtb	r2, r3
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	4929      	ldr	r1, [pc, #164]	; (8005150 <I2C_MasterRequestRead+0x198>)
 80050aa:	68f8      	ldr	r0, [r7, #12]
 80050ac:	f000 fa27 	bl	80054fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d001      	beq.n	80050ba <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e044      	b.n	8005144 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050ba:	2300      	movs	r3, #0
 80050bc:	613b      	str	r3, [r7, #16]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	695b      	ldr	r3, [r3, #20]
 80050c4:	613b      	str	r3, [r7, #16]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	699b      	ldr	r3, [r3, #24]
 80050cc:	613b      	str	r3, [r7, #16]
 80050ce:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050de:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	9300      	str	r3, [sp, #0]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80050ec:	68f8      	ldr	r0, [r7, #12]
 80050ee:	f000 f9af 	bl	8005450 <I2C_WaitOnFlagUntilTimeout>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d00d      	beq.n	8005114 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005102:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005106:	d103      	bne.n	8005110 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800510e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	e017      	b.n	8005144 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005114:	897b      	ldrh	r3, [r7, #10]
 8005116:	11db      	asrs	r3, r3, #7
 8005118:	b2db      	uxtb	r3, r3
 800511a:	f003 0306 	and.w	r3, r3, #6
 800511e:	b2db      	uxtb	r3, r3
 8005120:	f063 030e 	orn	r3, r3, #14
 8005124:	b2da      	uxtb	r2, r3
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	4907      	ldr	r1, [pc, #28]	; (8005150 <I2C_MasterRequestRead+0x198>)
 8005132:	68f8      	ldr	r0, [r7, #12]
 8005134:	f000 f9e3 	bl	80054fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d001      	beq.n	8005142 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e000      	b.n	8005144 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005142:	2300      	movs	r3, #0
}
 8005144:	4618      	mov	r0, r3
 8005146:	3718      	adds	r7, #24
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}
 800514c:	00010008 	.word	0x00010008
 8005150:	00010002 	.word	0x00010002

08005154 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b088      	sub	sp, #32
 8005158:	af02      	add	r7, sp, #8
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	4608      	mov	r0, r1
 800515e:	4611      	mov	r1, r2
 8005160:	461a      	mov	r2, r3
 8005162:	4603      	mov	r3, r0
 8005164:	817b      	strh	r3, [r7, #10]
 8005166:	460b      	mov	r3, r1
 8005168:	813b      	strh	r3, [r7, #8]
 800516a:	4613      	mov	r3, r2
 800516c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800517c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800517e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005180:	9300      	str	r3, [sp, #0]
 8005182:	6a3b      	ldr	r3, [r7, #32]
 8005184:	2200      	movs	r2, #0
 8005186:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800518a:	68f8      	ldr	r0, [r7, #12]
 800518c:	f000 f960 	bl	8005450 <I2C_WaitOnFlagUntilTimeout>
 8005190:	4603      	mov	r3, r0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d00d      	beq.n	80051b2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051a4:	d103      	bne.n	80051ae <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051ac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e05f      	b.n	8005272 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80051b2:	897b      	ldrh	r3, [r7, #10]
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	461a      	mov	r2, r3
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80051c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c4:	6a3a      	ldr	r2, [r7, #32]
 80051c6:	492d      	ldr	r1, [pc, #180]	; (800527c <I2C_RequestMemoryWrite+0x128>)
 80051c8:	68f8      	ldr	r0, [r7, #12]
 80051ca:	f000 f998 	bl	80054fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d001      	beq.n	80051d8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e04c      	b.n	8005272 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051d8:	2300      	movs	r3, #0
 80051da:	617b      	str	r3, [r7, #20]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	695b      	ldr	r3, [r3, #20]
 80051e2:	617b      	str	r3, [r7, #20]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	699b      	ldr	r3, [r3, #24]
 80051ea:	617b      	str	r3, [r7, #20]
 80051ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051f0:	6a39      	ldr	r1, [r7, #32]
 80051f2:	68f8      	ldr	r0, [r7, #12]
 80051f4:	f000 fa02 	bl	80055fc <I2C_WaitOnTXEFlagUntilTimeout>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00d      	beq.n	800521a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005202:	2b04      	cmp	r3, #4
 8005204:	d107      	bne.n	8005216 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005214:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e02b      	b.n	8005272 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800521a:	88fb      	ldrh	r3, [r7, #6]
 800521c:	2b01      	cmp	r3, #1
 800521e:	d105      	bne.n	800522c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005220:	893b      	ldrh	r3, [r7, #8]
 8005222:	b2da      	uxtb	r2, r3
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	611a      	str	r2, [r3, #16]
 800522a:	e021      	b.n	8005270 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800522c:	893b      	ldrh	r3, [r7, #8]
 800522e:	0a1b      	lsrs	r3, r3, #8
 8005230:	b29b      	uxth	r3, r3
 8005232:	b2da      	uxtb	r2, r3
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800523a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800523c:	6a39      	ldr	r1, [r7, #32]
 800523e:	68f8      	ldr	r0, [r7, #12]
 8005240:	f000 f9dc 	bl	80055fc <I2C_WaitOnTXEFlagUntilTimeout>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00d      	beq.n	8005266 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524e:	2b04      	cmp	r3, #4
 8005250:	d107      	bne.n	8005262 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005260:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e005      	b.n	8005272 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005266:	893b      	ldrh	r3, [r7, #8]
 8005268:	b2da      	uxtb	r2, r3
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3718      	adds	r7, #24
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	00010002 	.word	0x00010002

08005280 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b088      	sub	sp, #32
 8005284:	af02      	add	r7, sp, #8
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	4608      	mov	r0, r1
 800528a:	4611      	mov	r1, r2
 800528c:	461a      	mov	r2, r3
 800528e:	4603      	mov	r3, r0
 8005290:	817b      	strh	r3, [r7, #10]
 8005292:	460b      	mov	r3, r1
 8005294:	813b      	strh	r3, [r7, #8]
 8005296:	4613      	mov	r3, r2
 8005298:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80052a8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052bc:	9300      	str	r3, [sp, #0]
 80052be:	6a3b      	ldr	r3, [r7, #32]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80052c6:	68f8      	ldr	r0, [r7, #12]
 80052c8:	f000 f8c2 	bl	8005450 <I2C_WaitOnFlagUntilTimeout>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00d      	beq.n	80052ee <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052e0:	d103      	bne.n	80052ea <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052e8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e0aa      	b.n	8005444 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80052ee:	897b      	ldrh	r3, [r7, #10]
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	461a      	mov	r2, r3
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80052fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005300:	6a3a      	ldr	r2, [r7, #32]
 8005302:	4952      	ldr	r1, [pc, #328]	; (800544c <I2C_RequestMemoryRead+0x1cc>)
 8005304:	68f8      	ldr	r0, [r7, #12]
 8005306:	f000 f8fa 	bl	80054fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800530a:	4603      	mov	r3, r0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d001      	beq.n	8005314 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e097      	b.n	8005444 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005314:	2300      	movs	r3, #0
 8005316:	617b      	str	r3, [r7, #20]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	617b      	str	r3, [r7, #20]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	617b      	str	r3, [r7, #20]
 8005328:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800532a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800532c:	6a39      	ldr	r1, [r7, #32]
 800532e:	68f8      	ldr	r0, [r7, #12]
 8005330:	f000 f964 	bl	80055fc <I2C_WaitOnTXEFlagUntilTimeout>
 8005334:	4603      	mov	r3, r0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d00d      	beq.n	8005356 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533e:	2b04      	cmp	r3, #4
 8005340:	d107      	bne.n	8005352 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005350:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e076      	b.n	8005444 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005356:	88fb      	ldrh	r3, [r7, #6]
 8005358:	2b01      	cmp	r3, #1
 800535a:	d105      	bne.n	8005368 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800535c:	893b      	ldrh	r3, [r7, #8]
 800535e:	b2da      	uxtb	r2, r3
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	611a      	str	r2, [r3, #16]
 8005366:	e021      	b.n	80053ac <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005368:	893b      	ldrh	r3, [r7, #8]
 800536a:	0a1b      	lsrs	r3, r3, #8
 800536c:	b29b      	uxth	r3, r3
 800536e:	b2da      	uxtb	r2, r3
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005378:	6a39      	ldr	r1, [r7, #32]
 800537a:	68f8      	ldr	r0, [r7, #12]
 800537c:	f000 f93e 	bl	80055fc <I2C_WaitOnTXEFlagUntilTimeout>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d00d      	beq.n	80053a2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538a:	2b04      	cmp	r3, #4
 800538c:	d107      	bne.n	800539e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800539c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e050      	b.n	8005444 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053a2:	893b      	ldrh	r3, [r7, #8]
 80053a4:	b2da      	uxtb	r2, r3
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053ae:	6a39      	ldr	r1, [r7, #32]
 80053b0:	68f8      	ldr	r0, [r7, #12]
 80053b2:	f000 f923 	bl	80055fc <I2C_WaitOnTXEFlagUntilTimeout>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d00d      	beq.n	80053d8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c0:	2b04      	cmp	r3, #4
 80053c2:	d107      	bne.n	80053d4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053d2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	e035      	b.n	8005444 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053e6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ea:	9300      	str	r3, [sp, #0]
 80053ec:	6a3b      	ldr	r3, [r7, #32]
 80053ee:	2200      	movs	r2, #0
 80053f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80053f4:	68f8      	ldr	r0, [r7, #12]
 80053f6:	f000 f82b 	bl	8005450 <I2C_WaitOnFlagUntilTimeout>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d00d      	beq.n	800541c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800540a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800540e:	d103      	bne.n	8005418 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005416:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	e013      	b.n	8005444 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800541c:	897b      	ldrh	r3, [r7, #10]
 800541e:	b2db      	uxtb	r3, r3
 8005420:	f043 0301 	orr.w	r3, r3, #1
 8005424:	b2da      	uxtb	r2, r3
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800542c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542e:	6a3a      	ldr	r2, [r7, #32]
 8005430:	4906      	ldr	r1, [pc, #24]	; (800544c <I2C_RequestMemoryRead+0x1cc>)
 8005432:	68f8      	ldr	r0, [r7, #12]
 8005434:	f000 f863 	bl	80054fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d001      	beq.n	8005442 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e000      	b.n	8005444 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005442:	2300      	movs	r3, #0
}
 8005444:	4618      	mov	r0, r3
 8005446:	3718      	adds	r7, #24
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}
 800544c:	00010002 	.word	0x00010002

08005450 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	603b      	str	r3, [r7, #0]
 800545c:	4613      	mov	r3, r2
 800545e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005460:	e025      	b.n	80054ae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005468:	d021      	beq.n	80054ae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800546a:	f7fd fd19 	bl	8002ea0 <HAL_GetTick>
 800546e:	4602      	mov	r2, r0
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	683a      	ldr	r2, [r7, #0]
 8005476:	429a      	cmp	r2, r3
 8005478:	d302      	bcc.n	8005480 <I2C_WaitOnFlagUntilTimeout+0x30>
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d116      	bne.n	80054ae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2200      	movs	r2, #0
 8005484:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2220      	movs	r2, #32
 800548a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2200      	movs	r2, #0
 8005492:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549a:	f043 0220 	orr.w	r2, r3, #32
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e023      	b.n	80054f6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	0c1b      	lsrs	r3, r3, #16
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d10d      	bne.n	80054d4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	695b      	ldr	r3, [r3, #20]
 80054be:	43da      	mvns	r2, r3
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	4013      	ands	r3, r2
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	bf0c      	ite	eq
 80054ca:	2301      	moveq	r3, #1
 80054cc:	2300      	movne	r3, #0
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	461a      	mov	r2, r3
 80054d2:	e00c      	b.n	80054ee <I2C_WaitOnFlagUntilTimeout+0x9e>
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	43da      	mvns	r2, r3
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	4013      	ands	r3, r2
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	bf0c      	ite	eq
 80054e6:	2301      	moveq	r3, #1
 80054e8:	2300      	movne	r3, #0
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	461a      	mov	r2, r3
 80054ee:	79fb      	ldrb	r3, [r7, #7]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d0b6      	beq.n	8005462 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3710      	adds	r7, #16
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}

080054fe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80054fe:	b580      	push	{r7, lr}
 8005500:	b084      	sub	sp, #16
 8005502:	af00      	add	r7, sp, #0
 8005504:	60f8      	str	r0, [r7, #12]
 8005506:	60b9      	str	r1, [r7, #8]
 8005508:	607a      	str	r2, [r7, #4]
 800550a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800550c:	e051      	b.n	80055b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	695b      	ldr	r3, [r3, #20]
 8005514:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005518:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800551c:	d123      	bne.n	8005566 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800552c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005536:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2200      	movs	r2, #0
 800553c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2220      	movs	r2, #32
 8005542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005552:	f043 0204 	orr.w	r2, r3, #4
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e046      	b.n	80055f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800556c:	d021      	beq.n	80055b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800556e:	f7fd fc97 	bl	8002ea0 <HAL_GetTick>
 8005572:	4602      	mov	r2, r0
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	1ad3      	subs	r3, r2, r3
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	429a      	cmp	r2, r3
 800557c:	d302      	bcc.n	8005584 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d116      	bne.n	80055b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2220      	movs	r2, #32
 800558e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2200      	movs	r2, #0
 8005596:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559e:	f043 0220 	orr.w	r2, r3, #32
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e020      	b.n	80055f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	0c1b      	lsrs	r3, r3, #16
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d10c      	bne.n	80055d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	695b      	ldr	r3, [r3, #20]
 80055c2:	43da      	mvns	r2, r3
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	4013      	ands	r3, r2
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	bf14      	ite	ne
 80055ce:	2301      	movne	r3, #1
 80055d0:	2300      	moveq	r3, #0
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	e00b      	b.n	80055ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	699b      	ldr	r3, [r3, #24]
 80055dc:	43da      	mvns	r2, r3
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	4013      	ands	r3, r2
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	bf14      	ite	ne
 80055e8:	2301      	movne	r3, #1
 80055ea:	2300      	moveq	r3, #0
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d18d      	bne.n	800550e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80055f2:	2300      	movs	r3, #0
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3710      	adds	r7, #16
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b084      	sub	sp, #16
 8005600:	af00      	add	r7, sp, #0
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	60b9      	str	r1, [r7, #8]
 8005606:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005608:	e02d      	b.n	8005666 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800560a:	68f8      	ldr	r0, [r7, #12]
 800560c:	f000 f8ce 	bl	80057ac <I2C_IsAcknowledgeFailed>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d001      	beq.n	800561a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e02d      	b.n	8005676 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005620:	d021      	beq.n	8005666 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005622:	f7fd fc3d 	bl	8002ea0 <HAL_GetTick>
 8005626:	4602      	mov	r2, r0
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	68ba      	ldr	r2, [r7, #8]
 800562e:	429a      	cmp	r2, r3
 8005630:	d302      	bcc.n	8005638 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d116      	bne.n	8005666 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2200      	movs	r2, #0
 800563c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2220      	movs	r2, #32
 8005642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2200      	movs	r2, #0
 800564a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005652:	f043 0220 	orr.w	r2, r3, #32
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e007      	b.n	8005676 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	695b      	ldr	r3, [r3, #20]
 800566c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005670:	2b80      	cmp	r3, #128	; 0x80
 8005672:	d1ca      	bne.n	800560a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005674:	2300      	movs	r3, #0
}
 8005676:	4618      	mov	r0, r3
 8005678:	3710      	adds	r7, #16
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}

0800567e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800567e:	b580      	push	{r7, lr}
 8005680:	b084      	sub	sp, #16
 8005682:	af00      	add	r7, sp, #0
 8005684:	60f8      	str	r0, [r7, #12]
 8005686:	60b9      	str	r1, [r7, #8]
 8005688:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800568a:	e02d      	b.n	80056e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800568c:	68f8      	ldr	r0, [r7, #12]
 800568e:	f000 f88d 	bl	80057ac <I2C_IsAcknowledgeFailed>
 8005692:	4603      	mov	r3, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d001      	beq.n	800569c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	e02d      	b.n	80056f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056a2:	d021      	beq.n	80056e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056a4:	f7fd fbfc 	bl	8002ea0 <HAL_GetTick>
 80056a8:	4602      	mov	r2, r0
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	68ba      	ldr	r2, [r7, #8]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d302      	bcc.n	80056ba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d116      	bne.n	80056e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2200      	movs	r2, #0
 80056be:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2220      	movs	r2, #32
 80056c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d4:	f043 0220 	orr.w	r2, r3, #32
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2200      	movs	r2, #0
 80056e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e007      	b.n	80056f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	695b      	ldr	r3, [r3, #20]
 80056ee:	f003 0304 	and.w	r3, r3, #4
 80056f2:	2b04      	cmp	r3, #4
 80056f4:	d1ca      	bne.n	800568c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80056f6:	2300      	movs	r3, #0
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3710      	adds	r7, #16
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800570c:	e042      	b.n	8005794 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	695b      	ldr	r3, [r3, #20]
 8005714:	f003 0310 	and.w	r3, r3, #16
 8005718:	2b10      	cmp	r3, #16
 800571a:	d119      	bne.n	8005750 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f06f 0210 	mvn.w	r2, #16
 8005724:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2200      	movs	r2, #0
 800572a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2220      	movs	r2, #32
 8005730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2200      	movs	r2, #0
 8005738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2200      	movs	r2, #0
 8005748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	e029      	b.n	80057a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005750:	f7fd fba6 	bl	8002ea0 <HAL_GetTick>
 8005754:	4602      	mov	r2, r0
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	68ba      	ldr	r2, [r7, #8]
 800575c:	429a      	cmp	r2, r3
 800575e:	d302      	bcc.n	8005766 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d116      	bne.n	8005794 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2200      	movs	r2, #0
 800576a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2220      	movs	r2, #32
 8005770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2200      	movs	r2, #0
 8005778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005780:	f043 0220 	orr.w	r2, r3, #32
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2200      	movs	r2, #0
 800578c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	e007      	b.n	80057a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	695b      	ldr	r3, [r3, #20]
 800579a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800579e:	2b40      	cmp	r3, #64	; 0x40
 80057a0:	d1b5      	bne.n	800570e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80057a2:	2300      	movs	r3, #0
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3710      	adds	r7, #16
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	695b      	ldr	r3, [r3, #20]
 80057ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057c2:	d11b      	bne.n	80057fc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80057cc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2220      	movs	r2, #32
 80057d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e8:	f043 0204 	orr.w	r2, r3, #4
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e000      	b.n	80057fe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	370c      	adds	r7, #12
 8005802:	46bd      	mov	sp, r7
 8005804:	bc80      	pop	{r7}
 8005806:	4770      	bx	lr

08005808 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b086      	sub	sp, #24
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d101      	bne.n	800581a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e26c      	b.n	8005cf4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 0301 	and.w	r3, r3, #1
 8005822:	2b00      	cmp	r3, #0
 8005824:	f000 8087 	beq.w	8005936 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005828:	4b92      	ldr	r3, [pc, #584]	; (8005a74 <HAL_RCC_OscConfig+0x26c>)
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	f003 030c 	and.w	r3, r3, #12
 8005830:	2b04      	cmp	r3, #4
 8005832:	d00c      	beq.n	800584e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005834:	4b8f      	ldr	r3, [pc, #572]	; (8005a74 <HAL_RCC_OscConfig+0x26c>)
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	f003 030c 	and.w	r3, r3, #12
 800583c:	2b08      	cmp	r3, #8
 800583e:	d112      	bne.n	8005866 <HAL_RCC_OscConfig+0x5e>
 8005840:	4b8c      	ldr	r3, [pc, #560]	; (8005a74 <HAL_RCC_OscConfig+0x26c>)
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800584c:	d10b      	bne.n	8005866 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800584e:	4b89      	ldr	r3, [pc, #548]	; (8005a74 <HAL_RCC_OscConfig+0x26c>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005856:	2b00      	cmp	r3, #0
 8005858:	d06c      	beq.n	8005934 <HAL_RCC_OscConfig+0x12c>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d168      	bne.n	8005934 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e246      	b.n	8005cf4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800586e:	d106      	bne.n	800587e <HAL_RCC_OscConfig+0x76>
 8005870:	4b80      	ldr	r3, [pc, #512]	; (8005a74 <HAL_RCC_OscConfig+0x26c>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a7f      	ldr	r2, [pc, #508]	; (8005a74 <HAL_RCC_OscConfig+0x26c>)
 8005876:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800587a:	6013      	str	r3, [r2, #0]
 800587c:	e02e      	b.n	80058dc <HAL_RCC_OscConfig+0xd4>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d10c      	bne.n	80058a0 <HAL_RCC_OscConfig+0x98>
 8005886:	4b7b      	ldr	r3, [pc, #492]	; (8005a74 <HAL_RCC_OscConfig+0x26c>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a7a      	ldr	r2, [pc, #488]	; (8005a74 <HAL_RCC_OscConfig+0x26c>)
 800588c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005890:	6013      	str	r3, [r2, #0]
 8005892:	4b78      	ldr	r3, [pc, #480]	; (8005a74 <HAL_RCC_OscConfig+0x26c>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a77      	ldr	r2, [pc, #476]	; (8005a74 <HAL_RCC_OscConfig+0x26c>)
 8005898:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800589c:	6013      	str	r3, [r2, #0]
 800589e:	e01d      	b.n	80058dc <HAL_RCC_OscConfig+0xd4>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80058a8:	d10c      	bne.n	80058c4 <HAL_RCC_OscConfig+0xbc>
 80058aa:	4b72      	ldr	r3, [pc, #456]	; (8005a74 <HAL_RCC_OscConfig+0x26c>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a71      	ldr	r2, [pc, #452]	; (8005a74 <HAL_RCC_OscConfig+0x26c>)
 80058b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058b4:	6013      	str	r3, [r2, #0]
 80058b6:	4b6f      	ldr	r3, [pc, #444]	; (8005a74 <HAL_RCC_OscConfig+0x26c>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a6e      	ldr	r2, [pc, #440]	; (8005a74 <HAL_RCC_OscConfig+0x26c>)
 80058bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058c0:	6013      	str	r3, [r2, #0]
 80058c2:	e00b      	b.n	80058dc <HAL_RCC_OscConfig+0xd4>
 80058c4:	4b6b      	ldr	r3, [pc, #428]	; (8005a74 <HAL_RCC_OscConfig+0x26c>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a6a      	ldr	r2, [pc, #424]	; (8005a74 <HAL_RCC_OscConfig+0x26c>)
 80058ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058ce:	6013      	str	r3, [r2, #0]
 80058d0:	4b68      	ldr	r3, [pc, #416]	; (8005a74 <HAL_RCC_OscConfig+0x26c>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a67      	ldr	r2, [pc, #412]	; (8005a74 <HAL_RCC_OscConfig+0x26c>)
 80058d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d013      	beq.n	800590c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058e4:	f7fd fadc 	bl	8002ea0 <HAL_GetTick>
 80058e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058ea:	e008      	b.n	80058fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058ec:	f7fd fad8 	bl	8002ea0 <HAL_GetTick>
 80058f0:	4602      	mov	r2, r0
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	2b64      	cmp	r3, #100	; 0x64
 80058f8:	d901      	bls.n	80058fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80058fa:	2303      	movs	r3, #3
 80058fc:	e1fa      	b.n	8005cf4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058fe:	4b5d      	ldr	r3, [pc, #372]	; (8005a74 <HAL_RCC_OscConfig+0x26c>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005906:	2b00      	cmp	r3, #0
 8005908:	d0f0      	beq.n	80058ec <HAL_RCC_OscConfig+0xe4>
 800590a:	e014      	b.n	8005936 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800590c:	f7fd fac8 	bl	8002ea0 <HAL_GetTick>
 8005910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005912:	e008      	b.n	8005926 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005914:	f7fd fac4 	bl	8002ea0 <HAL_GetTick>
 8005918:	4602      	mov	r2, r0
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	2b64      	cmp	r3, #100	; 0x64
 8005920:	d901      	bls.n	8005926 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005922:	2303      	movs	r3, #3
 8005924:	e1e6      	b.n	8005cf4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005926:	4b53      	ldr	r3, [pc, #332]	; (8005a74 <HAL_RCC_OscConfig+0x26c>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800592e:	2b00      	cmp	r3, #0
 8005930:	d1f0      	bne.n	8005914 <HAL_RCC_OscConfig+0x10c>
 8005932:	e000      	b.n	8005936 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005934:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 0302 	and.w	r3, r3, #2
 800593e:	2b00      	cmp	r3, #0
 8005940:	d063      	beq.n	8005a0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005942:	4b4c      	ldr	r3, [pc, #304]	; (8005a74 <HAL_RCC_OscConfig+0x26c>)
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	f003 030c 	and.w	r3, r3, #12
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00b      	beq.n	8005966 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800594e:	4b49      	ldr	r3, [pc, #292]	; (8005a74 <HAL_RCC_OscConfig+0x26c>)
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	f003 030c 	and.w	r3, r3, #12
 8005956:	2b08      	cmp	r3, #8
 8005958:	d11c      	bne.n	8005994 <HAL_RCC_OscConfig+0x18c>
 800595a:	4b46      	ldr	r3, [pc, #280]	; (8005a74 <HAL_RCC_OscConfig+0x26c>)
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d116      	bne.n	8005994 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005966:	4b43      	ldr	r3, [pc, #268]	; (8005a74 <HAL_RCC_OscConfig+0x26c>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 0302 	and.w	r3, r3, #2
 800596e:	2b00      	cmp	r3, #0
 8005970:	d005      	beq.n	800597e <HAL_RCC_OscConfig+0x176>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	2b01      	cmp	r3, #1
 8005978:	d001      	beq.n	800597e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e1ba      	b.n	8005cf4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800597e:	4b3d      	ldr	r3, [pc, #244]	; (8005a74 <HAL_RCC_OscConfig+0x26c>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	695b      	ldr	r3, [r3, #20]
 800598a:	00db      	lsls	r3, r3, #3
 800598c:	4939      	ldr	r1, [pc, #228]	; (8005a74 <HAL_RCC_OscConfig+0x26c>)
 800598e:	4313      	orrs	r3, r2
 8005990:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005992:	e03a      	b.n	8005a0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	691b      	ldr	r3, [r3, #16]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d020      	beq.n	80059de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800599c:	4b36      	ldr	r3, [pc, #216]	; (8005a78 <HAL_RCC_OscConfig+0x270>)
 800599e:	2201      	movs	r2, #1
 80059a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059a2:	f7fd fa7d 	bl	8002ea0 <HAL_GetTick>
 80059a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059a8:	e008      	b.n	80059bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059aa:	f7fd fa79 	bl	8002ea0 <HAL_GetTick>
 80059ae:	4602      	mov	r2, r0
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	1ad3      	subs	r3, r2, r3
 80059b4:	2b02      	cmp	r3, #2
 80059b6:	d901      	bls.n	80059bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80059b8:	2303      	movs	r3, #3
 80059ba:	e19b      	b.n	8005cf4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059bc:	4b2d      	ldr	r3, [pc, #180]	; (8005a74 <HAL_RCC_OscConfig+0x26c>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 0302 	and.w	r3, r3, #2
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d0f0      	beq.n	80059aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059c8:	4b2a      	ldr	r3, [pc, #168]	; (8005a74 <HAL_RCC_OscConfig+0x26c>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	695b      	ldr	r3, [r3, #20]
 80059d4:	00db      	lsls	r3, r3, #3
 80059d6:	4927      	ldr	r1, [pc, #156]	; (8005a74 <HAL_RCC_OscConfig+0x26c>)
 80059d8:	4313      	orrs	r3, r2
 80059da:	600b      	str	r3, [r1, #0]
 80059dc:	e015      	b.n	8005a0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059de:	4b26      	ldr	r3, [pc, #152]	; (8005a78 <HAL_RCC_OscConfig+0x270>)
 80059e0:	2200      	movs	r2, #0
 80059e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059e4:	f7fd fa5c 	bl	8002ea0 <HAL_GetTick>
 80059e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059ea:	e008      	b.n	80059fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059ec:	f7fd fa58 	bl	8002ea0 <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d901      	bls.n	80059fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e17a      	b.n	8005cf4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059fe:	4b1d      	ldr	r3, [pc, #116]	; (8005a74 <HAL_RCC_OscConfig+0x26c>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 0302 	and.w	r3, r3, #2
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d1f0      	bne.n	80059ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 0308 	and.w	r3, r3, #8
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d03a      	beq.n	8005a8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	699b      	ldr	r3, [r3, #24]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d019      	beq.n	8005a52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a1e:	4b17      	ldr	r3, [pc, #92]	; (8005a7c <HAL_RCC_OscConfig+0x274>)
 8005a20:	2201      	movs	r2, #1
 8005a22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a24:	f7fd fa3c 	bl	8002ea0 <HAL_GetTick>
 8005a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a2a:	e008      	b.n	8005a3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a2c:	f7fd fa38 	bl	8002ea0 <HAL_GetTick>
 8005a30:	4602      	mov	r2, r0
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d901      	bls.n	8005a3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	e15a      	b.n	8005cf4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a3e:	4b0d      	ldr	r3, [pc, #52]	; (8005a74 <HAL_RCC_OscConfig+0x26c>)
 8005a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a42:	f003 0302 	and.w	r3, r3, #2
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d0f0      	beq.n	8005a2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005a4a:	2001      	movs	r0, #1
 8005a4c:	f000 fada 	bl	8006004 <RCC_Delay>
 8005a50:	e01c      	b.n	8005a8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a52:	4b0a      	ldr	r3, [pc, #40]	; (8005a7c <HAL_RCC_OscConfig+0x274>)
 8005a54:	2200      	movs	r2, #0
 8005a56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a58:	f7fd fa22 	bl	8002ea0 <HAL_GetTick>
 8005a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a5e:	e00f      	b.n	8005a80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a60:	f7fd fa1e 	bl	8002ea0 <HAL_GetTick>
 8005a64:	4602      	mov	r2, r0
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	d908      	bls.n	8005a80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e140      	b.n	8005cf4 <HAL_RCC_OscConfig+0x4ec>
 8005a72:	bf00      	nop
 8005a74:	40021000 	.word	0x40021000
 8005a78:	42420000 	.word	0x42420000
 8005a7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a80:	4b9e      	ldr	r3, [pc, #632]	; (8005cfc <HAL_RCC_OscConfig+0x4f4>)
 8005a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a84:	f003 0302 	and.w	r3, r3, #2
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d1e9      	bne.n	8005a60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 0304 	and.w	r3, r3, #4
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	f000 80a6 	beq.w	8005be6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a9e:	4b97      	ldr	r3, [pc, #604]	; (8005cfc <HAL_RCC_OscConfig+0x4f4>)
 8005aa0:	69db      	ldr	r3, [r3, #28]
 8005aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d10d      	bne.n	8005ac6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005aaa:	4b94      	ldr	r3, [pc, #592]	; (8005cfc <HAL_RCC_OscConfig+0x4f4>)
 8005aac:	69db      	ldr	r3, [r3, #28]
 8005aae:	4a93      	ldr	r2, [pc, #588]	; (8005cfc <HAL_RCC_OscConfig+0x4f4>)
 8005ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ab4:	61d3      	str	r3, [r2, #28]
 8005ab6:	4b91      	ldr	r3, [pc, #580]	; (8005cfc <HAL_RCC_OscConfig+0x4f4>)
 8005ab8:	69db      	ldr	r3, [r3, #28]
 8005aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005abe:	60bb      	str	r3, [r7, #8]
 8005ac0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ac6:	4b8e      	ldr	r3, [pc, #568]	; (8005d00 <HAL_RCC_OscConfig+0x4f8>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d118      	bne.n	8005b04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ad2:	4b8b      	ldr	r3, [pc, #556]	; (8005d00 <HAL_RCC_OscConfig+0x4f8>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a8a      	ldr	r2, [pc, #552]	; (8005d00 <HAL_RCC_OscConfig+0x4f8>)
 8005ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005adc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ade:	f7fd f9df 	bl	8002ea0 <HAL_GetTick>
 8005ae2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ae4:	e008      	b.n	8005af8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ae6:	f7fd f9db 	bl	8002ea0 <HAL_GetTick>
 8005aea:	4602      	mov	r2, r0
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	1ad3      	subs	r3, r2, r3
 8005af0:	2b64      	cmp	r3, #100	; 0x64
 8005af2:	d901      	bls.n	8005af8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005af4:	2303      	movs	r3, #3
 8005af6:	e0fd      	b.n	8005cf4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005af8:	4b81      	ldr	r3, [pc, #516]	; (8005d00 <HAL_RCC_OscConfig+0x4f8>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d0f0      	beq.n	8005ae6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d106      	bne.n	8005b1a <HAL_RCC_OscConfig+0x312>
 8005b0c:	4b7b      	ldr	r3, [pc, #492]	; (8005cfc <HAL_RCC_OscConfig+0x4f4>)
 8005b0e:	6a1b      	ldr	r3, [r3, #32]
 8005b10:	4a7a      	ldr	r2, [pc, #488]	; (8005cfc <HAL_RCC_OscConfig+0x4f4>)
 8005b12:	f043 0301 	orr.w	r3, r3, #1
 8005b16:	6213      	str	r3, [r2, #32]
 8005b18:	e02d      	b.n	8005b76 <HAL_RCC_OscConfig+0x36e>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d10c      	bne.n	8005b3c <HAL_RCC_OscConfig+0x334>
 8005b22:	4b76      	ldr	r3, [pc, #472]	; (8005cfc <HAL_RCC_OscConfig+0x4f4>)
 8005b24:	6a1b      	ldr	r3, [r3, #32]
 8005b26:	4a75      	ldr	r2, [pc, #468]	; (8005cfc <HAL_RCC_OscConfig+0x4f4>)
 8005b28:	f023 0301 	bic.w	r3, r3, #1
 8005b2c:	6213      	str	r3, [r2, #32]
 8005b2e:	4b73      	ldr	r3, [pc, #460]	; (8005cfc <HAL_RCC_OscConfig+0x4f4>)
 8005b30:	6a1b      	ldr	r3, [r3, #32]
 8005b32:	4a72      	ldr	r2, [pc, #456]	; (8005cfc <HAL_RCC_OscConfig+0x4f4>)
 8005b34:	f023 0304 	bic.w	r3, r3, #4
 8005b38:	6213      	str	r3, [r2, #32]
 8005b3a:	e01c      	b.n	8005b76 <HAL_RCC_OscConfig+0x36e>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	2b05      	cmp	r3, #5
 8005b42:	d10c      	bne.n	8005b5e <HAL_RCC_OscConfig+0x356>
 8005b44:	4b6d      	ldr	r3, [pc, #436]	; (8005cfc <HAL_RCC_OscConfig+0x4f4>)
 8005b46:	6a1b      	ldr	r3, [r3, #32]
 8005b48:	4a6c      	ldr	r2, [pc, #432]	; (8005cfc <HAL_RCC_OscConfig+0x4f4>)
 8005b4a:	f043 0304 	orr.w	r3, r3, #4
 8005b4e:	6213      	str	r3, [r2, #32]
 8005b50:	4b6a      	ldr	r3, [pc, #424]	; (8005cfc <HAL_RCC_OscConfig+0x4f4>)
 8005b52:	6a1b      	ldr	r3, [r3, #32]
 8005b54:	4a69      	ldr	r2, [pc, #420]	; (8005cfc <HAL_RCC_OscConfig+0x4f4>)
 8005b56:	f043 0301 	orr.w	r3, r3, #1
 8005b5a:	6213      	str	r3, [r2, #32]
 8005b5c:	e00b      	b.n	8005b76 <HAL_RCC_OscConfig+0x36e>
 8005b5e:	4b67      	ldr	r3, [pc, #412]	; (8005cfc <HAL_RCC_OscConfig+0x4f4>)
 8005b60:	6a1b      	ldr	r3, [r3, #32]
 8005b62:	4a66      	ldr	r2, [pc, #408]	; (8005cfc <HAL_RCC_OscConfig+0x4f4>)
 8005b64:	f023 0301 	bic.w	r3, r3, #1
 8005b68:	6213      	str	r3, [r2, #32]
 8005b6a:	4b64      	ldr	r3, [pc, #400]	; (8005cfc <HAL_RCC_OscConfig+0x4f4>)
 8005b6c:	6a1b      	ldr	r3, [r3, #32]
 8005b6e:	4a63      	ldr	r2, [pc, #396]	; (8005cfc <HAL_RCC_OscConfig+0x4f4>)
 8005b70:	f023 0304 	bic.w	r3, r3, #4
 8005b74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d015      	beq.n	8005baa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b7e:	f7fd f98f 	bl	8002ea0 <HAL_GetTick>
 8005b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b84:	e00a      	b.n	8005b9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b86:	f7fd f98b 	bl	8002ea0 <HAL_GetTick>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d901      	bls.n	8005b9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	e0ab      	b.n	8005cf4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b9c:	4b57      	ldr	r3, [pc, #348]	; (8005cfc <HAL_RCC_OscConfig+0x4f4>)
 8005b9e:	6a1b      	ldr	r3, [r3, #32]
 8005ba0:	f003 0302 	and.w	r3, r3, #2
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d0ee      	beq.n	8005b86 <HAL_RCC_OscConfig+0x37e>
 8005ba8:	e014      	b.n	8005bd4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005baa:	f7fd f979 	bl	8002ea0 <HAL_GetTick>
 8005bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bb0:	e00a      	b.n	8005bc8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bb2:	f7fd f975 	bl	8002ea0 <HAL_GetTick>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	1ad3      	subs	r3, r2, r3
 8005bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d901      	bls.n	8005bc8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005bc4:	2303      	movs	r3, #3
 8005bc6:	e095      	b.n	8005cf4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bc8:	4b4c      	ldr	r3, [pc, #304]	; (8005cfc <HAL_RCC_OscConfig+0x4f4>)
 8005bca:	6a1b      	ldr	r3, [r3, #32]
 8005bcc:	f003 0302 	and.w	r3, r3, #2
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d1ee      	bne.n	8005bb2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005bd4:	7dfb      	ldrb	r3, [r7, #23]
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d105      	bne.n	8005be6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bda:	4b48      	ldr	r3, [pc, #288]	; (8005cfc <HAL_RCC_OscConfig+0x4f4>)
 8005bdc:	69db      	ldr	r3, [r3, #28]
 8005bde:	4a47      	ldr	r2, [pc, #284]	; (8005cfc <HAL_RCC_OscConfig+0x4f4>)
 8005be0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005be4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	69db      	ldr	r3, [r3, #28]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	f000 8081 	beq.w	8005cf2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005bf0:	4b42      	ldr	r3, [pc, #264]	; (8005cfc <HAL_RCC_OscConfig+0x4f4>)
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	f003 030c 	and.w	r3, r3, #12
 8005bf8:	2b08      	cmp	r3, #8
 8005bfa:	d061      	beq.n	8005cc0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	69db      	ldr	r3, [r3, #28]
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	d146      	bne.n	8005c92 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c04:	4b3f      	ldr	r3, [pc, #252]	; (8005d04 <HAL_RCC_OscConfig+0x4fc>)
 8005c06:	2200      	movs	r2, #0
 8005c08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c0a:	f7fd f949 	bl	8002ea0 <HAL_GetTick>
 8005c0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c10:	e008      	b.n	8005c24 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c12:	f7fd f945 	bl	8002ea0 <HAL_GetTick>
 8005c16:	4602      	mov	r2, r0
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	2b02      	cmp	r3, #2
 8005c1e:	d901      	bls.n	8005c24 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005c20:	2303      	movs	r3, #3
 8005c22:	e067      	b.n	8005cf4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c24:	4b35      	ldr	r3, [pc, #212]	; (8005cfc <HAL_RCC_OscConfig+0x4f4>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d1f0      	bne.n	8005c12 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6a1b      	ldr	r3, [r3, #32]
 8005c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c38:	d108      	bne.n	8005c4c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005c3a:	4b30      	ldr	r3, [pc, #192]	; (8005cfc <HAL_RCC_OscConfig+0x4f4>)
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	492d      	ldr	r1, [pc, #180]	; (8005cfc <HAL_RCC_OscConfig+0x4f4>)
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c4c:	4b2b      	ldr	r3, [pc, #172]	; (8005cfc <HAL_RCC_OscConfig+0x4f4>)
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6a19      	ldr	r1, [r3, #32]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5c:	430b      	orrs	r3, r1
 8005c5e:	4927      	ldr	r1, [pc, #156]	; (8005cfc <HAL_RCC_OscConfig+0x4f4>)
 8005c60:	4313      	orrs	r3, r2
 8005c62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c64:	4b27      	ldr	r3, [pc, #156]	; (8005d04 <HAL_RCC_OscConfig+0x4fc>)
 8005c66:	2201      	movs	r2, #1
 8005c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c6a:	f7fd f919 	bl	8002ea0 <HAL_GetTick>
 8005c6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005c70:	e008      	b.n	8005c84 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c72:	f7fd f915 	bl	8002ea0 <HAL_GetTick>
 8005c76:	4602      	mov	r2, r0
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	1ad3      	subs	r3, r2, r3
 8005c7c:	2b02      	cmp	r3, #2
 8005c7e:	d901      	bls.n	8005c84 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005c80:	2303      	movs	r3, #3
 8005c82:	e037      	b.n	8005cf4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005c84:	4b1d      	ldr	r3, [pc, #116]	; (8005cfc <HAL_RCC_OscConfig+0x4f4>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d0f0      	beq.n	8005c72 <HAL_RCC_OscConfig+0x46a>
 8005c90:	e02f      	b.n	8005cf2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c92:	4b1c      	ldr	r3, [pc, #112]	; (8005d04 <HAL_RCC_OscConfig+0x4fc>)
 8005c94:	2200      	movs	r2, #0
 8005c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c98:	f7fd f902 	bl	8002ea0 <HAL_GetTick>
 8005c9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c9e:	e008      	b.n	8005cb2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ca0:	f7fd f8fe 	bl	8002ea0 <HAL_GetTick>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	2b02      	cmp	r3, #2
 8005cac:	d901      	bls.n	8005cb2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	e020      	b.n	8005cf4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005cb2:	4b12      	ldr	r3, [pc, #72]	; (8005cfc <HAL_RCC_OscConfig+0x4f4>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d1f0      	bne.n	8005ca0 <HAL_RCC_OscConfig+0x498>
 8005cbe:	e018      	b.n	8005cf2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	69db      	ldr	r3, [r3, #28]
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d101      	bne.n	8005ccc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e013      	b.n	8005cf4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005ccc:	4b0b      	ldr	r3, [pc, #44]	; (8005cfc <HAL_RCC_OscConfig+0x4f4>)
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6a1b      	ldr	r3, [r3, #32]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d106      	bne.n	8005cee <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d001      	beq.n	8005cf2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e000      	b.n	8005cf4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005cf2:	2300      	movs	r3, #0
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3718      	adds	r7, #24
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	40021000 	.word	0x40021000
 8005d00:	40007000 	.word	0x40007000
 8005d04:	42420060 	.word	0x42420060

08005d08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d101      	bne.n	8005d1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e0d0      	b.n	8005ebe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d1c:	4b6a      	ldr	r3, [pc, #424]	; (8005ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 0307 	and.w	r3, r3, #7
 8005d24:	683a      	ldr	r2, [r7, #0]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d910      	bls.n	8005d4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d2a:	4b67      	ldr	r3, [pc, #412]	; (8005ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f023 0207 	bic.w	r2, r3, #7
 8005d32:	4965      	ldr	r1, [pc, #404]	; (8005ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d3a:	4b63      	ldr	r3, [pc, #396]	; (8005ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f003 0307 	and.w	r3, r3, #7
 8005d42:	683a      	ldr	r2, [r7, #0]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d001      	beq.n	8005d4c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e0b8      	b.n	8005ebe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 0302 	and.w	r3, r3, #2
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d020      	beq.n	8005d9a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 0304 	and.w	r3, r3, #4
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d005      	beq.n	8005d70 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d64:	4b59      	ldr	r3, [pc, #356]	; (8005ecc <HAL_RCC_ClockConfig+0x1c4>)
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	4a58      	ldr	r2, [pc, #352]	; (8005ecc <HAL_RCC_ClockConfig+0x1c4>)
 8005d6a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005d6e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 0308 	and.w	r3, r3, #8
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d005      	beq.n	8005d88 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d7c:	4b53      	ldr	r3, [pc, #332]	; (8005ecc <HAL_RCC_ClockConfig+0x1c4>)
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	4a52      	ldr	r2, [pc, #328]	; (8005ecc <HAL_RCC_ClockConfig+0x1c4>)
 8005d82:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005d86:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d88:	4b50      	ldr	r3, [pc, #320]	; (8005ecc <HAL_RCC_ClockConfig+0x1c4>)
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	494d      	ldr	r1, [pc, #308]	; (8005ecc <HAL_RCC_ClockConfig+0x1c4>)
 8005d96:	4313      	orrs	r3, r2
 8005d98:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 0301 	and.w	r3, r3, #1
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d040      	beq.n	8005e28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d107      	bne.n	8005dbe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dae:	4b47      	ldr	r3, [pc, #284]	; (8005ecc <HAL_RCC_ClockConfig+0x1c4>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d115      	bne.n	8005de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e07f      	b.n	8005ebe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	2b02      	cmp	r3, #2
 8005dc4:	d107      	bne.n	8005dd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dc6:	4b41      	ldr	r3, [pc, #260]	; (8005ecc <HAL_RCC_ClockConfig+0x1c4>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d109      	bne.n	8005de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e073      	b.n	8005ebe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dd6:	4b3d      	ldr	r3, [pc, #244]	; (8005ecc <HAL_RCC_ClockConfig+0x1c4>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 0302 	and.w	r3, r3, #2
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d101      	bne.n	8005de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e06b      	b.n	8005ebe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005de6:	4b39      	ldr	r3, [pc, #228]	; (8005ecc <HAL_RCC_ClockConfig+0x1c4>)
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	f023 0203 	bic.w	r2, r3, #3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	4936      	ldr	r1, [pc, #216]	; (8005ecc <HAL_RCC_ClockConfig+0x1c4>)
 8005df4:	4313      	orrs	r3, r2
 8005df6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005df8:	f7fd f852 	bl	8002ea0 <HAL_GetTick>
 8005dfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dfe:	e00a      	b.n	8005e16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e00:	f7fd f84e 	bl	8002ea0 <HAL_GetTick>
 8005e04:	4602      	mov	r2, r0
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	1ad3      	subs	r3, r2, r3
 8005e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d901      	bls.n	8005e16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e12:	2303      	movs	r3, #3
 8005e14:	e053      	b.n	8005ebe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e16:	4b2d      	ldr	r3, [pc, #180]	; (8005ecc <HAL_RCC_ClockConfig+0x1c4>)
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	f003 020c 	and.w	r2, r3, #12
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d1eb      	bne.n	8005e00 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005e28:	4b27      	ldr	r3, [pc, #156]	; (8005ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f003 0307 	and.w	r3, r3, #7
 8005e30:	683a      	ldr	r2, [r7, #0]
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d210      	bcs.n	8005e58 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e36:	4b24      	ldr	r3, [pc, #144]	; (8005ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f023 0207 	bic.w	r2, r3, #7
 8005e3e:	4922      	ldr	r1, [pc, #136]	; (8005ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e46:	4b20      	ldr	r3, [pc, #128]	; (8005ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 0307 	and.w	r3, r3, #7
 8005e4e:	683a      	ldr	r2, [r7, #0]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d001      	beq.n	8005e58 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	e032      	b.n	8005ebe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 0304 	and.w	r3, r3, #4
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d008      	beq.n	8005e76 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e64:	4b19      	ldr	r3, [pc, #100]	; (8005ecc <HAL_RCC_ClockConfig+0x1c4>)
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	4916      	ldr	r1, [pc, #88]	; (8005ecc <HAL_RCC_ClockConfig+0x1c4>)
 8005e72:	4313      	orrs	r3, r2
 8005e74:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 0308 	and.w	r3, r3, #8
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d009      	beq.n	8005e96 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005e82:	4b12      	ldr	r3, [pc, #72]	; (8005ecc <HAL_RCC_ClockConfig+0x1c4>)
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	691b      	ldr	r3, [r3, #16]
 8005e8e:	00db      	lsls	r3, r3, #3
 8005e90:	490e      	ldr	r1, [pc, #56]	; (8005ecc <HAL_RCC_ClockConfig+0x1c4>)
 8005e92:	4313      	orrs	r3, r2
 8005e94:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005e96:	f000 f821 	bl	8005edc <HAL_RCC_GetSysClockFreq>
 8005e9a:	4601      	mov	r1, r0
 8005e9c:	4b0b      	ldr	r3, [pc, #44]	; (8005ecc <HAL_RCC_ClockConfig+0x1c4>)
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	091b      	lsrs	r3, r3, #4
 8005ea2:	f003 030f 	and.w	r3, r3, #15
 8005ea6:	4a0a      	ldr	r2, [pc, #40]	; (8005ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8005ea8:	5cd3      	ldrb	r3, [r2, r3]
 8005eaa:	fa21 f303 	lsr.w	r3, r1, r3
 8005eae:	4a09      	ldr	r2, [pc, #36]	; (8005ed4 <HAL_RCC_ClockConfig+0x1cc>)
 8005eb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005eb2:	4b09      	ldr	r3, [pc, #36]	; (8005ed8 <HAL_RCC_ClockConfig+0x1d0>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f7fc ffb0 	bl	8002e1c <HAL_InitTick>

  return HAL_OK;
 8005ebc:	2300      	movs	r3, #0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3710      	adds	r7, #16
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	40022000 	.word	0x40022000
 8005ecc:	40021000 	.word	0x40021000
 8005ed0:	08009e38 	.word	0x08009e38
 8005ed4:	20000004 	.word	0x20000004
 8005ed8:	20000008 	.word	0x20000008

08005edc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005edc:	b490      	push	{r4, r7}
 8005ede:	b08a      	sub	sp, #40	; 0x28
 8005ee0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005ee2:	4b2a      	ldr	r3, [pc, #168]	; (8005f8c <HAL_RCC_GetSysClockFreq+0xb0>)
 8005ee4:	1d3c      	adds	r4, r7, #4
 8005ee6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005ee8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005eec:	4b28      	ldr	r3, [pc, #160]	; (8005f90 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005eee:	881b      	ldrh	r3, [r3, #0]
 8005ef0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	61fb      	str	r3, [r7, #28]
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	61bb      	str	r3, [r7, #24]
 8005efa:	2300      	movs	r3, #0
 8005efc:	627b      	str	r3, [r7, #36]	; 0x24
 8005efe:	2300      	movs	r3, #0
 8005f00:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005f02:	2300      	movs	r3, #0
 8005f04:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005f06:	4b23      	ldr	r3, [pc, #140]	; (8005f94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	f003 030c 	and.w	r3, r3, #12
 8005f12:	2b04      	cmp	r3, #4
 8005f14:	d002      	beq.n	8005f1c <HAL_RCC_GetSysClockFreq+0x40>
 8005f16:	2b08      	cmp	r3, #8
 8005f18:	d003      	beq.n	8005f22 <HAL_RCC_GetSysClockFreq+0x46>
 8005f1a:	e02d      	b.n	8005f78 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005f1c:	4b1e      	ldr	r3, [pc, #120]	; (8005f98 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005f1e:	623b      	str	r3, [r7, #32]
      break;
 8005f20:	e02d      	b.n	8005f7e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	0c9b      	lsrs	r3, r3, #18
 8005f26:	f003 030f 	and.w	r3, r3, #15
 8005f2a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005f2e:	4413      	add	r3, r2
 8005f30:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005f34:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d013      	beq.n	8005f68 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005f40:	4b14      	ldr	r3, [pc, #80]	; (8005f94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	0c5b      	lsrs	r3, r3, #17
 8005f46:	f003 0301 	and.w	r3, r3, #1
 8005f4a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005f4e:	4413      	add	r3, r2
 8005f50:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005f54:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	4a0f      	ldr	r2, [pc, #60]	; (8005f98 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005f5a:	fb02 f203 	mul.w	r2, r2, r3
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f64:	627b      	str	r3, [r7, #36]	; 0x24
 8005f66:	e004      	b.n	8005f72 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	4a0c      	ldr	r2, [pc, #48]	; (8005f9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005f6c:	fb02 f303 	mul.w	r3, r2, r3
 8005f70:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f74:	623b      	str	r3, [r7, #32]
      break;
 8005f76:	e002      	b.n	8005f7e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005f78:	4b07      	ldr	r3, [pc, #28]	; (8005f98 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005f7a:	623b      	str	r3, [r7, #32]
      break;
 8005f7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f7e:	6a3b      	ldr	r3, [r7, #32]
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3728      	adds	r7, #40	; 0x28
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bc90      	pop	{r4, r7}
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	08009dfc 	.word	0x08009dfc
 8005f90:	08009e0c 	.word	0x08009e0c
 8005f94:	40021000 	.word	0x40021000
 8005f98:	007a1200 	.word	0x007a1200
 8005f9c:	003d0900 	.word	0x003d0900

08005fa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005fa4:	4b02      	ldr	r3, [pc, #8]	; (8005fb0 <HAL_RCC_GetHCLKFreq+0x10>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bc80      	pop	{r7}
 8005fae:	4770      	bx	lr
 8005fb0:	20000004 	.word	0x20000004

08005fb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005fb8:	f7ff fff2 	bl	8005fa0 <HAL_RCC_GetHCLKFreq>
 8005fbc:	4601      	mov	r1, r0
 8005fbe:	4b05      	ldr	r3, [pc, #20]	; (8005fd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	0a1b      	lsrs	r3, r3, #8
 8005fc4:	f003 0307 	and.w	r3, r3, #7
 8005fc8:	4a03      	ldr	r2, [pc, #12]	; (8005fd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fca:	5cd3      	ldrb	r3, [r2, r3]
 8005fcc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	40021000 	.word	0x40021000
 8005fd8:	08009e48 	.word	0x08009e48

08005fdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005fe0:	f7ff ffde 	bl	8005fa0 <HAL_RCC_GetHCLKFreq>
 8005fe4:	4601      	mov	r1, r0
 8005fe6:	4b05      	ldr	r3, [pc, #20]	; (8005ffc <HAL_RCC_GetPCLK2Freq+0x20>)
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	0adb      	lsrs	r3, r3, #11
 8005fec:	f003 0307 	and.w	r3, r3, #7
 8005ff0:	4a03      	ldr	r2, [pc, #12]	; (8006000 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ff2:	5cd3      	ldrb	r3, [r2, r3]
 8005ff4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	bd80      	pop	{r7, pc}
 8005ffc:	40021000 	.word	0x40021000
 8006000:	08009e48 	.word	0x08009e48

08006004 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006004:	b480      	push	{r7}
 8006006:	b085      	sub	sp, #20
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800600c:	4b0a      	ldr	r3, [pc, #40]	; (8006038 <RCC_Delay+0x34>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a0a      	ldr	r2, [pc, #40]	; (800603c <RCC_Delay+0x38>)
 8006012:	fba2 2303 	umull	r2, r3, r2, r3
 8006016:	0a5b      	lsrs	r3, r3, #9
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	fb02 f303 	mul.w	r3, r2, r3
 800601e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006020:	bf00      	nop
  }
  while (Delay --);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	1e5a      	subs	r2, r3, #1
 8006026:	60fa      	str	r2, [r7, #12]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d1f9      	bne.n	8006020 <RCC_Delay+0x1c>
}
 800602c:	bf00      	nop
 800602e:	3714      	adds	r7, #20
 8006030:	46bd      	mov	sp, r7
 8006032:	bc80      	pop	{r7}
 8006034:	4770      	bx	lr
 8006036:	bf00      	nop
 8006038:	20000004 	.word	0x20000004
 800603c:	10624dd3 	.word	0x10624dd3

08006040 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b086      	sub	sp, #24
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006048:	2300      	movs	r3, #0
 800604a:	613b      	str	r3, [r7, #16]
 800604c:	2300      	movs	r3, #0
 800604e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f003 0301 	and.w	r3, r3, #1
 8006058:	2b00      	cmp	r3, #0
 800605a:	d07d      	beq.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800605c:	2300      	movs	r3, #0
 800605e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006060:	4b4f      	ldr	r3, [pc, #316]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006062:	69db      	ldr	r3, [r3, #28]
 8006064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006068:	2b00      	cmp	r3, #0
 800606a:	d10d      	bne.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800606c:	4b4c      	ldr	r3, [pc, #304]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800606e:	69db      	ldr	r3, [r3, #28]
 8006070:	4a4b      	ldr	r2, [pc, #300]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006072:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006076:	61d3      	str	r3, [r2, #28]
 8006078:	4b49      	ldr	r3, [pc, #292]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800607a:	69db      	ldr	r3, [r3, #28]
 800607c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006080:	60bb      	str	r3, [r7, #8]
 8006082:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006084:	2301      	movs	r3, #1
 8006086:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006088:	4b46      	ldr	r3, [pc, #280]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006090:	2b00      	cmp	r3, #0
 8006092:	d118      	bne.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006094:	4b43      	ldr	r3, [pc, #268]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a42      	ldr	r2, [pc, #264]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800609a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800609e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060a0:	f7fc fefe 	bl	8002ea0 <HAL_GetTick>
 80060a4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060a6:	e008      	b.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060a8:	f7fc fefa 	bl	8002ea0 <HAL_GetTick>
 80060ac:	4602      	mov	r2, r0
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	2b64      	cmp	r3, #100	; 0x64
 80060b4:	d901      	bls.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80060b6:	2303      	movs	r3, #3
 80060b8:	e06d      	b.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060ba:	4b3a      	ldr	r3, [pc, #232]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d0f0      	beq.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80060c6:	4b36      	ldr	r3, [pc, #216]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060c8:	6a1b      	ldr	r3, [r3, #32]
 80060ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060ce:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d02e      	beq.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d027      	beq.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80060e4:	4b2e      	ldr	r3, [pc, #184]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060e6:	6a1b      	ldr	r3, [r3, #32]
 80060e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060ec:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80060ee:	4b2e      	ldr	r3, [pc, #184]	; (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80060f0:	2201      	movs	r2, #1
 80060f2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80060f4:	4b2c      	ldr	r3, [pc, #176]	; (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80060f6:	2200      	movs	r2, #0
 80060f8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80060fa:	4a29      	ldr	r2, [pc, #164]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f003 0301 	and.w	r3, r3, #1
 8006106:	2b00      	cmp	r3, #0
 8006108:	d014      	beq.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800610a:	f7fc fec9 	bl	8002ea0 <HAL_GetTick>
 800610e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006110:	e00a      	b.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006112:	f7fc fec5 	bl	8002ea0 <HAL_GetTick>
 8006116:	4602      	mov	r2, r0
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	1ad3      	subs	r3, r2, r3
 800611c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006120:	4293      	cmp	r3, r2
 8006122:	d901      	bls.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006124:	2303      	movs	r3, #3
 8006126:	e036      	b.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006128:	4b1d      	ldr	r3, [pc, #116]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800612a:	6a1b      	ldr	r3, [r3, #32]
 800612c:	f003 0302 	and.w	r3, r3, #2
 8006130:	2b00      	cmp	r3, #0
 8006132:	d0ee      	beq.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006134:	4b1a      	ldr	r3, [pc, #104]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006136:	6a1b      	ldr	r3, [r3, #32]
 8006138:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	4917      	ldr	r1, [pc, #92]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006142:	4313      	orrs	r3, r2
 8006144:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006146:	7dfb      	ldrb	r3, [r7, #23]
 8006148:	2b01      	cmp	r3, #1
 800614a:	d105      	bne.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800614c:	4b14      	ldr	r3, [pc, #80]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800614e:	69db      	ldr	r3, [r3, #28]
 8006150:	4a13      	ldr	r2, [pc, #76]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006152:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006156:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 0302 	and.w	r3, r3, #2
 8006160:	2b00      	cmp	r3, #0
 8006162:	d008      	beq.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006164:	4b0e      	ldr	r3, [pc, #56]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	490b      	ldr	r1, [pc, #44]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006172:	4313      	orrs	r3, r2
 8006174:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 0310 	and.w	r3, r3, #16
 800617e:	2b00      	cmp	r3, #0
 8006180:	d008      	beq.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006182:	4b07      	ldr	r3, [pc, #28]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	4904      	ldr	r1, [pc, #16]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006190:	4313      	orrs	r3, r2
 8006192:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3718      	adds	r7, #24
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	40021000 	.word	0x40021000
 80061a4:	40007000 	.word	0x40007000
 80061a8:	42420440 	.word	0x42420440

080061ac <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80061ac:	b590      	push	{r4, r7, lr}
 80061ae:	b08d      	sub	sp, #52	; 0x34
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80061b4:	4b55      	ldr	r3, [pc, #340]	; (800630c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80061b6:	f107 040c 	add.w	r4, r7, #12
 80061ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80061bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80061c0:	4b53      	ldr	r3, [pc, #332]	; (8006310 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80061c2:	881b      	ldrh	r3, [r3, #0]
 80061c4:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80061c6:	2300      	movs	r3, #0
 80061c8:	627b      	str	r3, [r7, #36]	; 0x24
 80061ca:	2300      	movs	r3, #0
 80061cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061ce:	2300      	movs	r3, #0
 80061d0:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80061d2:	2300      	movs	r3, #0
 80061d4:	61fb      	str	r3, [r7, #28]
 80061d6:	2300      	movs	r3, #0
 80061d8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2b02      	cmp	r3, #2
 80061de:	d07f      	beq.n	80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80061e0:	2b10      	cmp	r3, #16
 80061e2:	d002      	beq.n	80061ea <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d048      	beq.n	800627a <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80061e8:	e08b      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 80061ea:	4b4a      	ldr	r3, [pc, #296]	; (8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80061f0:	4b48      	ldr	r3, [pc, #288]	; (8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d07f      	beq.n	80062fc <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	0c9b      	lsrs	r3, r3, #18
 8006200:	f003 030f 	and.w	r3, r3, #15
 8006204:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006208:	4413      	add	r3, r2
 800620a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800620e:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006216:	2b00      	cmp	r3, #0
 8006218:	d018      	beq.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800621a:	4b3e      	ldr	r3, [pc, #248]	; (8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	0c5b      	lsrs	r3, r3, #17
 8006220:	f003 0301 	and.w	r3, r3, #1
 8006224:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006228:	4413      	add	r3, r2
 800622a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800622e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00d      	beq.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800623a:	4a37      	ldr	r2, [pc, #220]	; (8006318 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 800623c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006242:	6a3b      	ldr	r3, [r7, #32]
 8006244:	fb02 f303 	mul.w	r3, r2, r3
 8006248:	62fb      	str	r3, [r7, #44]	; 0x2c
 800624a:	e004      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800624c:	6a3b      	ldr	r3, [r7, #32]
 800624e:	4a33      	ldr	r2, [pc, #204]	; (800631c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006250:	fb02 f303 	mul.w	r3, r2, r3
 8006254:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8006256:	4b2f      	ldr	r3, [pc, #188]	; (8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800625e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006262:	d102      	bne.n	800626a <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8006264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006266:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006268:	e048      	b.n	80062fc <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 800626a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800626c:	005b      	lsls	r3, r3, #1
 800626e:	4a2c      	ldr	r2, [pc, #176]	; (8006320 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8006270:	fba2 2303 	umull	r2, r3, r2, r3
 8006274:	085b      	lsrs	r3, r3, #1
 8006276:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006278:	e040      	b.n	80062fc <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 800627a:	4b26      	ldr	r3, [pc, #152]	; (8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800627c:	6a1b      	ldr	r3, [r3, #32]
 800627e:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006286:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800628a:	d108      	bne.n	800629e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 800628c:	69fb      	ldr	r3, [r7, #28]
 800628e:	f003 0302 	and.w	r3, r3, #2
 8006292:	2b00      	cmp	r3, #0
 8006294:	d003      	beq.n	800629e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8006296:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800629a:	62bb      	str	r3, [r7, #40]	; 0x28
 800629c:	e01f      	b.n	80062de <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800629e:	69fb      	ldr	r3, [r7, #28]
 80062a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062a8:	d109      	bne.n	80062be <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 80062aa:	4b1a      	ldr	r3, [pc, #104]	; (8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80062ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ae:	f003 0302 	and.w	r3, r3, #2
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d003      	beq.n	80062be <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 80062b6:	f649 4340 	movw	r3, #40000	; 0x9c40
 80062ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80062bc:	e00f      	b.n	80062de <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062c8:	d11a      	bne.n	8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80062ca:	4b12      	ldr	r3, [pc, #72]	; (8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d014      	beq.n	8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 80062d6:	f24f 4324 	movw	r3, #62500	; 0xf424
 80062da:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80062dc:	e010      	b.n	8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80062de:	e00f      	b.n	8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80062e0:	f7ff fe7c 	bl	8005fdc <HAL_RCC_GetPCLK2Freq>
 80062e4:	4602      	mov	r2, r0
 80062e6:	4b0b      	ldr	r3, [pc, #44]	; (8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	0b9b      	lsrs	r3, r3, #14
 80062ec:	f003 0303 	and.w	r3, r3, #3
 80062f0:	3301      	adds	r3, #1
 80062f2:	005b      	lsls	r3, r3, #1
 80062f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80062f8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80062fa:	e002      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80062fc:	bf00      	nop
 80062fe:	e000      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8006300:	bf00      	nop
    }
  }
  return (frequency);
 8006302:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8006304:	4618      	mov	r0, r3
 8006306:	3734      	adds	r7, #52	; 0x34
 8006308:	46bd      	mov	sp, r7
 800630a:	bd90      	pop	{r4, r7, pc}
 800630c:	08009e10 	.word	0x08009e10
 8006310:	08009e20 	.word	0x08009e20
 8006314:	40021000 	.word	0x40021000
 8006318:	007a1200 	.word	0x007a1200
 800631c:	003d0900 	.word	0x003d0900
 8006320:	aaaaaaab 	.word	0xaaaaaaab

08006324 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b082      	sub	sp, #8
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d101      	bne.n	8006336 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	e03f      	b.n	80063b6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800633c:	b2db      	uxtb	r3, r3
 800633e:	2b00      	cmp	r3, #0
 8006340:	d106      	bne.n	8006350 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f7fc fc94 	bl	8002c78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2224      	movs	r2, #36	; 0x24
 8006354:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	68da      	ldr	r2, [r3, #12]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006366:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f000 fb83 	bl	8006a74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	691a      	ldr	r2, [r3, #16]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800637c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	695a      	ldr	r2, [r3, #20]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800638c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68da      	ldr	r2, [r3, #12]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800639c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2220      	movs	r2, #32
 80063a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2220      	movs	r2, #32
 80063b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3708      	adds	r7, #8
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}

080063be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063be:	b580      	push	{r7, lr}
 80063c0:	b08a      	sub	sp, #40	; 0x28
 80063c2:	af02      	add	r7, sp, #8
 80063c4:	60f8      	str	r0, [r7, #12]
 80063c6:	60b9      	str	r1, [r7, #8]
 80063c8:	603b      	str	r3, [r7, #0]
 80063ca:	4613      	mov	r3, r2
 80063cc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80063ce:	2300      	movs	r3, #0
 80063d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	2b20      	cmp	r3, #32
 80063dc:	d17c      	bne.n	80064d8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d002      	beq.n	80063ea <HAL_UART_Transmit+0x2c>
 80063e4:	88fb      	ldrh	r3, [r7, #6]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d101      	bne.n	80063ee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e075      	b.n	80064da <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d101      	bne.n	80063fc <HAL_UART_Transmit+0x3e>
 80063f8:	2302      	movs	r3, #2
 80063fa:	e06e      	b.n	80064da <HAL_UART_Transmit+0x11c>
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2201      	movs	r2, #1
 8006400:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2200      	movs	r2, #0
 8006408:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2221      	movs	r2, #33	; 0x21
 800640e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006412:	f7fc fd45 	bl	8002ea0 <HAL_GetTick>
 8006416:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	88fa      	ldrh	r2, [r7, #6]
 800641c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	88fa      	ldrh	r2, [r7, #6]
 8006422:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800642c:	d108      	bne.n	8006440 <HAL_UART_Transmit+0x82>
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d104      	bne.n	8006440 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006436:	2300      	movs	r3, #0
 8006438:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	61bb      	str	r3, [r7, #24]
 800643e:	e003      	b.n	8006448 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006444:	2300      	movs	r3, #0
 8006446:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2200      	movs	r2, #0
 800644c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8006450:	e02a      	b.n	80064a8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	9300      	str	r3, [sp, #0]
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	2200      	movs	r2, #0
 800645a:	2180      	movs	r1, #128	; 0x80
 800645c:	68f8      	ldr	r0, [r7, #12]
 800645e:	f000 f9a7 	bl	80067b0 <UART_WaitOnFlagUntilTimeout>
 8006462:	4603      	mov	r3, r0
 8006464:	2b00      	cmp	r3, #0
 8006466:	d001      	beq.n	800646c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006468:	2303      	movs	r3, #3
 800646a:	e036      	b.n	80064da <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800646c:	69fb      	ldr	r3, [r7, #28]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d10b      	bne.n	800648a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	881b      	ldrh	r3, [r3, #0]
 8006476:	461a      	mov	r2, r3
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006480:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006482:	69bb      	ldr	r3, [r7, #24]
 8006484:	3302      	adds	r3, #2
 8006486:	61bb      	str	r3, [r7, #24]
 8006488:	e007      	b.n	800649a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	781a      	ldrb	r2, [r3, #0]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006494:	69fb      	ldr	r3, [r7, #28]
 8006496:	3301      	adds	r3, #1
 8006498:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800649e:	b29b      	uxth	r3, r3
 80064a0:	3b01      	subs	r3, #1
 80064a2:	b29a      	uxth	r2, r3
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d1cf      	bne.n	8006452 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	9300      	str	r3, [sp, #0]
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	2200      	movs	r2, #0
 80064ba:	2140      	movs	r1, #64	; 0x40
 80064bc:	68f8      	ldr	r0, [r7, #12]
 80064be:	f000 f977 	bl	80067b0 <UART_WaitOnFlagUntilTimeout>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d001      	beq.n	80064cc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80064c8:	2303      	movs	r3, #3
 80064ca:	e006      	b.n	80064da <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2220      	movs	r2, #32
 80064d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80064d4:	2300      	movs	r3, #0
 80064d6:	e000      	b.n	80064da <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80064d8:	2302      	movs	r3, #2
  }
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3720      	adds	r7, #32
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}

080064e2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064e2:	b480      	push	{r7}
 80064e4:	b085      	sub	sp, #20
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	60f8      	str	r0, [r7, #12]
 80064ea:	60b9      	str	r1, [r7, #8]
 80064ec:	4613      	mov	r3, r2
 80064ee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	2b20      	cmp	r3, #32
 80064fa:	d140      	bne.n	800657e <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d002      	beq.n	8006508 <HAL_UART_Receive_IT+0x26>
 8006502:	88fb      	ldrh	r3, [r7, #6]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d101      	bne.n	800650c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	e039      	b.n	8006580 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006512:	2b01      	cmp	r3, #1
 8006514:	d101      	bne.n	800651a <HAL_UART_Receive_IT+0x38>
 8006516:	2302      	movs	r3, #2
 8006518:	e032      	b.n	8006580 <HAL_UART_Receive_IT+0x9e>
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2201      	movs	r2, #1
 800651e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	68ba      	ldr	r2, [r7, #8]
 8006526:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	88fa      	ldrh	r2, [r7, #6]
 800652c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	88fa      	ldrh	r2, [r7, #6]
 8006532:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2200      	movs	r2, #0
 8006538:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2222      	movs	r2, #34	; 0x22
 800653e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2200      	movs	r2, #0
 8006546:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	68da      	ldr	r2, [r3, #12]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006558:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	695a      	ldr	r2, [r3, #20]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f042 0201 	orr.w	r2, r2, #1
 8006568:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	68da      	ldr	r2, [r3, #12]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f042 0220 	orr.w	r2, r2, #32
 8006578:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800657a:	2300      	movs	r3, #0
 800657c:	e000      	b.n	8006580 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800657e:	2302      	movs	r3, #2
  }
}
 8006580:	4618      	mov	r0, r3
 8006582:	3714      	adds	r7, #20
 8006584:	46bd      	mov	sp, r7
 8006586:	bc80      	pop	{r7}
 8006588:	4770      	bx	lr
	...

0800658c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b088      	sub	sp, #32
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	695b      	ldr	r3, [r3, #20]
 80065aa:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80065ac:	2300      	movs	r3, #0
 80065ae:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80065b0:	2300      	movs	r3, #0
 80065b2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80065b4:	69fb      	ldr	r3, [r7, #28]
 80065b6:	f003 030f 	and.w	r3, r3, #15
 80065ba:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d10d      	bne.n	80065de <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80065c2:	69fb      	ldr	r3, [r7, #28]
 80065c4:	f003 0320 	and.w	r3, r3, #32
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d008      	beq.n	80065de <HAL_UART_IRQHandler+0x52>
 80065cc:	69bb      	ldr	r3, [r7, #24]
 80065ce:	f003 0320 	and.w	r3, r3, #32
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d003      	beq.n	80065de <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 f9cc 	bl	8006974 <UART_Receive_IT>
      return;
 80065dc:	e0d1      	b.n	8006782 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	f000 80b0 	beq.w	8006746 <HAL_UART_IRQHandler+0x1ba>
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	f003 0301 	and.w	r3, r3, #1
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d105      	bne.n	80065fc <HAL_UART_IRQHandler+0x70>
 80065f0:	69bb      	ldr	r3, [r7, #24]
 80065f2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	f000 80a5 	beq.w	8006746 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80065fc:	69fb      	ldr	r3, [r7, #28]
 80065fe:	f003 0301 	and.w	r3, r3, #1
 8006602:	2b00      	cmp	r3, #0
 8006604:	d00a      	beq.n	800661c <HAL_UART_IRQHandler+0x90>
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800660c:	2b00      	cmp	r3, #0
 800660e:	d005      	beq.n	800661c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006614:	f043 0201 	orr.w	r2, r3, #1
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	f003 0304 	and.w	r3, r3, #4
 8006622:	2b00      	cmp	r3, #0
 8006624:	d00a      	beq.n	800663c <HAL_UART_IRQHandler+0xb0>
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	f003 0301 	and.w	r3, r3, #1
 800662c:	2b00      	cmp	r3, #0
 800662e:	d005      	beq.n	800663c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006634:	f043 0202 	orr.w	r2, r3, #2
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800663c:	69fb      	ldr	r3, [r7, #28]
 800663e:	f003 0302 	and.w	r3, r3, #2
 8006642:	2b00      	cmp	r3, #0
 8006644:	d00a      	beq.n	800665c <HAL_UART_IRQHandler+0xd0>
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	f003 0301 	and.w	r3, r3, #1
 800664c:	2b00      	cmp	r3, #0
 800664e:	d005      	beq.n	800665c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006654:	f043 0204 	orr.w	r2, r3, #4
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	f003 0308 	and.w	r3, r3, #8
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00f      	beq.n	8006686 <HAL_UART_IRQHandler+0xfa>
 8006666:	69bb      	ldr	r3, [r7, #24]
 8006668:	f003 0320 	and.w	r3, r3, #32
 800666c:	2b00      	cmp	r3, #0
 800666e:	d104      	bne.n	800667a <HAL_UART_IRQHandler+0xee>
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	f003 0301 	and.w	r3, r3, #1
 8006676:	2b00      	cmp	r3, #0
 8006678:	d005      	beq.n	8006686 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800667e:	f043 0208 	orr.w	r2, r3, #8
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800668a:	2b00      	cmp	r3, #0
 800668c:	d078      	beq.n	8006780 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800668e:	69fb      	ldr	r3, [r7, #28]
 8006690:	f003 0320 	and.w	r3, r3, #32
 8006694:	2b00      	cmp	r3, #0
 8006696:	d007      	beq.n	80066a8 <HAL_UART_IRQHandler+0x11c>
 8006698:	69bb      	ldr	r3, [r7, #24]
 800669a:	f003 0320 	and.w	r3, r3, #32
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d002      	beq.n	80066a8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 f966 	bl	8006974 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	695b      	ldr	r3, [r3, #20]
 80066ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	bf14      	ite	ne
 80066b6:	2301      	movne	r3, #1
 80066b8:	2300      	moveq	r3, #0
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066c2:	f003 0308 	and.w	r3, r3, #8
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d102      	bne.n	80066d0 <HAL_UART_IRQHandler+0x144>
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d031      	beq.n	8006734 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f000 f8b7 	bl	8006844 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	695b      	ldr	r3, [r3, #20]
 80066dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d023      	beq.n	800672c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	695a      	ldr	r2, [r3, #20]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066f2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d013      	beq.n	8006724 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006700:	4a21      	ldr	r2, [pc, #132]	; (8006788 <HAL_UART_IRQHandler+0x1fc>)
 8006702:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006708:	4618      	mov	r0, r3
 800670a:	f7fd f9e7 	bl	8003adc <HAL_DMA_Abort_IT>
 800670e:	4603      	mov	r3, r0
 8006710:	2b00      	cmp	r3, #0
 8006712:	d016      	beq.n	8006742 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800671e:	4610      	mov	r0, r2
 8006720:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006722:	e00e      	b.n	8006742 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 f83a 	bl	800679e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800672a:	e00a      	b.n	8006742 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f000 f836 	bl	800679e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006732:	e006      	b.n	8006742 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 f832 	bl	800679e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006740:	e01e      	b.n	8006780 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006742:	bf00      	nop
    return;
 8006744:	e01c      	b.n	8006780 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006746:	69fb      	ldr	r3, [r7, #28]
 8006748:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800674c:	2b00      	cmp	r3, #0
 800674e:	d008      	beq.n	8006762 <HAL_UART_IRQHandler+0x1d6>
 8006750:	69bb      	ldr	r3, [r7, #24]
 8006752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006756:	2b00      	cmp	r3, #0
 8006758:	d003      	beq.n	8006762 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 f8a3 	bl	80068a6 <UART_Transmit_IT>
    return;
 8006760:	e00f      	b.n	8006782 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006762:	69fb      	ldr	r3, [r7, #28]
 8006764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006768:	2b00      	cmp	r3, #0
 800676a:	d00a      	beq.n	8006782 <HAL_UART_IRQHandler+0x1f6>
 800676c:	69bb      	ldr	r3, [r7, #24]
 800676e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006772:	2b00      	cmp	r3, #0
 8006774:	d005      	beq.n	8006782 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 f8e4 	bl	8006944 <UART_EndTransmit_IT>
    return;
 800677c:	bf00      	nop
 800677e:	e000      	b.n	8006782 <HAL_UART_IRQHandler+0x1f6>
    return;
 8006780:	bf00      	nop
  }
}
 8006782:	3720      	adds	r7, #32
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}
 8006788:	0800687f 	.word	0x0800687f

0800678c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800678c:	b480      	push	{r7}
 800678e:	b083      	sub	sp, #12
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006794:	bf00      	nop
 8006796:	370c      	adds	r7, #12
 8006798:	46bd      	mov	sp, r7
 800679a:	bc80      	pop	{r7}
 800679c:	4770      	bx	lr

0800679e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800679e:	b480      	push	{r7}
 80067a0:	b083      	sub	sp, #12
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80067a6:	bf00      	nop
 80067a8:	370c      	adds	r7, #12
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bc80      	pop	{r7}
 80067ae:	4770      	bx	lr

080067b0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b084      	sub	sp, #16
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	60b9      	str	r1, [r7, #8]
 80067ba:	603b      	str	r3, [r7, #0]
 80067bc:	4613      	mov	r3, r2
 80067be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067c0:	e02c      	b.n	800681c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067c2:	69bb      	ldr	r3, [r7, #24]
 80067c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067c8:	d028      	beq.n	800681c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80067ca:	69bb      	ldr	r3, [r7, #24]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d007      	beq.n	80067e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80067d0:	f7fc fb66 	bl	8002ea0 <HAL_GetTick>
 80067d4:	4602      	mov	r2, r0
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	1ad3      	subs	r3, r2, r3
 80067da:	69ba      	ldr	r2, [r7, #24]
 80067dc:	429a      	cmp	r2, r3
 80067de:	d21d      	bcs.n	800681c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	68da      	ldr	r2, [r3, #12]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80067ee:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	695a      	ldr	r2, [r3, #20]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f022 0201 	bic.w	r2, r2, #1
 80067fe:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2220      	movs	r2, #32
 8006804:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2220      	movs	r2, #32
 800680c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2200      	movs	r2, #0
 8006814:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006818:	2303      	movs	r3, #3
 800681a:	e00f      	b.n	800683c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	4013      	ands	r3, r2
 8006826:	68ba      	ldr	r2, [r7, #8]
 8006828:	429a      	cmp	r2, r3
 800682a:	bf0c      	ite	eq
 800682c:	2301      	moveq	r3, #1
 800682e:	2300      	movne	r3, #0
 8006830:	b2db      	uxtb	r3, r3
 8006832:	461a      	mov	r2, r3
 8006834:	79fb      	ldrb	r3, [r7, #7]
 8006836:	429a      	cmp	r2, r3
 8006838:	d0c3      	beq.n	80067c2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800683a:	2300      	movs	r3, #0
}
 800683c:	4618      	mov	r0, r3
 800683e:	3710      	adds	r7, #16
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	68da      	ldr	r2, [r3, #12]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800685a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	695a      	ldr	r2, [r3, #20]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f022 0201 	bic.w	r2, r2, #1
 800686a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2220      	movs	r2, #32
 8006870:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006874:	bf00      	nop
 8006876:	370c      	adds	r7, #12
 8006878:	46bd      	mov	sp, r7
 800687a:	bc80      	pop	{r7}
 800687c:	4770      	bx	lr

0800687e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800687e:	b580      	push	{r7, lr}
 8006880:	b084      	sub	sp, #16
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2200      	movs	r2, #0
 8006890:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2200      	movs	r2, #0
 8006896:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006898:	68f8      	ldr	r0, [r7, #12]
 800689a:	f7ff ff80 	bl	800679e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800689e:	bf00      	nop
 80068a0:	3710      	adds	r7, #16
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}

080068a6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80068a6:	b480      	push	{r7}
 80068a8:	b085      	sub	sp, #20
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	2b21      	cmp	r3, #33	; 0x21
 80068b8:	d13e      	bne.n	8006938 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068c2:	d114      	bne.n	80068ee <UART_Transmit_IT+0x48>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	691b      	ldr	r3, [r3, #16]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d110      	bne.n	80068ee <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6a1b      	ldr	r3, [r3, #32]
 80068d0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	881b      	ldrh	r3, [r3, #0]
 80068d6:	461a      	mov	r2, r3
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068e0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a1b      	ldr	r3, [r3, #32]
 80068e6:	1c9a      	adds	r2, r3, #2
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	621a      	str	r2, [r3, #32]
 80068ec:	e008      	b.n	8006900 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6a1b      	ldr	r3, [r3, #32]
 80068f2:	1c59      	adds	r1, r3, #1
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	6211      	str	r1, [r2, #32]
 80068f8:	781a      	ldrb	r2, [r3, #0]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006904:	b29b      	uxth	r3, r3
 8006906:	3b01      	subs	r3, #1
 8006908:	b29b      	uxth	r3, r3
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	4619      	mov	r1, r3
 800690e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006910:	2b00      	cmp	r3, #0
 8006912:	d10f      	bne.n	8006934 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	68da      	ldr	r2, [r3, #12]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006922:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	68da      	ldr	r2, [r3, #12]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006932:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006934:	2300      	movs	r3, #0
 8006936:	e000      	b.n	800693a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006938:	2302      	movs	r3, #2
  }
}
 800693a:	4618      	mov	r0, r3
 800693c:	3714      	adds	r7, #20
 800693e:	46bd      	mov	sp, r7
 8006940:	bc80      	pop	{r7}
 8006942:	4770      	bx	lr

08006944 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b082      	sub	sp, #8
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	68da      	ldr	r2, [r3, #12]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800695a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2220      	movs	r2, #32
 8006960:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f7ff ff11 	bl	800678c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800696a:	2300      	movs	r3, #0
}
 800696c:	4618      	mov	r0, r3
 800696e:	3708      	adds	r7, #8
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006982:	b2db      	uxtb	r3, r3
 8006984:	2b22      	cmp	r3, #34	; 0x22
 8006986:	d170      	bne.n	8006a6a <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006990:	d117      	bne.n	80069c2 <UART_Receive_IT+0x4e>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	691b      	ldr	r3, [r3, #16]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d113      	bne.n	80069c2 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 800699a:	2300      	movs	r3, #0
 800699c:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a2:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069b0:	b29a      	uxth	r2, r3
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ba:	1c9a      	adds	r2, r3, #2
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	629a      	str	r2, [r3, #40]	; 0x28
 80069c0:	e026      	b.n	8006a10 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c6:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80069c8:	2300      	movs	r3, #0
 80069ca:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069d4:	d007      	beq.n	80069e6 <UART_Receive_IT+0x72>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d10a      	bne.n	80069f4 <UART_Receive_IT+0x80>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	691b      	ldr	r3, [r3, #16]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d106      	bne.n	80069f4 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	b2da      	uxtb	r2, r3
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	701a      	strb	r2, [r3, #0]
 80069f2:	e008      	b.n	8006a06 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a00:	b2da      	uxtb	r2, r3
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a0a:	1c5a      	adds	r2, r3, #1
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	3b01      	subs	r3, #1
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d120      	bne.n	8006a66 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	68da      	ldr	r2, [r3, #12]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f022 0220 	bic.w	r2, r2, #32
 8006a32:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	68da      	ldr	r2, [r3, #12]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a42:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	695a      	ldr	r2, [r3, #20]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f022 0201 	bic.w	r2, r2, #1
 8006a52:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2220      	movs	r2, #32
 8006a58:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f7fb fcc1 	bl	80023e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006a62:	2300      	movs	r3, #0
 8006a64:	e002      	b.n	8006a6c <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8006a66:	2300      	movs	r3, #0
 8006a68:	e000      	b.n	8006a6c <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8006a6a:	2302      	movs	r3, #2
  }
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3710      	adds	r7, #16
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	691b      	ldr	r3, [r3, #16]
 8006a82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	68da      	ldr	r2, [r3, #12]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	430a      	orrs	r2, r1
 8006a90:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	689a      	ldr	r2, [r3, #8]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	691b      	ldr	r3, [r3, #16]
 8006a9a:	431a      	orrs	r2, r3
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	695b      	ldr	r3, [r3, #20]
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	68db      	ldr	r3, [r3, #12]
 8006aaa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006aae:	f023 030c 	bic.w	r3, r3, #12
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	6812      	ldr	r2, [r2, #0]
 8006ab6:	68b9      	ldr	r1, [r7, #8]
 8006ab8:	430b      	orrs	r3, r1
 8006aba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	695b      	ldr	r3, [r3, #20]
 8006ac2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	699a      	ldr	r2, [r3, #24]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	430a      	orrs	r2, r1
 8006ad0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a2c      	ldr	r2, [pc, #176]	; (8006b88 <UART_SetConfig+0x114>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d103      	bne.n	8006ae4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006adc:	f7ff fa7e 	bl	8005fdc <HAL_RCC_GetPCLK2Freq>
 8006ae0:	60f8      	str	r0, [r7, #12]
 8006ae2:	e002      	b.n	8006aea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006ae4:	f7ff fa66 	bl	8005fb4 <HAL_RCC_GetPCLK1Freq>
 8006ae8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006aea:	68fa      	ldr	r2, [r7, #12]
 8006aec:	4613      	mov	r3, r2
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	4413      	add	r3, r2
 8006af2:	009a      	lsls	r2, r3, #2
 8006af4:	441a      	add	r2, r3
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	009b      	lsls	r3, r3, #2
 8006afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b00:	4a22      	ldr	r2, [pc, #136]	; (8006b8c <UART_SetConfig+0x118>)
 8006b02:	fba2 2303 	umull	r2, r3, r2, r3
 8006b06:	095b      	lsrs	r3, r3, #5
 8006b08:	0119      	lsls	r1, r3, #4
 8006b0a:	68fa      	ldr	r2, [r7, #12]
 8006b0c:	4613      	mov	r3, r2
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	4413      	add	r3, r2
 8006b12:	009a      	lsls	r2, r3, #2
 8006b14:	441a      	add	r2, r3
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006b20:	4b1a      	ldr	r3, [pc, #104]	; (8006b8c <UART_SetConfig+0x118>)
 8006b22:	fba3 0302 	umull	r0, r3, r3, r2
 8006b26:	095b      	lsrs	r3, r3, #5
 8006b28:	2064      	movs	r0, #100	; 0x64
 8006b2a:	fb00 f303 	mul.w	r3, r0, r3
 8006b2e:	1ad3      	subs	r3, r2, r3
 8006b30:	011b      	lsls	r3, r3, #4
 8006b32:	3332      	adds	r3, #50	; 0x32
 8006b34:	4a15      	ldr	r2, [pc, #84]	; (8006b8c <UART_SetConfig+0x118>)
 8006b36:	fba2 2303 	umull	r2, r3, r2, r3
 8006b3a:	095b      	lsrs	r3, r3, #5
 8006b3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b40:	4419      	add	r1, r3
 8006b42:	68fa      	ldr	r2, [r7, #12]
 8006b44:	4613      	mov	r3, r2
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	4413      	add	r3, r2
 8006b4a:	009a      	lsls	r2, r3, #2
 8006b4c:	441a      	add	r2, r3
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	fbb2 f2f3 	udiv	r2, r2, r3
 8006b58:	4b0c      	ldr	r3, [pc, #48]	; (8006b8c <UART_SetConfig+0x118>)
 8006b5a:	fba3 0302 	umull	r0, r3, r3, r2
 8006b5e:	095b      	lsrs	r3, r3, #5
 8006b60:	2064      	movs	r0, #100	; 0x64
 8006b62:	fb00 f303 	mul.w	r3, r0, r3
 8006b66:	1ad3      	subs	r3, r2, r3
 8006b68:	011b      	lsls	r3, r3, #4
 8006b6a:	3332      	adds	r3, #50	; 0x32
 8006b6c:	4a07      	ldr	r2, [pc, #28]	; (8006b8c <UART_SetConfig+0x118>)
 8006b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b72:	095b      	lsrs	r3, r3, #5
 8006b74:	f003 020f 	and.w	r2, r3, #15
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	440a      	add	r2, r1
 8006b7e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006b80:	bf00      	nop
 8006b82:	3710      	adds	r7, #16
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}
 8006b88:	40013800 	.word	0x40013800
 8006b8c:	51eb851f 	.word	0x51eb851f

08006b90 <__errno>:
 8006b90:	4b01      	ldr	r3, [pc, #4]	; (8006b98 <__errno+0x8>)
 8006b92:	6818      	ldr	r0, [r3, #0]
 8006b94:	4770      	bx	lr
 8006b96:	bf00      	nop
 8006b98:	20000010 	.word	0x20000010

08006b9c <__libc_init_array>:
 8006b9c:	b570      	push	{r4, r5, r6, lr}
 8006b9e:	2500      	movs	r5, #0
 8006ba0:	4e0c      	ldr	r6, [pc, #48]	; (8006bd4 <__libc_init_array+0x38>)
 8006ba2:	4c0d      	ldr	r4, [pc, #52]	; (8006bd8 <__libc_init_array+0x3c>)
 8006ba4:	1ba4      	subs	r4, r4, r6
 8006ba6:	10a4      	asrs	r4, r4, #2
 8006ba8:	42a5      	cmp	r5, r4
 8006baa:	d109      	bne.n	8006bc0 <__libc_init_array+0x24>
 8006bac:	f003 f8c2 	bl	8009d34 <_init>
 8006bb0:	2500      	movs	r5, #0
 8006bb2:	4e0a      	ldr	r6, [pc, #40]	; (8006bdc <__libc_init_array+0x40>)
 8006bb4:	4c0a      	ldr	r4, [pc, #40]	; (8006be0 <__libc_init_array+0x44>)
 8006bb6:	1ba4      	subs	r4, r4, r6
 8006bb8:	10a4      	asrs	r4, r4, #2
 8006bba:	42a5      	cmp	r5, r4
 8006bbc:	d105      	bne.n	8006bca <__libc_init_array+0x2e>
 8006bbe:	bd70      	pop	{r4, r5, r6, pc}
 8006bc0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006bc4:	4798      	blx	r3
 8006bc6:	3501      	adds	r5, #1
 8006bc8:	e7ee      	b.n	8006ba8 <__libc_init_array+0xc>
 8006bca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006bce:	4798      	blx	r3
 8006bd0:	3501      	adds	r5, #1
 8006bd2:	e7f2      	b.n	8006bba <__libc_init_array+0x1e>
 8006bd4:	0800a174 	.word	0x0800a174
 8006bd8:	0800a174 	.word	0x0800a174
 8006bdc:	0800a174 	.word	0x0800a174
 8006be0:	0800a178 	.word	0x0800a178

08006be4 <memset>:
 8006be4:	4603      	mov	r3, r0
 8006be6:	4402      	add	r2, r0
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d100      	bne.n	8006bee <memset+0xa>
 8006bec:	4770      	bx	lr
 8006bee:	f803 1b01 	strb.w	r1, [r3], #1
 8006bf2:	e7f9      	b.n	8006be8 <memset+0x4>

08006bf4 <_scanf_float>:
 8006bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bf8:	469a      	mov	sl, r3
 8006bfa:	688b      	ldr	r3, [r1, #8]
 8006bfc:	4616      	mov	r6, r2
 8006bfe:	1e5a      	subs	r2, r3, #1
 8006c00:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006c04:	bf88      	it	hi
 8006c06:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8006c0a:	b087      	sub	sp, #28
 8006c0c:	bf85      	ittet	hi
 8006c0e:	189b      	addhi	r3, r3, r2
 8006c10:	9301      	strhi	r3, [sp, #4]
 8006c12:	2300      	movls	r3, #0
 8006c14:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006c18:	4688      	mov	r8, r1
 8006c1a:	f04f 0b00 	mov.w	fp, #0
 8006c1e:	bf8c      	ite	hi
 8006c20:	608b      	strhi	r3, [r1, #8]
 8006c22:	9301      	strls	r3, [sp, #4]
 8006c24:	680b      	ldr	r3, [r1, #0]
 8006c26:	4607      	mov	r7, r0
 8006c28:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006c2c:	f848 3b1c 	str.w	r3, [r8], #28
 8006c30:	460c      	mov	r4, r1
 8006c32:	4645      	mov	r5, r8
 8006c34:	465a      	mov	r2, fp
 8006c36:	46d9      	mov	r9, fp
 8006c38:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8006c3c:	f8cd b008 	str.w	fp, [sp, #8]
 8006c40:	68a1      	ldr	r1, [r4, #8]
 8006c42:	b181      	cbz	r1, 8006c66 <_scanf_float+0x72>
 8006c44:	6833      	ldr	r3, [r6, #0]
 8006c46:	781b      	ldrb	r3, [r3, #0]
 8006c48:	2b49      	cmp	r3, #73	; 0x49
 8006c4a:	d071      	beq.n	8006d30 <_scanf_float+0x13c>
 8006c4c:	d84d      	bhi.n	8006cea <_scanf_float+0xf6>
 8006c4e:	2b39      	cmp	r3, #57	; 0x39
 8006c50:	d840      	bhi.n	8006cd4 <_scanf_float+0xe0>
 8006c52:	2b31      	cmp	r3, #49	; 0x31
 8006c54:	f080 8088 	bcs.w	8006d68 <_scanf_float+0x174>
 8006c58:	2b2d      	cmp	r3, #45	; 0x2d
 8006c5a:	f000 8090 	beq.w	8006d7e <_scanf_float+0x18a>
 8006c5e:	d815      	bhi.n	8006c8c <_scanf_float+0x98>
 8006c60:	2b2b      	cmp	r3, #43	; 0x2b
 8006c62:	f000 808c 	beq.w	8006d7e <_scanf_float+0x18a>
 8006c66:	f1b9 0f00 	cmp.w	r9, #0
 8006c6a:	d003      	beq.n	8006c74 <_scanf_float+0x80>
 8006c6c:	6823      	ldr	r3, [r4, #0]
 8006c6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c72:	6023      	str	r3, [r4, #0]
 8006c74:	3a01      	subs	r2, #1
 8006c76:	2a01      	cmp	r2, #1
 8006c78:	f200 80ea 	bhi.w	8006e50 <_scanf_float+0x25c>
 8006c7c:	4545      	cmp	r5, r8
 8006c7e:	f200 80dc 	bhi.w	8006e3a <_scanf_float+0x246>
 8006c82:	2601      	movs	r6, #1
 8006c84:	4630      	mov	r0, r6
 8006c86:	b007      	add	sp, #28
 8006c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c8c:	2b2e      	cmp	r3, #46	; 0x2e
 8006c8e:	f000 809f 	beq.w	8006dd0 <_scanf_float+0x1dc>
 8006c92:	2b30      	cmp	r3, #48	; 0x30
 8006c94:	d1e7      	bne.n	8006c66 <_scanf_float+0x72>
 8006c96:	6820      	ldr	r0, [r4, #0]
 8006c98:	f410 7f80 	tst.w	r0, #256	; 0x100
 8006c9c:	d064      	beq.n	8006d68 <_scanf_float+0x174>
 8006c9e:	9b01      	ldr	r3, [sp, #4]
 8006ca0:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8006ca4:	6020      	str	r0, [r4, #0]
 8006ca6:	f109 0901 	add.w	r9, r9, #1
 8006caa:	b11b      	cbz	r3, 8006cb4 <_scanf_float+0xc0>
 8006cac:	3b01      	subs	r3, #1
 8006cae:	3101      	adds	r1, #1
 8006cb0:	9301      	str	r3, [sp, #4]
 8006cb2:	60a1      	str	r1, [r4, #8]
 8006cb4:	68a3      	ldr	r3, [r4, #8]
 8006cb6:	3b01      	subs	r3, #1
 8006cb8:	60a3      	str	r3, [r4, #8]
 8006cba:	6923      	ldr	r3, [r4, #16]
 8006cbc:	3301      	adds	r3, #1
 8006cbe:	6123      	str	r3, [r4, #16]
 8006cc0:	6873      	ldr	r3, [r6, #4]
 8006cc2:	3b01      	subs	r3, #1
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	6073      	str	r3, [r6, #4]
 8006cc8:	f340 80ac 	ble.w	8006e24 <_scanf_float+0x230>
 8006ccc:	6833      	ldr	r3, [r6, #0]
 8006cce:	3301      	adds	r3, #1
 8006cd0:	6033      	str	r3, [r6, #0]
 8006cd2:	e7b5      	b.n	8006c40 <_scanf_float+0x4c>
 8006cd4:	2b45      	cmp	r3, #69	; 0x45
 8006cd6:	f000 8085 	beq.w	8006de4 <_scanf_float+0x1f0>
 8006cda:	2b46      	cmp	r3, #70	; 0x46
 8006cdc:	d06a      	beq.n	8006db4 <_scanf_float+0x1c0>
 8006cde:	2b41      	cmp	r3, #65	; 0x41
 8006ce0:	d1c1      	bne.n	8006c66 <_scanf_float+0x72>
 8006ce2:	2a01      	cmp	r2, #1
 8006ce4:	d1bf      	bne.n	8006c66 <_scanf_float+0x72>
 8006ce6:	2202      	movs	r2, #2
 8006ce8:	e046      	b.n	8006d78 <_scanf_float+0x184>
 8006cea:	2b65      	cmp	r3, #101	; 0x65
 8006cec:	d07a      	beq.n	8006de4 <_scanf_float+0x1f0>
 8006cee:	d818      	bhi.n	8006d22 <_scanf_float+0x12e>
 8006cf0:	2b54      	cmp	r3, #84	; 0x54
 8006cf2:	d066      	beq.n	8006dc2 <_scanf_float+0x1ce>
 8006cf4:	d811      	bhi.n	8006d1a <_scanf_float+0x126>
 8006cf6:	2b4e      	cmp	r3, #78	; 0x4e
 8006cf8:	d1b5      	bne.n	8006c66 <_scanf_float+0x72>
 8006cfa:	2a00      	cmp	r2, #0
 8006cfc:	d146      	bne.n	8006d8c <_scanf_float+0x198>
 8006cfe:	f1b9 0f00 	cmp.w	r9, #0
 8006d02:	d145      	bne.n	8006d90 <_scanf_float+0x19c>
 8006d04:	6821      	ldr	r1, [r4, #0]
 8006d06:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8006d0a:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8006d0e:	d13f      	bne.n	8006d90 <_scanf_float+0x19c>
 8006d10:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006d14:	6021      	str	r1, [r4, #0]
 8006d16:	2201      	movs	r2, #1
 8006d18:	e02e      	b.n	8006d78 <_scanf_float+0x184>
 8006d1a:	2b59      	cmp	r3, #89	; 0x59
 8006d1c:	d01e      	beq.n	8006d5c <_scanf_float+0x168>
 8006d1e:	2b61      	cmp	r3, #97	; 0x61
 8006d20:	e7de      	b.n	8006ce0 <_scanf_float+0xec>
 8006d22:	2b6e      	cmp	r3, #110	; 0x6e
 8006d24:	d0e9      	beq.n	8006cfa <_scanf_float+0x106>
 8006d26:	d815      	bhi.n	8006d54 <_scanf_float+0x160>
 8006d28:	2b66      	cmp	r3, #102	; 0x66
 8006d2a:	d043      	beq.n	8006db4 <_scanf_float+0x1c0>
 8006d2c:	2b69      	cmp	r3, #105	; 0x69
 8006d2e:	d19a      	bne.n	8006c66 <_scanf_float+0x72>
 8006d30:	f1bb 0f00 	cmp.w	fp, #0
 8006d34:	d138      	bne.n	8006da8 <_scanf_float+0x1b4>
 8006d36:	f1b9 0f00 	cmp.w	r9, #0
 8006d3a:	d197      	bne.n	8006c6c <_scanf_float+0x78>
 8006d3c:	6821      	ldr	r1, [r4, #0]
 8006d3e:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8006d42:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8006d46:	d195      	bne.n	8006c74 <_scanf_float+0x80>
 8006d48:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006d4c:	6021      	str	r1, [r4, #0]
 8006d4e:	f04f 0b01 	mov.w	fp, #1
 8006d52:	e011      	b.n	8006d78 <_scanf_float+0x184>
 8006d54:	2b74      	cmp	r3, #116	; 0x74
 8006d56:	d034      	beq.n	8006dc2 <_scanf_float+0x1ce>
 8006d58:	2b79      	cmp	r3, #121	; 0x79
 8006d5a:	d184      	bne.n	8006c66 <_scanf_float+0x72>
 8006d5c:	f1bb 0f07 	cmp.w	fp, #7
 8006d60:	d181      	bne.n	8006c66 <_scanf_float+0x72>
 8006d62:	f04f 0b08 	mov.w	fp, #8
 8006d66:	e007      	b.n	8006d78 <_scanf_float+0x184>
 8006d68:	eb12 0f0b 	cmn.w	r2, fp
 8006d6c:	f47f af7b 	bne.w	8006c66 <_scanf_float+0x72>
 8006d70:	6821      	ldr	r1, [r4, #0]
 8006d72:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8006d76:	6021      	str	r1, [r4, #0]
 8006d78:	702b      	strb	r3, [r5, #0]
 8006d7a:	3501      	adds	r5, #1
 8006d7c:	e79a      	b.n	8006cb4 <_scanf_float+0xc0>
 8006d7e:	6821      	ldr	r1, [r4, #0]
 8006d80:	0608      	lsls	r0, r1, #24
 8006d82:	f57f af70 	bpl.w	8006c66 <_scanf_float+0x72>
 8006d86:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006d8a:	e7f4      	b.n	8006d76 <_scanf_float+0x182>
 8006d8c:	2a02      	cmp	r2, #2
 8006d8e:	d047      	beq.n	8006e20 <_scanf_float+0x22c>
 8006d90:	f1bb 0f01 	cmp.w	fp, #1
 8006d94:	d003      	beq.n	8006d9e <_scanf_float+0x1aa>
 8006d96:	f1bb 0f04 	cmp.w	fp, #4
 8006d9a:	f47f af64 	bne.w	8006c66 <_scanf_float+0x72>
 8006d9e:	f10b 0b01 	add.w	fp, fp, #1
 8006da2:	fa5f fb8b 	uxtb.w	fp, fp
 8006da6:	e7e7      	b.n	8006d78 <_scanf_float+0x184>
 8006da8:	f1bb 0f03 	cmp.w	fp, #3
 8006dac:	d0f7      	beq.n	8006d9e <_scanf_float+0x1aa>
 8006dae:	f1bb 0f05 	cmp.w	fp, #5
 8006db2:	e7f2      	b.n	8006d9a <_scanf_float+0x1a6>
 8006db4:	f1bb 0f02 	cmp.w	fp, #2
 8006db8:	f47f af55 	bne.w	8006c66 <_scanf_float+0x72>
 8006dbc:	f04f 0b03 	mov.w	fp, #3
 8006dc0:	e7da      	b.n	8006d78 <_scanf_float+0x184>
 8006dc2:	f1bb 0f06 	cmp.w	fp, #6
 8006dc6:	f47f af4e 	bne.w	8006c66 <_scanf_float+0x72>
 8006dca:	f04f 0b07 	mov.w	fp, #7
 8006dce:	e7d3      	b.n	8006d78 <_scanf_float+0x184>
 8006dd0:	6821      	ldr	r1, [r4, #0]
 8006dd2:	0588      	lsls	r0, r1, #22
 8006dd4:	f57f af47 	bpl.w	8006c66 <_scanf_float+0x72>
 8006dd8:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8006ddc:	6021      	str	r1, [r4, #0]
 8006dde:	f8cd 9008 	str.w	r9, [sp, #8]
 8006de2:	e7c9      	b.n	8006d78 <_scanf_float+0x184>
 8006de4:	6821      	ldr	r1, [r4, #0]
 8006de6:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8006dea:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8006dee:	d006      	beq.n	8006dfe <_scanf_float+0x20a>
 8006df0:	0548      	lsls	r0, r1, #21
 8006df2:	f57f af38 	bpl.w	8006c66 <_scanf_float+0x72>
 8006df6:	f1b9 0f00 	cmp.w	r9, #0
 8006dfa:	f43f af3b 	beq.w	8006c74 <_scanf_float+0x80>
 8006dfe:	0588      	lsls	r0, r1, #22
 8006e00:	bf58      	it	pl
 8006e02:	9802      	ldrpl	r0, [sp, #8]
 8006e04:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006e08:	bf58      	it	pl
 8006e0a:	eba9 0000 	subpl.w	r0, r9, r0
 8006e0e:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8006e12:	bf58      	it	pl
 8006e14:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8006e18:	6021      	str	r1, [r4, #0]
 8006e1a:	f04f 0900 	mov.w	r9, #0
 8006e1e:	e7ab      	b.n	8006d78 <_scanf_float+0x184>
 8006e20:	2203      	movs	r2, #3
 8006e22:	e7a9      	b.n	8006d78 <_scanf_float+0x184>
 8006e24:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006e28:	4631      	mov	r1, r6
 8006e2a:	4638      	mov	r0, r7
 8006e2c:	9205      	str	r2, [sp, #20]
 8006e2e:	4798      	blx	r3
 8006e30:	9a05      	ldr	r2, [sp, #20]
 8006e32:	2800      	cmp	r0, #0
 8006e34:	f43f af04 	beq.w	8006c40 <_scanf_float+0x4c>
 8006e38:	e715      	b.n	8006c66 <_scanf_float+0x72>
 8006e3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006e3e:	4632      	mov	r2, r6
 8006e40:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006e44:	4638      	mov	r0, r7
 8006e46:	4798      	blx	r3
 8006e48:	6923      	ldr	r3, [r4, #16]
 8006e4a:	3b01      	subs	r3, #1
 8006e4c:	6123      	str	r3, [r4, #16]
 8006e4e:	e715      	b.n	8006c7c <_scanf_float+0x88>
 8006e50:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8006e54:	2b06      	cmp	r3, #6
 8006e56:	d80a      	bhi.n	8006e6e <_scanf_float+0x27a>
 8006e58:	f1bb 0f02 	cmp.w	fp, #2
 8006e5c:	d967      	bls.n	8006f2e <_scanf_float+0x33a>
 8006e5e:	f1ab 0b03 	sub.w	fp, fp, #3
 8006e62:	fa5f fb8b 	uxtb.w	fp, fp
 8006e66:	eba5 0b0b 	sub.w	fp, r5, fp
 8006e6a:	455d      	cmp	r5, fp
 8006e6c:	d14a      	bne.n	8006f04 <_scanf_float+0x310>
 8006e6e:	6823      	ldr	r3, [r4, #0]
 8006e70:	05da      	lsls	r2, r3, #23
 8006e72:	d51f      	bpl.n	8006eb4 <_scanf_float+0x2c0>
 8006e74:	055b      	lsls	r3, r3, #21
 8006e76:	d467      	bmi.n	8006f48 <_scanf_float+0x354>
 8006e78:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006e7c:	6923      	ldr	r3, [r4, #16]
 8006e7e:	2965      	cmp	r1, #101	; 0x65
 8006e80:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8006e84:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 8006e88:	6123      	str	r3, [r4, #16]
 8006e8a:	d00d      	beq.n	8006ea8 <_scanf_float+0x2b4>
 8006e8c:	2945      	cmp	r1, #69	; 0x45
 8006e8e:	d00b      	beq.n	8006ea8 <_scanf_float+0x2b4>
 8006e90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006e94:	4632      	mov	r2, r6
 8006e96:	4638      	mov	r0, r7
 8006e98:	4798      	blx	r3
 8006e9a:	6923      	ldr	r3, [r4, #16]
 8006e9c:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8006ea0:	3b01      	subs	r3, #1
 8006ea2:	f1a5 0b02 	sub.w	fp, r5, #2
 8006ea6:	6123      	str	r3, [r4, #16]
 8006ea8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006eac:	4632      	mov	r2, r6
 8006eae:	4638      	mov	r0, r7
 8006eb0:	4798      	blx	r3
 8006eb2:	465d      	mov	r5, fp
 8006eb4:	6826      	ldr	r6, [r4, #0]
 8006eb6:	f016 0610 	ands.w	r6, r6, #16
 8006eba:	d176      	bne.n	8006faa <_scanf_float+0x3b6>
 8006ebc:	702e      	strb	r6, [r5, #0]
 8006ebe:	6823      	ldr	r3, [r4, #0]
 8006ec0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006ec4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ec8:	d141      	bne.n	8006f4e <_scanf_float+0x35a>
 8006eca:	9b02      	ldr	r3, [sp, #8]
 8006ecc:	eba9 0303 	sub.w	r3, r9, r3
 8006ed0:	425a      	negs	r2, r3
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d148      	bne.n	8006f68 <_scanf_float+0x374>
 8006ed6:	4641      	mov	r1, r8
 8006ed8:	2200      	movs	r2, #0
 8006eda:	4638      	mov	r0, r7
 8006edc:	f000 fef0 	bl	8007cc0 <_strtod_r>
 8006ee0:	6825      	ldr	r5, [r4, #0]
 8006ee2:	4680      	mov	r8, r0
 8006ee4:	f015 0f02 	tst.w	r5, #2
 8006ee8:	4689      	mov	r9, r1
 8006eea:	f8da 3000 	ldr.w	r3, [sl]
 8006eee:	d046      	beq.n	8006f7e <_scanf_float+0x38a>
 8006ef0:	1d1a      	adds	r2, r3, #4
 8006ef2:	f8ca 2000 	str.w	r2, [sl]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	e9c3 8900 	strd	r8, r9, [r3]
 8006efc:	68e3      	ldr	r3, [r4, #12]
 8006efe:	3301      	adds	r3, #1
 8006f00:	60e3      	str	r3, [r4, #12]
 8006f02:	e6bf      	b.n	8006c84 <_scanf_float+0x90>
 8006f04:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f08:	4632      	mov	r2, r6
 8006f0a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006f0e:	4638      	mov	r0, r7
 8006f10:	4798      	blx	r3
 8006f12:	6923      	ldr	r3, [r4, #16]
 8006f14:	3b01      	subs	r3, #1
 8006f16:	6123      	str	r3, [r4, #16]
 8006f18:	e7a7      	b.n	8006e6a <_scanf_float+0x276>
 8006f1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f1e:	4632      	mov	r2, r6
 8006f20:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006f24:	4638      	mov	r0, r7
 8006f26:	4798      	blx	r3
 8006f28:	6923      	ldr	r3, [r4, #16]
 8006f2a:	3b01      	subs	r3, #1
 8006f2c:	6123      	str	r3, [r4, #16]
 8006f2e:	4545      	cmp	r5, r8
 8006f30:	d8f3      	bhi.n	8006f1a <_scanf_float+0x326>
 8006f32:	e6a6      	b.n	8006c82 <_scanf_float+0x8e>
 8006f34:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f38:	4632      	mov	r2, r6
 8006f3a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006f3e:	4638      	mov	r0, r7
 8006f40:	4798      	blx	r3
 8006f42:	6923      	ldr	r3, [r4, #16]
 8006f44:	3b01      	subs	r3, #1
 8006f46:	6123      	str	r3, [r4, #16]
 8006f48:	4545      	cmp	r5, r8
 8006f4a:	d8f3      	bhi.n	8006f34 <_scanf_float+0x340>
 8006f4c:	e699      	b.n	8006c82 <_scanf_float+0x8e>
 8006f4e:	9b03      	ldr	r3, [sp, #12]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d0c0      	beq.n	8006ed6 <_scanf_float+0x2e2>
 8006f54:	9904      	ldr	r1, [sp, #16]
 8006f56:	230a      	movs	r3, #10
 8006f58:	4632      	mov	r2, r6
 8006f5a:	3101      	adds	r1, #1
 8006f5c:	4638      	mov	r0, r7
 8006f5e:	f000 ff3b 	bl	8007dd8 <_strtol_r>
 8006f62:	9b03      	ldr	r3, [sp, #12]
 8006f64:	9d04      	ldr	r5, [sp, #16]
 8006f66:	1ac2      	subs	r2, r0, r3
 8006f68:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006f6c:	429d      	cmp	r5, r3
 8006f6e:	bf28      	it	cs
 8006f70:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8006f74:	490e      	ldr	r1, [pc, #56]	; (8006fb0 <_scanf_float+0x3bc>)
 8006f76:	4628      	mov	r0, r5
 8006f78:	f000 f820 	bl	8006fbc <siprintf>
 8006f7c:	e7ab      	b.n	8006ed6 <_scanf_float+0x2e2>
 8006f7e:	1d1f      	adds	r7, r3, #4
 8006f80:	f015 0504 	ands.w	r5, r5, #4
 8006f84:	f8ca 7000 	str.w	r7, [sl]
 8006f88:	d1b5      	bne.n	8006ef6 <_scanf_float+0x302>
 8006f8a:	681f      	ldr	r7, [r3, #0]
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	460b      	mov	r3, r1
 8006f90:	f7f9 fd3c 	bl	8000a0c <__aeabi_dcmpun>
 8006f94:	b120      	cbz	r0, 8006fa0 <_scanf_float+0x3ac>
 8006f96:	4628      	mov	r0, r5
 8006f98:	f000 f80c 	bl	8006fb4 <nanf>
 8006f9c:	6038      	str	r0, [r7, #0]
 8006f9e:	e7ad      	b.n	8006efc <_scanf_float+0x308>
 8006fa0:	4640      	mov	r0, r8
 8006fa2:	4649      	mov	r1, r9
 8006fa4:	f7f9 fd90 	bl	8000ac8 <__aeabi_d2f>
 8006fa8:	e7f8      	b.n	8006f9c <_scanf_float+0x3a8>
 8006faa:	2600      	movs	r6, #0
 8006fac:	e66a      	b.n	8006c84 <_scanf_float+0x90>
 8006fae:	bf00      	nop
 8006fb0:	08009e50 	.word	0x08009e50

08006fb4 <nanf>:
 8006fb4:	4800      	ldr	r0, [pc, #0]	; (8006fb8 <nanf+0x4>)
 8006fb6:	4770      	bx	lr
 8006fb8:	7fc00000 	.word	0x7fc00000

08006fbc <siprintf>:
 8006fbc:	b40e      	push	{r1, r2, r3}
 8006fbe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006fc2:	b500      	push	{lr}
 8006fc4:	b09c      	sub	sp, #112	; 0x70
 8006fc6:	ab1d      	add	r3, sp, #116	; 0x74
 8006fc8:	9002      	str	r0, [sp, #8]
 8006fca:	9006      	str	r0, [sp, #24]
 8006fcc:	9107      	str	r1, [sp, #28]
 8006fce:	9104      	str	r1, [sp, #16]
 8006fd0:	4808      	ldr	r0, [pc, #32]	; (8006ff4 <siprintf+0x38>)
 8006fd2:	4909      	ldr	r1, [pc, #36]	; (8006ff8 <siprintf+0x3c>)
 8006fd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fd8:	9105      	str	r1, [sp, #20]
 8006fda:	6800      	ldr	r0, [r0, #0]
 8006fdc:	a902      	add	r1, sp, #8
 8006fde:	9301      	str	r3, [sp, #4]
 8006fe0:	f001 ff20 	bl	8008e24 <_svfiprintf_r>
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	9b02      	ldr	r3, [sp, #8]
 8006fe8:	701a      	strb	r2, [r3, #0]
 8006fea:	b01c      	add	sp, #112	; 0x70
 8006fec:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ff0:	b003      	add	sp, #12
 8006ff2:	4770      	bx	lr
 8006ff4:	20000010 	.word	0x20000010
 8006ff8:	ffff0208 	.word	0xffff0208

08006ffc <siscanf>:
 8006ffc:	b40e      	push	{r1, r2, r3}
 8006ffe:	f44f 7201 	mov.w	r2, #516	; 0x204
 8007002:	b530      	push	{r4, r5, lr}
 8007004:	b09c      	sub	sp, #112	; 0x70
 8007006:	ac1f      	add	r4, sp, #124	; 0x7c
 8007008:	f854 5b04 	ldr.w	r5, [r4], #4
 800700c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8007010:	9002      	str	r0, [sp, #8]
 8007012:	9006      	str	r0, [sp, #24]
 8007014:	f7f9 f89c 	bl	8000150 <strlen>
 8007018:	4b0b      	ldr	r3, [pc, #44]	; (8007048 <siscanf+0x4c>)
 800701a:	9003      	str	r0, [sp, #12]
 800701c:	930b      	str	r3, [sp, #44]	; 0x2c
 800701e:	2300      	movs	r3, #0
 8007020:	930f      	str	r3, [sp, #60]	; 0x3c
 8007022:	9314      	str	r3, [sp, #80]	; 0x50
 8007024:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007028:	9007      	str	r0, [sp, #28]
 800702a:	4808      	ldr	r0, [pc, #32]	; (800704c <siscanf+0x50>)
 800702c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007030:	462a      	mov	r2, r5
 8007032:	4623      	mov	r3, r4
 8007034:	a902      	add	r1, sp, #8
 8007036:	6800      	ldr	r0, [r0, #0]
 8007038:	9401      	str	r4, [sp, #4]
 800703a:	f002 f845 	bl	80090c8 <__ssvfiscanf_r>
 800703e:	b01c      	add	sp, #112	; 0x70
 8007040:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007044:	b003      	add	sp, #12
 8007046:	4770      	bx	lr
 8007048:	08007051 	.word	0x08007051
 800704c:	20000010 	.word	0x20000010

08007050 <__seofread>:
 8007050:	2000      	movs	r0, #0
 8007052:	4770      	bx	lr

08007054 <strncmp>:
 8007054:	b510      	push	{r4, lr}
 8007056:	b16a      	cbz	r2, 8007074 <strncmp+0x20>
 8007058:	3901      	subs	r1, #1
 800705a:	1884      	adds	r4, r0, r2
 800705c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007060:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007064:	4293      	cmp	r3, r2
 8007066:	d103      	bne.n	8007070 <strncmp+0x1c>
 8007068:	42a0      	cmp	r0, r4
 800706a:	d001      	beq.n	8007070 <strncmp+0x1c>
 800706c:	2b00      	cmp	r3, #0
 800706e:	d1f5      	bne.n	800705c <strncmp+0x8>
 8007070:	1a98      	subs	r0, r3, r2
 8007072:	bd10      	pop	{r4, pc}
 8007074:	4610      	mov	r0, r2
 8007076:	e7fc      	b.n	8007072 <strncmp+0x1e>

08007078 <sulp>:
 8007078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800707c:	460f      	mov	r7, r1
 800707e:	4690      	mov	r8, r2
 8007080:	f001 fce0 	bl	8008a44 <__ulp>
 8007084:	4604      	mov	r4, r0
 8007086:	460d      	mov	r5, r1
 8007088:	f1b8 0f00 	cmp.w	r8, #0
 800708c:	d011      	beq.n	80070b2 <sulp+0x3a>
 800708e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8007092:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007096:	2b00      	cmp	r3, #0
 8007098:	dd0b      	ble.n	80070b2 <sulp+0x3a>
 800709a:	2400      	movs	r4, #0
 800709c:	051b      	lsls	r3, r3, #20
 800709e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80070a2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80070a6:	4622      	mov	r2, r4
 80070a8:	462b      	mov	r3, r5
 80070aa:	f7f9 fa15 	bl	80004d8 <__aeabi_dmul>
 80070ae:	4604      	mov	r4, r0
 80070b0:	460d      	mov	r5, r1
 80070b2:	4620      	mov	r0, r4
 80070b4:	4629      	mov	r1, r5
 80070b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070ba:	0000      	movs	r0, r0
 80070bc:	0000      	movs	r0, r0
	...

080070c0 <_strtod_l>:
 80070c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070c4:	461f      	mov	r7, r3
 80070c6:	2300      	movs	r3, #0
 80070c8:	b0a1      	sub	sp, #132	; 0x84
 80070ca:	4683      	mov	fp, r0
 80070cc:	4638      	mov	r0, r7
 80070ce:	460e      	mov	r6, r1
 80070d0:	9217      	str	r2, [sp, #92]	; 0x5c
 80070d2:	931c      	str	r3, [sp, #112]	; 0x70
 80070d4:	f001 f9cc 	bl	8008470 <__localeconv_l>
 80070d8:	4680      	mov	r8, r0
 80070da:	6800      	ldr	r0, [r0, #0]
 80070dc:	f7f9 f838 	bl	8000150 <strlen>
 80070e0:	f04f 0900 	mov.w	r9, #0
 80070e4:	4604      	mov	r4, r0
 80070e6:	f04f 0a00 	mov.w	sl, #0
 80070ea:	961b      	str	r6, [sp, #108]	; 0x6c
 80070ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80070ee:	781a      	ldrb	r2, [r3, #0]
 80070f0:	2a0d      	cmp	r2, #13
 80070f2:	d832      	bhi.n	800715a <_strtod_l+0x9a>
 80070f4:	2a09      	cmp	r2, #9
 80070f6:	d236      	bcs.n	8007166 <_strtod_l+0xa6>
 80070f8:	2a00      	cmp	r2, #0
 80070fa:	d03e      	beq.n	800717a <_strtod_l+0xba>
 80070fc:	2300      	movs	r3, #0
 80070fe:	930d      	str	r3, [sp, #52]	; 0x34
 8007100:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8007102:	782b      	ldrb	r3, [r5, #0]
 8007104:	2b30      	cmp	r3, #48	; 0x30
 8007106:	f040 80ac 	bne.w	8007262 <_strtod_l+0x1a2>
 800710a:	786b      	ldrb	r3, [r5, #1]
 800710c:	2b58      	cmp	r3, #88	; 0x58
 800710e:	d001      	beq.n	8007114 <_strtod_l+0x54>
 8007110:	2b78      	cmp	r3, #120	; 0x78
 8007112:	d167      	bne.n	80071e4 <_strtod_l+0x124>
 8007114:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007116:	9702      	str	r7, [sp, #8]
 8007118:	9301      	str	r3, [sp, #4]
 800711a:	ab1c      	add	r3, sp, #112	; 0x70
 800711c:	9300      	str	r3, [sp, #0]
 800711e:	4a89      	ldr	r2, [pc, #548]	; (8007344 <_strtod_l+0x284>)
 8007120:	ab1d      	add	r3, sp, #116	; 0x74
 8007122:	a91b      	add	r1, sp, #108	; 0x6c
 8007124:	4658      	mov	r0, fp
 8007126:	f000 feb9 	bl	8007e9c <__gethex>
 800712a:	f010 0407 	ands.w	r4, r0, #7
 800712e:	4606      	mov	r6, r0
 8007130:	d005      	beq.n	800713e <_strtod_l+0x7e>
 8007132:	2c06      	cmp	r4, #6
 8007134:	d12b      	bne.n	800718e <_strtod_l+0xce>
 8007136:	2300      	movs	r3, #0
 8007138:	3501      	adds	r5, #1
 800713a:	951b      	str	r5, [sp, #108]	; 0x6c
 800713c:	930d      	str	r3, [sp, #52]	; 0x34
 800713e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007140:	2b00      	cmp	r3, #0
 8007142:	f040 85a6 	bne.w	8007c92 <_strtod_l+0xbd2>
 8007146:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007148:	b1e3      	cbz	r3, 8007184 <_strtod_l+0xc4>
 800714a:	464a      	mov	r2, r9
 800714c:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8007150:	4610      	mov	r0, r2
 8007152:	4619      	mov	r1, r3
 8007154:	b021      	add	sp, #132	; 0x84
 8007156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800715a:	2a2b      	cmp	r2, #43	; 0x2b
 800715c:	d015      	beq.n	800718a <_strtod_l+0xca>
 800715e:	2a2d      	cmp	r2, #45	; 0x2d
 8007160:	d004      	beq.n	800716c <_strtod_l+0xac>
 8007162:	2a20      	cmp	r2, #32
 8007164:	d1ca      	bne.n	80070fc <_strtod_l+0x3c>
 8007166:	3301      	adds	r3, #1
 8007168:	931b      	str	r3, [sp, #108]	; 0x6c
 800716a:	e7bf      	b.n	80070ec <_strtod_l+0x2c>
 800716c:	2201      	movs	r2, #1
 800716e:	920d      	str	r2, [sp, #52]	; 0x34
 8007170:	1c5a      	adds	r2, r3, #1
 8007172:	921b      	str	r2, [sp, #108]	; 0x6c
 8007174:	785b      	ldrb	r3, [r3, #1]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d1c2      	bne.n	8007100 <_strtod_l+0x40>
 800717a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800717c:	961b      	str	r6, [sp, #108]	; 0x6c
 800717e:	2b00      	cmp	r3, #0
 8007180:	f040 8585 	bne.w	8007c8e <_strtod_l+0xbce>
 8007184:	464a      	mov	r2, r9
 8007186:	4653      	mov	r3, sl
 8007188:	e7e2      	b.n	8007150 <_strtod_l+0x90>
 800718a:	2200      	movs	r2, #0
 800718c:	e7ef      	b.n	800716e <_strtod_l+0xae>
 800718e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007190:	b13a      	cbz	r2, 80071a2 <_strtod_l+0xe2>
 8007192:	2135      	movs	r1, #53	; 0x35
 8007194:	a81e      	add	r0, sp, #120	; 0x78
 8007196:	f001 fd48 	bl	8008c2a <__copybits>
 800719a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800719c:	4658      	mov	r0, fp
 800719e:	f001 f9ba 	bl	8008516 <_Bfree>
 80071a2:	3c01      	subs	r4, #1
 80071a4:	2c04      	cmp	r4, #4
 80071a6:	d806      	bhi.n	80071b6 <_strtod_l+0xf6>
 80071a8:	e8df f004 	tbb	[pc, r4]
 80071ac:	1714030a 	.word	0x1714030a
 80071b0:	0a          	.byte	0x0a
 80071b1:	00          	.byte	0x00
 80071b2:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 80071b6:	0731      	lsls	r1, r6, #28
 80071b8:	d5c1      	bpl.n	800713e <_strtod_l+0x7e>
 80071ba:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 80071be:	e7be      	b.n	800713e <_strtod_l+0x7e>
 80071c0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80071c2:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 80071c6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80071ca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80071ce:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 80071d2:	e7f0      	b.n	80071b6 <_strtod_l+0xf6>
 80071d4:	f8df a170 	ldr.w	sl, [pc, #368]	; 8007348 <_strtod_l+0x288>
 80071d8:	e7ed      	b.n	80071b6 <_strtod_l+0xf6>
 80071da:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 80071de:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80071e2:	e7e8      	b.n	80071b6 <_strtod_l+0xf6>
 80071e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80071e6:	1c5a      	adds	r2, r3, #1
 80071e8:	921b      	str	r2, [sp, #108]	; 0x6c
 80071ea:	785b      	ldrb	r3, [r3, #1]
 80071ec:	2b30      	cmp	r3, #48	; 0x30
 80071ee:	d0f9      	beq.n	80071e4 <_strtod_l+0x124>
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d0a4      	beq.n	800713e <_strtod_l+0x7e>
 80071f4:	2301      	movs	r3, #1
 80071f6:	2500      	movs	r5, #0
 80071f8:	220a      	movs	r2, #10
 80071fa:	9307      	str	r3, [sp, #28]
 80071fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80071fe:	9506      	str	r5, [sp, #24]
 8007200:	9308      	str	r3, [sp, #32]
 8007202:	9504      	str	r5, [sp, #16]
 8007204:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8007206:	7807      	ldrb	r7, [r0, #0]
 8007208:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800720c:	b2d9      	uxtb	r1, r3
 800720e:	2909      	cmp	r1, #9
 8007210:	d929      	bls.n	8007266 <_strtod_l+0x1a6>
 8007212:	4622      	mov	r2, r4
 8007214:	f8d8 1000 	ldr.w	r1, [r8]
 8007218:	f7ff ff1c 	bl	8007054 <strncmp>
 800721c:	2800      	cmp	r0, #0
 800721e:	d031      	beq.n	8007284 <_strtod_l+0x1c4>
 8007220:	2000      	movs	r0, #0
 8007222:	463b      	mov	r3, r7
 8007224:	4602      	mov	r2, r0
 8007226:	9c04      	ldr	r4, [sp, #16]
 8007228:	9005      	str	r0, [sp, #20]
 800722a:	2b65      	cmp	r3, #101	; 0x65
 800722c:	d001      	beq.n	8007232 <_strtod_l+0x172>
 800722e:	2b45      	cmp	r3, #69	; 0x45
 8007230:	d114      	bne.n	800725c <_strtod_l+0x19c>
 8007232:	b924      	cbnz	r4, 800723e <_strtod_l+0x17e>
 8007234:	b910      	cbnz	r0, 800723c <_strtod_l+0x17c>
 8007236:	9b07      	ldr	r3, [sp, #28]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d09e      	beq.n	800717a <_strtod_l+0xba>
 800723c:	2400      	movs	r4, #0
 800723e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8007240:	1c73      	adds	r3, r6, #1
 8007242:	931b      	str	r3, [sp, #108]	; 0x6c
 8007244:	7873      	ldrb	r3, [r6, #1]
 8007246:	2b2b      	cmp	r3, #43	; 0x2b
 8007248:	d078      	beq.n	800733c <_strtod_l+0x27c>
 800724a:	2b2d      	cmp	r3, #45	; 0x2d
 800724c:	d070      	beq.n	8007330 <_strtod_l+0x270>
 800724e:	f04f 0c00 	mov.w	ip, #0
 8007252:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8007256:	2f09      	cmp	r7, #9
 8007258:	d97c      	bls.n	8007354 <_strtod_l+0x294>
 800725a:	961b      	str	r6, [sp, #108]	; 0x6c
 800725c:	f04f 0e00 	mov.w	lr, #0
 8007260:	e09a      	b.n	8007398 <_strtod_l+0x2d8>
 8007262:	2300      	movs	r3, #0
 8007264:	e7c7      	b.n	80071f6 <_strtod_l+0x136>
 8007266:	9904      	ldr	r1, [sp, #16]
 8007268:	3001      	adds	r0, #1
 800726a:	2908      	cmp	r1, #8
 800726c:	bfd7      	itett	le
 800726e:	9906      	ldrle	r1, [sp, #24]
 8007270:	fb02 3505 	mlagt	r5, r2, r5, r3
 8007274:	fb02 3301 	mlale	r3, r2, r1, r3
 8007278:	9306      	strle	r3, [sp, #24]
 800727a:	9b04      	ldr	r3, [sp, #16]
 800727c:	901b      	str	r0, [sp, #108]	; 0x6c
 800727e:	3301      	adds	r3, #1
 8007280:	9304      	str	r3, [sp, #16]
 8007282:	e7bf      	b.n	8007204 <_strtod_l+0x144>
 8007284:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007286:	191a      	adds	r2, r3, r4
 8007288:	921b      	str	r2, [sp, #108]	; 0x6c
 800728a:	9a04      	ldr	r2, [sp, #16]
 800728c:	5d1b      	ldrb	r3, [r3, r4]
 800728e:	2a00      	cmp	r2, #0
 8007290:	d037      	beq.n	8007302 <_strtod_l+0x242>
 8007292:	4602      	mov	r2, r0
 8007294:	9c04      	ldr	r4, [sp, #16]
 8007296:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800729a:	2909      	cmp	r1, #9
 800729c:	d913      	bls.n	80072c6 <_strtod_l+0x206>
 800729e:	2101      	movs	r1, #1
 80072a0:	9105      	str	r1, [sp, #20]
 80072a2:	e7c2      	b.n	800722a <_strtod_l+0x16a>
 80072a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80072a6:	3001      	adds	r0, #1
 80072a8:	1c5a      	adds	r2, r3, #1
 80072aa:	921b      	str	r2, [sp, #108]	; 0x6c
 80072ac:	785b      	ldrb	r3, [r3, #1]
 80072ae:	2b30      	cmp	r3, #48	; 0x30
 80072b0:	d0f8      	beq.n	80072a4 <_strtod_l+0x1e4>
 80072b2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80072b6:	2a08      	cmp	r2, #8
 80072b8:	f200 84f0 	bhi.w	8007c9c <_strtod_l+0xbdc>
 80072bc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80072be:	9208      	str	r2, [sp, #32]
 80072c0:	4602      	mov	r2, r0
 80072c2:	2000      	movs	r0, #0
 80072c4:	4604      	mov	r4, r0
 80072c6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80072ca:	f100 0101 	add.w	r1, r0, #1
 80072ce:	d012      	beq.n	80072f6 <_strtod_l+0x236>
 80072d0:	440a      	add	r2, r1
 80072d2:	270a      	movs	r7, #10
 80072d4:	4621      	mov	r1, r4
 80072d6:	eb00 0c04 	add.w	ip, r0, r4
 80072da:	458c      	cmp	ip, r1
 80072dc:	d113      	bne.n	8007306 <_strtod_l+0x246>
 80072de:	1821      	adds	r1, r4, r0
 80072e0:	2908      	cmp	r1, #8
 80072e2:	f104 0401 	add.w	r4, r4, #1
 80072e6:	4404      	add	r4, r0
 80072e8:	dc19      	bgt.n	800731e <_strtod_l+0x25e>
 80072ea:	210a      	movs	r1, #10
 80072ec:	9b06      	ldr	r3, [sp, #24]
 80072ee:	fb01 e303 	mla	r3, r1, r3, lr
 80072f2:	9306      	str	r3, [sp, #24]
 80072f4:	2100      	movs	r1, #0
 80072f6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80072f8:	1c58      	adds	r0, r3, #1
 80072fa:	901b      	str	r0, [sp, #108]	; 0x6c
 80072fc:	785b      	ldrb	r3, [r3, #1]
 80072fe:	4608      	mov	r0, r1
 8007300:	e7c9      	b.n	8007296 <_strtod_l+0x1d6>
 8007302:	9804      	ldr	r0, [sp, #16]
 8007304:	e7d3      	b.n	80072ae <_strtod_l+0x1ee>
 8007306:	2908      	cmp	r1, #8
 8007308:	f101 0101 	add.w	r1, r1, #1
 800730c:	dc03      	bgt.n	8007316 <_strtod_l+0x256>
 800730e:	9b06      	ldr	r3, [sp, #24]
 8007310:	437b      	muls	r3, r7
 8007312:	9306      	str	r3, [sp, #24]
 8007314:	e7e1      	b.n	80072da <_strtod_l+0x21a>
 8007316:	2910      	cmp	r1, #16
 8007318:	bfd8      	it	le
 800731a:	437d      	mulle	r5, r7
 800731c:	e7dd      	b.n	80072da <_strtod_l+0x21a>
 800731e:	2c10      	cmp	r4, #16
 8007320:	bfdc      	itt	le
 8007322:	210a      	movle	r1, #10
 8007324:	fb01 e505 	mlale	r5, r1, r5, lr
 8007328:	e7e4      	b.n	80072f4 <_strtod_l+0x234>
 800732a:	2301      	movs	r3, #1
 800732c:	9305      	str	r3, [sp, #20]
 800732e:	e781      	b.n	8007234 <_strtod_l+0x174>
 8007330:	f04f 0c01 	mov.w	ip, #1
 8007334:	1cb3      	adds	r3, r6, #2
 8007336:	931b      	str	r3, [sp, #108]	; 0x6c
 8007338:	78b3      	ldrb	r3, [r6, #2]
 800733a:	e78a      	b.n	8007252 <_strtod_l+0x192>
 800733c:	f04f 0c00 	mov.w	ip, #0
 8007340:	e7f8      	b.n	8007334 <_strtod_l+0x274>
 8007342:	bf00      	nop
 8007344:	08009e64 	.word	0x08009e64
 8007348:	7ff00000 	.word	0x7ff00000
 800734c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800734e:	1c5f      	adds	r7, r3, #1
 8007350:	971b      	str	r7, [sp, #108]	; 0x6c
 8007352:	785b      	ldrb	r3, [r3, #1]
 8007354:	2b30      	cmp	r3, #48	; 0x30
 8007356:	d0f9      	beq.n	800734c <_strtod_l+0x28c>
 8007358:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800735c:	2f08      	cmp	r7, #8
 800735e:	f63f af7d 	bhi.w	800725c <_strtod_l+0x19c>
 8007362:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8007366:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007368:	9309      	str	r3, [sp, #36]	; 0x24
 800736a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800736c:	1c5f      	adds	r7, r3, #1
 800736e:	971b      	str	r7, [sp, #108]	; 0x6c
 8007370:	785b      	ldrb	r3, [r3, #1]
 8007372:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8007376:	f1b8 0f09 	cmp.w	r8, #9
 800737a:	d937      	bls.n	80073ec <_strtod_l+0x32c>
 800737c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800737e:	1a7f      	subs	r7, r7, r1
 8007380:	2f08      	cmp	r7, #8
 8007382:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007386:	dc37      	bgt.n	80073f8 <_strtod_l+0x338>
 8007388:	45be      	cmp	lr, r7
 800738a:	bfa8      	it	ge
 800738c:	46be      	movge	lr, r7
 800738e:	f1bc 0f00 	cmp.w	ip, #0
 8007392:	d001      	beq.n	8007398 <_strtod_l+0x2d8>
 8007394:	f1ce 0e00 	rsb	lr, lr, #0
 8007398:	2c00      	cmp	r4, #0
 800739a:	d151      	bne.n	8007440 <_strtod_l+0x380>
 800739c:	2800      	cmp	r0, #0
 800739e:	f47f aece 	bne.w	800713e <_strtod_l+0x7e>
 80073a2:	9a07      	ldr	r2, [sp, #28]
 80073a4:	2a00      	cmp	r2, #0
 80073a6:	f47f aeca 	bne.w	800713e <_strtod_l+0x7e>
 80073aa:	9a05      	ldr	r2, [sp, #20]
 80073ac:	2a00      	cmp	r2, #0
 80073ae:	f47f aee4 	bne.w	800717a <_strtod_l+0xba>
 80073b2:	2b4e      	cmp	r3, #78	; 0x4e
 80073b4:	d027      	beq.n	8007406 <_strtod_l+0x346>
 80073b6:	dc21      	bgt.n	80073fc <_strtod_l+0x33c>
 80073b8:	2b49      	cmp	r3, #73	; 0x49
 80073ba:	f47f aede 	bne.w	800717a <_strtod_l+0xba>
 80073be:	49a4      	ldr	r1, [pc, #656]	; (8007650 <_strtod_l+0x590>)
 80073c0:	a81b      	add	r0, sp, #108	; 0x6c
 80073c2:	f000 ff9f 	bl	8008304 <__match>
 80073c6:	2800      	cmp	r0, #0
 80073c8:	f43f aed7 	beq.w	800717a <_strtod_l+0xba>
 80073cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80073ce:	49a1      	ldr	r1, [pc, #644]	; (8007654 <_strtod_l+0x594>)
 80073d0:	3b01      	subs	r3, #1
 80073d2:	a81b      	add	r0, sp, #108	; 0x6c
 80073d4:	931b      	str	r3, [sp, #108]	; 0x6c
 80073d6:	f000 ff95 	bl	8008304 <__match>
 80073da:	b910      	cbnz	r0, 80073e2 <_strtod_l+0x322>
 80073dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80073de:	3301      	adds	r3, #1
 80073e0:	931b      	str	r3, [sp, #108]	; 0x6c
 80073e2:	f8df a284 	ldr.w	sl, [pc, #644]	; 8007668 <_strtod_l+0x5a8>
 80073e6:	f04f 0900 	mov.w	r9, #0
 80073ea:	e6a8      	b.n	800713e <_strtod_l+0x7e>
 80073ec:	210a      	movs	r1, #10
 80073ee:	fb01 3e0e 	mla	lr, r1, lr, r3
 80073f2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80073f6:	e7b8      	b.n	800736a <_strtod_l+0x2aa>
 80073f8:	46be      	mov	lr, r7
 80073fa:	e7c8      	b.n	800738e <_strtod_l+0x2ce>
 80073fc:	2b69      	cmp	r3, #105	; 0x69
 80073fe:	d0de      	beq.n	80073be <_strtod_l+0x2fe>
 8007400:	2b6e      	cmp	r3, #110	; 0x6e
 8007402:	f47f aeba 	bne.w	800717a <_strtod_l+0xba>
 8007406:	4994      	ldr	r1, [pc, #592]	; (8007658 <_strtod_l+0x598>)
 8007408:	a81b      	add	r0, sp, #108	; 0x6c
 800740a:	f000 ff7b 	bl	8008304 <__match>
 800740e:	2800      	cmp	r0, #0
 8007410:	f43f aeb3 	beq.w	800717a <_strtod_l+0xba>
 8007414:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	2b28      	cmp	r3, #40	; 0x28
 800741a:	d10e      	bne.n	800743a <_strtod_l+0x37a>
 800741c:	aa1e      	add	r2, sp, #120	; 0x78
 800741e:	498f      	ldr	r1, [pc, #572]	; (800765c <_strtod_l+0x59c>)
 8007420:	a81b      	add	r0, sp, #108	; 0x6c
 8007422:	f000 ff83 	bl	800832c <__hexnan>
 8007426:	2805      	cmp	r0, #5
 8007428:	d107      	bne.n	800743a <_strtod_l+0x37a>
 800742a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800742c:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8007430:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 8007434:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8007438:	e681      	b.n	800713e <_strtod_l+0x7e>
 800743a:	f8df a234 	ldr.w	sl, [pc, #564]	; 8007670 <_strtod_l+0x5b0>
 800743e:	e7d2      	b.n	80073e6 <_strtod_l+0x326>
 8007440:	ebae 0302 	sub.w	r3, lr, r2
 8007444:	9307      	str	r3, [sp, #28]
 8007446:	9b04      	ldr	r3, [sp, #16]
 8007448:	9806      	ldr	r0, [sp, #24]
 800744a:	2b00      	cmp	r3, #0
 800744c:	bf08      	it	eq
 800744e:	4623      	moveq	r3, r4
 8007450:	2c10      	cmp	r4, #16
 8007452:	9304      	str	r3, [sp, #16]
 8007454:	46a0      	mov	r8, r4
 8007456:	bfa8      	it	ge
 8007458:	f04f 0810 	movge.w	r8, #16
 800745c:	f7f8 ffc2 	bl	80003e4 <__aeabi_ui2d>
 8007460:	2c09      	cmp	r4, #9
 8007462:	4681      	mov	r9, r0
 8007464:	468a      	mov	sl, r1
 8007466:	dc13      	bgt.n	8007490 <_strtod_l+0x3d0>
 8007468:	9b07      	ldr	r3, [sp, #28]
 800746a:	2b00      	cmp	r3, #0
 800746c:	f43f ae67 	beq.w	800713e <_strtod_l+0x7e>
 8007470:	9b07      	ldr	r3, [sp, #28]
 8007472:	dd7e      	ble.n	8007572 <_strtod_l+0x4b2>
 8007474:	2b16      	cmp	r3, #22
 8007476:	dc65      	bgt.n	8007544 <_strtod_l+0x484>
 8007478:	4a79      	ldr	r2, [pc, #484]	; (8007660 <_strtod_l+0x5a0>)
 800747a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800747e:	464a      	mov	r2, r9
 8007480:	e9de 0100 	ldrd	r0, r1, [lr]
 8007484:	4653      	mov	r3, sl
 8007486:	f7f9 f827 	bl	80004d8 <__aeabi_dmul>
 800748a:	4681      	mov	r9, r0
 800748c:	468a      	mov	sl, r1
 800748e:	e656      	b.n	800713e <_strtod_l+0x7e>
 8007490:	4b73      	ldr	r3, [pc, #460]	; (8007660 <_strtod_l+0x5a0>)
 8007492:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007496:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800749a:	f7f9 f81d 	bl	80004d8 <__aeabi_dmul>
 800749e:	4606      	mov	r6, r0
 80074a0:	4628      	mov	r0, r5
 80074a2:	460f      	mov	r7, r1
 80074a4:	f7f8 ff9e 	bl	80003e4 <__aeabi_ui2d>
 80074a8:	4602      	mov	r2, r0
 80074aa:	460b      	mov	r3, r1
 80074ac:	4630      	mov	r0, r6
 80074ae:	4639      	mov	r1, r7
 80074b0:	f7f8 fe5c 	bl	800016c <__adddf3>
 80074b4:	2c0f      	cmp	r4, #15
 80074b6:	4681      	mov	r9, r0
 80074b8:	468a      	mov	sl, r1
 80074ba:	ddd5      	ble.n	8007468 <_strtod_l+0x3a8>
 80074bc:	9b07      	ldr	r3, [sp, #28]
 80074be:	eba4 0808 	sub.w	r8, r4, r8
 80074c2:	4498      	add	r8, r3
 80074c4:	f1b8 0f00 	cmp.w	r8, #0
 80074c8:	f340 809a 	ble.w	8007600 <_strtod_l+0x540>
 80074cc:	f018 030f 	ands.w	r3, r8, #15
 80074d0:	d00a      	beq.n	80074e8 <_strtod_l+0x428>
 80074d2:	4963      	ldr	r1, [pc, #396]	; (8007660 <_strtod_l+0x5a0>)
 80074d4:	464a      	mov	r2, r9
 80074d6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80074da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074de:	4653      	mov	r3, sl
 80074e0:	f7f8 fffa 	bl	80004d8 <__aeabi_dmul>
 80074e4:	4681      	mov	r9, r0
 80074e6:	468a      	mov	sl, r1
 80074e8:	f038 080f 	bics.w	r8, r8, #15
 80074ec:	d077      	beq.n	80075de <_strtod_l+0x51e>
 80074ee:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80074f2:	dd4b      	ble.n	800758c <_strtod_l+0x4cc>
 80074f4:	f04f 0800 	mov.w	r8, #0
 80074f8:	f8cd 8010 	str.w	r8, [sp, #16]
 80074fc:	f8cd 8020 	str.w	r8, [sp, #32]
 8007500:	f8cd 8018 	str.w	r8, [sp, #24]
 8007504:	2322      	movs	r3, #34	; 0x22
 8007506:	f04f 0900 	mov.w	r9, #0
 800750a:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8007668 <_strtod_l+0x5a8>
 800750e:	f8cb 3000 	str.w	r3, [fp]
 8007512:	9b08      	ldr	r3, [sp, #32]
 8007514:	2b00      	cmp	r3, #0
 8007516:	f43f ae12 	beq.w	800713e <_strtod_l+0x7e>
 800751a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800751c:	4658      	mov	r0, fp
 800751e:	f000 fffa 	bl	8008516 <_Bfree>
 8007522:	9906      	ldr	r1, [sp, #24]
 8007524:	4658      	mov	r0, fp
 8007526:	f000 fff6 	bl	8008516 <_Bfree>
 800752a:	9904      	ldr	r1, [sp, #16]
 800752c:	4658      	mov	r0, fp
 800752e:	f000 fff2 	bl	8008516 <_Bfree>
 8007532:	9908      	ldr	r1, [sp, #32]
 8007534:	4658      	mov	r0, fp
 8007536:	f000 ffee 	bl	8008516 <_Bfree>
 800753a:	4641      	mov	r1, r8
 800753c:	4658      	mov	r0, fp
 800753e:	f000 ffea 	bl	8008516 <_Bfree>
 8007542:	e5fc      	b.n	800713e <_strtod_l+0x7e>
 8007544:	9a07      	ldr	r2, [sp, #28]
 8007546:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800754a:	4293      	cmp	r3, r2
 800754c:	dbb6      	blt.n	80074bc <_strtod_l+0x3fc>
 800754e:	4d44      	ldr	r5, [pc, #272]	; (8007660 <_strtod_l+0x5a0>)
 8007550:	f1c4 040f 	rsb	r4, r4, #15
 8007554:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8007558:	464a      	mov	r2, r9
 800755a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800755e:	4653      	mov	r3, sl
 8007560:	f7f8 ffba 	bl	80004d8 <__aeabi_dmul>
 8007564:	9b07      	ldr	r3, [sp, #28]
 8007566:	1b1c      	subs	r4, r3, r4
 8007568:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800756c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007570:	e789      	b.n	8007486 <_strtod_l+0x3c6>
 8007572:	f113 0f16 	cmn.w	r3, #22
 8007576:	dba1      	blt.n	80074bc <_strtod_l+0x3fc>
 8007578:	4a39      	ldr	r2, [pc, #228]	; (8007660 <_strtod_l+0x5a0>)
 800757a:	4648      	mov	r0, r9
 800757c:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8007580:	e9d2 2300 	ldrd	r2, r3, [r2]
 8007584:	4651      	mov	r1, sl
 8007586:	f7f9 f8d1 	bl	800072c <__aeabi_ddiv>
 800758a:	e77e      	b.n	800748a <_strtod_l+0x3ca>
 800758c:	2300      	movs	r3, #0
 800758e:	4648      	mov	r0, r9
 8007590:	4651      	mov	r1, sl
 8007592:	461d      	mov	r5, r3
 8007594:	4e33      	ldr	r6, [pc, #204]	; (8007664 <_strtod_l+0x5a4>)
 8007596:	ea4f 1828 	mov.w	r8, r8, asr #4
 800759a:	f1b8 0f01 	cmp.w	r8, #1
 800759e:	dc21      	bgt.n	80075e4 <_strtod_l+0x524>
 80075a0:	b10b      	cbz	r3, 80075a6 <_strtod_l+0x4e6>
 80075a2:	4681      	mov	r9, r0
 80075a4:	468a      	mov	sl, r1
 80075a6:	4b2f      	ldr	r3, [pc, #188]	; (8007664 <_strtod_l+0x5a4>)
 80075a8:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 80075ac:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80075b0:	464a      	mov	r2, r9
 80075b2:	e9d5 0100 	ldrd	r0, r1, [r5]
 80075b6:	4653      	mov	r3, sl
 80075b8:	f7f8 ff8e 	bl	80004d8 <__aeabi_dmul>
 80075bc:	4b2a      	ldr	r3, [pc, #168]	; (8007668 <_strtod_l+0x5a8>)
 80075be:	460a      	mov	r2, r1
 80075c0:	400b      	ands	r3, r1
 80075c2:	492a      	ldr	r1, [pc, #168]	; (800766c <_strtod_l+0x5ac>)
 80075c4:	4681      	mov	r9, r0
 80075c6:	428b      	cmp	r3, r1
 80075c8:	d894      	bhi.n	80074f4 <_strtod_l+0x434>
 80075ca:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80075ce:	428b      	cmp	r3, r1
 80075d0:	bf86      	itte	hi
 80075d2:	f04f 39ff 	movhi.w	r9, #4294967295	; 0xffffffff
 80075d6:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 8007674 <_strtod_l+0x5b4>
 80075da:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 80075de:	2300      	movs	r3, #0
 80075e0:	9305      	str	r3, [sp, #20]
 80075e2:	e07b      	b.n	80076dc <_strtod_l+0x61c>
 80075e4:	f018 0f01 	tst.w	r8, #1
 80075e8:	d006      	beq.n	80075f8 <_strtod_l+0x538>
 80075ea:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80075ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f2:	f7f8 ff71 	bl	80004d8 <__aeabi_dmul>
 80075f6:	2301      	movs	r3, #1
 80075f8:	3501      	adds	r5, #1
 80075fa:	ea4f 0868 	mov.w	r8, r8, asr #1
 80075fe:	e7cc      	b.n	800759a <_strtod_l+0x4da>
 8007600:	d0ed      	beq.n	80075de <_strtod_l+0x51e>
 8007602:	f1c8 0800 	rsb	r8, r8, #0
 8007606:	f018 020f 	ands.w	r2, r8, #15
 800760a:	d00a      	beq.n	8007622 <_strtod_l+0x562>
 800760c:	4b14      	ldr	r3, [pc, #80]	; (8007660 <_strtod_l+0x5a0>)
 800760e:	4648      	mov	r0, r9
 8007610:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007614:	4651      	mov	r1, sl
 8007616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800761a:	f7f9 f887 	bl	800072c <__aeabi_ddiv>
 800761e:	4681      	mov	r9, r0
 8007620:	468a      	mov	sl, r1
 8007622:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007626:	d0da      	beq.n	80075de <_strtod_l+0x51e>
 8007628:	f1b8 0f1f 	cmp.w	r8, #31
 800762c:	dd24      	ble.n	8007678 <_strtod_l+0x5b8>
 800762e:	f04f 0800 	mov.w	r8, #0
 8007632:	f8cd 8010 	str.w	r8, [sp, #16]
 8007636:	f8cd 8020 	str.w	r8, [sp, #32]
 800763a:	f8cd 8018 	str.w	r8, [sp, #24]
 800763e:	2322      	movs	r3, #34	; 0x22
 8007640:	f04f 0900 	mov.w	r9, #0
 8007644:	f04f 0a00 	mov.w	sl, #0
 8007648:	f8cb 3000 	str.w	r3, [fp]
 800764c:	e761      	b.n	8007512 <_strtod_l+0x452>
 800764e:	bf00      	nop
 8007650:	08009e55 	.word	0x08009e55
 8007654:	08009e58 	.word	0x08009e58
 8007658:	08009e5e 	.word	0x08009e5e
 800765c:	08009e78 	.word	0x08009e78
 8007660:	08009ef0 	.word	0x08009ef0
 8007664:	08009ec8 	.word	0x08009ec8
 8007668:	7ff00000 	.word	0x7ff00000
 800766c:	7ca00000 	.word	0x7ca00000
 8007670:	fff80000 	.word	0xfff80000
 8007674:	7fefffff 	.word	0x7fefffff
 8007678:	f018 0310 	ands.w	r3, r8, #16
 800767c:	bf18      	it	ne
 800767e:	236a      	movne	r3, #106	; 0x6a
 8007680:	4648      	mov	r0, r9
 8007682:	9305      	str	r3, [sp, #20]
 8007684:	4651      	mov	r1, sl
 8007686:	2300      	movs	r3, #0
 8007688:	4da1      	ldr	r5, [pc, #644]	; (8007910 <_strtod_l+0x850>)
 800768a:	f1b8 0f00 	cmp.w	r8, #0
 800768e:	f300 8113 	bgt.w	80078b8 <_strtod_l+0x7f8>
 8007692:	b10b      	cbz	r3, 8007698 <_strtod_l+0x5d8>
 8007694:	4681      	mov	r9, r0
 8007696:	468a      	mov	sl, r1
 8007698:	9b05      	ldr	r3, [sp, #20]
 800769a:	b1bb      	cbz	r3, 80076cc <_strtod_l+0x60c>
 800769c:	f3ca 530a 	ubfx	r3, sl, #20, #11
 80076a0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	4651      	mov	r1, sl
 80076a8:	dd10      	ble.n	80076cc <_strtod_l+0x60c>
 80076aa:	2b1f      	cmp	r3, #31
 80076ac:	f340 8110 	ble.w	80078d0 <_strtod_l+0x810>
 80076b0:	2b34      	cmp	r3, #52	; 0x34
 80076b2:	bfd8      	it	le
 80076b4:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 80076b8:	f04f 0900 	mov.w	r9, #0
 80076bc:	bfcf      	iteee	gt
 80076be:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 80076c2:	3b20      	suble	r3, #32
 80076c4:	fa02 f303 	lslle.w	r3, r2, r3
 80076c8:	ea03 0a01 	andle.w	sl, r3, r1
 80076cc:	2200      	movs	r2, #0
 80076ce:	2300      	movs	r3, #0
 80076d0:	4648      	mov	r0, r9
 80076d2:	4651      	mov	r1, sl
 80076d4:	f7f9 f968 	bl	80009a8 <__aeabi_dcmpeq>
 80076d8:	2800      	cmp	r0, #0
 80076da:	d1a8      	bne.n	800762e <_strtod_l+0x56e>
 80076dc:	9b06      	ldr	r3, [sp, #24]
 80076de:	9a04      	ldr	r2, [sp, #16]
 80076e0:	9300      	str	r3, [sp, #0]
 80076e2:	9908      	ldr	r1, [sp, #32]
 80076e4:	4623      	mov	r3, r4
 80076e6:	4658      	mov	r0, fp
 80076e8:	f000 ff67 	bl	80085ba <__s2b>
 80076ec:	9008      	str	r0, [sp, #32]
 80076ee:	2800      	cmp	r0, #0
 80076f0:	f43f af00 	beq.w	80074f4 <_strtod_l+0x434>
 80076f4:	9a07      	ldr	r2, [sp, #28]
 80076f6:	9b07      	ldr	r3, [sp, #28]
 80076f8:	2a00      	cmp	r2, #0
 80076fa:	f1c3 0300 	rsb	r3, r3, #0
 80076fe:	bfa8      	it	ge
 8007700:	2300      	movge	r3, #0
 8007702:	f04f 0800 	mov.w	r8, #0
 8007706:	930e      	str	r3, [sp, #56]	; 0x38
 8007708:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800770c:	9316      	str	r3, [sp, #88]	; 0x58
 800770e:	f8cd 8010 	str.w	r8, [sp, #16]
 8007712:	9b08      	ldr	r3, [sp, #32]
 8007714:	4658      	mov	r0, fp
 8007716:	6859      	ldr	r1, [r3, #4]
 8007718:	f000 fec9 	bl	80084ae <_Balloc>
 800771c:	9006      	str	r0, [sp, #24]
 800771e:	2800      	cmp	r0, #0
 8007720:	f43f aef0 	beq.w	8007504 <_strtod_l+0x444>
 8007724:	9b08      	ldr	r3, [sp, #32]
 8007726:	300c      	adds	r0, #12
 8007728:	691a      	ldr	r2, [r3, #16]
 800772a:	f103 010c 	add.w	r1, r3, #12
 800772e:	3202      	adds	r2, #2
 8007730:	0092      	lsls	r2, r2, #2
 8007732:	f000 feb1 	bl	8008498 <memcpy>
 8007736:	ab1e      	add	r3, sp, #120	; 0x78
 8007738:	9301      	str	r3, [sp, #4]
 800773a:	ab1d      	add	r3, sp, #116	; 0x74
 800773c:	9300      	str	r3, [sp, #0]
 800773e:	464a      	mov	r2, r9
 8007740:	4653      	mov	r3, sl
 8007742:	4658      	mov	r0, fp
 8007744:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8007748:	f001 f9f2 	bl	8008b30 <__d2b>
 800774c:	901c      	str	r0, [sp, #112]	; 0x70
 800774e:	2800      	cmp	r0, #0
 8007750:	f43f aed8 	beq.w	8007504 <_strtod_l+0x444>
 8007754:	2101      	movs	r1, #1
 8007756:	4658      	mov	r0, fp
 8007758:	f000 ffbb 	bl	80086d2 <__i2b>
 800775c:	9004      	str	r0, [sp, #16]
 800775e:	4603      	mov	r3, r0
 8007760:	2800      	cmp	r0, #0
 8007762:	f43f aecf 	beq.w	8007504 <_strtod_l+0x444>
 8007766:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8007768:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800776a:	2d00      	cmp	r5, #0
 800776c:	bfab      	itete	ge
 800776e:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8007770:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8007772:	18ee      	addge	r6, r5, r3
 8007774:	1b5c      	sublt	r4, r3, r5
 8007776:	9b05      	ldr	r3, [sp, #20]
 8007778:	bfa8      	it	ge
 800777a:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 800777c:	eba5 0503 	sub.w	r5, r5, r3
 8007780:	4415      	add	r5, r2
 8007782:	4b64      	ldr	r3, [pc, #400]	; (8007914 <_strtod_l+0x854>)
 8007784:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8007788:	bfb8      	it	lt
 800778a:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800778c:	429d      	cmp	r5, r3
 800778e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007792:	f280 80af 	bge.w	80078f4 <_strtod_l+0x834>
 8007796:	1b5b      	subs	r3, r3, r5
 8007798:	2b1f      	cmp	r3, #31
 800779a:	eba2 0203 	sub.w	r2, r2, r3
 800779e:	f04f 0701 	mov.w	r7, #1
 80077a2:	f300 809c 	bgt.w	80078de <_strtod_l+0x81e>
 80077a6:	2500      	movs	r5, #0
 80077a8:	fa07 f303 	lsl.w	r3, r7, r3
 80077ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80077ae:	18b7      	adds	r7, r6, r2
 80077b0:	9b05      	ldr	r3, [sp, #20]
 80077b2:	42be      	cmp	r6, r7
 80077b4:	4414      	add	r4, r2
 80077b6:	441c      	add	r4, r3
 80077b8:	4633      	mov	r3, r6
 80077ba:	bfa8      	it	ge
 80077bc:	463b      	movge	r3, r7
 80077be:	42a3      	cmp	r3, r4
 80077c0:	bfa8      	it	ge
 80077c2:	4623      	movge	r3, r4
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	bfc2      	ittt	gt
 80077c8:	1aff      	subgt	r7, r7, r3
 80077ca:	1ae4      	subgt	r4, r4, r3
 80077cc:	1af6      	subgt	r6, r6, r3
 80077ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80077d0:	b1bb      	cbz	r3, 8007802 <_strtod_l+0x742>
 80077d2:	461a      	mov	r2, r3
 80077d4:	9904      	ldr	r1, [sp, #16]
 80077d6:	4658      	mov	r0, fp
 80077d8:	f001 f81a 	bl	8008810 <__pow5mult>
 80077dc:	9004      	str	r0, [sp, #16]
 80077de:	2800      	cmp	r0, #0
 80077e0:	f43f ae90 	beq.w	8007504 <_strtod_l+0x444>
 80077e4:	4601      	mov	r1, r0
 80077e6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80077e8:	4658      	mov	r0, fp
 80077ea:	f000 ff7b 	bl	80086e4 <__multiply>
 80077ee:	9009      	str	r0, [sp, #36]	; 0x24
 80077f0:	2800      	cmp	r0, #0
 80077f2:	f43f ae87 	beq.w	8007504 <_strtod_l+0x444>
 80077f6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80077f8:	4658      	mov	r0, fp
 80077fa:	f000 fe8c 	bl	8008516 <_Bfree>
 80077fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007800:	931c      	str	r3, [sp, #112]	; 0x70
 8007802:	2f00      	cmp	r7, #0
 8007804:	dc7a      	bgt.n	80078fc <_strtod_l+0x83c>
 8007806:	9b07      	ldr	r3, [sp, #28]
 8007808:	2b00      	cmp	r3, #0
 800780a:	dd08      	ble.n	800781e <_strtod_l+0x75e>
 800780c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800780e:	9906      	ldr	r1, [sp, #24]
 8007810:	4658      	mov	r0, fp
 8007812:	f000 fffd 	bl	8008810 <__pow5mult>
 8007816:	9006      	str	r0, [sp, #24]
 8007818:	2800      	cmp	r0, #0
 800781a:	f43f ae73 	beq.w	8007504 <_strtod_l+0x444>
 800781e:	2c00      	cmp	r4, #0
 8007820:	dd08      	ble.n	8007834 <_strtod_l+0x774>
 8007822:	4622      	mov	r2, r4
 8007824:	9906      	ldr	r1, [sp, #24]
 8007826:	4658      	mov	r0, fp
 8007828:	f001 f840 	bl	80088ac <__lshift>
 800782c:	9006      	str	r0, [sp, #24]
 800782e:	2800      	cmp	r0, #0
 8007830:	f43f ae68 	beq.w	8007504 <_strtod_l+0x444>
 8007834:	2e00      	cmp	r6, #0
 8007836:	dd08      	ble.n	800784a <_strtod_l+0x78a>
 8007838:	4632      	mov	r2, r6
 800783a:	9904      	ldr	r1, [sp, #16]
 800783c:	4658      	mov	r0, fp
 800783e:	f001 f835 	bl	80088ac <__lshift>
 8007842:	9004      	str	r0, [sp, #16]
 8007844:	2800      	cmp	r0, #0
 8007846:	f43f ae5d 	beq.w	8007504 <_strtod_l+0x444>
 800784a:	9a06      	ldr	r2, [sp, #24]
 800784c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800784e:	4658      	mov	r0, fp
 8007850:	f001 f89a 	bl	8008988 <__mdiff>
 8007854:	4680      	mov	r8, r0
 8007856:	2800      	cmp	r0, #0
 8007858:	f43f ae54 	beq.w	8007504 <_strtod_l+0x444>
 800785c:	2400      	movs	r4, #0
 800785e:	68c3      	ldr	r3, [r0, #12]
 8007860:	9904      	ldr	r1, [sp, #16]
 8007862:	60c4      	str	r4, [r0, #12]
 8007864:	930c      	str	r3, [sp, #48]	; 0x30
 8007866:	f001 f875 	bl	8008954 <__mcmp>
 800786a:	42a0      	cmp	r0, r4
 800786c:	da54      	bge.n	8007918 <_strtod_l+0x858>
 800786e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007870:	b9f3      	cbnz	r3, 80078b0 <_strtod_l+0x7f0>
 8007872:	f1b9 0f00 	cmp.w	r9, #0
 8007876:	d11b      	bne.n	80078b0 <_strtod_l+0x7f0>
 8007878:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800787c:	b9c3      	cbnz	r3, 80078b0 <_strtod_l+0x7f0>
 800787e:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8007882:	0d1b      	lsrs	r3, r3, #20
 8007884:	051b      	lsls	r3, r3, #20
 8007886:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800788a:	d911      	bls.n	80078b0 <_strtod_l+0x7f0>
 800788c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8007890:	b91b      	cbnz	r3, 800789a <_strtod_l+0x7da>
 8007892:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8007896:	2b01      	cmp	r3, #1
 8007898:	dd0a      	ble.n	80078b0 <_strtod_l+0x7f0>
 800789a:	4641      	mov	r1, r8
 800789c:	2201      	movs	r2, #1
 800789e:	4658      	mov	r0, fp
 80078a0:	f001 f804 	bl	80088ac <__lshift>
 80078a4:	9904      	ldr	r1, [sp, #16]
 80078a6:	4680      	mov	r8, r0
 80078a8:	f001 f854 	bl	8008954 <__mcmp>
 80078ac:	2800      	cmp	r0, #0
 80078ae:	dc68      	bgt.n	8007982 <_strtod_l+0x8c2>
 80078b0:	9b05      	ldr	r3, [sp, #20]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d172      	bne.n	800799c <_strtod_l+0x8dc>
 80078b6:	e630      	b.n	800751a <_strtod_l+0x45a>
 80078b8:	f018 0f01 	tst.w	r8, #1
 80078bc:	d004      	beq.n	80078c8 <_strtod_l+0x808>
 80078be:	e9d5 2300 	ldrd	r2, r3, [r5]
 80078c2:	f7f8 fe09 	bl	80004d8 <__aeabi_dmul>
 80078c6:	2301      	movs	r3, #1
 80078c8:	ea4f 0868 	mov.w	r8, r8, asr #1
 80078cc:	3508      	adds	r5, #8
 80078ce:	e6dc      	b.n	800768a <_strtod_l+0x5ca>
 80078d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80078d4:	fa02 f303 	lsl.w	r3, r2, r3
 80078d8:	ea03 0909 	and.w	r9, r3, r9
 80078dc:	e6f6      	b.n	80076cc <_strtod_l+0x60c>
 80078de:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80078e2:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80078e6:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80078ea:	35e2      	adds	r5, #226	; 0xe2
 80078ec:	fa07 f505 	lsl.w	r5, r7, r5
 80078f0:	970f      	str	r7, [sp, #60]	; 0x3c
 80078f2:	e75c      	b.n	80077ae <_strtod_l+0x6ee>
 80078f4:	2301      	movs	r3, #1
 80078f6:	2500      	movs	r5, #0
 80078f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80078fa:	e758      	b.n	80077ae <_strtod_l+0x6ee>
 80078fc:	463a      	mov	r2, r7
 80078fe:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007900:	4658      	mov	r0, fp
 8007902:	f000 ffd3 	bl	80088ac <__lshift>
 8007906:	901c      	str	r0, [sp, #112]	; 0x70
 8007908:	2800      	cmp	r0, #0
 800790a:	f47f af7c 	bne.w	8007806 <_strtod_l+0x746>
 800790e:	e5f9      	b.n	8007504 <_strtod_l+0x444>
 8007910:	08009e90 	.word	0x08009e90
 8007914:	fffffc02 	.word	0xfffffc02
 8007918:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800791c:	f040 8089 	bne.w	8007a32 <_strtod_l+0x972>
 8007920:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007922:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8007926:	b342      	cbz	r2, 800797a <_strtod_l+0x8ba>
 8007928:	4aaf      	ldr	r2, [pc, #700]	; (8007be8 <_strtod_l+0xb28>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d156      	bne.n	80079dc <_strtod_l+0x91c>
 800792e:	9b05      	ldr	r3, [sp, #20]
 8007930:	4648      	mov	r0, r9
 8007932:	b1eb      	cbz	r3, 8007970 <_strtod_l+0x8b0>
 8007934:	4653      	mov	r3, sl
 8007936:	4aad      	ldr	r2, [pc, #692]	; (8007bec <_strtod_l+0xb2c>)
 8007938:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800793c:	401a      	ands	r2, r3
 800793e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8007942:	d818      	bhi.n	8007976 <_strtod_l+0x8b6>
 8007944:	0d12      	lsrs	r2, r2, #20
 8007946:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800794a:	fa01 f303 	lsl.w	r3, r1, r3
 800794e:	4298      	cmp	r0, r3
 8007950:	d144      	bne.n	80079dc <_strtod_l+0x91c>
 8007952:	4ba7      	ldr	r3, [pc, #668]	; (8007bf0 <_strtod_l+0xb30>)
 8007954:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007956:	429a      	cmp	r2, r3
 8007958:	d102      	bne.n	8007960 <_strtod_l+0x8a0>
 800795a:	3001      	adds	r0, #1
 800795c:	f43f add2 	beq.w	8007504 <_strtod_l+0x444>
 8007960:	4ba2      	ldr	r3, [pc, #648]	; (8007bec <_strtod_l+0xb2c>)
 8007962:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007964:	f04f 0900 	mov.w	r9, #0
 8007968:	401a      	ands	r2, r3
 800796a:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 800796e:	e79f      	b.n	80078b0 <_strtod_l+0x7f0>
 8007970:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007974:	e7eb      	b.n	800794e <_strtod_l+0x88e>
 8007976:	460b      	mov	r3, r1
 8007978:	e7e9      	b.n	800794e <_strtod_l+0x88e>
 800797a:	bb7b      	cbnz	r3, 80079dc <_strtod_l+0x91c>
 800797c:	f1b9 0f00 	cmp.w	r9, #0
 8007980:	d12c      	bne.n	80079dc <_strtod_l+0x91c>
 8007982:	9905      	ldr	r1, [sp, #20]
 8007984:	4653      	mov	r3, sl
 8007986:	4a99      	ldr	r2, [pc, #612]	; (8007bec <_strtod_l+0xb2c>)
 8007988:	b1f1      	cbz	r1, 80079c8 <_strtod_l+0x908>
 800798a:	ea02 010a 	and.w	r1, r2, sl
 800798e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007992:	dc19      	bgt.n	80079c8 <_strtod_l+0x908>
 8007994:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007998:	f77f ae51 	ble.w	800763e <_strtod_l+0x57e>
 800799c:	2300      	movs	r3, #0
 800799e:	4a95      	ldr	r2, [pc, #596]	; (8007bf4 <_strtod_l+0xb34>)
 80079a0:	4648      	mov	r0, r9
 80079a2:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80079a6:	4651      	mov	r1, sl
 80079a8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80079ac:	f7f8 fd94 	bl	80004d8 <__aeabi_dmul>
 80079b0:	4681      	mov	r9, r0
 80079b2:	468a      	mov	sl, r1
 80079b4:	2900      	cmp	r1, #0
 80079b6:	f47f adb0 	bne.w	800751a <_strtod_l+0x45a>
 80079ba:	2800      	cmp	r0, #0
 80079bc:	f47f adad 	bne.w	800751a <_strtod_l+0x45a>
 80079c0:	2322      	movs	r3, #34	; 0x22
 80079c2:	f8cb 3000 	str.w	r3, [fp]
 80079c6:	e5a8      	b.n	800751a <_strtod_l+0x45a>
 80079c8:	4013      	ands	r3, r2
 80079ca:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80079ce:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 80079d2:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80079d6:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 80079da:	e769      	b.n	80078b0 <_strtod_l+0x7f0>
 80079dc:	b19d      	cbz	r5, 8007a06 <_strtod_l+0x946>
 80079de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079e0:	421d      	tst	r5, r3
 80079e2:	f43f af65 	beq.w	80078b0 <_strtod_l+0x7f0>
 80079e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80079e8:	9a05      	ldr	r2, [sp, #20]
 80079ea:	4648      	mov	r0, r9
 80079ec:	4651      	mov	r1, sl
 80079ee:	b173      	cbz	r3, 8007a0e <_strtod_l+0x94e>
 80079f0:	f7ff fb42 	bl	8007078 <sulp>
 80079f4:	4602      	mov	r2, r0
 80079f6:	460b      	mov	r3, r1
 80079f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80079fc:	f7f8 fbb6 	bl	800016c <__adddf3>
 8007a00:	4681      	mov	r9, r0
 8007a02:	468a      	mov	sl, r1
 8007a04:	e754      	b.n	80078b0 <_strtod_l+0x7f0>
 8007a06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a08:	ea13 0f09 	tst.w	r3, r9
 8007a0c:	e7e9      	b.n	80079e2 <_strtod_l+0x922>
 8007a0e:	f7ff fb33 	bl	8007078 <sulp>
 8007a12:	4602      	mov	r2, r0
 8007a14:	460b      	mov	r3, r1
 8007a16:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007a1a:	f7f8 fba5 	bl	8000168 <__aeabi_dsub>
 8007a1e:	2200      	movs	r2, #0
 8007a20:	2300      	movs	r3, #0
 8007a22:	4681      	mov	r9, r0
 8007a24:	468a      	mov	sl, r1
 8007a26:	f7f8 ffbf 	bl	80009a8 <__aeabi_dcmpeq>
 8007a2a:	2800      	cmp	r0, #0
 8007a2c:	f47f ae07 	bne.w	800763e <_strtod_l+0x57e>
 8007a30:	e73e      	b.n	80078b0 <_strtod_l+0x7f0>
 8007a32:	9904      	ldr	r1, [sp, #16]
 8007a34:	4640      	mov	r0, r8
 8007a36:	f001 f8ca 	bl	8008bce <__ratio>
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007a40:	4606      	mov	r6, r0
 8007a42:	460f      	mov	r7, r1
 8007a44:	f7f8 ffc4 	bl	80009d0 <__aeabi_dcmple>
 8007a48:	2800      	cmp	r0, #0
 8007a4a:	d075      	beq.n	8007b38 <_strtod_l+0xa78>
 8007a4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d047      	beq.n	8007ae2 <_strtod_l+0xa22>
 8007a52:	2600      	movs	r6, #0
 8007a54:	4f68      	ldr	r7, [pc, #416]	; (8007bf8 <_strtod_l+0xb38>)
 8007a56:	4d68      	ldr	r5, [pc, #416]	; (8007bf8 <_strtod_l+0xb38>)
 8007a58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a5a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a5e:	0d1b      	lsrs	r3, r3, #20
 8007a60:	051b      	lsls	r3, r3, #20
 8007a62:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a64:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007a66:	4b65      	ldr	r3, [pc, #404]	; (8007bfc <_strtod_l+0xb3c>)
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	f040 80cf 	bne.w	8007c0c <_strtod_l+0xb4c>
 8007a6e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007a72:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007a76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a78:	4648      	mov	r0, r9
 8007a7a:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 8007a7e:	4651      	mov	r1, sl
 8007a80:	f000 ffe0 	bl	8008a44 <__ulp>
 8007a84:	4602      	mov	r2, r0
 8007a86:	460b      	mov	r3, r1
 8007a88:	4630      	mov	r0, r6
 8007a8a:	4639      	mov	r1, r7
 8007a8c:	f7f8 fd24 	bl	80004d8 <__aeabi_dmul>
 8007a90:	464a      	mov	r2, r9
 8007a92:	4653      	mov	r3, sl
 8007a94:	f7f8 fb6a 	bl	800016c <__adddf3>
 8007a98:	460b      	mov	r3, r1
 8007a9a:	4954      	ldr	r1, [pc, #336]	; (8007bec <_strtod_l+0xb2c>)
 8007a9c:	4a58      	ldr	r2, [pc, #352]	; (8007c00 <_strtod_l+0xb40>)
 8007a9e:	4019      	ands	r1, r3
 8007aa0:	4291      	cmp	r1, r2
 8007aa2:	4681      	mov	r9, r0
 8007aa4:	d95e      	bls.n	8007b64 <_strtod_l+0xaa4>
 8007aa6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007aa8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d103      	bne.n	8007ab8 <_strtod_l+0x9f8>
 8007ab0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ab2:	3301      	adds	r3, #1
 8007ab4:	f43f ad26 	beq.w	8007504 <_strtod_l+0x444>
 8007ab8:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8007abc:	f8df a130 	ldr.w	sl, [pc, #304]	; 8007bf0 <_strtod_l+0xb30>
 8007ac0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007ac2:	4658      	mov	r0, fp
 8007ac4:	f000 fd27 	bl	8008516 <_Bfree>
 8007ac8:	9906      	ldr	r1, [sp, #24]
 8007aca:	4658      	mov	r0, fp
 8007acc:	f000 fd23 	bl	8008516 <_Bfree>
 8007ad0:	9904      	ldr	r1, [sp, #16]
 8007ad2:	4658      	mov	r0, fp
 8007ad4:	f000 fd1f 	bl	8008516 <_Bfree>
 8007ad8:	4641      	mov	r1, r8
 8007ada:	4658      	mov	r0, fp
 8007adc:	f000 fd1b 	bl	8008516 <_Bfree>
 8007ae0:	e617      	b.n	8007712 <_strtod_l+0x652>
 8007ae2:	f1b9 0f00 	cmp.w	r9, #0
 8007ae6:	d119      	bne.n	8007b1c <_strtod_l+0xa5c>
 8007ae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007aee:	b9e3      	cbnz	r3, 8007b2a <_strtod_l+0xa6a>
 8007af0:	2200      	movs	r2, #0
 8007af2:	4b41      	ldr	r3, [pc, #260]	; (8007bf8 <_strtod_l+0xb38>)
 8007af4:	4630      	mov	r0, r6
 8007af6:	4639      	mov	r1, r7
 8007af8:	f7f8 ff60 	bl	80009bc <__aeabi_dcmplt>
 8007afc:	b9c8      	cbnz	r0, 8007b32 <_strtod_l+0xa72>
 8007afe:	2200      	movs	r2, #0
 8007b00:	4b40      	ldr	r3, [pc, #256]	; (8007c04 <_strtod_l+0xb44>)
 8007b02:	4630      	mov	r0, r6
 8007b04:	4639      	mov	r1, r7
 8007b06:	f7f8 fce7 	bl	80004d8 <__aeabi_dmul>
 8007b0a:	4604      	mov	r4, r0
 8007b0c:	460d      	mov	r5, r1
 8007b0e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007b12:	9418      	str	r4, [sp, #96]	; 0x60
 8007b14:	9319      	str	r3, [sp, #100]	; 0x64
 8007b16:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8007b1a:	e79d      	b.n	8007a58 <_strtod_l+0x998>
 8007b1c:	f1b9 0f01 	cmp.w	r9, #1
 8007b20:	d103      	bne.n	8007b2a <_strtod_l+0xa6a>
 8007b22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	f43f ad8a 	beq.w	800763e <_strtod_l+0x57e>
 8007b2a:	2600      	movs	r6, #0
 8007b2c:	4f36      	ldr	r7, [pc, #216]	; (8007c08 <_strtod_l+0xb48>)
 8007b2e:	2400      	movs	r4, #0
 8007b30:	e791      	b.n	8007a56 <_strtod_l+0x996>
 8007b32:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8007b34:	4d33      	ldr	r5, [pc, #204]	; (8007c04 <_strtod_l+0xb44>)
 8007b36:	e7ea      	b.n	8007b0e <_strtod_l+0xa4e>
 8007b38:	4b32      	ldr	r3, [pc, #200]	; (8007c04 <_strtod_l+0xb44>)
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	4630      	mov	r0, r6
 8007b3e:	4639      	mov	r1, r7
 8007b40:	f7f8 fcca 	bl	80004d8 <__aeabi_dmul>
 8007b44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b46:	4604      	mov	r4, r0
 8007b48:	460d      	mov	r5, r1
 8007b4a:	b933      	cbnz	r3, 8007b5a <_strtod_l+0xa9a>
 8007b4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007b50:	9010      	str	r0, [sp, #64]	; 0x40
 8007b52:	9311      	str	r3, [sp, #68]	; 0x44
 8007b54:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007b58:	e77e      	b.n	8007a58 <_strtod_l+0x998>
 8007b5a:	4602      	mov	r2, r0
 8007b5c:	460b      	mov	r3, r1
 8007b5e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007b62:	e7f7      	b.n	8007b54 <_strtod_l+0xa94>
 8007b64:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8007b68:	9b05      	ldr	r3, [sp, #20]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d1a8      	bne.n	8007ac0 <_strtod_l+0xa00>
 8007b6e:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8007b72:	0d1b      	lsrs	r3, r3, #20
 8007b74:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007b76:	051b      	lsls	r3, r3, #20
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	4656      	mov	r6, sl
 8007b7c:	d1a0      	bne.n	8007ac0 <_strtod_l+0xa00>
 8007b7e:	4629      	mov	r1, r5
 8007b80:	4620      	mov	r0, r4
 8007b82:	f7f8 ff59 	bl	8000a38 <__aeabi_d2iz>
 8007b86:	f7f8 fc3d 	bl	8000404 <__aeabi_i2d>
 8007b8a:	460b      	mov	r3, r1
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	4629      	mov	r1, r5
 8007b90:	4620      	mov	r0, r4
 8007b92:	f7f8 fae9 	bl	8000168 <__aeabi_dsub>
 8007b96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b98:	4604      	mov	r4, r0
 8007b9a:	460d      	mov	r5, r1
 8007b9c:	b933      	cbnz	r3, 8007bac <_strtod_l+0xaec>
 8007b9e:	f1b9 0f00 	cmp.w	r9, #0
 8007ba2:	d103      	bne.n	8007bac <_strtod_l+0xaec>
 8007ba4:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8007ba8:	2e00      	cmp	r6, #0
 8007baa:	d06a      	beq.n	8007c82 <_strtod_l+0xbc2>
 8007bac:	a30a      	add	r3, pc, #40	; (adr r3, 8007bd8 <_strtod_l+0xb18>)
 8007bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb2:	4620      	mov	r0, r4
 8007bb4:	4629      	mov	r1, r5
 8007bb6:	f7f8 ff01 	bl	80009bc <__aeabi_dcmplt>
 8007bba:	2800      	cmp	r0, #0
 8007bbc:	f47f acad 	bne.w	800751a <_strtod_l+0x45a>
 8007bc0:	a307      	add	r3, pc, #28	; (adr r3, 8007be0 <_strtod_l+0xb20>)
 8007bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc6:	4620      	mov	r0, r4
 8007bc8:	4629      	mov	r1, r5
 8007bca:	f7f8 ff15 	bl	80009f8 <__aeabi_dcmpgt>
 8007bce:	2800      	cmp	r0, #0
 8007bd0:	f43f af76 	beq.w	8007ac0 <_strtod_l+0xa00>
 8007bd4:	e4a1      	b.n	800751a <_strtod_l+0x45a>
 8007bd6:	bf00      	nop
 8007bd8:	94a03595 	.word	0x94a03595
 8007bdc:	3fdfffff 	.word	0x3fdfffff
 8007be0:	35afe535 	.word	0x35afe535
 8007be4:	3fe00000 	.word	0x3fe00000
 8007be8:	000fffff 	.word	0x000fffff
 8007bec:	7ff00000 	.word	0x7ff00000
 8007bf0:	7fefffff 	.word	0x7fefffff
 8007bf4:	39500000 	.word	0x39500000
 8007bf8:	3ff00000 	.word	0x3ff00000
 8007bfc:	7fe00000 	.word	0x7fe00000
 8007c00:	7c9fffff 	.word	0x7c9fffff
 8007c04:	3fe00000 	.word	0x3fe00000
 8007c08:	bff00000 	.word	0xbff00000
 8007c0c:	9b05      	ldr	r3, [sp, #20]
 8007c0e:	b313      	cbz	r3, 8007c56 <_strtod_l+0xb96>
 8007c10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c12:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007c16:	d81e      	bhi.n	8007c56 <_strtod_l+0xb96>
 8007c18:	a325      	add	r3, pc, #148	; (adr r3, 8007cb0 <_strtod_l+0xbf0>)
 8007c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c1e:	4620      	mov	r0, r4
 8007c20:	4629      	mov	r1, r5
 8007c22:	f7f8 fed5 	bl	80009d0 <__aeabi_dcmple>
 8007c26:	b190      	cbz	r0, 8007c4e <_strtod_l+0xb8e>
 8007c28:	4629      	mov	r1, r5
 8007c2a:	4620      	mov	r0, r4
 8007c2c:	f7f8 ff2c 	bl	8000a88 <__aeabi_d2uiz>
 8007c30:	2800      	cmp	r0, #0
 8007c32:	bf08      	it	eq
 8007c34:	2001      	moveq	r0, #1
 8007c36:	f7f8 fbd5 	bl	80003e4 <__aeabi_ui2d>
 8007c3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c3c:	4604      	mov	r4, r0
 8007c3e:	460d      	mov	r5, r1
 8007c40:	b9d3      	cbnz	r3, 8007c78 <_strtod_l+0xbb8>
 8007c42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c46:	9012      	str	r0, [sp, #72]	; 0x48
 8007c48:	9313      	str	r3, [sp, #76]	; 0x4c
 8007c4a:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8007c4e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007c50:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8007c54:	1a9f      	subs	r7, r3, r2
 8007c56:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007c5a:	f000 fef3 	bl	8008a44 <__ulp>
 8007c5e:	4602      	mov	r2, r0
 8007c60:	460b      	mov	r3, r1
 8007c62:	4630      	mov	r0, r6
 8007c64:	4639      	mov	r1, r7
 8007c66:	f7f8 fc37 	bl	80004d8 <__aeabi_dmul>
 8007c6a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007c6e:	f7f8 fa7d 	bl	800016c <__adddf3>
 8007c72:	4681      	mov	r9, r0
 8007c74:	468a      	mov	sl, r1
 8007c76:	e777      	b.n	8007b68 <_strtod_l+0xaa8>
 8007c78:	4602      	mov	r2, r0
 8007c7a:	460b      	mov	r3, r1
 8007c7c:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8007c80:	e7e3      	b.n	8007c4a <_strtod_l+0xb8a>
 8007c82:	a30d      	add	r3, pc, #52	; (adr r3, 8007cb8 <_strtod_l+0xbf8>)
 8007c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c88:	f7f8 fe98 	bl	80009bc <__aeabi_dcmplt>
 8007c8c:	e79f      	b.n	8007bce <_strtod_l+0xb0e>
 8007c8e:	2300      	movs	r3, #0
 8007c90:	930d      	str	r3, [sp, #52]	; 0x34
 8007c92:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007c94:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007c96:	6013      	str	r3, [r2, #0]
 8007c98:	f7ff ba55 	b.w	8007146 <_strtod_l+0x86>
 8007c9c:	2b65      	cmp	r3, #101	; 0x65
 8007c9e:	f04f 0200 	mov.w	r2, #0
 8007ca2:	f43f ab42 	beq.w	800732a <_strtod_l+0x26a>
 8007ca6:	2101      	movs	r1, #1
 8007ca8:	4614      	mov	r4, r2
 8007caa:	9105      	str	r1, [sp, #20]
 8007cac:	f7ff babf 	b.w	800722e <_strtod_l+0x16e>
 8007cb0:	ffc00000 	.word	0xffc00000
 8007cb4:	41dfffff 	.word	0x41dfffff
 8007cb8:	94a03595 	.word	0x94a03595
 8007cbc:	3fcfffff 	.word	0x3fcfffff

08007cc0 <_strtod_r>:
 8007cc0:	4b05      	ldr	r3, [pc, #20]	; (8007cd8 <_strtod_r+0x18>)
 8007cc2:	b410      	push	{r4}
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4c05      	ldr	r4, [pc, #20]	; (8007cdc <_strtod_r+0x1c>)
 8007cc8:	6a1b      	ldr	r3, [r3, #32]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	bf08      	it	eq
 8007cce:	4623      	moveq	r3, r4
 8007cd0:	bc10      	pop	{r4}
 8007cd2:	f7ff b9f5 	b.w	80070c0 <_strtod_l>
 8007cd6:	bf00      	nop
 8007cd8:	20000010 	.word	0x20000010
 8007cdc:	20000074 	.word	0x20000074

08007ce0 <_strtol_l.isra.0>:
 8007ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ce4:	4680      	mov	r8, r0
 8007ce6:	4689      	mov	r9, r1
 8007ce8:	4692      	mov	sl, r2
 8007cea:	461e      	mov	r6, r3
 8007cec:	460f      	mov	r7, r1
 8007cee:	463d      	mov	r5, r7
 8007cf0:	9808      	ldr	r0, [sp, #32]
 8007cf2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007cf6:	f000 fba9 	bl	800844c <__locale_ctype_ptr_l>
 8007cfa:	4420      	add	r0, r4
 8007cfc:	7843      	ldrb	r3, [r0, #1]
 8007cfe:	f013 0308 	ands.w	r3, r3, #8
 8007d02:	d132      	bne.n	8007d6a <_strtol_l.isra.0+0x8a>
 8007d04:	2c2d      	cmp	r4, #45	; 0x2d
 8007d06:	d132      	bne.n	8007d6e <_strtol_l.isra.0+0x8e>
 8007d08:	2201      	movs	r2, #1
 8007d0a:	787c      	ldrb	r4, [r7, #1]
 8007d0c:	1cbd      	adds	r5, r7, #2
 8007d0e:	2e00      	cmp	r6, #0
 8007d10:	d05d      	beq.n	8007dce <_strtol_l.isra.0+0xee>
 8007d12:	2e10      	cmp	r6, #16
 8007d14:	d109      	bne.n	8007d2a <_strtol_l.isra.0+0x4a>
 8007d16:	2c30      	cmp	r4, #48	; 0x30
 8007d18:	d107      	bne.n	8007d2a <_strtol_l.isra.0+0x4a>
 8007d1a:	782b      	ldrb	r3, [r5, #0]
 8007d1c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007d20:	2b58      	cmp	r3, #88	; 0x58
 8007d22:	d14f      	bne.n	8007dc4 <_strtol_l.isra.0+0xe4>
 8007d24:	2610      	movs	r6, #16
 8007d26:	786c      	ldrb	r4, [r5, #1]
 8007d28:	3502      	adds	r5, #2
 8007d2a:	2a00      	cmp	r2, #0
 8007d2c:	bf14      	ite	ne
 8007d2e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8007d32:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8007d36:	2700      	movs	r7, #0
 8007d38:	fbb1 fcf6 	udiv	ip, r1, r6
 8007d3c:	4638      	mov	r0, r7
 8007d3e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8007d42:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8007d46:	2b09      	cmp	r3, #9
 8007d48:	d817      	bhi.n	8007d7a <_strtol_l.isra.0+0x9a>
 8007d4a:	461c      	mov	r4, r3
 8007d4c:	42a6      	cmp	r6, r4
 8007d4e:	dd23      	ble.n	8007d98 <_strtol_l.isra.0+0xb8>
 8007d50:	1c7b      	adds	r3, r7, #1
 8007d52:	d007      	beq.n	8007d64 <_strtol_l.isra.0+0x84>
 8007d54:	4584      	cmp	ip, r0
 8007d56:	d31c      	bcc.n	8007d92 <_strtol_l.isra.0+0xb2>
 8007d58:	d101      	bne.n	8007d5e <_strtol_l.isra.0+0x7e>
 8007d5a:	45a6      	cmp	lr, r4
 8007d5c:	db19      	blt.n	8007d92 <_strtol_l.isra.0+0xb2>
 8007d5e:	2701      	movs	r7, #1
 8007d60:	fb00 4006 	mla	r0, r0, r6, r4
 8007d64:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d68:	e7eb      	b.n	8007d42 <_strtol_l.isra.0+0x62>
 8007d6a:	462f      	mov	r7, r5
 8007d6c:	e7bf      	b.n	8007cee <_strtol_l.isra.0+0xe>
 8007d6e:	2c2b      	cmp	r4, #43	; 0x2b
 8007d70:	bf04      	itt	eq
 8007d72:	1cbd      	addeq	r5, r7, #2
 8007d74:	787c      	ldrbeq	r4, [r7, #1]
 8007d76:	461a      	mov	r2, r3
 8007d78:	e7c9      	b.n	8007d0e <_strtol_l.isra.0+0x2e>
 8007d7a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8007d7e:	2b19      	cmp	r3, #25
 8007d80:	d801      	bhi.n	8007d86 <_strtol_l.isra.0+0xa6>
 8007d82:	3c37      	subs	r4, #55	; 0x37
 8007d84:	e7e2      	b.n	8007d4c <_strtol_l.isra.0+0x6c>
 8007d86:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8007d8a:	2b19      	cmp	r3, #25
 8007d8c:	d804      	bhi.n	8007d98 <_strtol_l.isra.0+0xb8>
 8007d8e:	3c57      	subs	r4, #87	; 0x57
 8007d90:	e7dc      	b.n	8007d4c <_strtol_l.isra.0+0x6c>
 8007d92:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007d96:	e7e5      	b.n	8007d64 <_strtol_l.isra.0+0x84>
 8007d98:	1c7b      	adds	r3, r7, #1
 8007d9a:	d108      	bne.n	8007dae <_strtol_l.isra.0+0xce>
 8007d9c:	2322      	movs	r3, #34	; 0x22
 8007d9e:	4608      	mov	r0, r1
 8007da0:	f8c8 3000 	str.w	r3, [r8]
 8007da4:	f1ba 0f00 	cmp.w	sl, #0
 8007da8:	d107      	bne.n	8007dba <_strtol_l.isra.0+0xda>
 8007daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dae:	b102      	cbz	r2, 8007db2 <_strtol_l.isra.0+0xd2>
 8007db0:	4240      	negs	r0, r0
 8007db2:	f1ba 0f00 	cmp.w	sl, #0
 8007db6:	d0f8      	beq.n	8007daa <_strtol_l.isra.0+0xca>
 8007db8:	b10f      	cbz	r7, 8007dbe <_strtol_l.isra.0+0xde>
 8007dba:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8007dbe:	f8ca 9000 	str.w	r9, [sl]
 8007dc2:	e7f2      	b.n	8007daa <_strtol_l.isra.0+0xca>
 8007dc4:	2430      	movs	r4, #48	; 0x30
 8007dc6:	2e00      	cmp	r6, #0
 8007dc8:	d1af      	bne.n	8007d2a <_strtol_l.isra.0+0x4a>
 8007dca:	2608      	movs	r6, #8
 8007dcc:	e7ad      	b.n	8007d2a <_strtol_l.isra.0+0x4a>
 8007dce:	2c30      	cmp	r4, #48	; 0x30
 8007dd0:	d0a3      	beq.n	8007d1a <_strtol_l.isra.0+0x3a>
 8007dd2:	260a      	movs	r6, #10
 8007dd4:	e7a9      	b.n	8007d2a <_strtol_l.isra.0+0x4a>
	...

08007dd8 <_strtol_r>:
 8007dd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007dda:	4c06      	ldr	r4, [pc, #24]	; (8007df4 <_strtol_r+0x1c>)
 8007ddc:	4d06      	ldr	r5, [pc, #24]	; (8007df8 <_strtol_r+0x20>)
 8007dde:	6824      	ldr	r4, [r4, #0]
 8007de0:	6a24      	ldr	r4, [r4, #32]
 8007de2:	2c00      	cmp	r4, #0
 8007de4:	bf08      	it	eq
 8007de6:	462c      	moveq	r4, r5
 8007de8:	9400      	str	r4, [sp, #0]
 8007dea:	f7ff ff79 	bl	8007ce0 <_strtol_l.isra.0>
 8007dee:	b003      	add	sp, #12
 8007df0:	bd30      	pop	{r4, r5, pc}
 8007df2:	bf00      	nop
 8007df4:	20000010 	.word	0x20000010
 8007df8:	20000074 	.word	0x20000074

08007dfc <rshift>:
 8007dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007dfe:	6906      	ldr	r6, [r0, #16]
 8007e00:	114b      	asrs	r3, r1, #5
 8007e02:	429e      	cmp	r6, r3
 8007e04:	f100 0414 	add.w	r4, r0, #20
 8007e08:	dd31      	ble.n	8007e6e <rshift+0x72>
 8007e0a:	f011 011f 	ands.w	r1, r1, #31
 8007e0e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8007e12:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8007e16:	d108      	bne.n	8007e2a <rshift+0x2e>
 8007e18:	4621      	mov	r1, r4
 8007e1a:	42b2      	cmp	r2, r6
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	d211      	bcs.n	8007e44 <rshift+0x48>
 8007e20:	f852 3b04 	ldr.w	r3, [r2], #4
 8007e24:	f841 3b04 	str.w	r3, [r1], #4
 8007e28:	e7f7      	b.n	8007e1a <rshift+0x1e>
 8007e2a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8007e2e:	4623      	mov	r3, r4
 8007e30:	f1c1 0c20 	rsb	ip, r1, #32
 8007e34:	40cd      	lsrs	r5, r1
 8007e36:	3204      	adds	r2, #4
 8007e38:	42b2      	cmp	r2, r6
 8007e3a:	4617      	mov	r7, r2
 8007e3c:	d30d      	bcc.n	8007e5a <rshift+0x5e>
 8007e3e:	601d      	str	r5, [r3, #0]
 8007e40:	b105      	cbz	r5, 8007e44 <rshift+0x48>
 8007e42:	3304      	adds	r3, #4
 8007e44:	42a3      	cmp	r3, r4
 8007e46:	eba3 0204 	sub.w	r2, r3, r4
 8007e4a:	bf08      	it	eq
 8007e4c:	2300      	moveq	r3, #0
 8007e4e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007e52:	6102      	str	r2, [r0, #16]
 8007e54:	bf08      	it	eq
 8007e56:	6143      	streq	r3, [r0, #20]
 8007e58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e5a:	683f      	ldr	r7, [r7, #0]
 8007e5c:	fa07 f70c 	lsl.w	r7, r7, ip
 8007e60:	433d      	orrs	r5, r7
 8007e62:	f843 5b04 	str.w	r5, [r3], #4
 8007e66:	f852 5b04 	ldr.w	r5, [r2], #4
 8007e6a:	40cd      	lsrs	r5, r1
 8007e6c:	e7e4      	b.n	8007e38 <rshift+0x3c>
 8007e6e:	4623      	mov	r3, r4
 8007e70:	e7e8      	b.n	8007e44 <rshift+0x48>

08007e72 <__hexdig_fun>:
 8007e72:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007e76:	2b09      	cmp	r3, #9
 8007e78:	d802      	bhi.n	8007e80 <__hexdig_fun+0xe>
 8007e7a:	3820      	subs	r0, #32
 8007e7c:	b2c0      	uxtb	r0, r0
 8007e7e:	4770      	bx	lr
 8007e80:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007e84:	2b05      	cmp	r3, #5
 8007e86:	d801      	bhi.n	8007e8c <__hexdig_fun+0x1a>
 8007e88:	3847      	subs	r0, #71	; 0x47
 8007e8a:	e7f7      	b.n	8007e7c <__hexdig_fun+0xa>
 8007e8c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007e90:	2b05      	cmp	r3, #5
 8007e92:	d801      	bhi.n	8007e98 <__hexdig_fun+0x26>
 8007e94:	3827      	subs	r0, #39	; 0x27
 8007e96:	e7f1      	b.n	8007e7c <__hexdig_fun+0xa>
 8007e98:	2000      	movs	r0, #0
 8007e9a:	4770      	bx	lr

08007e9c <__gethex>:
 8007e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ea0:	b08b      	sub	sp, #44	; 0x2c
 8007ea2:	9002      	str	r0, [sp, #8]
 8007ea4:	9816      	ldr	r0, [sp, #88]	; 0x58
 8007ea6:	468a      	mov	sl, r1
 8007ea8:	4690      	mov	r8, r2
 8007eaa:	9306      	str	r3, [sp, #24]
 8007eac:	f000 fae0 	bl	8008470 <__localeconv_l>
 8007eb0:	6803      	ldr	r3, [r0, #0]
 8007eb2:	f04f 0b00 	mov.w	fp, #0
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	9303      	str	r3, [sp, #12]
 8007eba:	f7f8 f949 	bl	8000150 <strlen>
 8007ebe:	9b03      	ldr	r3, [sp, #12]
 8007ec0:	9001      	str	r0, [sp, #4]
 8007ec2:	4403      	add	r3, r0
 8007ec4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007ec8:	9307      	str	r3, [sp, #28]
 8007eca:	f8da 3000 	ldr.w	r3, [sl]
 8007ece:	3302      	adds	r3, #2
 8007ed0:	461f      	mov	r7, r3
 8007ed2:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007ed6:	2830      	cmp	r0, #48	; 0x30
 8007ed8:	d06c      	beq.n	8007fb4 <__gethex+0x118>
 8007eda:	f7ff ffca 	bl	8007e72 <__hexdig_fun>
 8007ede:	4604      	mov	r4, r0
 8007ee0:	2800      	cmp	r0, #0
 8007ee2:	d16a      	bne.n	8007fba <__gethex+0x11e>
 8007ee4:	9a01      	ldr	r2, [sp, #4]
 8007ee6:	9903      	ldr	r1, [sp, #12]
 8007ee8:	4638      	mov	r0, r7
 8007eea:	f7ff f8b3 	bl	8007054 <strncmp>
 8007eee:	2800      	cmp	r0, #0
 8007ef0:	d166      	bne.n	8007fc0 <__gethex+0x124>
 8007ef2:	9b01      	ldr	r3, [sp, #4]
 8007ef4:	5cf8      	ldrb	r0, [r7, r3]
 8007ef6:	18fe      	adds	r6, r7, r3
 8007ef8:	f7ff ffbb 	bl	8007e72 <__hexdig_fun>
 8007efc:	2800      	cmp	r0, #0
 8007efe:	d062      	beq.n	8007fc6 <__gethex+0x12a>
 8007f00:	4633      	mov	r3, r6
 8007f02:	7818      	ldrb	r0, [r3, #0]
 8007f04:	461f      	mov	r7, r3
 8007f06:	2830      	cmp	r0, #48	; 0x30
 8007f08:	f103 0301 	add.w	r3, r3, #1
 8007f0c:	d0f9      	beq.n	8007f02 <__gethex+0x66>
 8007f0e:	f7ff ffb0 	bl	8007e72 <__hexdig_fun>
 8007f12:	fab0 f580 	clz	r5, r0
 8007f16:	4634      	mov	r4, r6
 8007f18:	f04f 0b01 	mov.w	fp, #1
 8007f1c:	096d      	lsrs	r5, r5, #5
 8007f1e:	463a      	mov	r2, r7
 8007f20:	4616      	mov	r6, r2
 8007f22:	7830      	ldrb	r0, [r6, #0]
 8007f24:	3201      	adds	r2, #1
 8007f26:	f7ff ffa4 	bl	8007e72 <__hexdig_fun>
 8007f2a:	2800      	cmp	r0, #0
 8007f2c:	d1f8      	bne.n	8007f20 <__gethex+0x84>
 8007f2e:	9a01      	ldr	r2, [sp, #4]
 8007f30:	9903      	ldr	r1, [sp, #12]
 8007f32:	4630      	mov	r0, r6
 8007f34:	f7ff f88e 	bl	8007054 <strncmp>
 8007f38:	b950      	cbnz	r0, 8007f50 <__gethex+0xb4>
 8007f3a:	b954      	cbnz	r4, 8007f52 <__gethex+0xb6>
 8007f3c:	9b01      	ldr	r3, [sp, #4]
 8007f3e:	18f4      	adds	r4, r6, r3
 8007f40:	4622      	mov	r2, r4
 8007f42:	4616      	mov	r6, r2
 8007f44:	7830      	ldrb	r0, [r6, #0]
 8007f46:	3201      	adds	r2, #1
 8007f48:	f7ff ff93 	bl	8007e72 <__hexdig_fun>
 8007f4c:	2800      	cmp	r0, #0
 8007f4e:	d1f8      	bne.n	8007f42 <__gethex+0xa6>
 8007f50:	b10c      	cbz	r4, 8007f56 <__gethex+0xba>
 8007f52:	1ba4      	subs	r4, r4, r6
 8007f54:	00a4      	lsls	r4, r4, #2
 8007f56:	7833      	ldrb	r3, [r6, #0]
 8007f58:	2b50      	cmp	r3, #80	; 0x50
 8007f5a:	d001      	beq.n	8007f60 <__gethex+0xc4>
 8007f5c:	2b70      	cmp	r3, #112	; 0x70
 8007f5e:	d140      	bne.n	8007fe2 <__gethex+0x146>
 8007f60:	7873      	ldrb	r3, [r6, #1]
 8007f62:	2b2b      	cmp	r3, #43	; 0x2b
 8007f64:	d031      	beq.n	8007fca <__gethex+0x12e>
 8007f66:	2b2d      	cmp	r3, #45	; 0x2d
 8007f68:	d033      	beq.n	8007fd2 <__gethex+0x136>
 8007f6a:	f04f 0900 	mov.w	r9, #0
 8007f6e:	1c71      	adds	r1, r6, #1
 8007f70:	7808      	ldrb	r0, [r1, #0]
 8007f72:	f7ff ff7e 	bl	8007e72 <__hexdig_fun>
 8007f76:	1e43      	subs	r3, r0, #1
 8007f78:	b2db      	uxtb	r3, r3
 8007f7a:	2b18      	cmp	r3, #24
 8007f7c:	d831      	bhi.n	8007fe2 <__gethex+0x146>
 8007f7e:	f1a0 0210 	sub.w	r2, r0, #16
 8007f82:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007f86:	f7ff ff74 	bl	8007e72 <__hexdig_fun>
 8007f8a:	1e43      	subs	r3, r0, #1
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	2b18      	cmp	r3, #24
 8007f90:	d922      	bls.n	8007fd8 <__gethex+0x13c>
 8007f92:	f1b9 0f00 	cmp.w	r9, #0
 8007f96:	d000      	beq.n	8007f9a <__gethex+0xfe>
 8007f98:	4252      	negs	r2, r2
 8007f9a:	4414      	add	r4, r2
 8007f9c:	f8ca 1000 	str.w	r1, [sl]
 8007fa0:	b30d      	cbz	r5, 8007fe6 <__gethex+0x14a>
 8007fa2:	f1bb 0f00 	cmp.w	fp, #0
 8007fa6:	bf0c      	ite	eq
 8007fa8:	2706      	moveq	r7, #6
 8007faa:	2700      	movne	r7, #0
 8007fac:	4638      	mov	r0, r7
 8007fae:	b00b      	add	sp, #44	; 0x2c
 8007fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fb4:	f10b 0b01 	add.w	fp, fp, #1
 8007fb8:	e78a      	b.n	8007ed0 <__gethex+0x34>
 8007fba:	2500      	movs	r5, #0
 8007fbc:	462c      	mov	r4, r5
 8007fbe:	e7ae      	b.n	8007f1e <__gethex+0x82>
 8007fc0:	463e      	mov	r6, r7
 8007fc2:	2501      	movs	r5, #1
 8007fc4:	e7c7      	b.n	8007f56 <__gethex+0xba>
 8007fc6:	4604      	mov	r4, r0
 8007fc8:	e7fb      	b.n	8007fc2 <__gethex+0x126>
 8007fca:	f04f 0900 	mov.w	r9, #0
 8007fce:	1cb1      	adds	r1, r6, #2
 8007fd0:	e7ce      	b.n	8007f70 <__gethex+0xd4>
 8007fd2:	f04f 0901 	mov.w	r9, #1
 8007fd6:	e7fa      	b.n	8007fce <__gethex+0x132>
 8007fd8:	230a      	movs	r3, #10
 8007fda:	fb03 0202 	mla	r2, r3, r2, r0
 8007fde:	3a10      	subs	r2, #16
 8007fe0:	e7cf      	b.n	8007f82 <__gethex+0xe6>
 8007fe2:	4631      	mov	r1, r6
 8007fe4:	e7da      	b.n	8007f9c <__gethex+0x100>
 8007fe6:	4629      	mov	r1, r5
 8007fe8:	1bf3      	subs	r3, r6, r7
 8007fea:	3b01      	subs	r3, #1
 8007fec:	2b07      	cmp	r3, #7
 8007fee:	dc49      	bgt.n	8008084 <__gethex+0x1e8>
 8007ff0:	9802      	ldr	r0, [sp, #8]
 8007ff2:	f000 fa5c 	bl	80084ae <_Balloc>
 8007ff6:	f04f 0b00 	mov.w	fp, #0
 8007ffa:	4605      	mov	r5, r0
 8007ffc:	46da      	mov	sl, fp
 8007ffe:	9b01      	ldr	r3, [sp, #4]
 8008000:	f100 0914 	add.w	r9, r0, #20
 8008004:	f1c3 0301 	rsb	r3, r3, #1
 8008008:	f8cd 9010 	str.w	r9, [sp, #16]
 800800c:	9308      	str	r3, [sp, #32]
 800800e:	42b7      	cmp	r7, r6
 8008010:	d33b      	bcc.n	800808a <__gethex+0x1ee>
 8008012:	9804      	ldr	r0, [sp, #16]
 8008014:	f840 ab04 	str.w	sl, [r0], #4
 8008018:	eba0 0009 	sub.w	r0, r0, r9
 800801c:	1080      	asrs	r0, r0, #2
 800801e:	6128      	str	r0, [r5, #16]
 8008020:	0147      	lsls	r7, r0, #5
 8008022:	4650      	mov	r0, sl
 8008024:	f000 fb07 	bl	8008636 <__hi0bits>
 8008028:	f8d8 6000 	ldr.w	r6, [r8]
 800802c:	1a3f      	subs	r7, r7, r0
 800802e:	42b7      	cmp	r7, r6
 8008030:	dd64      	ble.n	80080fc <__gethex+0x260>
 8008032:	1bbf      	subs	r7, r7, r6
 8008034:	4639      	mov	r1, r7
 8008036:	4628      	mov	r0, r5
 8008038:	f000 fe11 	bl	8008c5e <__any_on>
 800803c:	4682      	mov	sl, r0
 800803e:	b178      	cbz	r0, 8008060 <__gethex+0x1c4>
 8008040:	f04f 0a01 	mov.w	sl, #1
 8008044:	1e7b      	subs	r3, r7, #1
 8008046:	1159      	asrs	r1, r3, #5
 8008048:	f003 021f 	and.w	r2, r3, #31
 800804c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008050:	fa0a f202 	lsl.w	r2, sl, r2
 8008054:	420a      	tst	r2, r1
 8008056:	d003      	beq.n	8008060 <__gethex+0x1c4>
 8008058:	4553      	cmp	r3, sl
 800805a:	dc46      	bgt.n	80080ea <__gethex+0x24e>
 800805c:	f04f 0a02 	mov.w	sl, #2
 8008060:	4639      	mov	r1, r7
 8008062:	4628      	mov	r0, r5
 8008064:	f7ff feca 	bl	8007dfc <rshift>
 8008068:	443c      	add	r4, r7
 800806a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800806e:	42a3      	cmp	r3, r4
 8008070:	da52      	bge.n	8008118 <__gethex+0x27c>
 8008072:	4629      	mov	r1, r5
 8008074:	9802      	ldr	r0, [sp, #8]
 8008076:	f000 fa4e 	bl	8008516 <_Bfree>
 800807a:	2300      	movs	r3, #0
 800807c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800807e:	27a3      	movs	r7, #163	; 0xa3
 8008080:	6013      	str	r3, [r2, #0]
 8008082:	e793      	b.n	8007fac <__gethex+0x110>
 8008084:	3101      	adds	r1, #1
 8008086:	105b      	asrs	r3, r3, #1
 8008088:	e7b0      	b.n	8007fec <__gethex+0x150>
 800808a:	1e73      	subs	r3, r6, #1
 800808c:	9305      	str	r3, [sp, #20]
 800808e:	9a07      	ldr	r2, [sp, #28]
 8008090:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008094:	4293      	cmp	r3, r2
 8008096:	d018      	beq.n	80080ca <__gethex+0x22e>
 8008098:	f1bb 0f20 	cmp.w	fp, #32
 800809c:	d107      	bne.n	80080ae <__gethex+0x212>
 800809e:	9b04      	ldr	r3, [sp, #16]
 80080a0:	f8c3 a000 	str.w	sl, [r3]
 80080a4:	f04f 0a00 	mov.w	sl, #0
 80080a8:	46d3      	mov	fp, sl
 80080aa:	3304      	adds	r3, #4
 80080ac:	9304      	str	r3, [sp, #16]
 80080ae:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80080b2:	f7ff fede 	bl	8007e72 <__hexdig_fun>
 80080b6:	f000 000f 	and.w	r0, r0, #15
 80080ba:	fa00 f00b 	lsl.w	r0, r0, fp
 80080be:	ea4a 0a00 	orr.w	sl, sl, r0
 80080c2:	f10b 0b04 	add.w	fp, fp, #4
 80080c6:	9b05      	ldr	r3, [sp, #20]
 80080c8:	e00d      	b.n	80080e6 <__gethex+0x24a>
 80080ca:	9b05      	ldr	r3, [sp, #20]
 80080cc:	9a08      	ldr	r2, [sp, #32]
 80080ce:	4413      	add	r3, r2
 80080d0:	42bb      	cmp	r3, r7
 80080d2:	d3e1      	bcc.n	8008098 <__gethex+0x1fc>
 80080d4:	4618      	mov	r0, r3
 80080d6:	9a01      	ldr	r2, [sp, #4]
 80080d8:	9903      	ldr	r1, [sp, #12]
 80080da:	9309      	str	r3, [sp, #36]	; 0x24
 80080dc:	f7fe ffba 	bl	8007054 <strncmp>
 80080e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080e2:	2800      	cmp	r0, #0
 80080e4:	d1d8      	bne.n	8008098 <__gethex+0x1fc>
 80080e6:	461e      	mov	r6, r3
 80080e8:	e791      	b.n	800800e <__gethex+0x172>
 80080ea:	1eb9      	subs	r1, r7, #2
 80080ec:	4628      	mov	r0, r5
 80080ee:	f000 fdb6 	bl	8008c5e <__any_on>
 80080f2:	2800      	cmp	r0, #0
 80080f4:	d0b2      	beq.n	800805c <__gethex+0x1c0>
 80080f6:	f04f 0a03 	mov.w	sl, #3
 80080fa:	e7b1      	b.n	8008060 <__gethex+0x1c4>
 80080fc:	da09      	bge.n	8008112 <__gethex+0x276>
 80080fe:	1bf7      	subs	r7, r6, r7
 8008100:	4629      	mov	r1, r5
 8008102:	463a      	mov	r2, r7
 8008104:	9802      	ldr	r0, [sp, #8]
 8008106:	f000 fbd1 	bl	80088ac <__lshift>
 800810a:	4605      	mov	r5, r0
 800810c:	1be4      	subs	r4, r4, r7
 800810e:	f100 0914 	add.w	r9, r0, #20
 8008112:	f04f 0a00 	mov.w	sl, #0
 8008116:	e7a8      	b.n	800806a <__gethex+0x1ce>
 8008118:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800811c:	42a0      	cmp	r0, r4
 800811e:	dd6b      	ble.n	80081f8 <__gethex+0x35c>
 8008120:	1b04      	subs	r4, r0, r4
 8008122:	42a6      	cmp	r6, r4
 8008124:	dc2e      	bgt.n	8008184 <__gethex+0x2e8>
 8008126:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800812a:	2b02      	cmp	r3, #2
 800812c:	d022      	beq.n	8008174 <__gethex+0x2d8>
 800812e:	2b03      	cmp	r3, #3
 8008130:	d024      	beq.n	800817c <__gethex+0x2e0>
 8008132:	2b01      	cmp	r3, #1
 8008134:	d115      	bne.n	8008162 <__gethex+0x2c6>
 8008136:	42a6      	cmp	r6, r4
 8008138:	d113      	bne.n	8008162 <__gethex+0x2c6>
 800813a:	2e01      	cmp	r6, #1
 800813c:	dc0b      	bgt.n	8008156 <__gethex+0x2ba>
 800813e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008142:	9a06      	ldr	r2, [sp, #24]
 8008144:	2762      	movs	r7, #98	; 0x62
 8008146:	6013      	str	r3, [r2, #0]
 8008148:	2301      	movs	r3, #1
 800814a:	612b      	str	r3, [r5, #16]
 800814c:	f8c9 3000 	str.w	r3, [r9]
 8008150:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008152:	601d      	str	r5, [r3, #0]
 8008154:	e72a      	b.n	8007fac <__gethex+0x110>
 8008156:	1e71      	subs	r1, r6, #1
 8008158:	4628      	mov	r0, r5
 800815a:	f000 fd80 	bl	8008c5e <__any_on>
 800815e:	2800      	cmp	r0, #0
 8008160:	d1ed      	bne.n	800813e <__gethex+0x2a2>
 8008162:	4629      	mov	r1, r5
 8008164:	9802      	ldr	r0, [sp, #8]
 8008166:	f000 f9d6 	bl	8008516 <_Bfree>
 800816a:	2300      	movs	r3, #0
 800816c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800816e:	2750      	movs	r7, #80	; 0x50
 8008170:	6013      	str	r3, [r2, #0]
 8008172:	e71b      	b.n	8007fac <__gethex+0x110>
 8008174:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008176:	2b00      	cmp	r3, #0
 8008178:	d0e1      	beq.n	800813e <__gethex+0x2a2>
 800817a:	e7f2      	b.n	8008162 <__gethex+0x2c6>
 800817c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800817e:	2b00      	cmp	r3, #0
 8008180:	d1dd      	bne.n	800813e <__gethex+0x2a2>
 8008182:	e7ee      	b.n	8008162 <__gethex+0x2c6>
 8008184:	1e67      	subs	r7, r4, #1
 8008186:	f1ba 0f00 	cmp.w	sl, #0
 800818a:	d132      	bne.n	80081f2 <__gethex+0x356>
 800818c:	b127      	cbz	r7, 8008198 <__gethex+0x2fc>
 800818e:	4639      	mov	r1, r7
 8008190:	4628      	mov	r0, r5
 8008192:	f000 fd64 	bl	8008c5e <__any_on>
 8008196:	4682      	mov	sl, r0
 8008198:	2301      	movs	r3, #1
 800819a:	117a      	asrs	r2, r7, #5
 800819c:	f007 071f 	and.w	r7, r7, #31
 80081a0:	fa03 f707 	lsl.w	r7, r3, r7
 80081a4:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80081a8:	4621      	mov	r1, r4
 80081aa:	421f      	tst	r7, r3
 80081ac:	f04f 0702 	mov.w	r7, #2
 80081b0:	4628      	mov	r0, r5
 80081b2:	bf18      	it	ne
 80081b4:	f04a 0a02 	orrne.w	sl, sl, #2
 80081b8:	1b36      	subs	r6, r6, r4
 80081ba:	f7ff fe1f 	bl	8007dfc <rshift>
 80081be:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80081c2:	f1ba 0f00 	cmp.w	sl, #0
 80081c6:	d048      	beq.n	800825a <__gethex+0x3be>
 80081c8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80081cc:	2b02      	cmp	r3, #2
 80081ce:	d015      	beq.n	80081fc <__gethex+0x360>
 80081d0:	2b03      	cmp	r3, #3
 80081d2:	d017      	beq.n	8008204 <__gethex+0x368>
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	d109      	bne.n	80081ec <__gethex+0x350>
 80081d8:	f01a 0f02 	tst.w	sl, #2
 80081dc:	d006      	beq.n	80081ec <__gethex+0x350>
 80081de:	f8d9 3000 	ldr.w	r3, [r9]
 80081e2:	ea4a 0a03 	orr.w	sl, sl, r3
 80081e6:	f01a 0f01 	tst.w	sl, #1
 80081ea:	d10e      	bne.n	800820a <__gethex+0x36e>
 80081ec:	f047 0710 	orr.w	r7, r7, #16
 80081f0:	e033      	b.n	800825a <__gethex+0x3be>
 80081f2:	f04f 0a01 	mov.w	sl, #1
 80081f6:	e7cf      	b.n	8008198 <__gethex+0x2fc>
 80081f8:	2701      	movs	r7, #1
 80081fa:	e7e2      	b.n	80081c2 <__gethex+0x326>
 80081fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80081fe:	f1c3 0301 	rsb	r3, r3, #1
 8008202:	9315      	str	r3, [sp, #84]	; 0x54
 8008204:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008206:	2b00      	cmp	r3, #0
 8008208:	d0f0      	beq.n	80081ec <__gethex+0x350>
 800820a:	f04f 0c00 	mov.w	ip, #0
 800820e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8008212:	f105 0314 	add.w	r3, r5, #20
 8008216:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800821a:	eb03 010a 	add.w	r1, r3, sl
 800821e:	4618      	mov	r0, r3
 8008220:	f853 2b04 	ldr.w	r2, [r3], #4
 8008224:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8008228:	d01c      	beq.n	8008264 <__gethex+0x3c8>
 800822a:	3201      	adds	r2, #1
 800822c:	6002      	str	r2, [r0, #0]
 800822e:	2f02      	cmp	r7, #2
 8008230:	f105 0314 	add.w	r3, r5, #20
 8008234:	d138      	bne.n	80082a8 <__gethex+0x40c>
 8008236:	f8d8 2000 	ldr.w	r2, [r8]
 800823a:	3a01      	subs	r2, #1
 800823c:	42b2      	cmp	r2, r6
 800823e:	d10a      	bne.n	8008256 <__gethex+0x3ba>
 8008240:	2201      	movs	r2, #1
 8008242:	1171      	asrs	r1, r6, #5
 8008244:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008248:	f006 061f 	and.w	r6, r6, #31
 800824c:	fa02 f606 	lsl.w	r6, r2, r6
 8008250:	421e      	tst	r6, r3
 8008252:	bf18      	it	ne
 8008254:	4617      	movne	r7, r2
 8008256:	f047 0720 	orr.w	r7, r7, #32
 800825a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800825c:	601d      	str	r5, [r3, #0]
 800825e:	9b06      	ldr	r3, [sp, #24]
 8008260:	601c      	str	r4, [r3, #0]
 8008262:	e6a3      	b.n	8007fac <__gethex+0x110>
 8008264:	4299      	cmp	r1, r3
 8008266:	f843 cc04 	str.w	ip, [r3, #-4]
 800826a:	d8d8      	bhi.n	800821e <__gethex+0x382>
 800826c:	68ab      	ldr	r3, [r5, #8]
 800826e:	4599      	cmp	r9, r3
 8008270:	db12      	blt.n	8008298 <__gethex+0x3fc>
 8008272:	6869      	ldr	r1, [r5, #4]
 8008274:	9802      	ldr	r0, [sp, #8]
 8008276:	3101      	adds	r1, #1
 8008278:	f000 f919 	bl	80084ae <_Balloc>
 800827c:	4683      	mov	fp, r0
 800827e:	692a      	ldr	r2, [r5, #16]
 8008280:	f105 010c 	add.w	r1, r5, #12
 8008284:	3202      	adds	r2, #2
 8008286:	0092      	lsls	r2, r2, #2
 8008288:	300c      	adds	r0, #12
 800828a:	f000 f905 	bl	8008498 <memcpy>
 800828e:	4629      	mov	r1, r5
 8008290:	9802      	ldr	r0, [sp, #8]
 8008292:	f000 f940 	bl	8008516 <_Bfree>
 8008296:	465d      	mov	r5, fp
 8008298:	692b      	ldr	r3, [r5, #16]
 800829a:	1c5a      	adds	r2, r3, #1
 800829c:	612a      	str	r2, [r5, #16]
 800829e:	2201      	movs	r2, #1
 80082a0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80082a4:	615a      	str	r2, [r3, #20]
 80082a6:	e7c2      	b.n	800822e <__gethex+0x392>
 80082a8:	692a      	ldr	r2, [r5, #16]
 80082aa:	454a      	cmp	r2, r9
 80082ac:	dd0b      	ble.n	80082c6 <__gethex+0x42a>
 80082ae:	2101      	movs	r1, #1
 80082b0:	4628      	mov	r0, r5
 80082b2:	f7ff fda3 	bl	8007dfc <rshift>
 80082b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80082ba:	3401      	adds	r4, #1
 80082bc:	42a3      	cmp	r3, r4
 80082be:	f6ff aed8 	blt.w	8008072 <__gethex+0x1d6>
 80082c2:	2701      	movs	r7, #1
 80082c4:	e7c7      	b.n	8008256 <__gethex+0x3ba>
 80082c6:	f016 061f 	ands.w	r6, r6, #31
 80082ca:	d0fa      	beq.n	80082c2 <__gethex+0x426>
 80082cc:	449a      	add	sl, r3
 80082ce:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80082d2:	f000 f9b0 	bl	8008636 <__hi0bits>
 80082d6:	f1c6 0620 	rsb	r6, r6, #32
 80082da:	42b0      	cmp	r0, r6
 80082dc:	dbe7      	blt.n	80082ae <__gethex+0x412>
 80082de:	e7f0      	b.n	80082c2 <__gethex+0x426>

080082e0 <L_shift>:
 80082e0:	f1c2 0208 	rsb	r2, r2, #8
 80082e4:	0092      	lsls	r2, r2, #2
 80082e6:	b570      	push	{r4, r5, r6, lr}
 80082e8:	f1c2 0620 	rsb	r6, r2, #32
 80082ec:	6843      	ldr	r3, [r0, #4]
 80082ee:	6804      	ldr	r4, [r0, #0]
 80082f0:	fa03 f506 	lsl.w	r5, r3, r6
 80082f4:	432c      	orrs	r4, r5
 80082f6:	40d3      	lsrs	r3, r2
 80082f8:	6004      	str	r4, [r0, #0]
 80082fa:	f840 3f04 	str.w	r3, [r0, #4]!
 80082fe:	4288      	cmp	r0, r1
 8008300:	d3f4      	bcc.n	80082ec <L_shift+0xc>
 8008302:	bd70      	pop	{r4, r5, r6, pc}

08008304 <__match>:
 8008304:	b530      	push	{r4, r5, lr}
 8008306:	6803      	ldr	r3, [r0, #0]
 8008308:	3301      	adds	r3, #1
 800830a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800830e:	b914      	cbnz	r4, 8008316 <__match+0x12>
 8008310:	6003      	str	r3, [r0, #0]
 8008312:	2001      	movs	r0, #1
 8008314:	bd30      	pop	{r4, r5, pc}
 8008316:	f813 2b01 	ldrb.w	r2, [r3], #1
 800831a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800831e:	2d19      	cmp	r5, #25
 8008320:	bf98      	it	ls
 8008322:	3220      	addls	r2, #32
 8008324:	42a2      	cmp	r2, r4
 8008326:	d0f0      	beq.n	800830a <__match+0x6>
 8008328:	2000      	movs	r0, #0
 800832a:	e7f3      	b.n	8008314 <__match+0x10>

0800832c <__hexnan>:
 800832c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008330:	2500      	movs	r5, #0
 8008332:	680b      	ldr	r3, [r1, #0]
 8008334:	4682      	mov	sl, r0
 8008336:	115f      	asrs	r7, r3, #5
 8008338:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800833c:	f013 031f 	ands.w	r3, r3, #31
 8008340:	bf18      	it	ne
 8008342:	3704      	addne	r7, #4
 8008344:	1f3e      	subs	r6, r7, #4
 8008346:	4690      	mov	r8, r2
 8008348:	46b1      	mov	r9, r6
 800834a:	4634      	mov	r4, r6
 800834c:	46ab      	mov	fp, r5
 800834e:	b087      	sub	sp, #28
 8008350:	6801      	ldr	r1, [r0, #0]
 8008352:	9301      	str	r3, [sp, #4]
 8008354:	f847 5c04 	str.w	r5, [r7, #-4]
 8008358:	9502      	str	r5, [sp, #8]
 800835a:	784a      	ldrb	r2, [r1, #1]
 800835c:	1c4b      	adds	r3, r1, #1
 800835e:	9303      	str	r3, [sp, #12]
 8008360:	b342      	cbz	r2, 80083b4 <__hexnan+0x88>
 8008362:	4610      	mov	r0, r2
 8008364:	9105      	str	r1, [sp, #20]
 8008366:	9204      	str	r2, [sp, #16]
 8008368:	f7ff fd83 	bl	8007e72 <__hexdig_fun>
 800836c:	2800      	cmp	r0, #0
 800836e:	d143      	bne.n	80083f8 <__hexnan+0xcc>
 8008370:	9a04      	ldr	r2, [sp, #16]
 8008372:	9905      	ldr	r1, [sp, #20]
 8008374:	2a20      	cmp	r2, #32
 8008376:	d818      	bhi.n	80083aa <__hexnan+0x7e>
 8008378:	9b02      	ldr	r3, [sp, #8]
 800837a:	459b      	cmp	fp, r3
 800837c:	dd13      	ble.n	80083a6 <__hexnan+0x7a>
 800837e:	454c      	cmp	r4, r9
 8008380:	d206      	bcs.n	8008390 <__hexnan+0x64>
 8008382:	2d07      	cmp	r5, #7
 8008384:	dc04      	bgt.n	8008390 <__hexnan+0x64>
 8008386:	462a      	mov	r2, r5
 8008388:	4649      	mov	r1, r9
 800838a:	4620      	mov	r0, r4
 800838c:	f7ff ffa8 	bl	80082e0 <L_shift>
 8008390:	4544      	cmp	r4, r8
 8008392:	d944      	bls.n	800841e <__hexnan+0xf2>
 8008394:	2300      	movs	r3, #0
 8008396:	f1a4 0904 	sub.w	r9, r4, #4
 800839a:	f844 3c04 	str.w	r3, [r4, #-4]
 800839e:	461d      	mov	r5, r3
 80083a0:	464c      	mov	r4, r9
 80083a2:	f8cd b008 	str.w	fp, [sp, #8]
 80083a6:	9903      	ldr	r1, [sp, #12]
 80083a8:	e7d7      	b.n	800835a <__hexnan+0x2e>
 80083aa:	2a29      	cmp	r2, #41	; 0x29
 80083ac:	d14a      	bne.n	8008444 <__hexnan+0x118>
 80083ae:	3102      	adds	r1, #2
 80083b0:	f8ca 1000 	str.w	r1, [sl]
 80083b4:	f1bb 0f00 	cmp.w	fp, #0
 80083b8:	d044      	beq.n	8008444 <__hexnan+0x118>
 80083ba:	454c      	cmp	r4, r9
 80083bc:	d206      	bcs.n	80083cc <__hexnan+0xa0>
 80083be:	2d07      	cmp	r5, #7
 80083c0:	dc04      	bgt.n	80083cc <__hexnan+0xa0>
 80083c2:	462a      	mov	r2, r5
 80083c4:	4649      	mov	r1, r9
 80083c6:	4620      	mov	r0, r4
 80083c8:	f7ff ff8a 	bl	80082e0 <L_shift>
 80083cc:	4544      	cmp	r4, r8
 80083ce:	d928      	bls.n	8008422 <__hexnan+0xf6>
 80083d0:	4643      	mov	r3, r8
 80083d2:	f854 2b04 	ldr.w	r2, [r4], #4
 80083d6:	42a6      	cmp	r6, r4
 80083d8:	f843 2b04 	str.w	r2, [r3], #4
 80083dc:	d2f9      	bcs.n	80083d2 <__hexnan+0xa6>
 80083de:	2200      	movs	r2, #0
 80083e0:	f843 2b04 	str.w	r2, [r3], #4
 80083e4:	429e      	cmp	r6, r3
 80083e6:	d2fb      	bcs.n	80083e0 <__hexnan+0xb4>
 80083e8:	6833      	ldr	r3, [r6, #0]
 80083ea:	b91b      	cbnz	r3, 80083f4 <__hexnan+0xc8>
 80083ec:	4546      	cmp	r6, r8
 80083ee:	d127      	bne.n	8008440 <__hexnan+0x114>
 80083f0:	2301      	movs	r3, #1
 80083f2:	6033      	str	r3, [r6, #0]
 80083f4:	2005      	movs	r0, #5
 80083f6:	e026      	b.n	8008446 <__hexnan+0x11a>
 80083f8:	3501      	adds	r5, #1
 80083fa:	2d08      	cmp	r5, #8
 80083fc:	f10b 0b01 	add.w	fp, fp, #1
 8008400:	dd06      	ble.n	8008410 <__hexnan+0xe4>
 8008402:	4544      	cmp	r4, r8
 8008404:	d9cf      	bls.n	80083a6 <__hexnan+0x7a>
 8008406:	2300      	movs	r3, #0
 8008408:	2501      	movs	r5, #1
 800840a:	f844 3c04 	str.w	r3, [r4, #-4]
 800840e:	3c04      	subs	r4, #4
 8008410:	6822      	ldr	r2, [r4, #0]
 8008412:	f000 000f 	and.w	r0, r0, #15
 8008416:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800841a:	6020      	str	r0, [r4, #0]
 800841c:	e7c3      	b.n	80083a6 <__hexnan+0x7a>
 800841e:	2508      	movs	r5, #8
 8008420:	e7c1      	b.n	80083a6 <__hexnan+0x7a>
 8008422:	9b01      	ldr	r3, [sp, #4]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d0df      	beq.n	80083e8 <__hexnan+0xbc>
 8008428:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800842c:	f1c3 0320 	rsb	r3, r3, #32
 8008430:	fa22 f303 	lsr.w	r3, r2, r3
 8008434:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8008438:	401a      	ands	r2, r3
 800843a:	f847 2c04 	str.w	r2, [r7, #-4]
 800843e:	e7d3      	b.n	80083e8 <__hexnan+0xbc>
 8008440:	3e04      	subs	r6, #4
 8008442:	e7d1      	b.n	80083e8 <__hexnan+0xbc>
 8008444:	2004      	movs	r0, #4
 8008446:	b007      	add	sp, #28
 8008448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800844c <__locale_ctype_ptr_l>:
 800844c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8008450:	4770      	bx	lr
	...

08008454 <__locale_ctype_ptr>:
 8008454:	4b04      	ldr	r3, [pc, #16]	; (8008468 <__locale_ctype_ptr+0x14>)
 8008456:	4a05      	ldr	r2, [pc, #20]	; (800846c <__locale_ctype_ptr+0x18>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	6a1b      	ldr	r3, [r3, #32]
 800845c:	2b00      	cmp	r3, #0
 800845e:	bf08      	it	eq
 8008460:	4613      	moveq	r3, r2
 8008462:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8008466:	4770      	bx	lr
 8008468:	20000010 	.word	0x20000010
 800846c:	20000074 	.word	0x20000074

08008470 <__localeconv_l>:
 8008470:	30f0      	adds	r0, #240	; 0xf0
 8008472:	4770      	bx	lr

08008474 <__ascii_mbtowc>:
 8008474:	b082      	sub	sp, #8
 8008476:	b901      	cbnz	r1, 800847a <__ascii_mbtowc+0x6>
 8008478:	a901      	add	r1, sp, #4
 800847a:	b142      	cbz	r2, 800848e <__ascii_mbtowc+0x1a>
 800847c:	b14b      	cbz	r3, 8008492 <__ascii_mbtowc+0x1e>
 800847e:	7813      	ldrb	r3, [r2, #0]
 8008480:	600b      	str	r3, [r1, #0]
 8008482:	7812      	ldrb	r2, [r2, #0]
 8008484:	1c10      	adds	r0, r2, #0
 8008486:	bf18      	it	ne
 8008488:	2001      	movne	r0, #1
 800848a:	b002      	add	sp, #8
 800848c:	4770      	bx	lr
 800848e:	4610      	mov	r0, r2
 8008490:	e7fb      	b.n	800848a <__ascii_mbtowc+0x16>
 8008492:	f06f 0001 	mvn.w	r0, #1
 8008496:	e7f8      	b.n	800848a <__ascii_mbtowc+0x16>

08008498 <memcpy>:
 8008498:	b510      	push	{r4, lr}
 800849a:	1e43      	subs	r3, r0, #1
 800849c:	440a      	add	r2, r1
 800849e:	4291      	cmp	r1, r2
 80084a0:	d100      	bne.n	80084a4 <memcpy+0xc>
 80084a2:	bd10      	pop	{r4, pc}
 80084a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084ac:	e7f7      	b.n	800849e <memcpy+0x6>

080084ae <_Balloc>:
 80084ae:	b570      	push	{r4, r5, r6, lr}
 80084b0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80084b2:	4604      	mov	r4, r0
 80084b4:	460e      	mov	r6, r1
 80084b6:	b93d      	cbnz	r5, 80084c8 <_Balloc+0x1a>
 80084b8:	2010      	movs	r0, #16
 80084ba:	f001 fb49 	bl	8009b50 <malloc>
 80084be:	6260      	str	r0, [r4, #36]	; 0x24
 80084c0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80084c4:	6005      	str	r5, [r0, #0]
 80084c6:	60c5      	str	r5, [r0, #12]
 80084c8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80084ca:	68eb      	ldr	r3, [r5, #12]
 80084cc:	b183      	cbz	r3, 80084f0 <_Balloc+0x42>
 80084ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084d0:	68db      	ldr	r3, [r3, #12]
 80084d2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80084d6:	b9b8      	cbnz	r0, 8008508 <_Balloc+0x5a>
 80084d8:	2101      	movs	r1, #1
 80084da:	fa01 f506 	lsl.w	r5, r1, r6
 80084de:	1d6a      	adds	r2, r5, #5
 80084e0:	0092      	lsls	r2, r2, #2
 80084e2:	4620      	mov	r0, r4
 80084e4:	f000 fbdc 	bl	8008ca0 <_calloc_r>
 80084e8:	b160      	cbz	r0, 8008504 <_Balloc+0x56>
 80084ea:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80084ee:	e00e      	b.n	800850e <_Balloc+0x60>
 80084f0:	2221      	movs	r2, #33	; 0x21
 80084f2:	2104      	movs	r1, #4
 80084f4:	4620      	mov	r0, r4
 80084f6:	f000 fbd3 	bl	8008ca0 <_calloc_r>
 80084fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084fc:	60e8      	str	r0, [r5, #12]
 80084fe:	68db      	ldr	r3, [r3, #12]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d1e4      	bne.n	80084ce <_Balloc+0x20>
 8008504:	2000      	movs	r0, #0
 8008506:	bd70      	pop	{r4, r5, r6, pc}
 8008508:	6802      	ldr	r2, [r0, #0]
 800850a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800850e:	2300      	movs	r3, #0
 8008510:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008514:	e7f7      	b.n	8008506 <_Balloc+0x58>

08008516 <_Bfree>:
 8008516:	b570      	push	{r4, r5, r6, lr}
 8008518:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800851a:	4606      	mov	r6, r0
 800851c:	460d      	mov	r5, r1
 800851e:	b93c      	cbnz	r4, 8008530 <_Bfree+0x1a>
 8008520:	2010      	movs	r0, #16
 8008522:	f001 fb15 	bl	8009b50 <malloc>
 8008526:	6270      	str	r0, [r6, #36]	; 0x24
 8008528:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800852c:	6004      	str	r4, [r0, #0]
 800852e:	60c4      	str	r4, [r0, #12]
 8008530:	b13d      	cbz	r5, 8008542 <_Bfree+0x2c>
 8008532:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008534:	686a      	ldr	r2, [r5, #4]
 8008536:	68db      	ldr	r3, [r3, #12]
 8008538:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800853c:	6029      	str	r1, [r5, #0]
 800853e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008542:	bd70      	pop	{r4, r5, r6, pc}

08008544 <__multadd>:
 8008544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008548:	461f      	mov	r7, r3
 800854a:	4606      	mov	r6, r0
 800854c:	460c      	mov	r4, r1
 800854e:	2300      	movs	r3, #0
 8008550:	690d      	ldr	r5, [r1, #16]
 8008552:	f101 0c14 	add.w	ip, r1, #20
 8008556:	f8dc 0000 	ldr.w	r0, [ip]
 800855a:	3301      	adds	r3, #1
 800855c:	b281      	uxth	r1, r0
 800855e:	fb02 7101 	mla	r1, r2, r1, r7
 8008562:	0c00      	lsrs	r0, r0, #16
 8008564:	0c0f      	lsrs	r7, r1, #16
 8008566:	fb02 7000 	mla	r0, r2, r0, r7
 800856a:	b289      	uxth	r1, r1
 800856c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008570:	429d      	cmp	r5, r3
 8008572:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008576:	f84c 1b04 	str.w	r1, [ip], #4
 800857a:	dcec      	bgt.n	8008556 <__multadd+0x12>
 800857c:	b1d7      	cbz	r7, 80085b4 <__multadd+0x70>
 800857e:	68a3      	ldr	r3, [r4, #8]
 8008580:	42ab      	cmp	r3, r5
 8008582:	dc12      	bgt.n	80085aa <__multadd+0x66>
 8008584:	6861      	ldr	r1, [r4, #4]
 8008586:	4630      	mov	r0, r6
 8008588:	3101      	adds	r1, #1
 800858a:	f7ff ff90 	bl	80084ae <_Balloc>
 800858e:	4680      	mov	r8, r0
 8008590:	6922      	ldr	r2, [r4, #16]
 8008592:	f104 010c 	add.w	r1, r4, #12
 8008596:	3202      	adds	r2, #2
 8008598:	0092      	lsls	r2, r2, #2
 800859a:	300c      	adds	r0, #12
 800859c:	f7ff ff7c 	bl	8008498 <memcpy>
 80085a0:	4621      	mov	r1, r4
 80085a2:	4630      	mov	r0, r6
 80085a4:	f7ff ffb7 	bl	8008516 <_Bfree>
 80085a8:	4644      	mov	r4, r8
 80085aa:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80085ae:	3501      	adds	r5, #1
 80085b0:	615f      	str	r7, [r3, #20]
 80085b2:	6125      	str	r5, [r4, #16]
 80085b4:	4620      	mov	r0, r4
 80085b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080085ba <__s2b>:
 80085ba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085be:	4615      	mov	r5, r2
 80085c0:	2209      	movs	r2, #9
 80085c2:	461f      	mov	r7, r3
 80085c4:	3308      	adds	r3, #8
 80085c6:	460c      	mov	r4, r1
 80085c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80085cc:	4606      	mov	r6, r0
 80085ce:	2201      	movs	r2, #1
 80085d0:	2100      	movs	r1, #0
 80085d2:	429a      	cmp	r2, r3
 80085d4:	db20      	blt.n	8008618 <__s2b+0x5e>
 80085d6:	4630      	mov	r0, r6
 80085d8:	f7ff ff69 	bl	80084ae <_Balloc>
 80085dc:	9b08      	ldr	r3, [sp, #32]
 80085de:	2d09      	cmp	r5, #9
 80085e0:	6143      	str	r3, [r0, #20]
 80085e2:	f04f 0301 	mov.w	r3, #1
 80085e6:	6103      	str	r3, [r0, #16]
 80085e8:	dd19      	ble.n	800861e <__s2b+0x64>
 80085ea:	f104 0809 	add.w	r8, r4, #9
 80085ee:	46c1      	mov	r9, r8
 80085f0:	442c      	add	r4, r5
 80085f2:	f819 3b01 	ldrb.w	r3, [r9], #1
 80085f6:	4601      	mov	r1, r0
 80085f8:	3b30      	subs	r3, #48	; 0x30
 80085fa:	220a      	movs	r2, #10
 80085fc:	4630      	mov	r0, r6
 80085fe:	f7ff ffa1 	bl	8008544 <__multadd>
 8008602:	45a1      	cmp	r9, r4
 8008604:	d1f5      	bne.n	80085f2 <__s2b+0x38>
 8008606:	eb08 0405 	add.w	r4, r8, r5
 800860a:	3c08      	subs	r4, #8
 800860c:	1b2d      	subs	r5, r5, r4
 800860e:	1963      	adds	r3, r4, r5
 8008610:	42bb      	cmp	r3, r7
 8008612:	db07      	blt.n	8008624 <__s2b+0x6a>
 8008614:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008618:	0052      	lsls	r2, r2, #1
 800861a:	3101      	adds	r1, #1
 800861c:	e7d9      	b.n	80085d2 <__s2b+0x18>
 800861e:	340a      	adds	r4, #10
 8008620:	2509      	movs	r5, #9
 8008622:	e7f3      	b.n	800860c <__s2b+0x52>
 8008624:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008628:	4601      	mov	r1, r0
 800862a:	3b30      	subs	r3, #48	; 0x30
 800862c:	220a      	movs	r2, #10
 800862e:	4630      	mov	r0, r6
 8008630:	f7ff ff88 	bl	8008544 <__multadd>
 8008634:	e7eb      	b.n	800860e <__s2b+0x54>

08008636 <__hi0bits>:
 8008636:	0c02      	lsrs	r2, r0, #16
 8008638:	0412      	lsls	r2, r2, #16
 800863a:	4603      	mov	r3, r0
 800863c:	b9b2      	cbnz	r2, 800866c <__hi0bits+0x36>
 800863e:	0403      	lsls	r3, r0, #16
 8008640:	2010      	movs	r0, #16
 8008642:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008646:	bf04      	itt	eq
 8008648:	021b      	lsleq	r3, r3, #8
 800864a:	3008      	addeq	r0, #8
 800864c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008650:	bf04      	itt	eq
 8008652:	011b      	lsleq	r3, r3, #4
 8008654:	3004      	addeq	r0, #4
 8008656:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800865a:	bf04      	itt	eq
 800865c:	009b      	lsleq	r3, r3, #2
 800865e:	3002      	addeq	r0, #2
 8008660:	2b00      	cmp	r3, #0
 8008662:	db06      	blt.n	8008672 <__hi0bits+0x3c>
 8008664:	005b      	lsls	r3, r3, #1
 8008666:	d503      	bpl.n	8008670 <__hi0bits+0x3a>
 8008668:	3001      	adds	r0, #1
 800866a:	4770      	bx	lr
 800866c:	2000      	movs	r0, #0
 800866e:	e7e8      	b.n	8008642 <__hi0bits+0xc>
 8008670:	2020      	movs	r0, #32
 8008672:	4770      	bx	lr

08008674 <__lo0bits>:
 8008674:	6803      	ldr	r3, [r0, #0]
 8008676:	4601      	mov	r1, r0
 8008678:	f013 0207 	ands.w	r2, r3, #7
 800867c:	d00b      	beq.n	8008696 <__lo0bits+0x22>
 800867e:	07da      	lsls	r2, r3, #31
 8008680:	d423      	bmi.n	80086ca <__lo0bits+0x56>
 8008682:	0798      	lsls	r0, r3, #30
 8008684:	bf49      	itett	mi
 8008686:	085b      	lsrmi	r3, r3, #1
 8008688:	089b      	lsrpl	r3, r3, #2
 800868a:	2001      	movmi	r0, #1
 800868c:	600b      	strmi	r3, [r1, #0]
 800868e:	bf5c      	itt	pl
 8008690:	600b      	strpl	r3, [r1, #0]
 8008692:	2002      	movpl	r0, #2
 8008694:	4770      	bx	lr
 8008696:	b298      	uxth	r0, r3
 8008698:	b9a8      	cbnz	r0, 80086c6 <__lo0bits+0x52>
 800869a:	2010      	movs	r0, #16
 800869c:	0c1b      	lsrs	r3, r3, #16
 800869e:	f013 0fff 	tst.w	r3, #255	; 0xff
 80086a2:	bf04      	itt	eq
 80086a4:	0a1b      	lsreq	r3, r3, #8
 80086a6:	3008      	addeq	r0, #8
 80086a8:	071a      	lsls	r2, r3, #28
 80086aa:	bf04      	itt	eq
 80086ac:	091b      	lsreq	r3, r3, #4
 80086ae:	3004      	addeq	r0, #4
 80086b0:	079a      	lsls	r2, r3, #30
 80086b2:	bf04      	itt	eq
 80086b4:	089b      	lsreq	r3, r3, #2
 80086b6:	3002      	addeq	r0, #2
 80086b8:	07da      	lsls	r2, r3, #31
 80086ba:	d402      	bmi.n	80086c2 <__lo0bits+0x4e>
 80086bc:	085b      	lsrs	r3, r3, #1
 80086be:	d006      	beq.n	80086ce <__lo0bits+0x5a>
 80086c0:	3001      	adds	r0, #1
 80086c2:	600b      	str	r3, [r1, #0]
 80086c4:	4770      	bx	lr
 80086c6:	4610      	mov	r0, r2
 80086c8:	e7e9      	b.n	800869e <__lo0bits+0x2a>
 80086ca:	2000      	movs	r0, #0
 80086cc:	4770      	bx	lr
 80086ce:	2020      	movs	r0, #32
 80086d0:	4770      	bx	lr

080086d2 <__i2b>:
 80086d2:	b510      	push	{r4, lr}
 80086d4:	460c      	mov	r4, r1
 80086d6:	2101      	movs	r1, #1
 80086d8:	f7ff fee9 	bl	80084ae <_Balloc>
 80086dc:	2201      	movs	r2, #1
 80086de:	6144      	str	r4, [r0, #20]
 80086e0:	6102      	str	r2, [r0, #16]
 80086e2:	bd10      	pop	{r4, pc}

080086e4 <__multiply>:
 80086e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086e8:	4614      	mov	r4, r2
 80086ea:	690a      	ldr	r2, [r1, #16]
 80086ec:	6923      	ldr	r3, [r4, #16]
 80086ee:	4688      	mov	r8, r1
 80086f0:	429a      	cmp	r2, r3
 80086f2:	bfbe      	ittt	lt
 80086f4:	460b      	movlt	r3, r1
 80086f6:	46a0      	movlt	r8, r4
 80086f8:	461c      	movlt	r4, r3
 80086fa:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80086fe:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008702:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008706:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800870a:	eb07 0609 	add.w	r6, r7, r9
 800870e:	42b3      	cmp	r3, r6
 8008710:	bfb8      	it	lt
 8008712:	3101      	addlt	r1, #1
 8008714:	f7ff fecb 	bl	80084ae <_Balloc>
 8008718:	f100 0514 	add.w	r5, r0, #20
 800871c:	462b      	mov	r3, r5
 800871e:	2200      	movs	r2, #0
 8008720:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008724:	4573      	cmp	r3, lr
 8008726:	d316      	bcc.n	8008756 <__multiply+0x72>
 8008728:	f104 0214 	add.w	r2, r4, #20
 800872c:	f108 0114 	add.w	r1, r8, #20
 8008730:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008734:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008738:	9300      	str	r3, [sp, #0]
 800873a:	9b00      	ldr	r3, [sp, #0]
 800873c:	9201      	str	r2, [sp, #4]
 800873e:	4293      	cmp	r3, r2
 8008740:	d80c      	bhi.n	800875c <__multiply+0x78>
 8008742:	2e00      	cmp	r6, #0
 8008744:	dd03      	ble.n	800874e <__multiply+0x6a>
 8008746:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800874a:	2b00      	cmp	r3, #0
 800874c:	d05d      	beq.n	800880a <__multiply+0x126>
 800874e:	6106      	str	r6, [r0, #16]
 8008750:	b003      	add	sp, #12
 8008752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008756:	f843 2b04 	str.w	r2, [r3], #4
 800875a:	e7e3      	b.n	8008724 <__multiply+0x40>
 800875c:	f8b2 b000 	ldrh.w	fp, [r2]
 8008760:	f1bb 0f00 	cmp.w	fp, #0
 8008764:	d023      	beq.n	80087ae <__multiply+0xca>
 8008766:	4689      	mov	r9, r1
 8008768:	46ac      	mov	ip, r5
 800876a:	f04f 0800 	mov.w	r8, #0
 800876e:	f859 4b04 	ldr.w	r4, [r9], #4
 8008772:	f8dc a000 	ldr.w	sl, [ip]
 8008776:	b2a3      	uxth	r3, r4
 8008778:	fa1f fa8a 	uxth.w	sl, sl
 800877c:	fb0b a303 	mla	r3, fp, r3, sl
 8008780:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008784:	f8dc 4000 	ldr.w	r4, [ip]
 8008788:	4443      	add	r3, r8
 800878a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800878e:	fb0b 840a 	mla	r4, fp, sl, r8
 8008792:	46e2      	mov	sl, ip
 8008794:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008798:	b29b      	uxth	r3, r3
 800879a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800879e:	454f      	cmp	r7, r9
 80087a0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80087a4:	f84a 3b04 	str.w	r3, [sl], #4
 80087a8:	d82b      	bhi.n	8008802 <__multiply+0x11e>
 80087aa:	f8cc 8004 	str.w	r8, [ip, #4]
 80087ae:	9b01      	ldr	r3, [sp, #4]
 80087b0:	3204      	adds	r2, #4
 80087b2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80087b6:	f1ba 0f00 	cmp.w	sl, #0
 80087ba:	d020      	beq.n	80087fe <__multiply+0x11a>
 80087bc:	4689      	mov	r9, r1
 80087be:	46a8      	mov	r8, r5
 80087c0:	f04f 0b00 	mov.w	fp, #0
 80087c4:	682b      	ldr	r3, [r5, #0]
 80087c6:	f8b9 c000 	ldrh.w	ip, [r9]
 80087ca:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80087ce:	b29b      	uxth	r3, r3
 80087d0:	fb0a 440c 	mla	r4, sl, ip, r4
 80087d4:	46c4      	mov	ip, r8
 80087d6:	445c      	add	r4, fp
 80087d8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80087dc:	f84c 3b04 	str.w	r3, [ip], #4
 80087e0:	f859 3b04 	ldr.w	r3, [r9], #4
 80087e4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80087e8:	0c1b      	lsrs	r3, r3, #16
 80087ea:	fb0a b303 	mla	r3, sl, r3, fp
 80087ee:	454f      	cmp	r7, r9
 80087f0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80087f4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80087f8:	d805      	bhi.n	8008806 <__multiply+0x122>
 80087fa:	f8c8 3004 	str.w	r3, [r8, #4]
 80087fe:	3504      	adds	r5, #4
 8008800:	e79b      	b.n	800873a <__multiply+0x56>
 8008802:	46d4      	mov	ip, sl
 8008804:	e7b3      	b.n	800876e <__multiply+0x8a>
 8008806:	46e0      	mov	r8, ip
 8008808:	e7dd      	b.n	80087c6 <__multiply+0xe2>
 800880a:	3e01      	subs	r6, #1
 800880c:	e799      	b.n	8008742 <__multiply+0x5e>
	...

08008810 <__pow5mult>:
 8008810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008814:	4615      	mov	r5, r2
 8008816:	f012 0203 	ands.w	r2, r2, #3
 800881a:	4606      	mov	r6, r0
 800881c:	460f      	mov	r7, r1
 800881e:	d007      	beq.n	8008830 <__pow5mult+0x20>
 8008820:	4c21      	ldr	r4, [pc, #132]	; (80088a8 <__pow5mult+0x98>)
 8008822:	3a01      	subs	r2, #1
 8008824:	2300      	movs	r3, #0
 8008826:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800882a:	f7ff fe8b 	bl	8008544 <__multadd>
 800882e:	4607      	mov	r7, r0
 8008830:	10ad      	asrs	r5, r5, #2
 8008832:	d035      	beq.n	80088a0 <__pow5mult+0x90>
 8008834:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008836:	b93c      	cbnz	r4, 8008848 <__pow5mult+0x38>
 8008838:	2010      	movs	r0, #16
 800883a:	f001 f989 	bl	8009b50 <malloc>
 800883e:	6270      	str	r0, [r6, #36]	; 0x24
 8008840:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008844:	6004      	str	r4, [r0, #0]
 8008846:	60c4      	str	r4, [r0, #12]
 8008848:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800884c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008850:	b94c      	cbnz	r4, 8008866 <__pow5mult+0x56>
 8008852:	f240 2171 	movw	r1, #625	; 0x271
 8008856:	4630      	mov	r0, r6
 8008858:	f7ff ff3b 	bl	80086d2 <__i2b>
 800885c:	2300      	movs	r3, #0
 800885e:	4604      	mov	r4, r0
 8008860:	f8c8 0008 	str.w	r0, [r8, #8]
 8008864:	6003      	str	r3, [r0, #0]
 8008866:	f04f 0800 	mov.w	r8, #0
 800886a:	07eb      	lsls	r3, r5, #31
 800886c:	d50a      	bpl.n	8008884 <__pow5mult+0x74>
 800886e:	4639      	mov	r1, r7
 8008870:	4622      	mov	r2, r4
 8008872:	4630      	mov	r0, r6
 8008874:	f7ff ff36 	bl	80086e4 <__multiply>
 8008878:	4681      	mov	r9, r0
 800887a:	4639      	mov	r1, r7
 800887c:	4630      	mov	r0, r6
 800887e:	f7ff fe4a 	bl	8008516 <_Bfree>
 8008882:	464f      	mov	r7, r9
 8008884:	106d      	asrs	r5, r5, #1
 8008886:	d00b      	beq.n	80088a0 <__pow5mult+0x90>
 8008888:	6820      	ldr	r0, [r4, #0]
 800888a:	b938      	cbnz	r0, 800889c <__pow5mult+0x8c>
 800888c:	4622      	mov	r2, r4
 800888e:	4621      	mov	r1, r4
 8008890:	4630      	mov	r0, r6
 8008892:	f7ff ff27 	bl	80086e4 <__multiply>
 8008896:	6020      	str	r0, [r4, #0]
 8008898:	f8c0 8000 	str.w	r8, [r0]
 800889c:	4604      	mov	r4, r0
 800889e:	e7e4      	b.n	800886a <__pow5mult+0x5a>
 80088a0:	4638      	mov	r0, r7
 80088a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088a6:	bf00      	nop
 80088a8:	08009fb8 	.word	0x08009fb8

080088ac <__lshift>:
 80088ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088b0:	460c      	mov	r4, r1
 80088b2:	4607      	mov	r7, r0
 80088b4:	4616      	mov	r6, r2
 80088b6:	6923      	ldr	r3, [r4, #16]
 80088b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80088bc:	eb0a 0903 	add.w	r9, sl, r3
 80088c0:	6849      	ldr	r1, [r1, #4]
 80088c2:	68a3      	ldr	r3, [r4, #8]
 80088c4:	f109 0501 	add.w	r5, r9, #1
 80088c8:	42ab      	cmp	r3, r5
 80088ca:	db32      	blt.n	8008932 <__lshift+0x86>
 80088cc:	4638      	mov	r0, r7
 80088ce:	f7ff fdee 	bl	80084ae <_Balloc>
 80088d2:	2300      	movs	r3, #0
 80088d4:	4680      	mov	r8, r0
 80088d6:	461a      	mov	r2, r3
 80088d8:	f100 0114 	add.w	r1, r0, #20
 80088dc:	4553      	cmp	r3, sl
 80088de:	db2b      	blt.n	8008938 <__lshift+0x8c>
 80088e0:	6920      	ldr	r0, [r4, #16]
 80088e2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80088e6:	f104 0314 	add.w	r3, r4, #20
 80088ea:	f016 021f 	ands.w	r2, r6, #31
 80088ee:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80088f2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80088f6:	d025      	beq.n	8008944 <__lshift+0x98>
 80088f8:	2000      	movs	r0, #0
 80088fa:	f1c2 0e20 	rsb	lr, r2, #32
 80088fe:	468a      	mov	sl, r1
 8008900:	681e      	ldr	r6, [r3, #0]
 8008902:	4096      	lsls	r6, r2
 8008904:	4330      	orrs	r0, r6
 8008906:	f84a 0b04 	str.w	r0, [sl], #4
 800890a:	f853 0b04 	ldr.w	r0, [r3], #4
 800890e:	459c      	cmp	ip, r3
 8008910:	fa20 f00e 	lsr.w	r0, r0, lr
 8008914:	d814      	bhi.n	8008940 <__lshift+0x94>
 8008916:	6048      	str	r0, [r1, #4]
 8008918:	b108      	cbz	r0, 800891e <__lshift+0x72>
 800891a:	f109 0502 	add.w	r5, r9, #2
 800891e:	3d01      	subs	r5, #1
 8008920:	4638      	mov	r0, r7
 8008922:	f8c8 5010 	str.w	r5, [r8, #16]
 8008926:	4621      	mov	r1, r4
 8008928:	f7ff fdf5 	bl	8008516 <_Bfree>
 800892c:	4640      	mov	r0, r8
 800892e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008932:	3101      	adds	r1, #1
 8008934:	005b      	lsls	r3, r3, #1
 8008936:	e7c7      	b.n	80088c8 <__lshift+0x1c>
 8008938:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800893c:	3301      	adds	r3, #1
 800893e:	e7cd      	b.n	80088dc <__lshift+0x30>
 8008940:	4651      	mov	r1, sl
 8008942:	e7dc      	b.n	80088fe <__lshift+0x52>
 8008944:	3904      	subs	r1, #4
 8008946:	f853 2b04 	ldr.w	r2, [r3], #4
 800894a:	459c      	cmp	ip, r3
 800894c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008950:	d8f9      	bhi.n	8008946 <__lshift+0x9a>
 8008952:	e7e4      	b.n	800891e <__lshift+0x72>

08008954 <__mcmp>:
 8008954:	6903      	ldr	r3, [r0, #16]
 8008956:	690a      	ldr	r2, [r1, #16]
 8008958:	b530      	push	{r4, r5, lr}
 800895a:	1a9b      	subs	r3, r3, r2
 800895c:	d10c      	bne.n	8008978 <__mcmp+0x24>
 800895e:	0092      	lsls	r2, r2, #2
 8008960:	3014      	adds	r0, #20
 8008962:	3114      	adds	r1, #20
 8008964:	1884      	adds	r4, r0, r2
 8008966:	4411      	add	r1, r2
 8008968:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800896c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008970:	4295      	cmp	r5, r2
 8008972:	d003      	beq.n	800897c <__mcmp+0x28>
 8008974:	d305      	bcc.n	8008982 <__mcmp+0x2e>
 8008976:	2301      	movs	r3, #1
 8008978:	4618      	mov	r0, r3
 800897a:	bd30      	pop	{r4, r5, pc}
 800897c:	42a0      	cmp	r0, r4
 800897e:	d3f3      	bcc.n	8008968 <__mcmp+0x14>
 8008980:	e7fa      	b.n	8008978 <__mcmp+0x24>
 8008982:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008986:	e7f7      	b.n	8008978 <__mcmp+0x24>

08008988 <__mdiff>:
 8008988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800898c:	460d      	mov	r5, r1
 800898e:	4607      	mov	r7, r0
 8008990:	4611      	mov	r1, r2
 8008992:	4628      	mov	r0, r5
 8008994:	4614      	mov	r4, r2
 8008996:	f7ff ffdd 	bl	8008954 <__mcmp>
 800899a:	1e06      	subs	r6, r0, #0
 800899c:	d108      	bne.n	80089b0 <__mdiff+0x28>
 800899e:	4631      	mov	r1, r6
 80089a0:	4638      	mov	r0, r7
 80089a2:	f7ff fd84 	bl	80084ae <_Balloc>
 80089a6:	2301      	movs	r3, #1
 80089a8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80089ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089b0:	bfa4      	itt	ge
 80089b2:	4623      	movge	r3, r4
 80089b4:	462c      	movge	r4, r5
 80089b6:	4638      	mov	r0, r7
 80089b8:	6861      	ldr	r1, [r4, #4]
 80089ba:	bfa6      	itte	ge
 80089bc:	461d      	movge	r5, r3
 80089be:	2600      	movge	r6, #0
 80089c0:	2601      	movlt	r6, #1
 80089c2:	f7ff fd74 	bl	80084ae <_Balloc>
 80089c6:	f04f 0e00 	mov.w	lr, #0
 80089ca:	60c6      	str	r6, [r0, #12]
 80089cc:	692b      	ldr	r3, [r5, #16]
 80089ce:	6926      	ldr	r6, [r4, #16]
 80089d0:	f104 0214 	add.w	r2, r4, #20
 80089d4:	f105 0914 	add.w	r9, r5, #20
 80089d8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80089dc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80089e0:	f100 0114 	add.w	r1, r0, #20
 80089e4:	f852 ab04 	ldr.w	sl, [r2], #4
 80089e8:	f859 5b04 	ldr.w	r5, [r9], #4
 80089ec:	fa1f f38a 	uxth.w	r3, sl
 80089f0:	4473      	add	r3, lr
 80089f2:	b2ac      	uxth	r4, r5
 80089f4:	1b1b      	subs	r3, r3, r4
 80089f6:	0c2c      	lsrs	r4, r5, #16
 80089f8:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80089fc:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8008a00:	b29b      	uxth	r3, r3
 8008a02:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8008a06:	45c8      	cmp	r8, r9
 8008a08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008a0c:	4694      	mov	ip, r2
 8008a0e:	f841 4b04 	str.w	r4, [r1], #4
 8008a12:	d8e7      	bhi.n	80089e4 <__mdiff+0x5c>
 8008a14:	45bc      	cmp	ip, r7
 8008a16:	d304      	bcc.n	8008a22 <__mdiff+0x9a>
 8008a18:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008a1c:	b183      	cbz	r3, 8008a40 <__mdiff+0xb8>
 8008a1e:	6106      	str	r6, [r0, #16]
 8008a20:	e7c4      	b.n	80089ac <__mdiff+0x24>
 8008a22:	f85c 4b04 	ldr.w	r4, [ip], #4
 8008a26:	b2a2      	uxth	r2, r4
 8008a28:	4472      	add	r2, lr
 8008a2a:	1413      	asrs	r3, r2, #16
 8008a2c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008a30:	b292      	uxth	r2, r2
 8008a32:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008a36:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008a3a:	f841 2b04 	str.w	r2, [r1], #4
 8008a3e:	e7e9      	b.n	8008a14 <__mdiff+0x8c>
 8008a40:	3e01      	subs	r6, #1
 8008a42:	e7e9      	b.n	8008a18 <__mdiff+0x90>

08008a44 <__ulp>:
 8008a44:	4b10      	ldr	r3, [pc, #64]	; (8008a88 <__ulp+0x44>)
 8008a46:	400b      	ands	r3, r1
 8008a48:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	dd02      	ble.n	8008a56 <__ulp+0x12>
 8008a50:	2000      	movs	r0, #0
 8008a52:	4619      	mov	r1, r3
 8008a54:	4770      	bx	lr
 8008a56:	425b      	negs	r3, r3
 8008a58:	151b      	asrs	r3, r3, #20
 8008a5a:	2b13      	cmp	r3, #19
 8008a5c:	f04f 0000 	mov.w	r0, #0
 8008a60:	f04f 0100 	mov.w	r1, #0
 8008a64:	dc04      	bgt.n	8008a70 <__ulp+0x2c>
 8008a66:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008a6a:	fa42 f103 	asr.w	r1, r2, r3
 8008a6e:	4770      	bx	lr
 8008a70:	2201      	movs	r2, #1
 8008a72:	3b14      	subs	r3, #20
 8008a74:	2b1e      	cmp	r3, #30
 8008a76:	bfce      	itee	gt
 8008a78:	4613      	movgt	r3, r2
 8008a7a:	f1c3 031f 	rsble	r3, r3, #31
 8008a7e:	fa02 f303 	lslle.w	r3, r2, r3
 8008a82:	4618      	mov	r0, r3
 8008a84:	4770      	bx	lr
 8008a86:	bf00      	nop
 8008a88:	7ff00000 	.word	0x7ff00000

08008a8c <__b2d>:
 8008a8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a90:	6907      	ldr	r7, [r0, #16]
 8008a92:	f100 0914 	add.w	r9, r0, #20
 8008a96:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8008a9a:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8008a9e:	f1a7 0804 	sub.w	r8, r7, #4
 8008aa2:	4630      	mov	r0, r6
 8008aa4:	f7ff fdc7 	bl	8008636 <__hi0bits>
 8008aa8:	f1c0 0320 	rsb	r3, r0, #32
 8008aac:	280a      	cmp	r0, #10
 8008aae:	600b      	str	r3, [r1, #0]
 8008ab0:	491e      	ldr	r1, [pc, #120]	; (8008b2c <__b2d+0xa0>)
 8008ab2:	dc17      	bgt.n	8008ae4 <__b2d+0x58>
 8008ab4:	45c1      	cmp	r9, r8
 8008ab6:	bf28      	it	cs
 8008ab8:	2200      	movcs	r2, #0
 8008aba:	f1c0 0c0b 	rsb	ip, r0, #11
 8008abe:	fa26 f30c 	lsr.w	r3, r6, ip
 8008ac2:	bf38      	it	cc
 8008ac4:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008ac8:	ea43 0501 	orr.w	r5, r3, r1
 8008acc:	f100 0315 	add.w	r3, r0, #21
 8008ad0:	fa06 f303 	lsl.w	r3, r6, r3
 8008ad4:	fa22 f20c 	lsr.w	r2, r2, ip
 8008ad8:	ea43 0402 	orr.w	r4, r3, r2
 8008adc:	4620      	mov	r0, r4
 8008ade:	4629      	mov	r1, r5
 8008ae0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ae4:	45c1      	cmp	r9, r8
 8008ae6:	bf3a      	itte	cc
 8008ae8:	f1a7 0808 	subcc.w	r8, r7, #8
 8008aec:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008af0:	2200      	movcs	r2, #0
 8008af2:	f1b0 030b 	subs.w	r3, r0, #11
 8008af6:	d015      	beq.n	8008b24 <__b2d+0x98>
 8008af8:	409e      	lsls	r6, r3
 8008afa:	f1c3 0720 	rsb	r7, r3, #32
 8008afe:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 8008b02:	fa22 f107 	lsr.w	r1, r2, r7
 8008b06:	45c8      	cmp	r8, r9
 8008b08:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8008b0c:	ea46 0501 	orr.w	r5, r6, r1
 8008b10:	bf94      	ite	ls
 8008b12:	2100      	movls	r1, #0
 8008b14:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8008b18:	fa02 f003 	lsl.w	r0, r2, r3
 8008b1c:	40f9      	lsrs	r1, r7
 8008b1e:	ea40 0401 	orr.w	r4, r0, r1
 8008b22:	e7db      	b.n	8008adc <__b2d+0x50>
 8008b24:	ea46 0501 	orr.w	r5, r6, r1
 8008b28:	4614      	mov	r4, r2
 8008b2a:	e7d7      	b.n	8008adc <__b2d+0x50>
 8008b2c:	3ff00000 	.word	0x3ff00000

08008b30 <__d2b>:
 8008b30:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008b34:	461c      	mov	r4, r3
 8008b36:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8008b3a:	2101      	movs	r1, #1
 8008b3c:	4690      	mov	r8, r2
 8008b3e:	f7ff fcb6 	bl	80084ae <_Balloc>
 8008b42:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8008b46:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8008b4a:	4607      	mov	r7, r0
 8008b4c:	bb34      	cbnz	r4, 8008b9c <__d2b+0x6c>
 8008b4e:	9201      	str	r2, [sp, #4]
 8008b50:	f1b8 0200 	subs.w	r2, r8, #0
 8008b54:	d027      	beq.n	8008ba6 <__d2b+0x76>
 8008b56:	a802      	add	r0, sp, #8
 8008b58:	f840 2d08 	str.w	r2, [r0, #-8]!
 8008b5c:	f7ff fd8a 	bl	8008674 <__lo0bits>
 8008b60:	9900      	ldr	r1, [sp, #0]
 8008b62:	b1f0      	cbz	r0, 8008ba2 <__d2b+0x72>
 8008b64:	9a01      	ldr	r2, [sp, #4]
 8008b66:	f1c0 0320 	rsb	r3, r0, #32
 8008b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b6e:	430b      	orrs	r3, r1
 8008b70:	40c2      	lsrs	r2, r0
 8008b72:	617b      	str	r3, [r7, #20]
 8008b74:	9201      	str	r2, [sp, #4]
 8008b76:	9b01      	ldr	r3, [sp, #4]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	bf14      	ite	ne
 8008b7c:	2102      	movne	r1, #2
 8008b7e:	2101      	moveq	r1, #1
 8008b80:	61bb      	str	r3, [r7, #24]
 8008b82:	6139      	str	r1, [r7, #16]
 8008b84:	b1c4      	cbz	r4, 8008bb8 <__d2b+0x88>
 8008b86:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008b8a:	4404      	add	r4, r0
 8008b8c:	6034      	str	r4, [r6, #0]
 8008b8e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008b92:	6028      	str	r0, [r5, #0]
 8008b94:	4638      	mov	r0, r7
 8008b96:	b002      	add	sp, #8
 8008b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b9c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008ba0:	e7d5      	b.n	8008b4e <__d2b+0x1e>
 8008ba2:	6179      	str	r1, [r7, #20]
 8008ba4:	e7e7      	b.n	8008b76 <__d2b+0x46>
 8008ba6:	a801      	add	r0, sp, #4
 8008ba8:	f7ff fd64 	bl	8008674 <__lo0bits>
 8008bac:	2101      	movs	r1, #1
 8008bae:	9b01      	ldr	r3, [sp, #4]
 8008bb0:	6139      	str	r1, [r7, #16]
 8008bb2:	617b      	str	r3, [r7, #20]
 8008bb4:	3020      	adds	r0, #32
 8008bb6:	e7e5      	b.n	8008b84 <__d2b+0x54>
 8008bb8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008bbc:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008bc0:	6030      	str	r0, [r6, #0]
 8008bc2:	6918      	ldr	r0, [r3, #16]
 8008bc4:	f7ff fd37 	bl	8008636 <__hi0bits>
 8008bc8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008bcc:	e7e1      	b.n	8008b92 <__d2b+0x62>

08008bce <__ratio>:
 8008bce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bd2:	4688      	mov	r8, r1
 8008bd4:	4669      	mov	r1, sp
 8008bd6:	4681      	mov	r9, r0
 8008bd8:	f7ff ff58 	bl	8008a8c <__b2d>
 8008bdc:	468b      	mov	fp, r1
 8008bde:	4606      	mov	r6, r0
 8008be0:	460f      	mov	r7, r1
 8008be2:	4640      	mov	r0, r8
 8008be4:	a901      	add	r1, sp, #4
 8008be6:	f7ff ff51 	bl	8008a8c <__b2d>
 8008bea:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008bee:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008bf2:	460d      	mov	r5, r1
 8008bf4:	eba3 0c02 	sub.w	ip, r3, r2
 8008bf8:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008bfc:	1a9b      	subs	r3, r3, r2
 8008bfe:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	bfd5      	itete	le
 8008c06:	460a      	movle	r2, r1
 8008c08:	463a      	movgt	r2, r7
 8008c0a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008c0e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8008c12:	bfd8      	it	le
 8008c14:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 8008c18:	462b      	mov	r3, r5
 8008c1a:	4602      	mov	r2, r0
 8008c1c:	4659      	mov	r1, fp
 8008c1e:	4630      	mov	r0, r6
 8008c20:	f7f7 fd84 	bl	800072c <__aeabi_ddiv>
 8008c24:	b003      	add	sp, #12
 8008c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008c2a <__copybits>:
 8008c2a:	3901      	subs	r1, #1
 8008c2c:	b510      	push	{r4, lr}
 8008c2e:	1149      	asrs	r1, r1, #5
 8008c30:	6914      	ldr	r4, [r2, #16]
 8008c32:	3101      	adds	r1, #1
 8008c34:	f102 0314 	add.w	r3, r2, #20
 8008c38:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008c3c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008c40:	42a3      	cmp	r3, r4
 8008c42:	4602      	mov	r2, r0
 8008c44:	d303      	bcc.n	8008c4e <__copybits+0x24>
 8008c46:	2300      	movs	r3, #0
 8008c48:	428a      	cmp	r2, r1
 8008c4a:	d305      	bcc.n	8008c58 <__copybits+0x2e>
 8008c4c:	bd10      	pop	{r4, pc}
 8008c4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c52:	f840 2b04 	str.w	r2, [r0], #4
 8008c56:	e7f3      	b.n	8008c40 <__copybits+0x16>
 8008c58:	f842 3b04 	str.w	r3, [r2], #4
 8008c5c:	e7f4      	b.n	8008c48 <__copybits+0x1e>

08008c5e <__any_on>:
 8008c5e:	f100 0214 	add.w	r2, r0, #20
 8008c62:	6900      	ldr	r0, [r0, #16]
 8008c64:	114b      	asrs	r3, r1, #5
 8008c66:	4298      	cmp	r0, r3
 8008c68:	b510      	push	{r4, lr}
 8008c6a:	db11      	blt.n	8008c90 <__any_on+0x32>
 8008c6c:	dd0a      	ble.n	8008c84 <__any_on+0x26>
 8008c6e:	f011 011f 	ands.w	r1, r1, #31
 8008c72:	d007      	beq.n	8008c84 <__any_on+0x26>
 8008c74:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008c78:	fa24 f001 	lsr.w	r0, r4, r1
 8008c7c:	fa00 f101 	lsl.w	r1, r0, r1
 8008c80:	428c      	cmp	r4, r1
 8008c82:	d10b      	bne.n	8008c9c <__any_on+0x3e>
 8008c84:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d803      	bhi.n	8008c94 <__any_on+0x36>
 8008c8c:	2000      	movs	r0, #0
 8008c8e:	bd10      	pop	{r4, pc}
 8008c90:	4603      	mov	r3, r0
 8008c92:	e7f7      	b.n	8008c84 <__any_on+0x26>
 8008c94:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008c98:	2900      	cmp	r1, #0
 8008c9a:	d0f5      	beq.n	8008c88 <__any_on+0x2a>
 8008c9c:	2001      	movs	r0, #1
 8008c9e:	e7f6      	b.n	8008c8e <__any_on+0x30>

08008ca0 <_calloc_r>:
 8008ca0:	b538      	push	{r3, r4, r5, lr}
 8008ca2:	fb02 f401 	mul.w	r4, r2, r1
 8008ca6:	4621      	mov	r1, r4
 8008ca8:	f000 f808 	bl	8008cbc <_malloc_r>
 8008cac:	4605      	mov	r5, r0
 8008cae:	b118      	cbz	r0, 8008cb8 <_calloc_r+0x18>
 8008cb0:	4622      	mov	r2, r4
 8008cb2:	2100      	movs	r1, #0
 8008cb4:	f7fd ff96 	bl	8006be4 <memset>
 8008cb8:	4628      	mov	r0, r5
 8008cba:	bd38      	pop	{r3, r4, r5, pc}

08008cbc <_malloc_r>:
 8008cbc:	b570      	push	{r4, r5, r6, lr}
 8008cbe:	1ccd      	adds	r5, r1, #3
 8008cc0:	f025 0503 	bic.w	r5, r5, #3
 8008cc4:	3508      	adds	r5, #8
 8008cc6:	2d0c      	cmp	r5, #12
 8008cc8:	bf38      	it	cc
 8008cca:	250c      	movcc	r5, #12
 8008ccc:	2d00      	cmp	r5, #0
 8008cce:	4606      	mov	r6, r0
 8008cd0:	db01      	blt.n	8008cd6 <_malloc_r+0x1a>
 8008cd2:	42a9      	cmp	r1, r5
 8008cd4:	d903      	bls.n	8008cde <_malloc_r+0x22>
 8008cd6:	230c      	movs	r3, #12
 8008cd8:	6033      	str	r3, [r6, #0]
 8008cda:	2000      	movs	r0, #0
 8008cdc:	bd70      	pop	{r4, r5, r6, pc}
 8008cde:	f000 ff66 	bl	8009bae <__malloc_lock>
 8008ce2:	4a21      	ldr	r2, [pc, #132]	; (8008d68 <_malloc_r+0xac>)
 8008ce4:	6814      	ldr	r4, [r2, #0]
 8008ce6:	4621      	mov	r1, r4
 8008ce8:	b991      	cbnz	r1, 8008d10 <_malloc_r+0x54>
 8008cea:	4c20      	ldr	r4, [pc, #128]	; (8008d6c <_malloc_r+0xb0>)
 8008cec:	6823      	ldr	r3, [r4, #0]
 8008cee:	b91b      	cbnz	r3, 8008cf8 <_malloc_r+0x3c>
 8008cf0:	4630      	mov	r0, r6
 8008cf2:	f000 fe19 	bl	8009928 <_sbrk_r>
 8008cf6:	6020      	str	r0, [r4, #0]
 8008cf8:	4629      	mov	r1, r5
 8008cfa:	4630      	mov	r0, r6
 8008cfc:	f000 fe14 	bl	8009928 <_sbrk_r>
 8008d00:	1c43      	adds	r3, r0, #1
 8008d02:	d124      	bne.n	8008d4e <_malloc_r+0x92>
 8008d04:	230c      	movs	r3, #12
 8008d06:	4630      	mov	r0, r6
 8008d08:	6033      	str	r3, [r6, #0]
 8008d0a:	f000 ff51 	bl	8009bb0 <__malloc_unlock>
 8008d0e:	e7e4      	b.n	8008cda <_malloc_r+0x1e>
 8008d10:	680b      	ldr	r3, [r1, #0]
 8008d12:	1b5b      	subs	r3, r3, r5
 8008d14:	d418      	bmi.n	8008d48 <_malloc_r+0x8c>
 8008d16:	2b0b      	cmp	r3, #11
 8008d18:	d90f      	bls.n	8008d3a <_malloc_r+0x7e>
 8008d1a:	600b      	str	r3, [r1, #0]
 8008d1c:	18cc      	adds	r4, r1, r3
 8008d1e:	50cd      	str	r5, [r1, r3]
 8008d20:	4630      	mov	r0, r6
 8008d22:	f000 ff45 	bl	8009bb0 <__malloc_unlock>
 8008d26:	f104 000b 	add.w	r0, r4, #11
 8008d2a:	1d23      	adds	r3, r4, #4
 8008d2c:	f020 0007 	bic.w	r0, r0, #7
 8008d30:	1ac3      	subs	r3, r0, r3
 8008d32:	d0d3      	beq.n	8008cdc <_malloc_r+0x20>
 8008d34:	425a      	negs	r2, r3
 8008d36:	50e2      	str	r2, [r4, r3]
 8008d38:	e7d0      	b.n	8008cdc <_malloc_r+0x20>
 8008d3a:	684b      	ldr	r3, [r1, #4]
 8008d3c:	428c      	cmp	r4, r1
 8008d3e:	bf16      	itet	ne
 8008d40:	6063      	strne	r3, [r4, #4]
 8008d42:	6013      	streq	r3, [r2, #0]
 8008d44:	460c      	movne	r4, r1
 8008d46:	e7eb      	b.n	8008d20 <_malloc_r+0x64>
 8008d48:	460c      	mov	r4, r1
 8008d4a:	6849      	ldr	r1, [r1, #4]
 8008d4c:	e7cc      	b.n	8008ce8 <_malloc_r+0x2c>
 8008d4e:	1cc4      	adds	r4, r0, #3
 8008d50:	f024 0403 	bic.w	r4, r4, #3
 8008d54:	42a0      	cmp	r0, r4
 8008d56:	d005      	beq.n	8008d64 <_malloc_r+0xa8>
 8008d58:	1a21      	subs	r1, r4, r0
 8008d5a:	4630      	mov	r0, r6
 8008d5c:	f000 fde4 	bl	8009928 <_sbrk_r>
 8008d60:	3001      	adds	r0, #1
 8008d62:	d0cf      	beq.n	8008d04 <_malloc_r+0x48>
 8008d64:	6025      	str	r5, [r4, #0]
 8008d66:	e7db      	b.n	8008d20 <_malloc_r+0x64>
 8008d68:	20000214 	.word	0x20000214
 8008d6c:	20000218 	.word	0x20000218

08008d70 <__ssputs_r>:
 8008d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d74:	688e      	ldr	r6, [r1, #8]
 8008d76:	4682      	mov	sl, r0
 8008d78:	429e      	cmp	r6, r3
 8008d7a:	460c      	mov	r4, r1
 8008d7c:	4690      	mov	r8, r2
 8008d7e:	4699      	mov	r9, r3
 8008d80:	d837      	bhi.n	8008df2 <__ssputs_r+0x82>
 8008d82:	898a      	ldrh	r2, [r1, #12]
 8008d84:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008d88:	d031      	beq.n	8008dee <__ssputs_r+0x7e>
 8008d8a:	2302      	movs	r3, #2
 8008d8c:	6825      	ldr	r5, [r4, #0]
 8008d8e:	6909      	ldr	r1, [r1, #16]
 8008d90:	1a6f      	subs	r7, r5, r1
 8008d92:	6965      	ldr	r5, [r4, #20]
 8008d94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008d98:	fb95 f5f3 	sdiv	r5, r5, r3
 8008d9c:	f109 0301 	add.w	r3, r9, #1
 8008da0:	443b      	add	r3, r7
 8008da2:	429d      	cmp	r5, r3
 8008da4:	bf38      	it	cc
 8008da6:	461d      	movcc	r5, r3
 8008da8:	0553      	lsls	r3, r2, #21
 8008daa:	d530      	bpl.n	8008e0e <__ssputs_r+0x9e>
 8008dac:	4629      	mov	r1, r5
 8008dae:	f7ff ff85 	bl	8008cbc <_malloc_r>
 8008db2:	4606      	mov	r6, r0
 8008db4:	b950      	cbnz	r0, 8008dcc <__ssputs_r+0x5c>
 8008db6:	230c      	movs	r3, #12
 8008db8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008dbc:	f8ca 3000 	str.w	r3, [sl]
 8008dc0:	89a3      	ldrh	r3, [r4, #12]
 8008dc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008dc6:	81a3      	strh	r3, [r4, #12]
 8008dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dcc:	463a      	mov	r2, r7
 8008dce:	6921      	ldr	r1, [r4, #16]
 8008dd0:	f7ff fb62 	bl	8008498 <memcpy>
 8008dd4:	89a3      	ldrh	r3, [r4, #12]
 8008dd6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008dda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dde:	81a3      	strh	r3, [r4, #12]
 8008de0:	6126      	str	r6, [r4, #16]
 8008de2:	443e      	add	r6, r7
 8008de4:	6026      	str	r6, [r4, #0]
 8008de6:	464e      	mov	r6, r9
 8008de8:	6165      	str	r5, [r4, #20]
 8008dea:	1bed      	subs	r5, r5, r7
 8008dec:	60a5      	str	r5, [r4, #8]
 8008dee:	454e      	cmp	r6, r9
 8008df0:	d900      	bls.n	8008df4 <__ssputs_r+0x84>
 8008df2:	464e      	mov	r6, r9
 8008df4:	4632      	mov	r2, r6
 8008df6:	4641      	mov	r1, r8
 8008df8:	6820      	ldr	r0, [r4, #0]
 8008dfa:	f000 febf 	bl	8009b7c <memmove>
 8008dfe:	68a3      	ldr	r3, [r4, #8]
 8008e00:	2000      	movs	r0, #0
 8008e02:	1b9b      	subs	r3, r3, r6
 8008e04:	60a3      	str	r3, [r4, #8]
 8008e06:	6823      	ldr	r3, [r4, #0]
 8008e08:	441e      	add	r6, r3
 8008e0a:	6026      	str	r6, [r4, #0]
 8008e0c:	e7dc      	b.n	8008dc8 <__ssputs_r+0x58>
 8008e0e:	462a      	mov	r2, r5
 8008e10:	f000 ff1c 	bl	8009c4c <_realloc_r>
 8008e14:	4606      	mov	r6, r0
 8008e16:	2800      	cmp	r0, #0
 8008e18:	d1e2      	bne.n	8008de0 <__ssputs_r+0x70>
 8008e1a:	6921      	ldr	r1, [r4, #16]
 8008e1c:	4650      	mov	r0, sl
 8008e1e:	f000 fec9 	bl	8009bb4 <_free_r>
 8008e22:	e7c8      	b.n	8008db6 <__ssputs_r+0x46>

08008e24 <_svfiprintf_r>:
 8008e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e28:	461d      	mov	r5, r3
 8008e2a:	898b      	ldrh	r3, [r1, #12]
 8008e2c:	b09d      	sub	sp, #116	; 0x74
 8008e2e:	061f      	lsls	r7, r3, #24
 8008e30:	4680      	mov	r8, r0
 8008e32:	460c      	mov	r4, r1
 8008e34:	4616      	mov	r6, r2
 8008e36:	d50f      	bpl.n	8008e58 <_svfiprintf_r+0x34>
 8008e38:	690b      	ldr	r3, [r1, #16]
 8008e3a:	b96b      	cbnz	r3, 8008e58 <_svfiprintf_r+0x34>
 8008e3c:	2140      	movs	r1, #64	; 0x40
 8008e3e:	f7ff ff3d 	bl	8008cbc <_malloc_r>
 8008e42:	6020      	str	r0, [r4, #0]
 8008e44:	6120      	str	r0, [r4, #16]
 8008e46:	b928      	cbnz	r0, 8008e54 <_svfiprintf_r+0x30>
 8008e48:	230c      	movs	r3, #12
 8008e4a:	f8c8 3000 	str.w	r3, [r8]
 8008e4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e52:	e0c8      	b.n	8008fe6 <_svfiprintf_r+0x1c2>
 8008e54:	2340      	movs	r3, #64	; 0x40
 8008e56:	6163      	str	r3, [r4, #20]
 8008e58:	2300      	movs	r3, #0
 8008e5a:	9309      	str	r3, [sp, #36]	; 0x24
 8008e5c:	2320      	movs	r3, #32
 8008e5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e62:	2330      	movs	r3, #48	; 0x30
 8008e64:	f04f 0b01 	mov.w	fp, #1
 8008e68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e6c:	9503      	str	r5, [sp, #12]
 8008e6e:	4637      	mov	r7, r6
 8008e70:	463d      	mov	r5, r7
 8008e72:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008e76:	b10b      	cbz	r3, 8008e7c <_svfiprintf_r+0x58>
 8008e78:	2b25      	cmp	r3, #37	; 0x25
 8008e7a:	d13e      	bne.n	8008efa <_svfiprintf_r+0xd6>
 8008e7c:	ebb7 0a06 	subs.w	sl, r7, r6
 8008e80:	d00b      	beq.n	8008e9a <_svfiprintf_r+0x76>
 8008e82:	4653      	mov	r3, sl
 8008e84:	4632      	mov	r2, r6
 8008e86:	4621      	mov	r1, r4
 8008e88:	4640      	mov	r0, r8
 8008e8a:	f7ff ff71 	bl	8008d70 <__ssputs_r>
 8008e8e:	3001      	adds	r0, #1
 8008e90:	f000 80a4 	beq.w	8008fdc <_svfiprintf_r+0x1b8>
 8008e94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e96:	4453      	add	r3, sl
 8008e98:	9309      	str	r3, [sp, #36]	; 0x24
 8008e9a:	783b      	ldrb	r3, [r7, #0]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	f000 809d 	beq.w	8008fdc <_svfiprintf_r+0x1b8>
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ea8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008eac:	9304      	str	r3, [sp, #16]
 8008eae:	9307      	str	r3, [sp, #28]
 8008eb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008eb4:	931a      	str	r3, [sp, #104]	; 0x68
 8008eb6:	462f      	mov	r7, r5
 8008eb8:	2205      	movs	r2, #5
 8008eba:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008ebe:	4850      	ldr	r0, [pc, #320]	; (8009000 <_svfiprintf_r+0x1dc>)
 8008ec0:	f000 fe4e 	bl	8009b60 <memchr>
 8008ec4:	9b04      	ldr	r3, [sp, #16]
 8008ec6:	b9d0      	cbnz	r0, 8008efe <_svfiprintf_r+0xda>
 8008ec8:	06d9      	lsls	r1, r3, #27
 8008eca:	bf44      	itt	mi
 8008ecc:	2220      	movmi	r2, #32
 8008ece:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008ed2:	071a      	lsls	r2, r3, #28
 8008ed4:	bf44      	itt	mi
 8008ed6:	222b      	movmi	r2, #43	; 0x2b
 8008ed8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008edc:	782a      	ldrb	r2, [r5, #0]
 8008ede:	2a2a      	cmp	r2, #42	; 0x2a
 8008ee0:	d015      	beq.n	8008f0e <_svfiprintf_r+0xea>
 8008ee2:	462f      	mov	r7, r5
 8008ee4:	2000      	movs	r0, #0
 8008ee6:	250a      	movs	r5, #10
 8008ee8:	9a07      	ldr	r2, [sp, #28]
 8008eea:	4639      	mov	r1, r7
 8008eec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ef0:	3b30      	subs	r3, #48	; 0x30
 8008ef2:	2b09      	cmp	r3, #9
 8008ef4:	d94d      	bls.n	8008f92 <_svfiprintf_r+0x16e>
 8008ef6:	b1b8      	cbz	r0, 8008f28 <_svfiprintf_r+0x104>
 8008ef8:	e00f      	b.n	8008f1a <_svfiprintf_r+0xf6>
 8008efa:	462f      	mov	r7, r5
 8008efc:	e7b8      	b.n	8008e70 <_svfiprintf_r+0x4c>
 8008efe:	4a40      	ldr	r2, [pc, #256]	; (8009000 <_svfiprintf_r+0x1dc>)
 8008f00:	463d      	mov	r5, r7
 8008f02:	1a80      	subs	r0, r0, r2
 8008f04:	fa0b f000 	lsl.w	r0, fp, r0
 8008f08:	4318      	orrs	r0, r3
 8008f0a:	9004      	str	r0, [sp, #16]
 8008f0c:	e7d3      	b.n	8008eb6 <_svfiprintf_r+0x92>
 8008f0e:	9a03      	ldr	r2, [sp, #12]
 8008f10:	1d11      	adds	r1, r2, #4
 8008f12:	6812      	ldr	r2, [r2, #0]
 8008f14:	9103      	str	r1, [sp, #12]
 8008f16:	2a00      	cmp	r2, #0
 8008f18:	db01      	blt.n	8008f1e <_svfiprintf_r+0xfa>
 8008f1a:	9207      	str	r2, [sp, #28]
 8008f1c:	e004      	b.n	8008f28 <_svfiprintf_r+0x104>
 8008f1e:	4252      	negs	r2, r2
 8008f20:	f043 0302 	orr.w	r3, r3, #2
 8008f24:	9207      	str	r2, [sp, #28]
 8008f26:	9304      	str	r3, [sp, #16]
 8008f28:	783b      	ldrb	r3, [r7, #0]
 8008f2a:	2b2e      	cmp	r3, #46	; 0x2e
 8008f2c:	d10c      	bne.n	8008f48 <_svfiprintf_r+0x124>
 8008f2e:	787b      	ldrb	r3, [r7, #1]
 8008f30:	2b2a      	cmp	r3, #42	; 0x2a
 8008f32:	d133      	bne.n	8008f9c <_svfiprintf_r+0x178>
 8008f34:	9b03      	ldr	r3, [sp, #12]
 8008f36:	3702      	adds	r7, #2
 8008f38:	1d1a      	adds	r2, r3, #4
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	9203      	str	r2, [sp, #12]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	bfb8      	it	lt
 8008f42:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008f46:	9305      	str	r3, [sp, #20]
 8008f48:	4d2e      	ldr	r5, [pc, #184]	; (8009004 <_svfiprintf_r+0x1e0>)
 8008f4a:	2203      	movs	r2, #3
 8008f4c:	7839      	ldrb	r1, [r7, #0]
 8008f4e:	4628      	mov	r0, r5
 8008f50:	f000 fe06 	bl	8009b60 <memchr>
 8008f54:	b138      	cbz	r0, 8008f66 <_svfiprintf_r+0x142>
 8008f56:	2340      	movs	r3, #64	; 0x40
 8008f58:	1b40      	subs	r0, r0, r5
 8008f5a:	fa03 f000 	lsl.w	r0, r3, r0
 8008f5e:	9b04      	ldr	r3, [sp, #16]
 8008f60:	3701      	adds	r7, #1
 8008f62:	4303      	orrs	r3, r0
 8008f64:	9304      	str	r3, [sp, #16]
 8008f66:	7839      	ldrb	r1, [r7, #0]
 8008f68:	2206      	movs	r2, #6
 8008f6a:	4827      	ldr	r0, [pc, #156]	; (8009008 <_svfiprintf_r+0x1e4>)
 8008f6c:	1c7e      	adds	r6, r7, #1
 8008f6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f72:	f000 fdf5 	bl	8009b60 <memchr>
 8008f76:	2800      	cmp	r0, #0
 8008f78:	d038      	beq.n	8008fec <_svfiprintf_r+0x1c8>
 8008f7a:	4b24      	ldr	r3, [pc, #144]	; (800900c <_svfiprintf_r+0x1e8>)
 8008f7c:	bb13      	cbnz	r3, 8008fc4 <_svfiprintf_r+0x1a0>
 8008f7e:	9b03      	ldr	r3, [sp, #12]
 8008f80:	3307      	adds	r3, #7
 8008f82:	f023 0307 	bic.w	r3, r3, #7
 8008f86:	3308      	adds	r3, #8
 8008f88:	9303      	str	r3, [sp, #12]
 8008f8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f8c:	444b      	add	r3, r9
 8008f8e:	9309      	str	r3, [sp, #36]	; 0x24
 8008f90:	e76d      	b.n	8008e6e <_svfiprintf_r+0x4a>
 8008f92:	fb05 3202 	mla	r2, r5, r2, r3
 8008f96:	2001      	movs	r0, #1
 8008f98:	460f      	mov	r7, r1
 8008f9a:	e7a6      	b.n	8008eea <_svfiprintf_r+0xc6>
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	250a      	movs	r5, #10
 8008fa0:	4619      	mov	r1, r3
 8008fa2:	3701      	adds	r7, #1
 8008fa4:	9305      	str	r3, [sp, #20]
 8008fa6:	4638      	mov	r0, r7
 8008fa8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008fac:	3a30      	subs	r2, #48	; 0x30
 8008fae:	2a09      	cmp	r2, #9
 8008fb0:	d903      	bls.n	8008fba <_svfiprintf_r+0x196>
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d0c8      	beq.n	8008f48 <_svfiprintf_r+0x124>
 8008fb6:	9105      	str	r1, [sp, #20]
 8008fb8:	e7c6      	b.n	8008f48 <_svfiprintf_r+0x124>
 8008fba:	fb05 2101 	mla	r1, r5, r1, r2
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	4607      	mov	r7, r0
 8008fc2:	e7f0      	b.n	8008fa6 <_svfiprintf_r+0x182>
 8008fc4:	ab03      	add	r3, sp, #12
 8008fc6:	9300      	str	r3, [sp, #0]
 8008fc8:	4622      	mov	r2, r4
 8008fca:	4b11      	ldr	r3, [pc, #68]	; (8009010 <_svfiprintf_r+0x1ec>)
 8008fcc:	a904      	add	r1, sp, #16
 8008fce:	4640      	mov	r0, r8
 8008fd0:	f3af 8000 	nop.w
 8008fd4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008fd8:	4681      	mov	r9, r0
 8008fda:	d1d6      	bne.n	8008f8a <_svfiprintf_r+0x166>
 8008fdc:	89a3      	ldrh	r3, [r4, #12]
 8008fde:	065b      	lsls	r3, r3, #25
 8008fe0:	f53f af35 	bmi.w	8008e4e <_svfiprintf_r+0x2a>
 8008fe4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008fe6:	b01d      	add	sp, #116	; 0x74
 8008fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fec:	ab03      	add	r3, sp, #12
 8008fee:	9300      	str	r3, [sp, #0]
 8008ff0:	4622      	mov	r2, r4
 8008ff2:	4b07      	ldr	r3, [pc, #28]	; (8009010 <_svfiprintf_r+0x1ec>)
 8008ff4:	a904      	add	r1, sp, #16
 8008ff6:	4640      	mov	r0, r8
 8008ff8:	f000 fa2c 	bl	8009454 <_printf_i>
 8008ffc:	e7ea      	b.n	8008fd4 <_svfiprintf_r+0x1b0>
 8008ffe:	bf00      	nop
 8009000:	08009fc4 	.word	0x08009fc4
 8009004:	08009fca 	.word	0x08009fca
 8009008:	08009fce 	.word	0x08009fce
 800900c:	00000000 	.word	0x00000000
 8009010:	08008d71 	.word	0x08008d71

08009014 <_sungetc_r>:
 8009014:	b538      	push	{r3, r4, r5, lr}
 8009016:	1c4b      	adds	r3, r1, #1
 8009018:	4614      	mov	r4, r2
 800901a:	d103      	bne.n	8009024 <_sungetc_r+0x10>
 800901c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009020:	4628      	mov	r0, r5
 8009022:	bd38      	pop	{r3, r4, r5, pc}
 8009024:	8993      	ldrh	r3, [r2, #12]
 8009026:	b2cd      	uxtb	r5, r1
 8009028:	f023 0320 	bic.w	r3, r3, #32
 800902c:	8193      	strh	r3, [r2, #12]
 800902e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009030:	6852      	ldr	r2, [r2, #4]
 8009032:	b18b      	cbz	r3, 8009058 <_sungetc_r+0x44>
 8009034:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009036:	4293      	cmp	r3, r2
 8009038:	dd08      	ble.n	800904c <_sungetc_r+0x38>
 800903a:	6823      	ldr	r3, [r4, #0]
 800903c:	1e5a      	subs	r2, r3, #1
 800903e:	6022      	str	r2, [r4, #0]
 8009040:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009044:	6863      	ldr	r3, [r4, #4]
 8009046:	3301      	adds	r3, #1
 8009048:	6063      	str	r3, [r4, #4]
 800904a:	e7e9      	b.n	8009020 <_sungetc_r+0xc>
 800904c:	4621      	mov	r1, r4
 800904e:	f000 fd39 	bl	8009ac4 <__submore>
 8009052:	2800      	cmp	r0, #0
 8009054:	d0f1      	beq.n	800903a <_sungetc_r+0x26>
 8009056:	e7e1      	b.n	800901c <_sungetc_r+0x8>
 8009058:	6921      	ldr	r1, [r4, #16]
 800905a:	6823      	ldr	r3, [r4, #0]
 800905c:	b151      	cbz	r1, 8009074 <_sungetc_r+0x60>
 800905e:	4299      	cmp	r1, r3
 8009060:	d208      	bcs.n	8009074 <_sungetc_r+0x60>
 8009062:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8009066:	42a9      	cmp	r1, r5
 8009068:	d104      	bne.n	8009074 <_sungetc_r+0x60>
 800906a:	3b01      	subs	r3, #1
 800906c:	3201      	adds	r2, #1
 800906e:	6023      	str	r3, [r4, #0]
 8009070:	6062      	str	r2, [r4, #4]
 8009072:	e7d5      	b.n	8009020 <_sungetc_r+0xc>
 8009074:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8009078:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800907c:	6363      	str	r3, [r4, #52]	; 0x34
 800907e:	2303      	movs	r3, #3
 8009080:	63a3      	str	r3, [r4, #56]	; 0x38
 8009082:	4623      	mov	r3, r4
 8009084:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009088:	6023      	str	r3, [r4, #0]
 800908a:	2301      	movs	r3, #1
 800908c:	e7dc      	b.n	8009048 <_sungetc_r+0x34>

0800908e <__ssrefill_r>:
 800908e:	b510      	push	{r4, lr}
 8009090:	460c      	mov	r4, r1
 8009092:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009094:	b169      	cbz	r1, 80090b2 <__ssrefill_r+0x24>
 8009096:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800909a:	4299      	cmp	r1, r3
 800909c:	d001      	beq.n	80090a2 <__ssrefill_r+0x14>
 800909e:	f000 fd89 	bl	8009bb4 <_free_r>
 80090a2:	2000      	movs	r0, #0
 80090a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80090a6:	6360      	str	r0, [r4, #52]	; 0x34
 80090a8:	6063      	str	r3, [r4, #4]
 80090aa:	b113      	cbz	r3, 80090b2 <__ssrefill_r+0x24>
 80090ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80090ae:	6023      	str	r3, [r4, #0]
 80090b0:	bd10      	pop	{r4, pc}
 80090b2:	6923      	ldr	r3, [r4, #16]
 80090b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090b8:	6023      	str	r3, [r4, #0]
 80090ba:	2300      	movs	r3, #0
 80090bc:	6063      	str	r3, [r4, #4]
 80090be:	89a3      	ldrh	r3, [r4, #12]
 80090c0:	f043 0320 	orr.w	r3, r3, #32
 80090c4:	81a3      	strh	r3, [r4, #12]
 80090c6:	e7f3      	b.n	80090b0 <__ssrefill_r+0x22>

080090c8 <__ssvfiscanf_r>:
 80090c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090cc:	460c      	mov	r4, r1
 80090ce:	2100      	movs	r1, #0
 80090d0:	4606      	mov	r6, r0
 80090d2:	4692      	mov	sl, r2
 80090d4:	270a      	movs	r7, #10
 80090d6:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80090da:	9144      	str	r1, [sp, #272]	; 0x110
 80090dc:	9145      	str	r1, [sp, #276]	; 0x114
 80090de:	499e      	ldr	r1, [pc, #632]	; (8009358 <__ssvfiscanf_r+0x290>)
 80090e0:	f10d 0804 	add.w	r8, sp, #4
 80090e4:	91a0      	str	r1, [sp, #640]	; 0x280
 80090e6:	499d      	ldr	r1, [pc, #628]	; (800935c <__ssvfiscanf_r+0x294>)
 80090e8:	f8df 9274 	ldr.w	r9, [pc, #628]	; 8009360 <__ssvfiscanf_r+0x298>
 80090ec:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80090f0:	91a1      	str	r1, [sp, #644]	; 0x284
 80090f2:	9300      	str	r3, [sp, #0]
 80090f4:	f89a 3000 	ldrb.w	r3, [sl]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	f000 812a 	beq.w	8009352 <__ssvfiscanf_r+0x28a>
 80090fe:	4655      	mov	r5, sl
 8009100:	f7ff f9a8 	bl	8008454 <__locale_ctype_ptr>
 8009104:	f815 bb01 	ldrb.w	fp, [r5], #1
 8009108:	4458      	add	r0, fp
 800910a:	7843      	ldrb	r3, [r0, #1]
 800910c:	f013 0308 	ands.w	r3, r3, #8
 8009110:	d01c      	beq.n	800914c <__ssvfiscanf_r+0x84>
 8009112:	6863      	ldr	r3, [r4, #4]
 8009114:	2b00      	cmp	r3, #0
 8009116:	dd12      	ble.n	800913e <__ssvfiscanf_r+0x76>
 8009118:	f7ff f99c 	bl	8008454 <__locale_ctype_ptr>
 800911c:	6823      	ldr	r3, [r4, #0]
 800911e:	781a      	ldrb	r2, [r3, #0]
 8009120:	4410      	add	r0, r2
 8009122:	7842      	ldrb	r2, [r0, #1]
 8009124:	0712      	lsls	r2, r2, #28
 8009126:	d401      	bmi.n	800912c <__ssvfiscanf_r+0x64>
 8009128:	46aa      	mov	sl, r5
 800912a:	e7e3      	b.n	80090f4 <__ssvfiscanf_r+0x2c>
 800912c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800912e:	3301      	adds	r3, #1
 8009130:	3201      	adds	r2, #1
 8009132:	9245      	str	r2, [sp, #276]	; 0x114
 8009134:	6862      	ldr	r2, [r4, #4]
 8009136:	6023      	str	r3, [r4, #0]
 8009138:	3a01      	subs	r2, #1
 800913a:	6062      	str	r2, [r4, #4]
 800913c:	e7e9      	b.n	8009112 <__ssvfiscanf_r+0x4a>
 800913e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009140:	4621      	mov	r1, r4
 8009142:	4630      	mov	r0, r6
 8009144:	4798      	blx	r3
 8009146:	2800      	cmp	r0, #0
 8009148:	d0e6      	beq.n	8009118 <__ssvfiscanf_r+0x50>
 800914a:	e7ed      	b.n	8009128 <__ssvfiscanf_r+0x60>
 800914c:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8009150:	f040 8082 	bne.w	8009258 <__ssvfiscanf_r+0x190>
 8009154:	9343      	str	r3, [sp, #268]	; 0x10c
 8009156:	9341      	str	r3, [sp, #260]	; 0x104
 8009158:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800915c:	2b2a      	cmp	r3, #42	; 0x2a
 800915e:	d103      	bne.n	8009168 <__ssvfiscanf_r+0xa0>
 8009160:	2310      	movs	r3, #16
 8009162:	f10a 0502 	add.w	r5, sl, #2
 8009166:	9341      	str	r3, [sp, #260]	; 0x104
 8009168:	46aa      	mov	sl, r5
 800916a:	f815 1b01 	ldrb.w	r1, [r5], #1
 800916e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8009172:	2a09      	cmp	r2, #9
 8009174:	d922      	bls.n	80091bc <__ssvfiscanf_r+0xf4>
 8009176:	2203      	movs	r2, #3
 8009178:	4879      	ldr	r0, [pc, #484]	; (8009360 <__ssvfiscanf_r+0x298>)
 800917a:	f000 fcf1 	bl	8009b60 <memchr>
 800917e:	b138      	cbz	r0, 8009190 <__ssvfiscanf_r+0xc8>
 8009180:	eba0 0309 	sub.w	r3, r0, r9
 8009184:	2001      	movs	r0, #1
 8009186:	46aa      	mov	sl, r5
 8009188:	4098      	lsls	r0, r3
 800918a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800918c:	4318      	orrs	r0, r3
 800918e:	9041      	str	r0, [sp, #260]	; 0x104
 8009190:	f89a 3000 	ldrb.w	r3, [sl]
 8009194:	f10a 0501 	add.w	r5, sl, #1
 8009198:	2b67      	cmp	r3, #103	; 0x67
 800919a:	d82b      	bhi.n	80091f4 <__ssvfiscanf_r+0x12c>
 800919c:	2b65      	cmp	r3, #101	; 0x65
 800919e:	f080 809f 	bcs.w	80092e0 <__ssvfiscanf_r+0x218>
 80091a2:	2b47      	cmp	r3, #71	; 0x47
 80091a4:	d810      	bhi.n	80091c8 <__ssvfiscanf_r+0x100>
 80091a6:	2b45      	cmp	r3, #69	; 0x45
 80091a8:	f080 809a 	bcs.w	80092e0 <__ssvfiscanf_r+0x218>
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d06c      	beq.n	800928a <__ssvfiscanf_r+0x1c2>
 80091b0:	2b25      	cmp	r3, #37	; 0x25
 80091b2:	d051      	beq.n	8009258 <__ssvfiscanf_r+0x190>
 80091b4:	2303      	movs	r3, #3
 80091b6:	9742      	str	r7, [sp, #264]	; 0x108
 80091b8:	9347      	str	r3, [sp, #284]	; 0x11c
 80091ba:	e027      	b.n	800920c <__ssvfiscanf_r+0x144>
 80091bc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80091be:	fb07 1303 	mla	r3, r7, r3, r1
 80091c2:	3b30      	subs	r3, #48	; 0x30
 80091c4:	9343      	str	r3, [sp, #268]	; 0x10c
 80091c6:	e7cf      	b.n	8009168 <__ssvfiscanf_r+0xa0>
 80091c8:	2b5b      	cmp	r3, #91	; 0x5b
 80091ca:	d06a      	beq.n	80092a2 <__ssvfiscanf_r+0x1da>
 80091cc:	d80c      	bhi.n	80091e8 <__ssvfiscanf_r+0x120>
 80091ce:	2b58      	cmp	r3, #88	; 0x58
 80091d0:	d1f0      	bne.n	80091b4 <__ssvfiscanf_r+0xec>
 80091d2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80091d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80091d8:	9241      	str	r2, [sp, #260]	; 0x104
 80091da:	2210      	movs	r2, #16
 80091dc:	9242      	str	r2, [sp, #264]	; 0x108
 80091de:	2b6e      	cmp	r3, #110	; 0x6e
 80091e0:	bf8c      	ite	hi
 80091e2:	2304      	movhi	r3, #4
 80091e4:	2303      	movls	r3, #3
 80091e6:	e010      	b.n	800920a <__ssvfiscanf_r+0x142>
 80091e8:	2b63      	cmp	r3, #99	; 0x63
 80091ea:	d065      	beq.n	80092b8 <__ssvfiscanf_r+0x1f0>
 80091ec:	2b64      	cmp	r3, #100	; 0x64
 80091ee:	d1e1      	bne.n	80091b4 <__ssvfiscanf_r+0xec>
 80091f0:	9742      	str	r7, [sp, #264]	; 0x108
 80091f2:	e7f4      	b.n	80091de <__ssvfiscanf_r+0x116>
 80091f4:	2b70      	cmp	r3, #112	; 0x70
 80091f6:	d04b      	beq.n	8009290 <__ssvfiscanf_r+0x1c8>
 80091f8:	d826      	bhi.n	8009248 <__ssvfiscanf_r+0x180>
 80091fa:	2b6e      	cmp	r3, #110	; 0x6e
 80091fc:	d062      	beq.n	80092c4 <__ssvfiscanf_r+0x1fc>
 80091fe:	d84c      	bhi.n	800929a <__ssvfiscanf_r+0x1d2>
 8009200:	2b69      	cmp	r3, #105	; 0x69
 8009202:	d1d7      	bne.n	80091b4 <__ssvfiscanf_r+0xec>
 8009204:	2300      	movs	r3, #0
 8009206:	9342      	str	r3, [sp, #264]	; 0x108
 8009208:	2303      	movs	r3, #3
 800920a:	9347      	str	r3, [sp, #284]	; 0x11c
 800920c:	6863      	ldr	r3, [r4, #4]
 800920e:	2b00      	cmp	r3, #0
 8009210:	dd68      	ble.n	80092e4 <__ssvfiscanf_r+0x21c>
 8009212:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009214:	0659      	lsls	r1, r3, #25
 8009216:	d407      	bmi.n	8009228 <__ssvfiscanf_r+0x160>
 8009218:	f7ff f91c 	bl	8008454 <__locale_ctype_ptr>
 800921c:	6823      	ldr	r3, [r4, #0]
 800921e:	781a      	ldrb	r2, [r3, #0]
 8009220:	4410      	add	r0, r2
 8009222:	7842      	ldrb	r2, [r0, #1]
 8009224:	0712      	lsls	r2, r2, #28
 8009226:	d464      	bmi.n	80092f2 <__ssvfiscanf_r+0x22a>
 8009228:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800922a:	2b02      	cmp	r3, #2
 800922c:	dc73      	bgt.n	8009316 <__ssvfiscanf_r+0x24e>
 800922e:	466b      	mov	r3, sp
 8009230:	4622      	mov	r2, r4
 8009232:	a941      	add	r1, sp, #260	; 0x104
 8009234:	4630      	mov	r0, r6
 8009236:	f000 fa1f 	bl	8009678 <_scanf_chars>
 800923a:	2801      	cmp	r0, #1
 800923c:	f000 8089 	beq.w	8009352 <__ssvfiscanf_r+0x28a>
 8009240:	2802      	cmp	r0, #2
 8009242:	f47f af71 	bne.w	8009128 <__ssvfiscanf_r+0x60>
 8009246:	e01d      	b.n	8009284 <__ssvfiscanf_r+0x1bc>
 8009248:	2b75      	cmp	r3, #117	; 0x75
 800924a:	d0d1      	beq.n	80091f0 <__ssvfiscanf_r+0x128>
 800924c:	2b78      	cmp	r3, #120	; 0x78
 800924e:	d0c0      	beq.n	80091d2 <__ssvfiscanf_r+0x10a>
 8009250:	2b73      	cmp	r3, #115	; 0x73
 8009252:	d1af      	bne.n	80091b4 <__ssvfiscanf_r+0xec>
 8009254:	2302      	movs	r3, #2
 8009256:	e7d8      	b.n	800920a <__ssvfiscanf_r+0x142>
 8009258:	6863      	ldr	r3, [r4, #4]
 800925a:	2b00      	cmp	r3, #0
 800925c:	dd0c      	ble.n	8009278 <__ssvfiscanf_r+0x1b0>
 800925e:	6823      	ldr	r3, [r4, #0]
 8009260:	781a      	ldrb	r2, [r3, #0]
 8009262:	455a      	cmp	r2, fp
 8009264:	d175      	bne.n	8009352 <__ssvfiscanf_r+0x28a>
 8009266:	3301      	adds	r3, #1
 8009268:	6862      	ldr	r2, [r4, #4]
 800926a:	6023      	str	r3, [r4, #0]
 800926c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800926e:	3a01      	subs	r2, #1
 8009270:	3301      	adds	r3, #1
 8009272:	6062      	str	r2, [r4, #4]
 8009274:	9345      	str	r3, [sp, #276]	; 0x114
 8009276:	e757      	b.n	8009128 <__ssvfiscanf_r+0x60>
 8009278:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800927a:	4621      	mov	r1, r4
 800927c:	4630      	mov	r0, r6
 800927e:	4798      	blx	r3
 8009280:	2800      	cmp	r0, #0
 8009282:	d0ec      	beq.n	800925e <__ssvfiscanf_r+0x196>
 8009284:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009286:	2800      	cmp	r0, #0
 8009288:	d159      	bne.n	800933e <__ssvfiscanf_r+0x276>
 800928a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800928e:	e05c      	b.n	800934a <__ssvfiscanf_r+0x282>
 8009290:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009292:	f042 0220 	orr.w	r2, r2, #32
 8009296:	9241      	str	r2, [sp, #260]	; 0x104
 8009298:	e79b      	b.n	80091d2 <__ssvfiscanf_r+0x10a>
 800929a:	2308      	movs	r3, #8
 800929c:	9342      	str	r3, [sp, #264]	; 0x108
 800929e:	2304      	movs	r3, #4
 80092a0:	e7b3      	b.n	800920a <__ssvfiscanf_r+0x142>
 80092a2:	4629      	mov	r1, r5
 80092a4:	4640      	mov	r0, r8
 80092a6:	f000 fb4f 	bl	8009948 <__sccl>
 80092aa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80092ac:	4605      	mov	r5, r0
 80092ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092b2:	9341      	str	r3, [sp, #260]	; 0x104
 80092b4:	2301      	movs	r3, #1
 80092b6:	e7a8      	b.n	800920a <__ssvfiscanf_r+0x142>
 80092b8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80092ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092be:	9341      	str	r3, [sp, #260]	; 0x104
 80092c0:	2300      	movs	r3, #0
 80092c2:	e7a2      	b.n	800920a <__ssvfiscanf_r+0x142>
 80092c4:	9841      	ldr	r0, [sp, #260]	; 0x104
 80092c6:	06c3      	lsls	r3, r0, #27
 80092c8:	f53f af2e 	bmi.w	8009128 <__ssvfiscanf_r+0x60>
 80092cc:	9b00      	ldr	r3, [sp, #0]
 80092ce:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80092d0:	1d19      	adds	r1, r3, #4
 80092d2:	9100      	str	r1, [sp, #0]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	07c0      	lsls	r0, r0, #31
 80092d8:	bf4c      	ite	mi
 80092da:	801a      	strhmi	r2, [r3, #0]
 80092dc:	601a      	strpl	r2, [r3, #0]
 80092de:	e723      	b.n	8009128 <__ssvfiscanf_r+0x60>
 80092e0:	2305      	movs	r3, #5
 80092e2:	e792      	b.n	800920a <__ssvfiscanf_r+0x142>
 80092e4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80092e6:	4621      	mov	r1, r4
 80092e8:	4630      	mov	r0, r6
 80092ea:	4798      	blx	r3
 80092ec:	2800      	cmp	r0, #0
 80092ee:	d090      	beq.n	8009212 <__ssvfiscanf_r+0x14a>
 80092f0:	e7c8      	b.n	8009284 <__ssvfiscanf_r+0x1bc>
 80092f2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80092f4:	3201      	adds	r2, #1
 80092f6:	9245      	str	r2, [sp, #276]	; 0x114
 80092f8:	6862      	ldr	r2, [r4, #4]
 80092fa:	3a01      	subs	r2, #1
 80092fc:	2a00      	cmp	r2, #0
 80092fe:	6062      	str	r2, [r4, #4]
 8009300:	dd02      	ble.n	8009308 <__ssvfiscanf_r+0x240>
 8009302:	3301      	adds	r3, #1
 8009304:	6023      	str	r3, [r4, #0]
 8009306:	e787      	b.n	8009218 <__ssvfiscanf_r+0x150>
 8009308:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800930a:	4621      	mov	r1, r4
 800930c:	4630      	mov	r0, r6
 800930e:	4798      	blx	r3
 8009310:	2800      	cmp	r0, #0
 8009312:	d081      	beq.n	8009218 <__ssvfiscanf_r+0x150>
 8009314:	e7b6      	b.n	8009284 <__ssvfiscanf_r+0x1bc>
 8009316:	2b04      	cmp	r3, #4
 8009318:	dc06      	bgt.n	8009328 <__ssvfiscanf_r+0x260>
 800931a:	466b      	mov	r3, sp
 800931c:	4622      	mov	r2, r4
 800931e:	a941      	add	r1, sp, #260	; 0x104
 8009320:	4630      	mov	r0, r6
 8009322:	f000 fa0b 	bl	800973c <_scanf_i>
 8009326:	e788      	b.n	800923a <__ssvfiscanf_r+0x172>
 8009328:	4b0e      	ldr	r3, [pc, #56]	; (8009364 <__ssvfiscanf_r+0x29c>)
 800932a:	2b00      	cmp	r3, #0
 800932c:	f43f aefc 	beq.w	8009128 <__ssvfiscanf_r+0x60>
 8009330:	466b      	mov	r3, sp
 8009332:	4622      	mov	r2, r4
 8009334:	a941      	add	r1, sp, #260	; 0x104
 8009336:	4630      	mov	r0, r6
 8009338:	f7fd fc5c 	bl	8006bf4 <_scanf_float>
 800933c:	e77d      	b.n	800923a <__ssvfiscanf_r+0x172>
 800933e:	89a3      	ldrh	r3, [r4, #12]
 8009340:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009344:	bf18      	it	ne
 8009346:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800934a:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800934e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009352:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009354:	e7f9      	b.n	800934a <__ssvfiscanf_r+0x282>
 8009356:	bf00      	nop
 8009358:	08009015 	.word	0x08009015
 800935c:	0800908f 	.word	0x0800908f
 8009360:	08009fca 	.word	0x08009fca
 8009364:	08006bf5 	.word	0x08006bf5

08009368 <_printf_common>:
 8009368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800936c:	4691      	mov	r9, r2
 800936e:	461f      	mov	r7, r3
 8009370:	688a      	ldr	r2, [r1, #8]
 8009372:	690b      	ldr	r3, [r1, #16]
 8009374:	4606      	mov	r6, r0
 8009376:	4293      	cmp	r3, r2
 8009378:	bfb8      	it	lt
 800937a:	4613      	movlt	r3, r2
 800937c:	f8c9 3000 	str.w	r3, [r9]
 8009380:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009384:	460c      	mov	r4, r1
 8009386:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800938a:	b112      	cbz	r2, 8009392 <_printf_common+0x2a>
 800938c:	3301      	adds	r3, #1
 800938e:	f8c9 3000 	str.w	r3, [r9]
 8009392:	6823      	ldr	r3, [r4, #0]
 8009394:	0699      	lsls	r1, r3, #26
 8009396:	bf42      	ittt	mi
 8009398:	f8d9 3000 	ldrmi.w	r3, [r9]
 800939c:	3302      	addmi	r3, #2
 800939e:	f8c9 3000 	strmi.w	r3, [r9]
 80093a2:	6825      	ldr	r5, [r4, #0]
 80093a4:	f015 0506 	ands.w	r5, r5, #6
 80093a8:	d107      	bne.n	80093ba <_printf_common+0x52>
 80093aa:	f104 0a19 	add.w	sl, r4, #25
 80093ae:	68e3      	ldr	r3, [r4, #12]
 80093b0:	f8d9 2000 	ldr.w	r2, [r9]
 80093b4:	1a9b      	subs	r3, r3, r2
 80093b6:	42ab      	cmp	r3, r5
 80093b8:	dc29      	bgt.n	800940e <_printf_common+0xa6>
 80093ba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80093be:	6822      	ldr	r2, [r4, #0]
 80093c0:	3300      	adds	r3, #0
 80093c2:	bf18      	it	ne
 80093c4:	2301      	movne	r3, #1
 80093c6:	0692      	lsls	r2, r2, #26
 80093c8:	d42e      	bmi.n	8009428 <_printf_common+0xc0>
 80093ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80093ce:	4639      	mov	r1, r7
 80093d0:	4630      	mov	r0, r6
 80093d2:	47c0      	blx	r8
 80093d4:	3001      	adds	r0, #1
 80093d6:	d021      	beq.n	800941c <_printf_common+0xb4>
 80093d8:	6823      	ldr	r3, [r4, #0]
 80093da:	68e5      	ldr	r5, [r4, #12]
 80093dc:	f003 0306 	and.w	r3, r3, #6
 80093e0:	2b04      	cmp	r3, #4
 80093e2:	bf18      	it	ne
 80093e4:	2500      	movne	r5, #0
 80093e6:	f8d9 2000 	ldr.w	r2, [r9]
 80093ea:	f04f 0900 	mov.w	r9, #0
 80093ee:	bf08      	it	eq
 80093f0:	1aad      	subeq	r5, r5, r2
 80093f2:	68a3      	ldr	r3, [r4, #8]
 80093f4:	6922      	ldr	r2, [r4, #16]
 80093f6:	bf08      	it	eq
 80093f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80093fc:	4293      	cmp	r3, r2
 80093fe:	bfc4      	itt	gt
 8009400:	1a9b      	subgt	r3, r3, r2
 8009402:	18ed      	addgt	r5, r5, r3
 8009404:	341a      	adds	r4, #26
 8009406:	454d      	cmp	r5, r9
 8009408:	d11a      	bne.n	8009440 <_printf_common+0xd8>
 800940a:	2000      	movs	r0, #0
 800940c:	e008      	b.n	8009420 <_printf_common+0xb8>
 800940e:	2301      	movs	r3, #1
 8009410:	4652      	mov	r2, sl
 8009412:	4639      	mov	r1, r7
 8009414:	4630      	mov	r0, r6
 8009416:	47c0      	blx	r8
 8009418:	3001      	adds	r0, #1
 800941a:	d103      	bne.n	8009424 <_printf_common+0xbc>
 800941c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009424:	3501      	adds	r5, #1
 8009426:	e7c2      	b.n	80093ae <_printf_common+0x46>
 8009428:	2030      	movs	r0, #48	; 0x30
 800942a:	18e1      	adds	r1, r4, r3
 800942c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009430:	1c5a      	adds	r2, r3, #1
 8009432:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009436:	4422      	add	r2, r4
 8009438:	3302      	adds	r3, #2
 800943a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800943e:	e7c4      	b.n	80093ca <_printf_common+0x62>
 8009440:	2301      	movs	r3, #1
 8009442:	4622      	mov	r2, r4
 8009444:	4639      	mov	r1, r7
 8009446:	4630      	mov	r0, r6
 8009448:	47c0      	blx	r8
 800944a:	3001      	adds	r0, #1
 800944c:	d0e6      	beq.n	800941c <_printf_common+0xb4>
 800944e:	f109 0901 	add.w	r9, r9, #1
 8009452:	e7d8      	b.n	8009406 <_printf_common+0x9e>

08009454 <_printf_i>:
 8009454:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009458:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800945c:	460c      	mov	r4, r1
 800945e:	7e09      	ldrb	r1, [r1, #24]
 8009460:	b085      	sub	sp, #20
 8009462:	296e      	cmp	r1, #110	; 0x6e
 8009464:	4617      	mov	r7, r2
 8009466:	4606      	mov	r6, r0
 8009468:	4698      	mov	r8, r3
 800946a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800946c:	f000 80b3 	beq.w	80095d6 <_printf_i+0x182>
 8009470:	d822      	bhi.n	80094b8 <_printf_i+0x64>
 8009472:	2963      	cmp	r1, #99	; 0x63
 8009474:	d036      	beq.n	80094e4 <_printf_i+0x90>
 8009476:	d80a      	bhi.n	800948e <_printf_i+0x3a>
 8009478:	2900      	cmp	r1, #0
 800947a:	f000 80b9 	beq.w	80095f0 <_printf_i+0x19c>
 800947e:	2958      	cmp	r1, #88	; 0x58
 8009480:	f000 8083 	beq.w	800958a <_printf_i+0x136>
 8009484:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009488:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800948c:	e032      	b.n	80094f4 <_printf_i+0xa0>
 800948e:	2964      	cmp	r1, #100	; 0x64
 8009490:	d001      	beq.n	8009496 <_printf_i+0x42>
 8009492:	2969      	cmp	r1, #105	; 0x69
 8009494:	d1f6      	bne.n	8009484 <_printf_i+0x30>
 8009496:	6820      	ldr	r0, [r4, #0]
 8009498:	6813      	ldr	r3, [r2, #0]
 800949a:	0605      	lsls	r5, r0, #24
 800949c:	f103 0104 	add.w	r1, r3, #4
 80094a0:	d52a      	bpl.n	80094f8 <_printf_i+0xa4>
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	6011      	str	r1, [r2, #0]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	da03      	bge.n	80094b2 <_printf_i+0x5e>
 80094aa:	222d      	movs	r2, #45	; 0x2d
 80094ac:	425b      	negs	r3, r3
 80094ae:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80094b2:	486f      	ldr	r0, [pc, #444]	; (8009670 <_printf_i+0x21c>)
 80094b4:	220a      	movs	r2, #10
 80094b6:	e039      	b.n	800952c <_printf_i+0xd8>
 80094b8:	2973      	cmp	r1, #115	; 0x73
 80094ba:	f000 809d 	beq.w	80095f8 <_printf_i+0x1a4>
 80094be:	d808      	bhi.n	80094d2 <_printf_i+0x7e>
 80094c0:	296f      	cmp	r1, #111	; 0x6f
 80094c2:	d020      	beq.n	8009506 <_printf_i+0xb2>
 80094c4:	2970      	cmp	r1, #112	; 0x70
 80094c6:	d1dd      	bne.n	8009484 <_printf_i+0x30>
 80094c8:	6823      	ldr	r3, [r4, #0]
 80094ca:	f043 0320 	orr.w	r3, r3, #32
 80094ce:	6023      	str	r3, [r4, #0]
 80094d0:	e003      	b.n	80094da <_printf_i+0x86>
 80094d2:	2975      	cmp	r1, #117	; 0x75
 80094d4:	d017      	beq.n	8009506 <_printf_i+0xb2>
 80094d6:	2978      	cmp	r1, #120	; 0x78
 80094d8:	d1d4      	bne.n	8009484 <_printf_i+0x30>
 80094da:	2378      	movs	r3, #120	; 0x78
 80094dc:	4865      	ldr	r0, [pc, #404]	; (8009674 <_printf_i+0x220>)
 80094de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80094e2:	e055      	b.n	8009590 <_printf_i+0x13c>
 80094e4:	6813      	ldr	r3, [r2, #0]
 80094e6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80094ea:	1d19      	adds	r1, r3, #4
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	6011      	str	r1, [r2, #0]
 80094f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80094f4:	2301      	movs	r3, #1
 80094f6:	e08c      	b.n	8009612 <_printf_i+0x1be>
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80094fe:	6011      	str	r1, [r2, #0]
 8009500:	bf18      	it	ne
 8009502:	b21b      	sxthne	r3, r3
 8009504:	e7cf      	b.n	80094a6 <_printf_i+0x52>
 8009506:	6813      	ldr	r3, [r2, #0]
 8009508:	6825      	ldr	r5, [r4, #0]
 800950a:	1d18      	adds	r0, r3, #4
 800950c:	6010      	str	r0, [r2, #0]
 800950e:	0628      	lsls	r0, r5, #24
 8009510:	d501      	bpl.n	8009516 <_printf_i+0xc2>
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	e002      	b.n	800951c <_printf_i+0xc8>
 8009516:	0668      	lsls	r0, r5, #25
 8009518:	d5fb      	bpl.n	8009512 <_printf_i+0xbe>
 800951a:	881b      	ldrh	r3, [r3, #0]
 800951c:	296f      	cmp	r1, #111	; 0x6f
 800951e:	bf14      	ite	ne
 8009520:	220a      	movne	r2, #10
 8009522:	2208      	moveq	r2, #8
 8009524:	4852      	ldr	r0, [pc, #328]	; (8009670 <_printf_i+0x21c>)
 8009526:	2100      	movs	r1, #0
 8009528:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800952c:	6865      	ldr	r5, [r4, #4]
 800952e:	2d00      	cmp	r5, #0
 8009530:	60a5      	str	r5, [r4, #8]
 8009532:	f2c0 8095 	blt.w	8009660 <_printf_i+0x20c>
 8009536:	6821      	ldr	r1, [r4, #0]
 8009538:	f021 0104 	bic.w	r1, r1, #4
 800953c:	6021      	str	r1, [r4, #0]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d13d      	bne.n	80095be <_printf_i+0x16a>
 8009542:	2d00      	cmp	r5, #0
 8009544:	f040 808e 	bne.w	8009664 <_printf_i+0x210>
 8009548:	4665      	mov	r5, ip
 800954a:	2a08      	cmp	r2, #8
 800954c:	d10b      	bne.n	8009566 <_printf_i+0x112>
 800954e:	6823      	ldr	r3, [r4, #0]
 8009550:	07db      	lsls	r3, r3, #31
 8009552:	d508      	bpl.n	8009566 <_printf_i+0x112>
 8009554:	6923      	ldr	r3, [r4, #16]
 8009556:	6862      	ldr	r2, [r4, #4]
 8009558:	429a      	cmp	r2, r3
 800955a:	bfde      	ittt	le
 800955c:	2330      	movle	r3, #48	; 0x30
 800955e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009562:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009566:	ebac 0305 	sub.w	r3, ip, r5
 800956a:	6123      	str	r3, [r4, #16]
 800956c:	f8cd 8000 	str.w	r8, [sp]
 8009570:	463b      	mov	r3, r7
 8009572:	aa03      	add	r2, sp, #12
 8009574:	4621      	mov	r1, r4
 8009576:	4630      	mov	r0, r6
 8009578:	f7ff fef6 	bl	8009368 <_printf_common>
 800957c:	3001      	adds	r0, #1
 800957e:	d14d      	bne.n	800961c <_printf_i+0x1c8>
 8009580:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009584:	b005      	add	sp, #20
 8009586:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800958a:	4839      	ldr	r0, [pc, #228]	; (8009670 <_printf_i+0x21c>)
 800958c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009590:	6813      	ldr	r3, [r2, #0]
 8009592:	6821      	ldr	r1, [r4, #0]
 8009594:	1d1d      	adds	r5, r3, #4
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	6015      	str	r5, [r2, #0]
 800959a:	060a      	lsls	r2, r1, #24
 800959c:	d50b      	bpl.n	80095b6 <_printf_i+0x162>
 800959e:	07ca      	lsls	r2, r1, #31
 80095a0:	bf44      	itt	mi
 80095a2:	f041 0120 	orrmi.w	r1, r1, #32
 80095a6:	6021      	strmi	r1, [r4, #0]
 80095a8:	b91b      	cbnz	r3, 80095b2 <_printf_i+0x15e>
 80095aa:	6822      	ldr	r2, [r4, #0]
 80095ac:	f022 0220 	bic.w	r2, r2, #32
 80095b0:	6022      	str	r2, [r4, #0]
 80095b2:	2210      	movs	r2, #16
 80095b4:	e7b7      	b.n	8009526 <_printf_i+0xd2>
 80095b6:	064d      	lsls	r5, r1, #25
 80095b8:	bf48      	it	mi
 80095ba:	b29b      	uxthmi	r3, r3
 80095bc:	e7ef      	b.n	800959e <_printf_i+0x14a>
 80095be:	4665      	mov	r5, ip
 80095c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80095c4:	fb02 3311 	mls	r3, r2, r1, r3
 80095c8:	5cc3      	ldrb	r3, [r0, r3]
 80095ca:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80095ce:	460b      	mov	r3, r1
 80095d0:	2900      	cmp	r1, #0
 80095d2:	d1f5      	bne.n	80095c0 <_printf_i+0x16c>
 80095d4:	e7b9      	b.n	800954a <_printf_i+0xf6>
 80095d6:	6813      	ldr	r3, [r2, #0]
 80095d8:	6825      	ldr	r5, [r4, #0]
 80095da:	1d18      	adds	r0, r3, #4
 80095dc:	6961      	ldr	r1, [r4, #20]
 80095de:	6010      	str	r0, [r2, #0]
 80095e0:	0628      	lsls	r0, r5, #24
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	d501      	bpl.n	80095ea <_printf_i+0x196>
 80095e6:	6019      	str	r1, [r3, #0]
 80095e8:	e002      	b.n	80095f0 <_printf_i+0x19c>
 80095ea:	066a      	lsls	r2, r5, #25
 80095ec:	d5fb      	bpl.n	80095e6 <_printf_i+0x192>
 80095ee:	8019      	strh	r1, [r3, #0]
 80095f0:	2300      	movs	r3, #0
 80095f2:	4665      	mov	r5, ip
 80095f4:	6123      	str	r3, [r4, #16]
 80095f6:	e7b9      	b.n	800956c <_printf_i+0x118>
 80095f8:	6813      	ldr	r3, [r2, #0]
 80095fa:	1d19      	adds	r1, r3, #4
 80095fc:	6011      	str	r1, [r2, #0]
 80095fe:	681d      	ldr	r5, [r3, #0]
 8009600:	6862      	ldr	r2, [r4, #4]
 8009602:	2100      	movs	r1, #0
 8009604:	4628      	mov	r0, r5
 8009606:	f000 faab 	bl	8009b60 <memchr>
 800960a:	b108      	cbz	r0, 8009610 <_printf_i+0x1bc>
 800960c:	1b40      	subs	r0, r0, r5
 800960e:	6060      	str	r0, [r4, #4]
 8009610:	6863      	ldr	r3, [r4, #4]
 8009612:	6123      	str	r3, [r4, #16]
 8009614:	2300      	movs	r3, #0
 8009616:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800961a:	e7a7      	b.n	800956c <_printf_i+0x118>
 800961c:	6923      	ldr	r3, [r4, #16]
 800961e:	462a      	mov	r2, r5
 8009620:	4639      	mov	r1, r7
 8009622:	4630      	mov	r0, r6
 8009624:	47c0      	blx	r8
 8009626:	3001      	adds	r0, #1
 8009628:	d0aa      	beq.n	8009580 <_printf_i+0x12c>
 800962a:	6823      	ldr	r3, [r4, #0]
 800962c:	079b      	lsls	r3, r3, #30
 800962e:	d413      	bmi.n	8009658 <_printf_i+0x204>
 8009630:	68e0      	ldr	r0, [r4, #12]
 8009632:	9b03      	ldr	r3, [sp, #12]
 8009634:	4298      	cmp	r0, r3
 8009636:	bfb8      	it	lt
 8009638:	4618      	movlt	r0, r3
 800963a:	e7a3      	b.n	8009584 <_printf_i+0x130>
 800963c:	2301      	movs	r3, #1
 800963e:	464a      	mov	r2, r9
 8009640:	4639      	mov	r1, r7
 8009642:	4630      	mov	r0, r6
 8009644:	47c0      	blx	r8
 8009646:	3001      	adds	r0, #1
 8009648:	d09a      	beq.n	8009580 <_printf_i+0x12c>
 800964a:	3501      	adds	r5, #1
 800964c:	68e3      	ldr	r3, [r4, #12]
 800964e:	9a03      	ldr	r2, [sp, #12]
 8009650:	1a9b      	subs	r3, r3, r2
 8009652:	42ab      	cmp	r3, r5
 8009654:	dcf2      	bgt.n	800963c <_printf_i+0x1e8>
 8009656:	e7eb      	b.n	8009630 <_printf_i+0x1dc>
 8009658:	2500      	movs	r5, #0
 800965a:	f104 0919 	add.w	r9, r4, #25
 800965e:	e7f5      	b.n	800964c <_printf_i+0x1f8>
 8009660:	2b00      	cmp	r3, #0
 8009662:	d1ac      	bne.n	80095be <_printf_i+0x16a>
 8009664:	7803      	ldrb	r3, [r0, #0]
 8009666:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800966a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800966e:	e76c      	b.n	800954a <_printf_i+0xf6>
 8009670:	08009fd5 	.word	0x08009fd5
 8009674:	08009fe6 	.word	0x08009fe6

08009678 <_scanf_chars>:
 8009678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800967c:	4615      	mov	r5, r2
 800967e:	688a      	ldr	r2, [r1, #8]
 8009680:	4680      	mov	r8, r0
 8009682:	460c      	mov	r4, r1
 8009684:	b932      	cbnz	r2, 8009694 <_scanf_chars+0x1c>
 8009686:	698a      	ldr	r2, [r1, #24]
 8009688:	2a00      	cmp	r2, #0
 800968a:	bf14      	ite	ne
 800968c:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8009690:	2201      	moveq	r2, #1
 8009692:	608a      	str	r2, [r1, #8]
 8009694:	2600      	movs	r6, #0
 8009696:	6822      	ldr	r2, [r4, #0]
 8009698:	06d1      	lsls	r1, r2, #27
 800969a:	bf5f      	itttt	pl
 800969c:	681a      	ldrpl	r2, [r3, #0]
 800969e:	1d11      	addpl	r1, r2, #4
 80096a0:	6019      	strpl	r1, [r3, #0]
 80096a2:	6817      	ldrpl	r7, [r2, #0]
 80096a4:	69a3      	ldr	r3, [r4, #24]
 80096a6:	b1db      	cbz	r3, 80096e0 <_scanf_chars+0x68>
 80096a8:	2b01      	cmp	r3, #1
 80096aa:	d107      	bne.n	80096bc <_scanf_chars+0x44>
 80096ac:	682b      	ldr	r3, [r5, #0]
 80096ae:	6962      	ldr	r2, [r4, #20]
 80096b0:	781b      	ldrb	r3, [r3, #0]
 80096b2:	5cd3      	ldrb	r3, [r2, r3]
 80096b4:	b9a3      	cbnz	r3, 80096e0 <_scanf_chars+0x68>
 80096b6:	2e00      	cmp	r6, #0
 80096b8:	d131      	bne.n	800971e <_scanf_chars+0xa6>
 80096ba:	e006      	b.n	80096ca <_scanf_chars+0x52>
 80096bc:	2b02      	cmp	r3, #2
 80096be:	d007      	beq.n	80096d0 <_scanf_chars+0x58>
 80096c0:	2e00      	cmp	r6, #0
 80096c2:	d12c      	bne.n	800971e <_scanf_chars+0xa6>
 80096c4:	69a3      	ldr	r3, [r4, #24]
 80096c6:	2b01      	cmp	r3, #1
 80096c8:	d129      	bne.n	800971e <_scanf_chars+0xa6>
 80096ca:	2001      	movs	r0, #1
 80096cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096d0:	f7fe fec0 	bl	8008454 <__locale_ctype_ptr>
 80096d4:	682b      	ldr	r3, [r5, #0]
 80096d6:	781b      	ldrb	r3, [r3, #0]
 80096d8:	4418      	add	r0, r3
 80096da:	7843      	ldrb	r3, [r0, #1]
 80096dc:	071b      	lsls	r3, r3, #28
 80096de:	d4ef      	bmi.n	80096c0 <_scanf_chars+0x48>
 80096e0:	6823      	ldr	r3, [r4, #0]
 80096e2:	3601      	adds	r6, #1
 80096e4:	06da      	lsls	r2, r3, #27
 80096e6:	bf5e      	ittt	pl
 80096e8:	682b      	ldrpl	r3, [r5, #0]
 80096ea:	781b      	ldrbpl	r3, [r3, #0]
 80096ec:	703b      	strbpl	r3, [r7, #0]
 80096ee:	682a      	ldr	r2, [r5, #0]
 80096f0:	686b      	ldr	r3, [r5, #4]
 80096f2:	f102 0201 	add.w	r2, r2, #1
 80096f6:	602a      	str	r2, [r5, #0]
 80096f8:	68a2      	ldr	r2, [r4, #8]
 80096fa:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80096fe:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8009702:	606b      	str	r3, [r5, #4]
 8009704:	bf58      	it	pl
 8009706:	3701      	addpl	r7, #1
 8009708:	60a2      	str	r2, [r4, #8]
 800970a:	b142      	cbz	r2, 800971e <_scanf_chars+0xa6>
 800970c:	2b00      	cmp	r3, #0
 800970e:	dcc9      	bgt.n	80096a4 <_scanf_chars+0x2c>
 8009710:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009714:	4629      	mov	r1, r5
 8009716:	4640      	mov	r0, r8
 8009718:	4798      	blx	r3
 800971a:	2800      	cmp	r0, #0
 800971c:	d0c2      	beq.n	80096a4 <_scanf_chars+0x2c>
 800971e:	6823      	ldr	r3, [r4, #0]
 8009720:	f013 0310 	ands.w	r3, r3, #16
 8009724:	d105      	bne.n	8009732 <_scanf_chars+0xba>
 8009726:	68e2      	ldr	r2, [r4, #12]
 8009728:	3201      	adds	r2, #1
 800972a:	60e2      	str	r2, [r4, #12]
 800972c:	69a2      	ldr	r2, [r4, #24]
 800972e:	b102      	cbz	r2, 8009732 <_scanf_chars+0xba>
 8009730:	703b      	strb	r3, [r7, #0]
 8009732:	6923      	ldr	r3, [r4, #16]
 8009734:	2000      	movs	r0, #0
 8009736:	441e      	add	r6, r3
 8009738:	6126      	str	r6, [r4, #16]
 800973a:	e7c7      	b.n	80096cc <_scanf_chars+0x54>

0800973c <_scanf_i>:
 800973c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009740:	460c      	mov	r4, r1
 8009742:	469a      	mov	sl, r3
 8009744:	4b74      	ldr	r3, [pc, #464]	; (8009918 <_scanf_i+0x1dc>)
 8009746:	b087      	sub	sp, #28
 8009748:	4683      	mov	fp, r0
 800974a:	4616      	mov	r6, r2
 800974c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009750:	ab03      	add	r3, sp, #12
 8009752:	68a7      	ldr	r7, [r4, #8]
 8009754:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009758:	4b70      	ldr	r3, [pc, #448]	; (800991c <_scanf_i+0x1e0>)
 800975a:	69a1      	ldr	r1, [r4, #24]
 800975c:	4a70      	ldr	r2, [pc, #448]	; (8009920 <_scanf_i+0x1e4>)
 800975e:	f104 091c 	add.w	r9, r4, #28
 8009762:	2903      	cmp	r1, #3
 8009764:	bf08      	it	eq
 8009766:	461a      	moveq	r2, r3
 8009768:	1e7b      	subs	r3, r7, #1
 800976a:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800976e:	bf84      	itt	hi
 8009770:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009774:	60a3      	strhi	r3, [r4, #8]
 8009776:	6823      	ldr	r3, [r4, #0]
 8009778:	bf88      	it	hi
 800977a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800977e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8009782:	6023      	str	r3, [r4, #0]
 8009784:	bf98      	it	ls
 8009786:	2700      	movls	r7, #0
 8009788:	464b      	mov	r3, r9
 800978a:	f04f 0800 	mov.w	r8, #0
 800978e:	9200      	str	r2, [sp, #0]
 8009790:	bf88      	it	hi
 8009792:	197f      	addhi	r7, r7, r5
 8009794:	6831      	ldr	r1, [r6, #0]
 8009796:	9301      	str	r3, [sp, #4]
 8009798:	ab03      	add	r3, sp, #12
 800979a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800979e:	2202      	movs	r2, #2
 80097a0:	7809      	ldrb	r1, [r1, #0]
 80097a2:	f000 f9dd 	bl	8009b60 <memchr>
 80097a6:	9b01      	ldr	r3, [sp, #4]
 80097a8:	b330      	cbz	r0, 80097f8 <_scanf_i+0xbc>
 80097aa:	f1b8 0f01 	cmp.w	r8, #1
 80097ae:	d15a      	bne.n	8009866 <_scanf_i+0x12a>
 80097b0:	6862      	ldr	r2, [r4, #4]
 80097b2:	b92a      	cbnz	r2, 80097c0 <_scanf_i+0x84>
 80097b4:	2108      	movs	r1, #8
 80097b6:	6822      	ldr	r2, [r4, #0]
 80097b8:	6061      	str	r1, [r4, #4]
 80097ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80097be:	6022      	str	r2, [r4, #0]
 80097c0:	6822      	ldr	r2, [r4, #0]
 80097c2:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80097c6:	6022      	str	r2, [r4, #0]
 80097c8:	68a2      	ldr	r2, [r4, #8]
 80097ca:	1e51      	subs	r1, r2, #1
 80097cc:	60a1      	str	r1, [r4, #8]
 80097ce:	b19a      	cbz	r2, 80097f8 <_scanf_i+0xbc>
 80097d0:	6832      	ldr	r2, [r6, #0]
 80097d2:	1c5d      	adds	r5, r3, #1
 80097d4:	1c51      	adds	r1, r2, #1
 80097d6:	6031      	str	r1, [r6, #0]
 80097d8:	7812      	ldrb	r2, [r2, #0]
 80097da:	701a      	strb	r2, [r3, #0]
 80097dc:	6873      	ldr	r3, [r6, #4]
 80097de:	3b01      	subs	r3, #1
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	6073      	str	r3, [r6, #4]
 80097e4:	dc07      	bgt.n	80097f6 <_scanf_i+0xba>
 80097e6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80097ea:	4631      	mov	r1, r6
 80097ec:	4658      	mov	r0, fp
 80097ee:	4798      	blx	r3
 80097f0:	2800      	cmp	r0, #0
 80097f2:	f040 8087 	bne.w	8009904 <_scanf_i+0x1c8>
 80097f6:	462b      	mov	r3, r5
 80097f8:	f108 0801 	add.w	r8, r8, #1
 80097fc:	f1b8 0f03 	cmp.w	r8, #3
 8009800:	d1c8      	bne.n	8009794 <_scanf_i+0x58>
 8009802:	6862      	ldr	r2, [r4, #4]
 8009804:	b90a      	cbnz	r2, 800980a <_scanf_i+0xce>
 8009806:	220a      	movs	r2, #10
 8009808:	6062      	str	r2, [r4, #4]
 800980a:	6862      	ldr	r2, [r4, #4]
 800980c:	4945      	ldr	r1, [pc, #276]	; (8009924 <_scanf_i+0x1e8>)
 800980e:	6960      	ldr	r0, [r4, #20]
 8009810:	1a89      	subs	r1, r1, r2
 8009812:	9301      	str	r3, [sp, #4]
 8009814:	f000 f898 	bl	8009948 <__sccl>
 8009818:	9b01      	ldr	r3, [sp, #4]
 800981a:	f04f 0800 	mov.w	r8, #0
 800981e:	461d      	mov	r5, r3
 8009820:	68a3      	ldr	r3, [r4, #8]
 8009822:	6822      	ldr	r2, [r4, #0]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d03b      	beq.n	80098a0 <_scanf_i+0x164>
 8009828:	6831      	ldr	r1, [r6, #0]
 800982a:	6960      	ldr	r0, [r4, #20]
 800982c:	f891 c000 	ldrb.w	ip, [r1]
 8009830:	f810 000c 	ldrb.w	r0, [r0, ip]
 8009834:	2800      	cmp	r0, #0
 8009836:	d033      	beq.n	80098a0 <_scanf_i+0x164>
 8009838:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800983c:	d121      	bne.n	8009882 <_scanf_i+0x146>
 800983e:	0510      	lsls	r0, r2, #20
 8009840:	d51f      	bpl.n	8009882 <_scanf_i+0x146>
 8009842:	f108 0801 	add.w	r8, r8, #1
 8009846:	b117      	cbz	r7, 800984e <_scanf_i+0x112>
 8009848:	3301      	adds	r3, #1
 800984a:	3f01      	subs	r7, #1
 800984c:	60a3      	str	r3, [r4, #8]
 800984e:	6873      	ldr	r3, [r6, #4]
 8009850:	3b01      	subs	r3, #1
 8009852:	2b00      	cmp	r3, #0
 8009854:	6073      	str	r3, [r6, #4]
 8009856:	dd1c      	ble.n	8009892 <_scanf_i+0x156>
 8009858:	6833      	ldr	r3, [r6, #0]
 800985a:	3301      	adds	r3, #1
 800985c:	6033      	str	r3, [r6, #0]
 800985e:	68a3      	ldr	r3, [r4, #8]
 8009860:	3b01      	subs	r3, #1
 8009862:	60a3      	str	r3, [r4, #8]
 8009864:	e7dc      	b.n	8009820 <_scanf_i+0xe4>
 8009866:	f1b8 0f02 	cmp.w	r8, #2
 800986a:	d1ad      	bne.n	80097c8 <_scanf_i+0x8c>
 800986c:	6822      	ldr	r2, [r4, #0]
 800986e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8009872:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009876:	d1bf      	bne.n	80097f8 <_scanf_i+0xbc>
 8009878:	2110      	movs	r1, #16
 800987a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800987e:	6061      	str	r1, [r4, #4]
 8009880:	e7a1      	b.n	80097c6 <_scanf_i+0x8a>
 8009882:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8009886:	6022      	str	r2, [r4, #0]
 8009888:	780b      	ldrb	r3, [r1, #0]
 800988a:	3501      	adds	r5, #1
 800988c:	f805 3c01 	strb.w	r3, [r5, #-1]
 8009890:	e7dd      	b.n	800984e <_scanf_i+0x112>
 8009892:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009896:	4631      	mov	r1, r6
 8009898:	4658      	mov	r0, fp
 800989a:	4798      	blx	r3
 800989c:	2800      	cmp	r0, #0
 800989e:	d0de      	beq.n	800985e <_scanf_i+0x122>
 80098a0:	6823      	ldr	r3, [r4, #0]
 80098a2:	05d9      	lsls	r1, r3, #23
 80098a4:	d50c      	bpl.n	80098c0 <_scanf_i+0x184>
 80098a6:	454d      	cmp	r5, r9
 80098a8:	d908      	bls.n	80098bc <_scanf_i+0x180>
 80098aa:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80098ae:	1e6f      	subs	r7, r5, #1
 80098b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80098b4:	4632      	mov	r2, r6
 80098b6:	4658      	mov	r0, fp
 80098b8:	4798      	blx	r3
 80098ba:	463d      	mov	r5, r7
 80098bc:	454d      	cmp	r5, r9
 80098be:	d029      	beq.n	8009914 <_scanf_i+0x1d8>
 80098c0:	6822      	ldr	r2, [r4, #0]
 80098c2:	f012 0210 	ands.w	r2, r2, #16
 80098c6:	d113      	bne.n	80098f0 <_scanf_i+0x1b4>
 80098c8:	702a      	strb	r2, [r5, #0]
 80098ca:	6863      	ldr	r3, [r4, #4]
 80098cc:	4649      	mov	r1, r9
 80098ce:	4658      	mov	r0, fp
 80098d0:	9e00      	ldr	r6, [sp, #0]
 80098d2:	47b0      	blx	r6
 80098d4:	f8da 3000 	ldr.w	r3, [sl]
 80098d8:	6821      	ldr	r1, [r4, #0]
 80098da:	1d1a      	adds	r2, r3, #4
 80098dc:	f8ca 2000 	str.w	r2, [sl]
 80098e0:	f011 0f20 	tst.w	r1, #32
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	d010      	beq.n	800990a <_scanf_i+0x1ce>
 80098e8:	6018      	str	r0, [r3, #0]
 80098ea:	68e3      	ldr	r3, [r4, #12]
 80098ec:	3301      	adds	r3, #1
 80098ee:	60e3      	str	r3, [r4, #12]
 80098f0:	2000      	movs	r0, #0
 80098f2:	eba5 0509 	sub.w	r5, r5, r9
 80098f6:	44a8      	add	r8, r5
 80098f8:	6925      	ldr	r5, [r4, #16]
 80098fa:	4445      	add	r5, r8
 80098fc:	6125      	str	r5, [r4, #16]
 80098fe:	b007      	add	sp, #28
 8009900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009904:	f04f 0800 	mov.w	r8, #0
 8009908:	e7ca      	b.n	80098a0 <_scanf_i+0x164>
 800990a:	07ca      	lsls	r2, r1, #31
 800990c:	bf4c      	ite	mi
 800990e:	8018      	strhmi	r0, [r3, #0]
 8009910:	6018      	strpl	r0, [r3, #0]
 8009912:	e7ea      	b.n	80098ea <_scanf_i+0x1ae>
 8009914:	2001      	movs	r0, #1
 8009916:	e7f2      	b.n	80098fe <_scanf_i+0x1c2>
 8009918:	08009e24 	.word	0x08009e24
 800991c:	08007dd9 	.word	0x08007dd9
 8009920:	08009aa1 	.word	0x08009aa1
 8009924:	0800a007 	.word	0x0800a007

08009928 <_sbrk_r>:
 8009928:	b538      	push	{r3, r4, r5, lr}
 800992a:	2300      	movs	r3, #0
 800992c:	4c05      	ldr	r4, [pc, #20]	; (8009944 <_sbrk_r+0x1c>)
 800992e:	4605      	mov	r5, r0
 8009930:	4608      	mov	r0, r1
 8009932:	6023      	str	r3, [r4, #0]
 8009934:	f7f9 f910 	bl	8002b58 <_sbrk>
 8009938:	1c43      	adds	r3, r0, #1
 800993a:	d102      	bne.n	8009942 <_sbrk_r+0x1a>
 800993c:	6823      	ldr	r3, [r4, #0]
 800993e:	b103      	cbz	r3, 8009942 <_sbrk_r+0x1a>
 8009940:	602b      	str	r3, [r5, #0]
 8009942:	bd38      	pop	{r3, r4, r5, pc}
 8009944:	20000438 	.word	0x20000438

08009948 <__sccl>:
 8009948:	b570      	push	{r4, r5, r6, lr}
 800994a:	780b      	ldrb	r3, [r1, #0]
 800994c:	1e44      	subs	r4, r0, #1
 800994e:	2b5e      	cmp	r3, #94	; 0x5e
 8009950:	bf13      	iteet	ne
 8009952:	1c4a      	addne	r2, r1, #1
 8009954:	1c8a      	addeq	r2, r1, #2
 8009956:	784b      	ldrbeq	r3, [r1, #1]
 8009958:	2100      	movne	r1, #0
 800995a:	bf08      	it	eq
 800995c:	2101      	moveq	r1, #1
 800995e:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8009962:	f804 1f01 	strb.w	r1, [r4, #1]!
 8009966:	42ac      	cmp	r4, r5
 8009968:	d1fb      	bne.n	8009962 <__sccl+0x1a>
 800996a:	b913      	cbnz	r3, 8009972 <__sccl+0x2a>
 800996c:	3a01      	subs	r2, #1
 800996e:	4610      	mov	r0, r2
 8009970:	bd70      	pop	{r4, r5, r6, pc}
 8009972:	f081 0401 	eor.w	r4, r1, #1
 8009976:	54c4      	strb	r4, [r0, r3]
 8009978:	1c51      	adds	r1, r2, #1
 800997a:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 800997e:	1e4e      	subs	r6, r1, #1
 8009980:	2d2d      	cmp	r5, #45	; 0x2d
 8009982:	460a      	mov	r2, r1
 8009984:	d006      	beq.n	8009994 <__sccl+0x4c>
 8009986:	2d5d      	cmp	r5, #93	; 0x5d
 8009988:	d0f1      	beq.n	800996e <__sccl+0x26>
 800998a:	b90d      	cbnz	r5, 8009990 <__sccl+0x48>
 800998c:	4632      	mov	r2, r6
 800998e:	e7ee      	b.n	800996e <__sccl+0x26>
 8009990:	462b      	mov	r3, r5
 8009992:	e7f0      	b.n	8009976 <__sccl+0x2e>
 8009994:	780e      	ldrb	r6, [r1, #0]
 8009996:	2e5d      	cmp	r6, #93	; 0x5d
 8009998:	d0fa      	beq.n	8009990 <__sccl+0x48>
 800999a:	42b3      	cmp	r3, r6
 800999c:	dcf8      	bgt.n	8009990 <__sccl+0x48>
 800999e:	3301      	adds	r3, #1
 80099a0:	429e      	cmp	r6, r3
 80099a2:	54c4      	strb	r4, [r0, r3]
 80099a4:	dcfb      	bgt.n	800999e <__sccl+0x56>
 80099a6:	3102      	adds	r1, #2
 80099a8:	e7e7      	b.n	800997a <__sccl+0x32>

080099aa <_strtoul_l.isra.0>:
 80099aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099ae:	4680      	mov	r8, r0
 80099b0:	4689      	mov	r9, r1
 80099b2:	4692      	mov	sl, r2
 80099b4:	461e      	mov	r6, r3
 80099b6:	460f      	mov	r7, r1
 80099b8:	463d      	mov	r5, r7
 80099ba:	9808      	ldr	r0, [sp, #32]
 80099bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80099c0:	f7fe fd44 	bl	800844c <__locale_ctype_ptr_l>
 80099c4:	4420      	add	r0, r4
 80099c6:	7843      	ldrb	r3, [r0, #1]
 80099c8:	f013 0308 	ands.w	r3, r3, #8
 80099cc:	d130      	bne.n	8009a30 <_strtoul_l.isra.0+0x86>
 80099ce:	2c2d      	cmp	r4, #45	; 0x2d
 80099d0:	d130      	bne.n	8009a34 <_strtoul_l.isra.0+0x8a>
 80099d2:	2101      	movs	r1, #1
 80099d4:	787c      	ldrb	r4, [r7, #1]
 80099d6:	1cbd      	adds	r5, r7, #2
 80099d8:	2e00      	cmp	r6, #0
 80099da:	d05c      	beq.n	8009a96 <_strtoul_l.isra.0+0xec>
 80099dc:	2e10      	cmp	r6, #16
 80099de:	d109      	bne.n	80099f4 <_strtoul_l.isra.0+0x4a>
 80099e0:	2c30      	cmp	r4, #48	; 0x30
 80099e2:	d107      	bne.n	80099f4 <_strtoul_l.isra.0+0x4a>
 80099e4:	782b      	ldrb	r3, [r5, #0]
 80099e6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80099ea:	2b58      	cmp	r3, #88	; 0x58
 80099ec:	d14e      	bne.n	8009a8c <_strtoul_l.isra.0+0xe2>
 80099ee:	2610      	movs	r6, #16
 80099f0:	786c      	ldrb	r4, [r5, #1]
 80099f2:	3502      	adds	r5, #2
 80099f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80099f8:	fbb2 f2f6 	udiv	r2, r2, r6
 80099fc:	2300      	movs	r3, #0
 80099fe:	fb06 fc02 	mul.w	ip, r6, r2
 8009a02:	4618      	mov	r0, r3
 8009a04:	ea6f 0c0c 	mvn.w	ip, ip
 8009a08:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8009a0c:	2f09      	cmp	r7, #9
 8009a0e:	d817      	bhi.n	8009a40 <_strtoul_l.isra.0+0x96>
 8009a10:	463c      	mov	r4, r7
 8009a12:	42a6      	cmp	r6, r4
 8009a14:	dd23      	ble.n	8009a5e <_strtoul_l.isra.0+0xb4>
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	db1e      	blt.n	8009a58 <_strtoul_l.isra.0+0xae>
 8009a1a:	4282      	cmp	r2, r0
 8009a1c:	d31c      	bcc.n	8009a58 <_strtoul_l.isra.0+0xae>
 8009a1e:	d101      	bne.n	8009a24 <_strtoul_l.isra.0+0x7a>
 8009a20:	45a4      	cmp	ip, r4
 8009a22:	db19      	blt.n	8009a58 <_strtoul_l.isra.0+0xae>
 8009a24:	2301      	movs	r3, #1
 8009a26:	fb00 4006 	mla	r0, r0, r6, r4
 8009a2a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009a2e:	e7eb      	b.n	8009a08 <_strtoul_l.isra.0+0x5e>
 8009a30:	462f      	mov	r7, r5
 8009a32:	e7c1      	b.n	80099b8 <_strtoul_l.isra.0+0xe>
 8009a34:	2c2b      	cmp	r4, #43	; 0x2b
 8009a36:	bf04      	itt	eq
 8009a38:	1cbd      	addeq	r5, r7, #2
 8009a3a:	787c      	ldrbeq	r4, [r7, #1]
 8009a3c:	4619      	mov	r1, r3
 8009a3e:	e7cb      	b.n	80099d8 <_strtoul_l.isra.0+0x2e>
 8009a40:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009a44:	2f19      	cmp	r7, #25
 8009a46:	d801      	bhi.n	8009a4c <_strtoul_l.isra.0+0xa2>
 8009a48:	3c37      	subs	r4, #55	; 0x37
 8009a4a:	e7e2      	b.n	8009a12 <_strtoul_l.isra.0+0x68>
 8009a4c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8009a50:	2f19      	cmp	r7, #25
 8009a52:	d804      	bhi.n	8009a5e <_strtoul_l.isra.0+0xb4>
 8009a54:	3c57      	subs	r4, #87	; 0x57
 8009a56:	e7dc      	b.n	8009a12 <_strtoul_l.isra.0+0x68>
 8009a58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009a5c:	e7e5      	b.n	8009a2a <_strtoul_l.isra.0+0x80>
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	da09      	bge.n	8009a76 <_strtoul_l.isra.0+0xcc>
 8009a62:	2322      	movs	r3, #34	; 0x22
 8009a64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a68:	f8c8 3000 	str.w	r3, [r8]
 8009a6c:	f1ba 0f00 	cmp.w	sl, #0
 8009a70:	d107      	bne.n	8009a82 <_strtoul_l.isra.0+0xd8>
 8009a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a76:	b101      	cbz	r1, 8009a7a <_strtoul_l.isra.0+0xd0>
 8009a78:	4240      	negs	r0, r0
 8009a7a:	f1ba 0f00 	cmp.w	sl, #0
 8009a7e:	d0f8      	beq.n	8009a72 <_strtoul_l.isra.0+0xc8>
 8009a80:	b10b      	cbz	r3, 8009a86 <_strtoul_l.isra.0+0xdc>
 8009a82:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8009a86:	f8ca 9000 	str.w	r9, [sl]
 8009a8a:	e7f2      	b.n	8009a72 <_strtoul_l.isra.0+0xc8>
 8009a8c:	2430      	movs	r4, #48	; 0x30
 8009a8e:	2e00      	cmp	r6, #0
 8009a90:	d1b0      	bne.n	80099f4 <_strtoul_l.isra.0+0x4a>
 8009a92:	2608      	movs	r6, #8
 8009a94:	e7ae      	b.n	80099f4 <_strtoul_l.isra.0+0x4a>
 8009a96:	2c30      	cmp	r4, #48	; 0x30
 8009a98:	d0a4      	beq.n	80099e4 <_strtoul_l.isra.0+0x3a>
 8009a9a:	260a      	movs	r6, #10
 8009a9c:	e7aa      	b.n	80099f4 <_strtoul_l.isra.0+0x4a>
	...

08009aa0 <_strtoul_r>:
 8009aa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009aa2:	4c06      	ldr	r4, [pc, #24]	; (8009abc <_strtoul_r+0x1c>)
 8009aa4:	4d06      	ldr	r5, [pc, #24]	; (8009ac0 <_strtoul_r+0x20>)
 8009aa6:	6824      	ldr	r4, [r4, #0]
 8009aa8:	6a24      	ldr	r4, [r4, #32]
 8009aaa:	2c00      	cmp	r4, #0
 8009aac:	bf08      	it	eq
 8009aae:	462c      	moveq	r4, r5
 8009ab0:	9400      	str	r4, [sp, #0]
 8009ab2:	f7ff ff7a 	bl	80099aa <_strtoul_l.isra.0>
 8009ab6:	b003      	add	sp, #12
 8009ab8:	bd30      	pop	{r4, r5, pc}
 8009aba:	bf00      	nop
 8009abc:	20000010 	.word	0x20000010
 8009ac0:	20000074 	.word	0x20000074

08009ac4 <__submore>:
 8009ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ac8:	460c      	mov	r4, r1
 8009aca:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009acc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ad0:	4299      	cmp	r1, r3
 8009ad2:	d11b      	bne.n	8009b0c <__submore+0x48>
 8009ad4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009ad8:	f7ff f8f0 	bl	8008cbc <_malloc_r>
 8009adc:	b918      	cbnz	r0, 8009ae6 <__submore+0x22>
 8009ade:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ae6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009aea:	63a3      	str	r3, [r4, #56]	; 0x38
 8009aec:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8009af0:	6360      	str	r0, [r4, #52]	; 0x34
 8009af2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8009af6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009afa:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8009afe:	7043      	strb	r3, [r0, #1]
 8009b00:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009b04:	7003      	strb	r3, [r0, #0]
 8009b06:	6020      	str	r0, [r4, #0]
 8009b08:	2000      	movs	r0, #0
 8009b0a:	e7ea      	b.n	8009ae2 <__submore+0x1e>
 8009b0c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8009b0e:	0077      	lsls	r7, r6, #1
 8009b10:	463a      	mov	r2, r7
 8009b12:	f000 f89b 	bl	8009c4c <_realloc_r>
 8009b16:	4605      	mov	r5, r0
 8009b18:	2800      	cmp	r0, #0
 8009b1a:	d0e0      	beq.n	8009ade <__submore+0x1a>
 8009b1c:	eb00 0806 	add.w	r8, r0, r6
 8009b20:	4601      	mov	r1, r0
 8009b22:	4632      	mov	r2, r6
 8009b24:	4640      	mov	r0, r8
 8009b26:	f7fe fcb7 	bl	8008498 <memcpy>
 8009b2a:	f8c4 8000 	str.w	r8, [r4]
 8009b2e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8009b32:	e7e9      	b.n	8009b08 <__submore+0x44>

08009b34 <__ascii_wctomb>:
 8009b34:	b149      	cbz	r1, 8009b4a <__ascii_wctomb+0x16>
 8009b36:	2aff      	cmp	r2, #255	; 0xff
 8009b38:	bf8b      	itete	hi
 8009b3a:	238a      	movhi	r3, #138	; 0x8a
 8009b3c:	700a      	strbls	r2, [r1, #0]
 8009b3e:	6003      	strhi	r3, [r0, #0]
 8009b40:	2001      	movls	r0, #1
 8009b42:	bf88      	it	hi
 8009b44:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009b48:	4770      	bx	lr
 8009b4a:	4608      	mov	r0, r1
 8009b4c:	4770      	bx	lr
	...

08009b50 <malloc>:
 8009b50:	4b02      	ldr	r3, [pc, #8]	; (8009b5c <malloc+0xc>)
 8009b52:	4601      	mov	r1, r0
 8009b54:	6818      	ldr	r0, [r3, #0]
 8009b56:	f7ff b8b1 	b.w	8008cbc <_malloc_r>
 8009b5a:	bf00      	nop
 8009b5c:	20000010 	.word	0x20000010

08009b60 <memchr>:
 8009b60:	b510      	push	{r4, lr}
 8009b62:	b2c9      	uxtb	r1, r1
 8009b64:	4402      	add	r2, r0
 8009b66:	4290      	cmp	r0, r2
 8009b68:	4603      	mov	r3, r0
 8009b6a:	d101      	bne.n	8009b70 <memchr+0x10>
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	e003      	b.n	8009b78 <memchr+0x18>
 8009b70:	781c      	ldrb	r4, [r3, #0]
 8009b72:	3001      	adds	r0, #1
 8009b74:	428c      	cmp	r4, r1
 8009b76:	d1f6      	bne.n	8009b66 <memchr+0x6>
 8009b78:	4618      	mov	r0, r3
 8009b7a:	bd10      	pop	{r4, pc}

08009b7c <memmove>:
 8009b7c:	4288      	cmp	r0, r1
 8009b7e:	b510      	push	{r4, lr}
 8009b80:	eb01 0302 	add.w	r3, r1, r2
 8009b84:	d807      	bhi.n	8009b96 <memmove+0x1a>
 8009b86:	1e42      	subs	r2, r0, #1
 8009b88:	4299      	cmp	r1, r3
 8009b8a:	d00a      	beq.n	8009ba2 <memmove+0x26>
 8009b8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b90:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009b94:	e7f8      	b.n	8009b88 <memmove+0xc>
 8009b96:	4283      	cmp	r3, r0
 8009b98:	d9f5      	bls.n	8009b86 <memmove+0xa>
 8009b9a:	1881      	adds	r1, r0, r2
 8009b9c:	1ad2      	subs	r2, r2, r3
 8009b9e:	42d3      	cmn	r3, r2
 8009ba0:	d100      	bne.n	8009ba4 <memmove+0x28>
 8009ba2:	bd10      	pop	{r4, pc}
 8009ba4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ba8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009bac:	e7f7      	b.n	8009b9e <memmove+0x22>

08009bae <__malloc_lock>:
 8009bae:	4770      	bx	lr

08009bb0 <__malloc_unlock>:
 8009bb0:	4770      	bx	lr
	...

08009bb4 <_free_r>:
 8009bb4:	b538      	push	{r3, r4, r5, lr}
 8009bb6:	4605      	mov	r5, r0
 8009bb8:	2900      	cmp	r1, #0
 8009bba:	d043      	beq.n	8009c44 <_free_r+0x90>
 8009bbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bc0:	1f0c      	subs	r4, r1, #4
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	bfb8      	it	lt
 8009bc6:	18e4      	addlt	r4, r4, r3
 8009bc8:	f7ff fff1 	bl	8009bae <__malloc_lock>
 8009bcc:	4a1e      	ldr	r2, [pc, #120]	; (8009c48 <_free_r+0x94>)
 8009bce:	6813      	ldr	r3, [r2, #0]
 8009bd0:	4610      	mov	r0, r2
 8009bd2:	b933      	cbnz	r3, 8009be2 <_free_r+0x2e>
 8009bd4:	6063      	str	r3, [r4, #4]
 8009bd6:	6014      	str	r4, [r2, #0]
 8009bd8:	4628      	mov	r0, r5
 8009bda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009bde:	f7ff bfe7 	b.w	8009bb0 <__malloc_unlock>
 8009be2:	42a3      	cmp	r3, r4
 8009be4:	d90b      	bls.n	8009bfe <_free_r+0x4a>
 8009be6:	6821      	ldr	r1, [r4, #0]
 8009be8:	1862      	adds	r2, r4, r1
 8009bea:	4293      	cmp	r3, r2
 8009bec:	bf01      	itttt	eq
 8009bee:	681a      	ldreq	r2, [r3, #0]
 8009bf0:	685b      	ldreq	r3, [r3, #4]
 8009bf2:	1852      	addeq	r2, r2, r1
 8009bf4:	6022      	streq	r2, [r4, #0]
 8009bf6:	6063      	str	r3, [r4, #4]
 8009bf8:	6004      	str	r4, [r0, #0]
 8009bfa:	e7ed      	b.n	8009bd8 <_free_r+0x24>
 8009bfc:	4613      	mov	r3, r2
 8009bfe:	685a      	ldr	r2, [r3, #4]
 8009c00:	b10a      	cbz	r2, 8009c06 <_free_r+0x52>
 8009c02:	42a2      	cmp	r2, r4
 8009c04:	d9fa      	bls.n	8009bfc <_free_r+0x48>
 8009c06:	6819      	ldr	r1, [r3, #0]
 8009c08:	1858      	adds	r0, r3, r1
 8009c0a:	42a0      	cmp	r0, r4
 8009c0c:	d10b      	bne.n	8009c26 <_free_r+0x72>
 8009c0e:	6820      	ldr	r0, [r4, #0]
 8009c10:	4401      	add	r1, r0
 8009c12:	1858      	adds	r0, r3, r1
 8009c14:	4282      	cmp	r2, r0
 8009c16:	6019      	str	r1, [r3, #0]
 8009c18:	d1de      	bne.n	8009bd8 <_free_r+0x24>
 8009c1a:	6810      	ldr	r0, [r2, #0]
 8009c1c:	6852      	ldr	r2, [r2, #4]
 8009c1e:	4401      	add	r1, r0
 8009c20:	6019      	str	r1, [r3, #0]
 8009c22:	605a      	str	r2, [r3, #4]
 8009c24:	e7d8      	b.n	8009bd8 <_free_r+0x24>
 8009c26:	d902      	bls.n	8009c2e <_free_r+0x7a>
 8009c28:	230c      	movs	r3, #12
 8009c2a:	602b      	str	r3, [r5, #0]
 8009c2c:	e7d4      	b.n	8009bd8 <_free_r+0x24>
 8009c2e:	6820      	ldr	r0, [r4, #0]
 8009c30:	1821      	adds	r1, r4, r0
 8009c32:	428a      	cmp	r2, r1
 8009c34:	bf01      	itttt	eq
 8009c36:	6811      	ldreq	r1, [r2, #0]
 8009c38:	6852      	ldreq	r2, [r2, #4]
 8009c3a:	1809      	addeq	r1, r1, r0
 8009c3c:	6021      	streq	r1, [r4, #0]
 8009c3e:	6062      	str	r2, [r4, #4]
 8009c40:	605c      	str	r4, [r3, #4]
 8009c42:	e7c9      	b.n	8009bd8 <_free_r+0x24>
 8009c44:	bd38      	pop	{r3, r4, r5, pc}
 8009c46:	bf00      	nop
 8009c48:	20000214 	.word	0x20000214

08009c4c <_realloc_r>:
 8009c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c4e:	4607      	mov	r7, r0
 8009c50:	4614      	mov	r4, r2
 8009c52:	460e      	mov	r6, r1
 8009c54:	b921      	cbnz	r1, 8009c60 <_realloc_r+0x14>
 8009c56:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009c5a:	4611      	mov	r1, r2
 8009c5c:	f7ff b82e 	b.w	8008cbc <_malloc_r>
 8009c60:	b922      	cbnz	r2, 8009c6c <_realloc_r+0x20>
 8009c62:	f7ff ffa7 	bl	8009bb4 <_free_r>
 8009c66:	4625      	mov	r5, r4
 8009c68:	4628      	mov	r0, r5
 8009c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c6c:	f000 f814 	bl	8009c98 <_malloc_usable_size_r>
 8009c70:	42a0      	cmp	r0, r4
 8009c72:	d20f      	bcs.n	8009c94 <_realloc_r+0x48>
 8009c74:	4621      	mov	r1, r4
 8009c76:	4638      	mov	r0, r7
 8009c78:	f7ff f820 	bl	8008cbc <_malloc_r>
 8009c7c:	4605      	mov	r5, r0
 8009c7e:	2800      	cmp	r0, #0
 8009c80:	d0f2      	beq.n	8009c68 <_realloc_r+0x1c>
 8009c82:	4631      	mov	r1, r6
 8009c84:	4622      	mov	r2, r4
 8009c86:	f7fe fc07 	bl	8008498 <memcpy>
 8009c8a:	4631      	mov	r1, r6
 8009c8c:	4638      	mov	r0, r7
 8009c8e:	f7ff ff91 	bl	8009bb4 <_free_r>
 8009c92:	e7e9      	b.n	8009c68 <_realloc_r+0x1c>
 8009c94:	4635      	mov	r5, r6
 8009c96:	e7e7      	b.n	8009c68 <_realloc_r+0x1c>

08009c98 <_malloc_usable_size_r>:
 8009c98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c9c:	1f18      	subs	r0, r3, #4
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	bfbc      	itt	lt
 8009ca2:	580b      	ldrlt	r3, [r1, r0]
 8009ca4:	18c0      	addlt	r0, r0, r3
 8009ca6:	4770      	bx	lr

08009ca8 <round>:
 8009ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009caa:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8009cae:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
 8009cb2:	2c13      	cmp	r4, #19
 8009cb4:	4606      	mov	r6, r0
 8009cb6:	460d      	mov	r5, r1
 8009cb8:	460b      	mov	r3, r1
 8009cba:	468c      	mov	ip, r1
 8009cbc:	4602      	mov	r2, r0
 8009cbe:	dc17      	bgt.n	8009cf0 <round+0x48>
 8009cc0:	2c00      	cmp	r4, #0
 8009cc2:	da09      	bge.n	8009cd8 <round+0x30>
 8009cc4:	3401      	adds	r4, #1
 8009cc6:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8009cca:	d103      	bne.n	8009cd4 <round+0x2c>
 8009ccc:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009cd0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	e028      	b.n	8009d2a <round+0x82>
 8009cd8:	4915      	ldr	r1, [pc, #84]	; (8009d30 <round+0x88>)
 8009cda:	4121      	asrs	r1, r4
 8009cdc:	420d      	tst	r5, r1
 8009cde:	d100      	bne.n	8009ce2 <round+0x3a>
 8009ce0:	b178      	cbz	r0, 8009d02 <round+0x5a>
 8009ce2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009ce6:	4123      	asrs	r3, r4
 8009ce8:	4463      	add	r3, ip
 8009cea:	ea23 0301 	bic.w	r3, r3, r1
 8009cee:	e7f1      	b.n	8009cd4 <round+0x2c>
 8009cf0:	2c33      	cmp	r4, #51	; 0x33
 8009cf2:	dd09      	ble.n	8009d08 <round+0x60>
 8009cf4:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8009cf8:	d103      	bne.n	8009d02 <round+0x5a>
 8009cfa:	f7f6 fa37 	bl	800016c <__adddf3>
 8009cfe:	4606      	mov	r6, r0
 8009d00:	460d      	mov	r5, r1
 8009d02:	4630      	mov	r0, r6
 8009d04:	4629      	mov	r1, r5
 8009d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d0c:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8009d10:	40f8      	lsrs	r0, r7
 8009d12:	4206      	tst	r6, r0
 8009d14:	d0f5      	beq.n	8009d02 <round+0x5a>
 8009d16:	2101      	movs	r1, #1
 8009d18:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8009d1c:	fa01 f404 	lsl.w	r4, r1, r4
 8009d20:	1932      	adds	r2, r6, r4
 8009d22:	bf28      	it	cs
 8009d24:	185b      	addcs	r3, r3, r1
 8009d26:	ea22 0200 	bic.w	r2, r2, r0
 8009d2a:	4619      	mov	r1, r3
 8009d2c:	4610      	mov	r0, r2
 8009d2e:	e7e6      	b.n	8009cfe <round+0x56>
 8009d30:	000fffff 	.word	0x000fffff

08009d34 <_init>:
 8009d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d36:	bf00      	nop
 8009d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d3a:	bc08      	pop	{r3}
 8009d3c:	469e      	mov	lr, r3
 8009d3e:	4770      	bx	lr

08009d40 <_fini>:
 8009d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d42:	bf00      	nop
 8009d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d46:	bc08      	pop	{r3}
 8009d48:	469e      	mov	lr, r3
 8009d4a:	4770      	bx	lr
